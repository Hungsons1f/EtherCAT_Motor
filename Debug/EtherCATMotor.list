
EtherCATMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0c4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d10  0800b284  0800b284  0001b284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf94  0800bf94  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf94  0800bf94  0001bf94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf9c  0800bf9c  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf9c  0800bf9c  0001bf9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfa0  0800bfa0  0001bfa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0800bfa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f8  200000d8  0800c078  000200d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009d0  0800c078  000209d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b693  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003777  00000000  00000000  0003b797  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001330  00000000  00000000  0003ef10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001190  00000000  00000000  00040240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d0ca  00000000  00000000  000413d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010f33  00000000  00000000  0006e49a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00106aa5  00000000  00000000  0007f3cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00185e72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057d0  00000000  00000000  00185ef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000d8 	.word	0x200000d8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b26c 	.word	0x0800b26c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000dc 	.word	0x200000dc
 80001fc:	0800b26c 	.word	0x0800b26c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ESC_pre_objecthandler>:
uint32_t ESC_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t size,
      uint16_t flags)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b089      	sub	sp, #36	; 0x24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	60ba      	str	r2, [r7, #8]
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4603      	mov	r3, r0
 80005ac:	81fb      	strh	r3, [r7, #14]
 80005ae:	460b      	mov	r3, r1
 80005b0:	737b      	strb	r3, [r7, #13]
   uint32_t abort = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]

   if (IS_RXPDO (index) ||
 80005b6:	89fb      	ldrh	r3, [r7, #14]
 80005b8:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 80005bc:	d303      	bcc.n	80005c6 <ESC_pre_objecthandler+0x26>
 80005be:	89fb      	ldrh	r3, [r7, #14]
 80005c0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80005c4:	d311      	bcc.n	80005ea <ESC_pre_objecthandler+0x4a>
 80005c6:	89fb      	ldrh	r3, [r7, #14]
 80005c8:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 80005cc:	d303      	bcc.n	80005d6 <ESC_pre_objecthandler+0x36>
       IS_TXPDO (index) ||
 80005ce:	89fb      	ldrh	r3, [r7, #14]
 80005d0:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80005d4:	d309      	bcc.n	80005ea <ESC_pre_objecthandler+0x4a>
 80005d6:	89fb      	ldrh	r3, [r7, #14]
 80005d8:	f641 4212 	movw	r2, #7186	; 0x1c12
 80005dc:	4293      	cmp	r3, r2
 80005de:	d004      	beq.n	80005ea <ESC_pre_objecthandler+0x4a>
       index == RX_PDO_OBJIDX ||
 80005e0:	89fb      	ldrh	r3, [r7, #14]
 80005e2:	f641 4213 	movw	r2, #7187	; 0x1c13
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d10b      	bne.n	8000602 <ESC_pre_objecthandler+0x62>
       index == TX_PDO_OBJIDX)
   {
      if (subindex > 0 && COE_maxSub (index) != 0)
 80005ea:	7b7b      	ldrb	r3, [r7, #13]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d008      	beq.n	8000602 <ESC_pre_objecthandler+0x62>
 80005f0:	89fb      	ldrh	r3, [r7, #14]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fa3e 	bl	8003a74 <COE_maxSub>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <ESC_pre_objecthandler+0x62>
      {
         abort = ABORT_SUBINDEX0_NOT_ZERO;
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <ESC_pre_objecthandler+0x88>)
 8000600:	617b      	str	r3, [r7, #20]
      }
   }

   if (ESCvar.pre_object_download_hook)
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <ESC_pre_objecthandler+0x8c>)
 8000604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000606:	2b00      	cmp	r3, #0
 8000608:	d009      	beq.n	800061e <ESC_pre_objecthandler+0x7e>
   {
      abort = (ESCvar.pre_object_download_hook) (index,
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <ESC_pre_objecthandler+0x8c>)
 800060c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800060e:	7b79      	ldrb	r1, [r7, #13]
 8000610:	89f8      	ldrh	r0, [r7, #14]
 8000612:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	68ba      	ldr	r2, [r7, #8]
 800061a:	47a0      	blx	r4
 800061c:	6178      	str	r0, [r7, #20]
            data,
            size,
            flags);
   }

   return abort;
 800061e:	697b      	ldr	r3, [r7, #20]
}
 8000620:	4618      	mov	r0, r3
 8000622:	371c      	adds	r7, #28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd90      	pop	{r4, r7, pc}
 8000628:	06010003 	.word	0x06010003
 800062c:	20000180 	.word	0x20000180

08000630 <ESC_objecthandler>:
 *
 * @param[in] index      = index of SDO download request to handle
 * @param[in] sub-index  = sub-index of SDO download request to handle
 */
void ESC_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
 800063a:	460b      	mov	r3, r1
 800063c:	717b      	strb	r3, [r7, #5]
 800063e:	4613      	mov	r3, r2
 8000640:	807b      	strh	r3, [r7, #2]
   if (ESCvar.post_object_download_hook != NULL)
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <ESC_objecthandler+0x30>)
 8000644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000646:	2b00      	cmp	r3, #0
 8000648:	d005      	beq.n	8000656 <ESC_objecthandler+0x26>
   {
      (ESCvar.post_object_download_hook)(index, subindex, flags);
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <ESC_objecthandler+0x30>)
 800064c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800064e:	887a      	ldrh	r2, [r7, #2]
 8000650:	7979      	ldrb	r1, [r7, #5]
 8000652:	88f8      	ldrh	r0, [r7, #6]
 8000654:	4798      	blx	r3
   }
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000180 	.word	0x20000180

08000664 <APP_safeoutput>:

/** Hook called from the slave stack ESC_stopoutputs to act on state changes
 * forcing us to stop outputs. Here we can set them to a safe state.
 */
void APP_safeoutput (void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
   DPRINT ("APP_safeoutput\n");
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <APP_safeoutput+0x1c>)
 800066a:	f00a f995 	bl	800a998 <puts>

   if(ESCvar.safeoutput_override != NULL)
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <APP_safeoutput+0x20>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000672:	2b00      	cmp	r3, #0
 8000674:	d002      	beq.n	800067c <APP_safeoutput+0x18>
   {
      (ESCvar.safeoutput_override)();
 8000676:	4b03      	ldr	r3, [pc, #12]	; (8000684 <APP_safeoutput+0x20>)
 8000678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800067a:	4798      	blx	r3
   }
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	0800b284 	.word	0x0800b284
 8000684:	20000180 	.word	0x20000180

08000688 <TXPDO_update>:

/** Write local process data to Sync Manager 3, Master Inputs.
 */
void TXPDO_update (void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
   if(ESCvar.txpdo_override != NULL)
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <TXPDO_update+0x3c>)
 800068e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000690:	2b00      	cmp	r3, #0
 8000692:	d003      	beq.n	800069c <TXPDO_update+0x14>
   {
      (ESCvar.txpdo_override)();
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <TXPDO_update+0x3c>)
 8000696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000698:	4798      	blx	r3
      {
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
      }
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
   }
}
 800069a:	e010      	b.n	80006be <TXPDO_update+0x36>
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <TXPDO_update+0x3c>)
 800069e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006a2:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <TXPDO_update+0x40>)
 80006a4:	4619      	mov	r1, r3
 80006a6:	4809      	ldr	r0, [pc, #36]	; (80006cc <TXPDO_update+0x44>)
 80006a8:	f003 f92e 	bl	8003908 <COE_pdoPack>
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <TXPDO_update+0x3c>)
 80006ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80006b2:	461a      	mov	r2, r3
 80006b4:	4905      	ldr	r1, [pc, #20]	; (80006cc <TXPDO_update+0x44>)
 80006b6:	f44f 508c 	mov.w	r0, #4480	; 0x1180
 80006ba:	f004 f837 	bl	800472c <ESC_write>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000180 	.word	0x20000180
 80006c8:	200003ec 	.word	0x200003ec
 80006cc:	20000128 	.word	0x20000128

080006d0 <RXPDO_update>:

/** Read Sync Manager 2 to local process data, Master Outputs.
 */
void RXPDO_update (void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
   if(ESCvar.rxpdo_override != NULL)
 80006d4:	4b0d      	ldr	r3, [pc, #52]	; (800070c <RXPDO_update+0x3c>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d003      	beq.n	80006e4 <RXPDO_update+0x14>
   {
      (ESCvar.rxpdo_override)();
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <RXPDO_update+0x3c>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4798      	blx	r3
      if (MAX_MAPPINGS_SM2 > 0)
      {
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
      }
   }
}
 80006e2:	e010      	b.n	8000706 <RXPDO_update+0x36>
      ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <RXPDO_update+0x3c>)
 80006e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80006ea:	461a      	mov	r2, r3
 80006ec:	4908      	ldr	r1, [pc, #32]	; (8000710 <RXPDO_update+0x40>)
 80006ee:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80006f2:	f003 ffb9 	bl	8004668 <ESC_read>
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <RXPDO_update+0x3c>)
 80006f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006fc:	4a05      	ldr	r2, [pc, #20]	; (8000714 <RXPDO_update+0x44>)
 80006fe:	4619      	mov	r1, r3
 8000700:	4803      	ldr	r0, [pc, #12]	; (8000710 <RXPDO_update+0x40>)
 8000702:	f003 f95d 	bl	80039c0 <COE_pdoUnpack>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000180 	.word	0x20000180
 8000710:	200000f8 	.word	0x200000f8
 8000714:	200003cc 	.word	0x200003cc

08000718 <DIG_process>:
/* Function to update local I/O, call read ethercat outputs, call
 * write ethercat inputs. Implement watch-dog counter to count-out if we have
 * made state change affecting the App.state.
 */
void DIG_process (uint8_t flags)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
   /* Handle watchdog */
   if((flags & DIG_PROCESS_WD_FLAG) > 0)
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	f003 0304 	and.w	r3, r3, #4
 8000728:	2b00      	cmp	r3, #0
 800072a:	dd44      	ble.n	80007b6 <DIG_process+0x9e>
   {
      if (CC_ATOMIC_GET(watchdog) > 0)
 800072c:	4b4b      	ldr	r3, [pc, #300]	; (800085c <DIG_process+0x144>)
 800072e:	f3bf 8f5b 	dmb	ish
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f3bf 8f5b 	dmb	ish
 8000738:	2b00      	cmp	r3, #0
 800073a:	dd0c      	ble.n	8000756 <DIG_process+0x3e>
      {
         CC_ATOMIC_SUB(watchdog, 1);
 800073c:	4b47      	ldr	r3, [pc, #284]	; (800085c <DIG_process+0x144>)
 800073e:	f3bf 8f5b 	dmb	ish
 8000742:	e853 2f00 	ldrex	r2, [r3]
 8000746:	f102 32ff 	add.w	r2, r2, #4294967295
 800074a:	e843 2100 	strex	r1, r2, [r3]
 800074e:	2900      	cmp	r1, #0
 8000750:	d1f7      	bne.n	8000742 <DIG_process+0x2a>
 8000752:	f3bf 8f5b 	dmb	ish
      }

      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 8000756:	4b41      	ldr	r3, [pc, #260]	; (800085c <DIG_process+0x144>)
 8000758:	f3bf 8f5b 	dmb	ish
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f3bf 8f5b 	dmb	ish
 8000762:	2b00      	cmp	r3, #0
 8000764:	dc12      	bgt.n	800078c <DIG_process+0x74>
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0))
 8000766:	4b3e      	ldr	r3, [pc, #248]	; (8000860 <DIG_process+0x148>)
 8000768:	f3bf 8f5b 	dmb	ish
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	f3bf 8f5b 	dmb	ish
 8000772:	b2db      	uxtb	r3, r3
 8000774:	f003 0302 	and.w	r3, r3, #2
      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 8000778:	2b00      	cmp	r3, #0
 800077a:	dd07      	ble.n	800078c <DIG_process+0x74>
      {
         DPRINT("DIG_process watchdog expired\n");
 800077c:	4839      	ldr	r0, [pc, #228]	; (8000864 <DIG_process+0x14c>)
 800077e:	f00a f90b 	bl	800a998 <puts>
         ESC_ALstatusgotoerror((ESCsafeop | ESCerror), ALERR_WATCHDOG);
 8000782:	211b      	movs	r1, #27
 8000784:	2014      	movs	r0, #20
 8000786:	f000 f91b 	bl	80009c0 <ESC_ALstatusgotoerror>
      {
 800078a:	e014      	b.n	80007b6 <DIG_process+0x9e>
      }
      else if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) == 0))
 800078c:	4b34      	ldr	r3, [pc, #208]	; (8000860 <DIG_process+0x148>)
 800078e:	f3bf 8f5b 	dmb	ish
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	f3bf 8f5b 	dmb	ish
 8000798:	b2db      	uxtb	r3, r3
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d109      	bne.n	80007b6 <DIG_process+0x9e>
      {
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 80007a2:	4b31      	ldr	r3, [pc, #196]	; (8000868 <DIG_process+0x150>)
 80007a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b2c      	ldr	r3, [pc, #176]	; (800085c <DIG_process+0x144>)
 80007ac:	f3bf 8f5b 	dmb	ish
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	f3bf 8f5b 	dmb	ish
      }
   }

   /* Handle Outputs */
   if ((flags & DIG_PROCESS_OUTPUTS_FLAG) > 0)
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	f003 0302 	and.w	r3, r3, #2
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dd2b      	ble.n	8000818 <DIG_process+0x100>
   {
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 80007c0:	4b27      	ldr	r3, [pc, #156]	; (8000860 <DIG_process+0x148>)
 80007c2:	f3bf 8f5b 	dmb	ish
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	f3bf 8f5b 	dmb	ish
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	dd16      	ble.n	8000804 <DIG_process+0xec>
         (ESCvar.ALevent & ESCREG_ALEVENT_SM2))
 80007d6:	4b24      	ldr	r3, [pc, #144]	; (8000868 <DIG_process+0x150>)
 80007d8:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80007dc:	b29b      	uxth	r3, r3
 80007de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d00e      	beq.n	8000804 <DIG_process+0xec>
      {
         RXPDO_update();
 80007e6:	f7ff ff73 	bl	80006d0 <RXPDO_update>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <DIG_process+0x150>)
 80007ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <DIG_process+0x144>)
 80007f4:	f3bf 8f5b 	dmb	ish
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	f3bf 8f5b 	dmb	ish
         /* Set outputs */
         cb_set_outputs();
 80007fe:	f004 f895 	bl	800492c <cb_set_outputs>
 8000802:	e009      	b.n	8000818 <DIG_process+0x100>
      }
      else if (ESCvar.ALevent & ESCREG_ALEVENT_SM2)
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <DIG_process+0x150>)
 8000806:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800080a:	b29b      	uxth	r3, r3
 800080c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <DIG_process+0x100>
      {
         RXPDO_update();
 8000814:	f7ff ff5c 	bl	80006d0 <RXPDO_update>
      }
   }

   /* Call application */
   if ((flags & DIG_PROCESS_APP_HOOK_FLAG) > 0)
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	2b00      	cmp	r3, #0
 8000820:	dd06      	ble.n	8000830 <DIG_process+0x118>
   {
      /* Call application callback if set */
      if (ESCvar.application_hook != NULL)
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <DIG_process+0x150>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <DIG_process+0x118>
      {
         (ESCvar.application_hook)();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <DIG_process+0x150>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4798      	blx	r3
      }
   }

   /* Handle Inputs */
   if ((flags & DIG_PROCESS_INPUTS_FLAG) > 0)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	2b00      	cmp	r3, #0
 8000838:	dd0c      	ble.n	8000854 <DIG_process+0x13c>
   {
      if(CC_ATOMIC_GET(ESCvar.App.state) > 0)
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <DIG_process+0x148>)
 800083c:	f3bf 8f5b 	dmb	ish
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	f3bf 8f5b 	dmb	ish
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d003      	beq.n	8000854 <DIG_process+0x13c>
      {
         /* Update inputs */
         cb_get_inputs();
 800084c:	f004 f832 	bl	80048b4 <cb_get_inputs>
         TXPDO_update();
 8000850:	f7ff ff1a 	bl	8000688 <TXPDO_update>
      }
   }
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000f4 	.word	0x200000f4
 8000860:	2000024b 	.word	0x2000024b
 8000864:	0800b29c 	.word	0x0800b29c
 8000868:	20000180 	.word	0x20000180

0800086c <ecat_slv_poll>:
 * Polling function. It should be called periodically for an application 
 * when only SM2/DC interrupt is active.
 * Read and handle events for the EtherCAT state, status, mailbox and eeprom.
 */
void ecat_slv_poll (void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
   /* Read local time from ESC*/
   ESC_read (ESCREG_LOCALTIME, (void *) &ESCvar.Time, sizeof (ESCvar.Time));
 8000870:	2204      	movs	r2, #4
 8000872:	4911      	ldr	r1, [pc, #68]	; (80008b8 <ecat_slv_poll+0x4c>)
 8000874:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8000878:	f003 fef6 	bl	8004668 <ESC_read>
   ESCvar.Time = etohl (ESCvar.Time);
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <ecat_slv_poll+0x50>)
 800087e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <ecat_slv_poll+0x50>)
 8000884:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

   /* Check the state machine */
   ESC_state();
 8000888:	f000 ffd0 	bl	800182c <ESC_state>
   /* Check the SM activation event */
   ESC_sm_act_event();
 800088c:	f000 ff1a 	bl	80016c4 <ESC_sm_act_event>

   /* Check mailboxes */
   if (ESC_mbxprocess())
 8000890:	f000 fc78 	bl	8001184 <ESC_mbxprocess>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d005      	beq.n	80008a6 <ecat_slv_poll+0x3a>
   {
      ESC_coeprocess();
 800089a:	f002 fbe5 	bl	8003068 <ESC_coeprocess>
#if USE_FOE
      ESC_foeprocess();
 800089e:	f003 fc3b 	bl	8004118 <ESC_foeprocess>
#endif
#if USE_EOE
      ESC_eoeprocess();
#endif
      ESC_xoeprocess();
 80008a2:	f000 fda9 	bl	80013f8 <ESC_xoeprocess>
#if USE_EOE
   ESC_eoeprocess_tx();
#endif

   /* Call emulated eeprom handler if set */
   if (ESCvar.esc_hw_eep_handler != NULL)
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <ecat_slv_poll+0x50>)
 80008a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <ecat_slv_poll+0x48>
   {
      (ESCvar.esc_hw_eep_handler)();
 80008ae:	4b03      	ldr	r3, [pc, #12]	; (80008bc <ecat_slv_poll+0x50>)
 80008b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008b2:	4798      	blx	r3
   }
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000244 	.word	0x20000244
 80008bc:	20000180 	.word	0x20000180

080008c0 <ecat_slv>:

/*
 * Poll all events in a free-run application
 */
void ecat_slv (void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
   ecat_slv_poll();
 80008c4:	f7ff ffd2 	bl	800086c <ecat_slv_poll>
   DIG_process(DIG_PROCESS_WD_FLAG | DIG_PROCESS_OUTPUTS_FLAG |
 80008c8:	200f      	movs	r0, #15
 80008ca:	f7ff ff25 	bl	8000718 <DIG_process>
         DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <ecat_slv_init>:

/*
 * Initialize the slave stack.
 */
void ecat_slv_init (esc_cfg_t * config)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
   DPRINT ("Slave stack init started\n");
 80008dc:	4819      	ldr	r0, [pc, #100]	; (8000944 <ecat_slv_init+0x70>)
 80008de:	f00a f85b 	bl	800a998 <puts>

   /* Init watchdog */
   watchdog = config->watchdog_cnt;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	4a18      	ldr	r2, [pc, #96]	; (8000948 <ecat_slv_init+0x74>)
 80008e8:	6013      	str	r3, [r2, #0]

   /* Call stack configuration */
   ESC_config (config);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f001 f9e4 	bl	8001cb8 <ESC_config>
   /* Call HW init */
   ESC_init (config);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f003 ff7d 	bl	80047f0 <ESC_init>

   /*  wait until ESC is started up */
   while ((ESCvar.DLstatus & 0x0001) == 0)
 80008f6:	e00b      	b.n	8000910 <ecat_slv_init+0x3c>
   {
      ESC_read (ESCREG_DLSTATUS, (void *) &ESCvar.DLstatus,
 80008f8:	2202      	movs	r2, #2
 80008fa:	4914      	ldr	r1, [pc, #80]	; (800094c <ecat_slv_init+0x78>)
 80008fc:	f44f 7088 	mov.w	r0, #272	; 0x110
 8000900:	f003 feb2 	bl	8004668 <ESC_read>
                sizeof (ESCvar.DLstatus));
      ESCvar.DLstatus = etohs (ESCvar.DLstatus);
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <ecat_slv_init+0x7c>)
 8000906:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <ecat_slv_init+0x7c>)
 800090c:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
   while ((ESCvar.DLstatus & 0x0001) == 0)
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <ecat_slv_init+0x7c>)
 8000912:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0ec      	beq.n	80008f8 <ecat_slv_init+0x24>
   }

#if USE_FOE
   /* Init FoE */
   FOE_init();
 800091e:	f003 fa45 	bl	8003dac <FOE_init>
   /* Init EoE */
   EOE_init();
#endif

   /* reset ESC to init state */
   ESC_ALstatus (ESCinit);
 8000922:	2001      	movs	r0, #1
 8000924:	f000 f830 	bl	8000988 <ESC_ALstatus>
   ESC_ALerror (ALERR_NONE);
 8000928:	2000      	movs	r0, #0
 800092a:	f000 f813 	bl	8000954 <ESC_ALerror>
   ESC_stopmbx();
 800092e:	f000 fa7d 	bl	8000e2c <ESC_stopmbx>
   ESC_stopinput();
 8000932:	f000 fe71 	bl	8001618 <ESC_stopinput>
   ESC_stopoutput();
 8000936:	f000 fead 	bl	8001694 <ESC_stopoutput>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	0800b2c0 	.word	0x0800b2c0
 8000948:	200000f4 	.word	0x200000f4
 800094c:	200001f6 	.word	0x200001f6
 8000950:	20000180 	.word	0x20000180

08000954 <ESC_ALerror>:
/** Write AL Status Code to the ESC.
 *
 * @param[in] errornumber   = Write an by EtherCAT specified Error number register 0x134 AL Status Code
 */
void ESC_ALerror (uint16_t errornumber)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]
   uint16_t dummy;
   ESCvar.ALerror = errornumber;
 800095e:	4a09      	ldr	r2, [pc, #36]	; (8000984 <ESC_ALerror+0x30>)
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
   dummy = htoes (errornumber);
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALERROR, &dummy, sizeof (dummy));
 800096a:	f107 030e 	add.w	r3, r7, #14
 800096e:	2202      	movs	r2, #2
 8000970:	4619      	mov	r1, r3
 8000972:	f44f 709a 	mov.w	r0, #308	; 0x134
 8000976:	f003 fed9 	bl	800472c <ESC_write>
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000180 	.word	0x20000180

08000988 <ESC_ALstatus>:
 *
 * @param[in] status   = Write current slave status to register 0x130 AL Status
 * reflecting actual state and error indication if present
 */
void ESC_ALstatus (uint8_t status)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
   uint16_t dummy;
   ESCvar.ALstatus = status;
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	b29a      	uxth	r2, r3
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <ESC_ALstatus+0x34>)
 8000998:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
   dummy = htoes ((uint16_t) status);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALSTATUS, &dummy, sizeof (dummy));
 80009a2:	f107 030e 	add.w	r3, r7, #14
 80009a6:	2202      	movs	r2, #2
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 7098 	mov.w	r0, #304	; 0x130
 80009ae:	f003 febd 	bl	800472c <ESC_write>
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000180 	.word	0x20000180

080009c0 <ESC_ALstatusgotoerror>:
 * reflecting actual state and error indication if present
 * @param[in] errornumber   = Write an by EtherCAT specified Error number
 * register 0x134 AL Status Code
 */
void ESC_ALstatusgotoerror (uint8_t status, uint16_t errornumber)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	460a      	mov	r2, r1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	4613      	mov	r3, r2
 80009ce:	80bb      	strh	r3, [r7, #4]
   uint8_t an, as;

   if(status & ESCop)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d145      	bne.n	8000a66 <ESC_ALstatusgotoerror+0xa6>
   {
      /* Erroneous input, ignore */
      return;
   }
   /* Mask error ack of current state */
   as = ESCvar.ALstatus & ESCREG_AL_ERRACKMASK;
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <ESC_ALstatusgotoerror+0xb0>)
 80009dc:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	73bb      	strb	r3, [r7, #14]
   an = as;
 80009ea:	7bbb      	ldrb	r3, [r7, #14]
 80009ec:	73fb      	strb	r3, [r7, #15]
   /* Set the state transition, new state in high bits and old in bits  */
   as = ((status & ESCREG_AL_ERRACKMASK) << 4) | (as & 0x0f);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	011b      	lsls	r3, r3, #4
 80009f2:	b25a      	sxtb	r2, r3
 80009f4:	7bbb      	ldrb	r3, [r7, #14]
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	f003 030f 	and.w	r3, r3, #15
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	4313      	orrs	r3, r2
 8000a00:	b25b      	sxtb	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	73bb      	strb	r3, [r7, #14]
   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <ESC_ALstatusgotoerror+0xb0>)
 8000a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d007      	beq.n	8000a1e <ESC_ALstatusgotoerror+0x5e>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <ESC_ALstatusgotoerror+0xb0>)
 8000a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a12:	f107 010f 	add.w	r1, r7, #15
 8000a16:	f107 020e 	add.w	r2, r7, #14
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4798      	blx	r3
   }
   /* Stop outputs if active */
   if ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0)
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <ESC_ALstatusgotoerror+0xb4>)
 8000a20:	f3bf 8f5b 	dmb	ish
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f3bf 8f5b 	dmb	ish
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	dd01      	ble.n	8000a38 <ESC_ALstatusgotoerror+0x78>
   {
      ESC_stopoutput();
 8000a34:	f000 fe2e 	bl	8001694 <ESC_stopoutput>
   }
   ESC_ALerror(errornumber);
 8000a38:	88bb      	ldrh	r3, [r7, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff8a 	bl	8000954 <ESC_ALerror>
   ESC_ALstatus(status);
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ffa0 	bl	8000988 <ESC_ALstatus>
   an = status;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	73fb      	strb	r3, [r7, #15]
   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <ESC_ALstatusgotoerror+0xb0>)
 8000a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d009      	beq.n	8000a68 <ESC_ALstatusgotoerror+0xa8>
   {
      ESCvar.post_state_change_hook (&as, &an);
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <ESC_ALstatusgotoerror+0xb0>)
 8000a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a58:	f107 010f 	add.w	r1, r7, #15
 8000a5c:	f107 020e 	add.w	r2, r7, #14
 8000a60:	4610      	mov	r0, r2
 8000a62:	4798      	blx	r3
 8000a64:	e000      	b.n	8000a68 <ESC_ALstatusgotoerror+0xa8>
      return;
 8000a66:	bf00      	nop
   }
}
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000180 	.word	0x20000180
 8000a74:	2000024b 	.word	0x2000024b

08000a78 <ESC_SMack>:
 * Sync Manager event Bit 3 in ALevent. The result is not used.
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMack (uint8_t n)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
   uint8_t dummy;
   ESC_read (ESCREG_SM0ACTIVATE + (n << 3), &dummy, 1);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	f603 0306 	addw	r3, r3, #2054	; 0x806
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	f107 010f 	add.w	r1, r7, #15
 8000a94:	2201      	movs	r2, #1
 8000a96:	4618      	mov	r0, r3
 8000a98:	f003 fde6 	bl	8004668 <ESC_read>
}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <ESC_SMstatus>:
 * result in global variable ESCvar.SM[n].
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMstatus (uint8_t n)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	3314      	adds	r3, #20
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	4a09      	ldr	r2, [pc, #36]	; (8000adc <ESC_SMstatus+0x38>)
 8000ab6:	4413      	add	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
   ESC_read (ESCREG_SM0STATUS + (n << 3), &(sm->Status), 1);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	f603 0305 	addw	r3, r3, #2053	; 0x805
 8000ac6:	b298      	uxth	r0, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3305      	adds	r3, #5
 8000acc:	2201      	movs	r2, #1
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f003 fdca 	bl	8004668 <ESC_read>
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000180 	.word	0x20000180

08000ae0 <ESC_SMwritepdi>:
/** Write ESCvar.SM[n] data to ESC PDI control register 0x807(+ offset to SyncManager n).
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMwritepdi (uint8_t n)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	3314      	adds	r3, #20
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	4a09      	ldr	r2, [pc, #36]	; (8000b18 <ESC_SMwritepdi+0x38>)
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
   ESC_write (ESCREG_SM0PDI + (n << 3), &(sm->ActPDI), 1);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	f603 0307 	addw	r3, r3, #2055	; 0x807
 8000b02:	b298      	uxth	r0, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3307      	adds	r3, #7
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f003 fe0e 	bl	800472c <ESC_write>
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000180 	.word	0x20000180

08000b1c <ESC_SMenable>:
/** Write 0 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to Activate the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMenable (uint8_t n)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	3314      	adds	r3, #20
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <ESC_SMenable+0x34>)
 8000b2e:	4413      	add	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
   sm->ActPDI &= ~ESCREG_SMENABLE_BIT;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	79db      	ldrb	r3, [r3, #7]
 8000b36:	f023 0301 	bic.w	r3, r3, #1
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ffcc 	bl	8000ae0 <ESC_SMwritepdi>
}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000180 	.word	0x20000180

08000b54 <ESC_SMdisable>:
/** Write 1 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to De-activte the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMdisable (uint8_t n)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	3314      	adds	r3, #20
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <ESC_SMdisable+0x34>)
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
   sm->ActPDI |= ESCREG_SMENABLE_BIT;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	79db      	ldrb	r3, [r3, #7]
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ffb0 	bl	8000ae0 <ESC_SMwritepdi>
}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000180 	.word	0x20000180

08000b8c <ESC_address>:
/** Read Configured Station Address register 0x010 assigned by the Master.
 *
 */
void ESC_address (void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
   ESC_read (ESCREG_ADDRESS, (void *) &ESCvar.address, sizeof (ESCvar.address));
 8000b90:	2202      	movs	r2, #2
 8000b92:	4906      	ldr	r1, [pc, #24]	; (8000bac <ESC_address+0x20>)
 8000b94:	2010      	movs	r0, #16
 8000b96:	f003 fd67 	bl	8004668 <ESC_read>
   ESCvar.address = etohs (ESCvar.address);
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <ESC_address+0x24>)
 8000b9c:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <ESC_address+0x24>)
 8000ba2:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200001f8 	.word	0x200001f8
 8000bb0:	20000180 	.word	0x20000180

08000bb4 <ESC_SYNCactivation>:
/** Read SYNC Out Unit activation registers 0x981
 *
 * @return value of register Activation.
 */
uint8_t ESC_SYNCactivation (void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
   uint8_t activation;
   ESC_read (ESCREG_SYNC_ACT, &activation, sizeof(activation));
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f640 1081 	movw	r0, #2433	; 0x981
 8000bc4:	f003 fd50 	bl	8004668 <ESC_read>
   return activation;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <ESC_checkDC>:
/** Validate the DC values if the SYNC unit is activated.
 *
 * @return = 0 if OK, else ERROR code to be set by caller.
 */
uint16_t ESC_checkDC (void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
   uint16_t ret = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	80fb      	strh	r3, [r7, #6]

   uint8_t sync_act = ESC_SYNCactivation();
 8000bde:	f7ff ffe9 	bl	8000bb4 <ESC_SYNCactivation>
 8000be2:	4603      	mov	r3, r0
 8000be4:	717b      	strb	r3, [r7, #5]
   /* Do we need to check sync settings? */
   if((sync_act & (ESCREG_SYNC_ACT_ACTIVATED | ESCREG_SYNC_AUTO_ACTIVATED)) > 0)
 8000be6:	797b      	ldrb	r3, [r7, #5]
 8000be8:	f003 0309 	and.w	r3, r3, #9
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	dd0b      	ble.n	8000c08 <ESC_checkDC+0x34>
   {
      /* Trigger a by the application given DC check handler, return error if
       *  non is given
       */
      ret = ALERR_DCINVALIDSYNCCFG;
 8000bf0:	2330      	movs	r3, #48	; 0x30
 8000bf2:	80fb      	strh	r3, [r7, #6]
      if(ESCvar.esc_check_dc_handler != NULL)
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <ESC_checkDC+0x50>)
 8000bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d00d      	beq.n	8000c18 <ESC_checkDC+0x44>
      {
         ret = (ESCvar.esc_check_dc_handler)();
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <ESC_checkDC+0x50>)
 8000bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c00:	4798      	blx	r3
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
 8000c06:	e007      	b.n	8000c18 <ESC_checkDC+0x44>
      }
   }
   else
   {
      ESCvar.dcsync = 0;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <ESC_checkDC+0x50>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      ESCvar.synccounter = 0;
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <ESC_checkDC+0x50>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   }

   return ret;
 8000c18:	88fb      	ldrh	r3, [r7, #6]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000180 	.word	0x20000180

08000c28 <ESC_checkmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state request, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_checkmbx (uint8_t state)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM0, (void *) &ESCvar.SM[0], sizeof (ESCvar.SM[0]));
 8000c32:	2208      	movs	r2, #8
 8000c34:	4934      	ldr	r1, [pc, #208]	; (8000d08 <ESC_checkmbx+0xe0>)
 8000c36:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c3a:	f003 fd15 	bl	8004668 <ESC_read>
   ESC_read (ESCREG_SM1, (void *) &ESCvar.SM[1], sizeof (ESCvar.SM[1]));
 8000c3e:	2208      	movs	r2, #8
 8000c40:	4932      	ldr	r1, [pc, #200]	; (8000d0c <ESC_checkmbx+0xe4>)
 8000c42:	f640 0008 	movw	r0, #2056	; 0x808
 8000c46:	f003 fd0f 	bl	8004668 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[0];
 8000c4a:	4b2f      	ldr	r3, [pc, #188]	; (8000d08 <ESC_checkmbx+0xe0>)
 8000c4c:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX0_sma) || (etohs (SM->Length) != ESC_MBX0_sml)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d116      	bne.n	8000c8c <ESC_checkmbx+0x64>
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	885b      	ldrh	r3, [r3, #2]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c68:	885b      	ldrh	r3, [r3, #2]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d10e      	bne.n	8000c8c <ESC_checkmbx+0x64>
       || (SM->Command != ESC_MBX0_smc) || (ESCvar.SM[0].ECsm == 0))
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	791a      	ldrb	r2, [r3, #4]
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c76:	799b      	ldrb	r3, [r3, #6]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d107      	bne.n	8000c8c <ESC_checkmbx+0x64>
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000c7e:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10b      	bne.n	8000ca4 <ESC_checkmbx+0x7c>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM0;
 8000c8c:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      ESC_SMdisable (0);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f7ff ff5d 	bl	8000b54 <ESC_SMdisable>
      ESC_SMdisable (1);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff ff5a 	bl	8000b54 <ESC_SMdisable>
      return (uint8_t) (ESCinit | ESCerror);      //fail state change
 8000ca0:	2311      	movs	r3, #17
 8000ca2:	e02d      	b.n	8000d00 <ESC_checkmbx+0xd8>
   }
   SM = (_ESCsm2 *) & ESCvar.SM[1];
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <ESC_checkmbx+0xe4>)
 8000ca6:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX1_sma) || (etohs (SM->Length) != ESC_MBX1_sml)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d116      	bne.n	8000ce6 <ESC_checkmbx+0xbe>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	885b      	ldrh	r3, [r3, #2]
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000cc2:	885b      	ldrh	r3, [r3, #2]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d10e      	bne.n	8000ce6 <ESC_checkmbx+0xbe>
       || (SM->Command != ESC_MBX1_smc) || (ESCvar.SM[1].ECsm == 0))
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	791a      	ldrb	r2, [r3, #4]
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000cd0:	799b      	ldrb	r3, [r3, #6]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d107      	bne.n	8000ce6 <ESC_checkmbx+0xbe>
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000cd8:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10b      	bne.n	8000cfe <ESC_checkmbx+0xd6>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM1;
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <ESC_checkmbx+0xe8>)
 8000ce8:	2202      	movs	r2, #2
 8000cea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      ESC_SMdisable (0);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f7ff ff30 	bl	8000b54 <ESC_SMdisable>
      ESC_SMdisable (1);
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f7ff ff2d 	bl	8000b54 <ESC_SMdisable>
      return ESCinit | ESCerror;        //fail state change
 8000cfa:	2311      	movs	r3, #17
 8000cfc:	e000      	b.n	8000d00 <ESC_checkmbx+0xd8>
   }
   return state;
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000220 	.word	0x20000220
 8000d0c:	20000228 	.word	0x20000228
 8000d10:	20000180 	.word	0x20000180

08000d14 <ESC_startmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbx (uint8_t state)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = MBXSIZE;
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <ESC_startmbx+0x80>)
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	65da      	str	r2, [r3, #92]	; 0x5c
   ESCvar.activemb0 = &ESCvar.mb[0];
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <ESC_startmbx+0x80>)
 8000d26:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <ESC_startmbx+0x84>)
 8000d28:	661a      	str	r2, [r3, #96]	; 0x60
   ESCvar.activemb1 = &ESCvar.mb[1];
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <ESC_startmbx+0x80>)
 8000d2c:	4a1b      	ldr	r2, [pc, #108]	; (8000d9c <ESC_startmbx+0x88>)
 8000d2e:	665a      	str	r2, [r3, #100]	; 0x64


   ESC_SMenable (0);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fef3 	bl	8000b1c <ESC_SMenable>
   ESC_SMenable (1);
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff fef0 	bl	8000b1c <ESC_SMenable>
   ESC_SMstatus (0);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff feb1 	bl	8000aa4 <ESC_SMstatus>
   ESC_SMstatus (1);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff feae 	bl	8000aa4 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff6c 	bl	8000c28 <ESC_checkmbx>
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 0310 	and.w	r3, r3, #16
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d007      	beq.n	8000d6e <ESC_startmbx+0x5a>
   {
      ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 8000d5e:	2016      	movs	r0, #22
 8000d60:	f7ff fdf8 	bl	8000954 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <ESC_startmbx+0x80>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8000d6c:	e00d      	b.n	8000d8a <ESC_startmbx+0x76>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <ESC_startmbx+0x80>)
 8000d70:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8000d74:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <ESC_startmbx+0x80>)
 8000d7e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      ESCvar.MBXrun = 1;
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <ESC_startmbx+0x80>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
   }
   return state;
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000180 	.word	0x20000180
 8000d98:	20000184 	.word	0x20000184
 8000d9c:	2000018c 	.word	0x2000018c

08000da0 <ESC_startmbxboot>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbxboot (uint8_t state)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = MBXSIZEBOOT;
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <ESC_startmbxboot+0x80>)
 8000dac:	2280      	movs	r2, #128	; 0x80
 8000dae:	65da      	str	r2, [r3, #92]	; 0x5c
   ESCvar.activemb0 = &ESCvar.mbboot[0];
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <ESC_startmbxboot+0x80>)
 8000db2:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <ESC_startmbxboot+0x84>)
 8000db4:	661a      	str	r2, [r3, #96]	; 0x60
   ESCvar.activemb1 = &ESCvar.mbboot[1];
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <ESC_startmbxboot+0x80>)
 8000db8:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <ESC_startmbxboot+0x88>)
 8000dba:	665a      	str	r2, [r3, #100]	; 0x64

   ESC_SMenable (0);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f7ff fead 	bl	8000b1c <ESC_SMenable>
   ESC_SMenable (1);
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f7ff feaa 	bl	8000b1c <ESC_SMenable>
   ESC_SMstatus (0);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff fe6b 	bl	8000aa4 <ESC_SMstatus>
   ESC_SMstatus (1);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f7ff fe68 	bl	8000aa4 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff26 	bl	8000c28 <ESC_checkmbx>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d007      	beq.n	8000dfa <ESC_startmbxboot+0x5a>
   {
      ESC_ALerror (ALERR_INVALIDBOOTMBXCONFIG);
 8000dea:	2015      	movs	r0, #21
 8000dec:	f7ff fdb2 	bl	8000954 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <ESC_startmbxboot+0x80>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8000df8:	e00d      	b.n	8000e16 <ESC_startmbxboot+0x76>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <ESC_startmbxboot+0x80>)
 8000dfc:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8000e00:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <ESC_startmbxboot+0x80>)
 8000e0a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      ESCvar.MBXrun = 1;
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <ESC_startmbxboot+0x80>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
   }
   return state;
 8000e16:	79fb      	ldrb	r3, [r7, #7]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000180 	.word	0x20000180
 8000e24:	20000194 	.word	0x20000194
 8000e28:	2000019c 	.word	0x2000019c

08000e2c <ESC_stopmbx>:

/** Stop mailboxes by disabling SyncManager 0 and 1. Clear local mailbox variables
 * stored in ESCvar.
 */
void ESC_stopmbx (void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
   uint8_t n;
   ESCvar.MBXrun = 0;
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
   ESC_SMdisable (0);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff fe8a 	bl	8000b54 <ESC_SMdisable>
   ESC_SMdisable (1);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff fe87 	bl	8000b54 <ESC_SMdisable>
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	71fb      	strb	r3, [r7, #7]
 8000e4a:	e006      	b.n	8000e5a <ESC_stopmbx+0x2e>
   {
      MBXcontrol[n].state = MBXstate_idle;
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <ESC_stopmbx+0x90>)
 8000e50:	2100      	movs	r1, #0
 8000e52:	54d1      	strb	r1, [r2, r3]
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	3301      	adds	r3, #1
 8000e58:	71fb      	strb	r3, [r7, #7]
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d9f5      	bls.n	8000e4c <ESC_stopmbx+0x20>
   }
   ESCvar.mbxoutpost = 0;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
   ESCvar.mbxbackup = 0;
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
   ESCvar.xoe = 0;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
   ESCvar.mbxfree = 1;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
   ESCvar.toggle = 0;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   ESCvar.mbxincnt = 0;
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
   ESCvar.segmented = 0;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
   ESCvar.frags = 0;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
   ESCvar.fragsleft = 0;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
   ESCvar.txcue = 0;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <ESC_stopmbx+0x8c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000180 	.word	0x20000180
 8000ebc:	20000424 	.word	0x20000424

08000ec0 <ESC_readmbx>:
/** Read Receive mailbox and store data in local ESCvar.MBX variable.
 * Combined function for bootstrap and other states. State check decides
 * which one to read.
 */
void ESC_readmbx (void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
   _MBX *MB = (_MBX *)&MBX[0];
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <ESC_readmbx+0x80>)
 8000ec8:	607b      	str	r3, [r7, #4]
   uint16_t length;

   ESC_read (ESC_MBX0_sma, MB, ESC_MBXHSIZE);
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <ESC_readmbx+0x84>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	2206      	movs	r2, #6
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f003 fbc7 	bl	8004668 <ESC_read>
   length = etohs (MB->header.length);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	807b      	strh	r3, [r7, #2]

   if (length > (ESC_MBX0_sml - ESC_MBXHSIZE))
 8000ee2:	887b      	ldrh	r3, [r7, #2]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <ESC_readmbx+0x84>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eea:	885b      	ldrh	r3, [r3, #2]
 8000eec:	3b06      	subs	r3, #6
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d905      	bls.n	8000efe <ESC_readmbx+0x3e>
   {
      length = ESC_MBX0_sml - ESC_MBXHSIZE;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <ESC_readmbx+0x84>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef6:	885b      	ldrh	r3, [r3, #2]
 8000ef8:	3b06      	subs	r3, #6
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	807b      	strh	r3, [r7, #2]
   }
   ESC_read (ESC_MBX0_sma + ESC_MBXHSIZE, MB->b, length);
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <ESC_readmbx+0x84>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	3306      	adds	r3, #6
 8000f06:	b298      	uxth	r0, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3306      	adds	r3, #6
 8000f0c:	887a      	ldrh	r2, [r7, #2]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f003 fbaa 	bl	8004668 <ESC_read>
   if (length + ESC_MBXHSIZE < ESC_MBX0_sml)
 8000f14:	887b      	ldrh	r3, [r7, #2]
 8000f16:	3306      	adds	r3, #6
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <ESC_readmbx+0x84>)
 8000f1a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8000f1c:	8852      	ldrh	r2, [r2, #2]
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d207      	bcs.n	8000f32 <ESC_readmbx+0x72>
   {
      ESC_read (ESC_MBX0_sme, &length, 1);
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <ESC_readmbx+0x84>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	889b      	ldrh	r3, [r3, #4]
 8000f28:	1cb9      	adds	r1, r7, #2
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f003 fb9b 	bl	8004668 <ESC_read>
   }

   MBXcontrol[0].state = MBXstate_inclaim;
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <ESC_readmbx+0x88>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000024c 	.word	0x2000024c
 8000f44:	20000180 	.word	0x20000180
 8000f48:	20000424 	.word	0x20000424

08000f4c <ESC_writembx>:
 * which one to write.
 *
 * @param[in] n   = Which local mailbox buffer n to send.
 */
void ESC_writembx (uint8_t n)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <ESC_writembx+0x88>)
 8000f5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f5c:	fb02 f303 	mul.w	r3, r2, r3
 8000f60:	4a1d      	ldr	r2, [pc, #116]	; (8000fd8 <ESC_writembx+0x8c>)
 8000f62:	4413      	add	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
   uint8_t dummy = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]
   uint16_t length;
   length = etohs (MBh->length);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	785b      	ldrb	r3, [r3, #1]
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	4313      	orrs	r3, r2
 8000f74:	82fb      	strh	r3, [r7, #22]

   if (length > (ESC_MBX1_sml - ESC_MBXHSIZE))
 8000f76:	8afa      	ldrh	r2, [r7, #22]
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <ESC_writembx+0x88>)
 8000f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f7c:	885b      	ldrh	r3, [r3, #2]
 8000f7e:	3b06      	subs	r3, #6
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d904      	bls.n	8000f8e <ESC_writembx+0x42>
   {
      length = ESC_MBX1_sml - ESC_MBXHSIZE;
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <ESC_writembx+0x88>)
 8000f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f88:	885b      	ldrh	r3, [r3, #2]
 8000f8a:	3b06      	subs	r3, #6
 8000f8c:	82fb      	strh	r3, [r7, #22]
   }
   ESC_write (ESC_MBX1_sma, MBh, ESC_MBXHSIZE + length);
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <ESC_writembx+0x88>)
 8000f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f92:	8818      	ldrh	r0, [r3, #0]
 8000f94:	8afb      	ldrh	r3, [r7, #22]
 8000f96:	3306      	adds	r3, #6
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	6939      	ldr	r1, [r7, #16]
 8000f9e:	f003 fbc5 	bl	800472c <ESC_write>
   if (length + ESC_MBXHSIZE < ESC_MBX1_sml)
 8000fa2:	8afb      	ldrh	r3, [r7, #22]
 8000fa4:	3306      	adds	r3, #6
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <ESC_writembx+0x88>)
 8000fa8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8000faa:	8852      	ldrh	r2, [r2, #2]
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d208      	bcs.n	8000fc2 <ESC_writembx+0x76>
   {
      ESC_write (ESC_MBX1_sme, &dummy, 1);
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <ESC_writembx+0x88>)
 8000fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fb4:	889b      	ldrh	r3, [r3, #4]
 8000fb6:	f107 010f 	add.w	r1, r7, #15
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 fbb5 	bl	800472c <ESC_write>
   }

   ESCvar.mbxfree = 0;
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <ESC_writembx+0x88>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000180 	.word	0x20000180
 8000fd8:	2000024c 	.word	0x2000024c

08000fdc <ESC_ackmbxread>:

/** TBD
 */
void ESC_ackmbxread (void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
   uint8_t dummy = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	71fb      	strb	r3, [r7, #7]

   ESC_write (ESC_MBX1_sma, &dummy, 1);
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <ESC_ackmbxread+0x2c>)
 8000fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	1df9      	adds	r1, r7, #7
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 fb9b 	bl	800472c <ESC_write>
   ESCvar.mbxfree = 1;
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <ESC_ackmbxread+0x2c>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000180 	.word	0x20000180

0800100c <ESC_claimbuffer>:
 * address master and mailbox next CNT value between 1-7.
 *
 * @return The index of Mailbox buffer prepared for outbox. IF no buffer is available return 0.
 */
uint8_t ESC_claimbuffer (void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
   _MBXh *MBh;
   uint8_t n = ESC_MBXBUFFERS - 1;
 8001012:	2302      	movs	r3, #2
 8001014:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 8001016:	e002      	b.n	800101e <ESC_claimbuffer+0x12>
   {
      n--;
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	3b01      	subs	r3, #1
 800101c:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <ESC_claimbuffer+0x22>
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	4a2b      	ldr	r2, [pc, #172]	; (80010d4 <ESC_claimbuffer+0xc8>)
 8001028:	5cd3      	ldrb	r3, [r2, r3]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f4      	bne.n	8001018 <ESC_claimbuffer+0xc>
   }
   if (n)
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d047      	beq.n	80010c4 <ESC_claimbuffer+0xb8>
   {
      MBXcontrol[n].state = MBXstate_outclaim;
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4a27      	ldr	r2, [pc, #156]	; (80010d4 <ESC_claimbuffer+0xc8>)
 8001038:	2102      	movs	r1, #2
 800103a:	54d1      	strb	r1, [r2, r3]
      MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	4a26      	ldr	r2, [pc, #152]	; (80010d8 <ESC_claimbuffer+0xcc>)
 8001040:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	4a25      	ldr	r2, [pc, #148]	; (80010dc <ESC_claimbuffer+0xd0>)
 8001048:	4413      	add	r3, r2
 800104a:	603b      	str	r3, [r7, #0]
      ESCvar.mbxcnt++;
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <ESC_claimbuffer+0xcc>)
 800104e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001052:	3301      	adds	r3, #1
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <ESC_claimbuffer+0xcc>)
 8001058:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
      ESCvar.mbxcnt = (ESCvar.mbxcnt & 0x07);
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <ESC_claimbuffer+0xcc>)
 800105e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <ESC_claimbuffer+0xcc>)
 800106a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
      if (ESCvar.mbxcnt == 0)
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <ESC_claimbuffer+0xcc>)
 8001070:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001074:	2b00      	cmp	r3, #0
 8001076:	d103      	bne.n	8001080 <ESC_claimbuffer+0x74>
      {
         ESCvar.mbxcnt = 1;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <ESC_claimbuffer+0xcc>)
 800107a:	2201      	movs	r2, #1
 800107c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
      }
      MBh->address = htoes (0x0000);      // destination is master
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	709a      	strb	r2, [r3, #2]
 8001086:	2200      	movs	r2, #0
 8001088:	70da      	strb	r2, [r3, #3]
      MBh->channel = 0;
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	7913      	ldrb	r3, [r2, #4]
 800108e:	f36f 0305 	bfc	r3, #0, #6
 8001092:	7113      	strb	r3, [r2, #4]
      MBh->priority = 0;
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	7913      	ldrb	r3, [r2, #4]
 8001098:	f36f 1387 	bfc	r3, #6, #2
 800109c:	7113      	strb	r3, [r2, #4]
      MBh->mbxcnt = ESCvar.mbxcnt;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <ESC_claimbuffer+0xcc>)
 80010a0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	b2d9      	uxtb	r1, r3
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	7953      	ldrb	r3, [r2, #5]
 80010ae:	f361 1307 	bfi	r3, r1, #4, #4
 80010b2:	7153      	strb	r3, [r2, #5]
      ESCvar.txcue++;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <ESC_claimbuffer+0xcc>)
 80010b6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80010ba:	3301      	adds	r3, #1
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <ESC_claimbuffer+0xcc>)
 80010c0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
   }
   return n;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000424 	.word	0x20000424
 80010d8:	20000180 	.word	0x20000180
 80010dc:	2000024c 	.word	0x2000024c

080010e0 <ESC_outreqbuffer>:
/** Look for any present requests for posting to the outbox.
 *
 * @return the index of Mailbox buffer ready to be posted.
 */
uint8_t ESC_outreqbuffer (void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
   uint8_t n = ESC_MBXBUFFERS - 1;
 80010e6:	2302      	movs	r3, #2
 80010e8:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 80010ea:	e002      	b.n	80010f2 <ESC_outreqbuffer+0x12>
   {
      n--;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d004      	beq.n	8001102 <ESC_outreqbuffer+0x22>
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <ESC_outreqbuffer+0x30>)
 80010fc:	5cd3      	ldrb	r3, [r2, r3]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d1f4      	bne.n	80010ec <ESC_outreqbuffer+0xc>
   }
   return n;
 8001102:	79fb      	ldrb	r3, [r7, #7]
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	20000424 	.word	0x20000424

08001114 <MBX_error>:
 * buffer with error information.
 *
 * @param[in] n   = Error number to be sent in mailbox error message.
 */
void MBX_error (uint16_t error)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
   uint8_t MBXout;
   _MBXerr *mbxerr;
   MBXout = ESC_claimbuffer ();
 800111e:	f7ff ff75 	bl	800100c <ESC_claimbuffer>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d021      	beq.n	8001170 <MBX_error+0x5c>
   {
      mbxerr = (_MBXerr *) &MBX[MBXout * ESC_MBXSIZE];
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <MBX_error+0x64>)
 8001130:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	4a11      	ldr	r2, [pc, #68]	; (800117c <MBX_error+0x68>)
 8001138:	4413      	add	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
      mbxerr->mbxheader.length = htoes ((uint16_t) 0x04);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2200      	movs	r2, #0
 8001140:	f042 0204 	orr.w	r2, r2, #4
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	2200      	movs	r2, #0
 8001148:	705a      	strb	r2, [r3, #1]
      mbxerr->mbxheader.mbxtype = MBXERR;
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	7953      	ldrb	r3, [r2, #5]
 800114e:	f36f 0303 	bfc	r3, #0, #4
 8001152:	7153      	strb	r3, [r2, #5]
      mbxerr->type = htoes ((uint16_t) 0x01);
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	2200      	movs	r2, #0
 8001158:	f042 0201 	orr.w	r2, r2, #1
 800115c:	719a      	strb	r2, [r3, #6]
 800115e:	2200      	movs	r2, #0
 8001160:	71da      	strb	r2, [r3, #7]
      mbxerr->detail = htoes (error);
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	88fa      	ldrh	r2, [r7, #6]
 8001166:	811a      	strh	r2, [r3, #8]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <MBX_error+0x6c>)
 800116c:	2103      	movs	r1, #3
 800116e:	54d1      	strb	r1, [r2, r3]
   }
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000180 	.word	0x20000180
 800117c:	2000024c 	.word	0x2000024c
 8001180:	20000424 	.word	0x20000424

08001184 <ESC_mbxprocess>:
 * a mailbox, re-sending a mailbox, reading a mailbox and handles a mailbox full event.
 *
 * @return =0 if nothing to do. =1 if something to be handled by mailbox protocols.
 */
uint8_t ESC_mbxprocess (void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
   uint8_t mbxhandle = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[0];
 800118e:	4b97      	ldr	r3, [pc, #604]	; (80013ec <ESC_mbxprocess+0x268>)
 8001190:	603b      	str	r3, [r7, #0]

   if (ESCvar.MBXrun == 0)
 8001192:	4b97      	ldr	r3, [pc, #604]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001194:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <ESC_mbxprocess+0x1c>
   {
      /* nothing to do */
      return 0;
 800119c:	2300      	movs	r3, #0
 800119e:	e121      	b.n	80013e4 <ESC_mbxprocess+0x260>
   }

   /* SM0/1 access */
   if (ESCvar.ALevent & (ESCREG_ALEVENT_SM0 | ESCREG_ALEVENT_SM1))
 80011a0:	4b93      	ldr	r3, [pc, #588]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80011a2:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <ESC_mbxprocess+0x38>
   {
      ESC_SMstatus (0);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fc77 	bl	8000aa4 <ESC_SMstatus>
      ESC_SMstatus (1);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f7ff fc74 	bl	8000aa4 <ESC_SMstatus>
   }

   /* outmbx read by master */
   if (ESCvar.mbxoutpost && (ESCvar.ALevent & ESCREG_ALEVENT_SM1))
 80011bc:	4b8c      	ldr	r3, [pc, #560]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80011be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d03d      	beq.n	8001242 <ESC_mbxprocess+0xbe>
 80011c6:	4b8a      	ldr	r3, [pc, #552]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80011c8:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d035      	beq.n	8001242 <ESC_mbxprocess+0xbe>
   {
      ESC_ackmbxread ();
 80011d6:	f7ff ff01 	bl	8000fdc <ESC_ackmbxread>
      /* dispose old backup */
      if (ESCvar.mbxbackup)
 80011da:	4b85      	ldr	r3, [pc, #532]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80011dc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <ESC_mbxprocess+0x6e>
      {
         MBXcontrol[ESCvar.mbxbackup].state = MBXstate_idle;
 80011e4:	4b82      	ldr	r3, [pc, #520]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80011e6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b81      	ldr	r3, [pc, #516]	; (80013f4 <ESC_mbxprocess+0x270>)
 80011ee:	2100      	movs	r1, #0
 80011f0:	5499      	strb	r1, [r3, r2]
      }
      /* if still to do */
      if (MBXcontrol[ESCvar.mbxoutpost].state == MBXstate_again)
 80011f2:	4b7f      	ldr	r3, [pc, #508]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80011f4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b7e      	ldr	r3, [pc, #504]	; (80013f4 <ESC_mbxprocess+0x270>)
 80011fc:	5c9b      	ldrb	r3, [r3, r2]
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d105      	bne.n	800120e <ESC_mbxprocess+0x8a>
      {
         ESC_writembx (ESCvar.mbxoutpost);
 8001202:	4b7b      	ldr	r3, [pc, #492]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001204:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fe9f 	bl	8000f4c <ESC_writembx>
      }
      /* create new backup */
      MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_backup;
 800120e:	4b78      	ldr	r3, [pc, #480]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001210:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001214:	461a      	mov	r2, r3
 8001216:	4b77      	ldr	r3, [pc, #476]	; (80013f4 <ESC_mbxprocess+0x270>)
 8001218:	2105      	movs	r1, #5
 800121a:	5499      	strb	r1, [r3, r2]
      ESCvar.mbxbackup = ESCvar.mbxoutpost;
 800121c:	4b74      	ldr	r3, [pc, #464]	; (80013f0 <ESC_mbxprocess+0x26c>)
 800121e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8001222:	4b73      	ldr	r3, [pc, #460]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001224:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
      ESCvar.mbxoutpost = 0;
 8001228:	4b71      	ldr	r3, [pc, #452]	; (80013f0 <ESC_mbxprocess+0x26c>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      /* Do we have any ongoing protocol transfers, return 1 */
      if(ESCvar.xoe > 0)
 8001230:	4b6f      	ldr	r3, [pc, #444]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001232:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <ESC_mbxprocess+0xba>
      {
         return 1;
 800123a:	2301      	movs	r3, #1
 800123c:	e0d2      	b.n	80013e4 <ESC_mbxprocess+0x260>
      }
      return 0;
 800123e:	2300      	movs	r3, #0
 8001240:	e0d0      	b.n	80013e4 <ESC_mbxprocess+0x260>
   }

   /* repeat request */
   if (ESCvar.SM[1].ECrep != ESCvar.toggle)
 8001242:	4b6b      	ldr	r3, [pc, #428]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001244:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8001248:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	4b67      	ldr	r3, [pc, #412]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001252:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001256:	429a      	cmp	r2, r3
 8001258:	d044      	beq.n	80012e4 <ESC_mbxprocess+0x160>
   {
      if (ESCvar.mbxoutpost || ESCvar.mbxbackup)
 800125a:	4b65      	ldr	r3, [pc, #404]	; (80013f0 <ESC_mbxprocess+0x26c>)
 800125c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001260:	2b00      	cmp	r3, #0
 8001262:	d104      	bne.n	800126e <ESC_mbxprocess+0xea>
 8001264:	4b62      	ldr	r3, [pc, #392]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001266:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800126a:	2b00      	cmp	r3, #0
 800126c:	d038      	beq.n	80012e0 <ESC_mbxprocess+0x15c>
      {
         /* if outmbx empty */
         if (ESCvar.mbxoutpost == 0)
 800126e:	4b60      	ldr	r3, [pc, #384]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001270:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001274:	2b00      	cmp	r3, #0
 8001276:	d106      	bne.n	8001286 <ESC_mbxprocess+0x102>
         {
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 8001278:	4b5d      	ldr	r3, [pc, #372]	; (80013f0 <ESC_mbxprocess+0x26c>)
 800127a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fe64 	bl	8000f4c <ESC_writembx>
 8001284:	e012      	b.n	80012ac <ESC_mbxprocess+0x128>
         }
         else
         {
            /* reset mailbox */
            ESC_SMdisable (1);
 8001286:	2001      	movs	r0, #1
 8001288:	f7ff fc64 	bl	8000b54 <ESC_SMdisable>
            /* have to resend later */
            MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_again;
 800128c:	4b58      	ldr	r3, [pc, #352]	; (80013f0 <ESC_mbxprocess+0x26c>)
 800128e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001292:	461a      	mov	r2, r3
 8001294:	4b57      	ldr	r3, [pc, #348]	; (80013f4 <ESC_mbxprocess+0x270>)
 8001296:	2106      	movs	r1, #6
 8001298:	5499      	strb	r1, [r3, r2]
            /* activate mailbox */
            ESC_SMenable (1);
 800129a:	2001      	movs	r0, #1
 800129c:	f7ff fc3e 	bl	8000b1c <ESC_SMenable>
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 80012a0:	4b53      	ldr	r3, [pc, #332]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80012a2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fe50 	bl	8000f4c <ESC_writembx>
         }
         ESCvar.toggle = ESCvar.SM[1].ECrep;
 80012ac:	4b50      	ldr	r3, [pc, #320]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80012ae:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 80012b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b4d      	ldr	r3, [pc, #308]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80012bc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
         ESCvar.SM[1].PDIrep = ESCvar.toggle;
 80012c0:	4b4b      	ldr	r3, [pc, #300]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80012c2:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	b2d9      	uxtb	r1, r3
 80012cc:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80012ce:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 80012d2:	f361 0341 	bfi	r3, r1, #1, #1
 80012d6:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
         ESC_SMwritepdi (1);
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff fc00 	bl	8000ae0 <ESC_SMwritepdi>
      }
      return 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e07f      	b.n	80013e4 <ESC_mbxprocess+0x260>
   }

   /* if the outmailbox is free check if we have something to send */
   if (ESCvar.txcue && (ESCvar.mbxfree || !ESCvar.SM[1].MBXstat))
 80012e4:	4b42      	ldr	r3, [pc, #264]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80012e6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d02f      	beq.n	800134e <ESC_mbxprocess+0x1ca>
 80012ee:	4b40      	ldr	r3, [pc, #256]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80012f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d107      	bne.n	8001308 <ESC_mbxprocess+0x184>
 80012f8:	4b3d      	ldr	r3, [pc, #244]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80012fa:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d122      	bne.n	800134e <ESC_mbxprocess+0x1ca>
   {
      /* check out request mbx */
      mbxhandle = ESC_outreqbuffer ();
 8001308:	f7ff feea 	bl	80010e0 <ESC_outreqbuffer>
 800130c:	4603      	mov	r3, r0
 800130e:	71fb      	strb	r3, [r7, #7]
      /* outmbx empty and outreq mbx available */
      if (mbxhandle)
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d01b      	beq.n	800134e <ESC_mbxprocess+0x1ca>
      {
         ESC_writembx (mbxhandle);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fe17 	bl	8000f4c <ESC_writembx>
         /* Refresh SM status */
         ESC_SMstatus (1);
 800131e:	2001      	movs	r0, #1
 8001320:	f7ff fbc0 	bl	8000aa4 <ESC_SMstatus>
         /* change state */
         MBXcontrol[mbxhandle].state = MBXstate_outpost;
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	4a33      	ldr	r2, [pc, #204]	; (80013f4 <ESC_mbxprocess+0x270>)
 8001328:	2104      	movs	r1, #4
 800132a:	54d1      	strb	r1, [r2, r3]
         ESCvar.mbxoutpost = mbxhandle;
 800132c:	4a30      	ldr	r2, [pc, #192]	; (80013f0 <ESC_mbxprocess+0x26c>)
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f882 307c 	strb.w	r3, [r2, #124]	; 0x7c
         if (ESCvar.txcue)
 8001334:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001336:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800133a:	2b00      	cmp	r3, #0
 800133c:	d007      	beq.n	800134e <ESC_mbxprocess+0x1ca>
         {
            ESCvar.txcue--;
 800133e:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001340:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001344:	3b01      	subs	r3, #1
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <ESC_mbxprocess+0x26c>)
 800134a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
         }
      }
   }

   /* read mailbox if full and no xoe in progress */
   if ((ESCvar.SM[0].MBXstat != 0) && (MBXcontrol[0].state == 0)
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001350:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d041      	beq.n	80013e2 <ESC_mbxprocess+0x25e>
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <ESC_mbxprocess+0x270>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d13d      	bne.n	80013e2 <ESC_mbxprocess+0x25e>
         && (ESCvar.mbxoutpost == 0) && (ESCvar.xoe == 0))
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001368:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800136c:	2b00      	cmp	r3, #0
 800136e:	d138      	bne.n	80013e2 <ESC_mbxprocess+0x25e>
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001372:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001376:	2b00      	cmp	r3, #0
 8001378:	d133      	bne.n	80013e2 <ESC_mbxprocess+0x25e>
   {
      ESC_readmbx ();
 800137a:	f7ff fda1 	bl	8000ec0 <ESC_readmbx>
      ESCvar.SM[0].MBXstat = 0;
 800137e:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <ESC_mbxprocess+0x26c>)
 8001380:	f892 30a5 	ldrb.w	r3, [r2, #165]	; 0xa5
 8001384:	f36f 03c3 	bfc	r3, #3, #1
 8001388:	f882 30a5 	strb.w	r3, [r2, #165]	; 0xa5
      if (etohs (MBh->length) == 0)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d105      	bne.n	80013a2 <ESC_mbxprocess+0x21e>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 8001396:	2005      	movs	r0, #5
 8001398:	f7ff febc 	bl	8001114 <MBX_error>
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <ESC_mbxprocess+0x270>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
      }
      if ((MBh->mbxcnt != 0) && (MBh->mbxcnt == ESCvar.mbxincnt))
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	795b      	ldrb	r3, [r3, #5]
 80013a6:	f023 030f 	bic.w	r3, r3, #15
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00d      	beq.n	80013cc <ESC_mbxprocess+0x248>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	795b      	ldrb	r3, [r3, #5]
 80013b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80013be:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d102      	bne.n	80013cc <ESC_mbxprocess+0x248>
      {
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <ESC_mbxprocess+0x270>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
      }
      ESCvar.mbxincnt = MBh->mbxcnt;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	795b      	ldrb	r3, [r3, #5]
 80013d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <ESC_mbxprocess+0x26c>)
 80013da:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
      return 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <ESC_mbxprocess+0x260>
   }

   return 0;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000024c 	.word	0x2000024c
 80013f0:	20000180 	.word	0x20000180
 80013f4:	20000424 	.word	0x20000424

080013f8 <ESC_xoeprocess>:
/** Handler for incorrect or unsupported mailbox data. Write error response
 * in Mailbox.
 */
void ESC_xoeprocess (void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   if (ESCvar.MBXrun == 0)
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <ESC_xoeprocess+0x5c>)
 8001400:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001404:	2b00      	cmp	r3, #0
 8001406:	d021      	beq.n	800144c <ESC_xoeprocess+0x54>
   {
      return;
   }
   if ((ESCvar.xoe == 0) && (MBXcontrol[0].state == MBXstate_inclaim))
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <ESC_xoeprocess+0x5c>)
 800140a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800140e:	2b00      	cmp	r3, #0
 8001410:	d11d      	bne.n	800144e <ESC_xoeprocess+0x56>
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <ESC_xoeprocess+0x60>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d119      	bne.n	800144e <ESC_xoeprocess+0x56>
   {
      mbh = (_MBXh *) &MBX[0];
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <ESC_xoeprocess+0x64>)
 800141c:	607b      	str	r3, [r7, #4]
      if ((mbh->mbxtype == 0) || (etohs (mbh->length) == 0))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	795b      	ldrb	r3, [r3, #5]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d004      	beq.n	8001436 <ESC_xoeprocess+0x3e>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	b29b      	uxth	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d103      	bne.n	800143e <ESC_xoeprocess+0x46>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 8001436:	2005      	movs	r0, #5
 8001438:	f7ff fe6c 	bl	8001114 <MBX_error>
 800143c:	e002      	b.n	8001444 <ESC_xoeprocess+0x4c>
      }
      else
      {
         MBX_error (MBXERR_UNSUPPORTEDPROTOCOL);
 800143e:	2002      	movs	r0, #2
 8001440:	f7ff fe68 	bl	8001114 <MBX_error>
      }
      /* mailbox type not supported, drop mailbox */
      MBXcontrol[0].state = MBXstate_idle;
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <ESC_xoeprocess+0x60>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	e000      	b.n	800144e <ESC_xoeprocess+0x56>
      return;
 800144c:	bf00      	nop
   }
}
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000180 	.word	0x20000180
 8001458:	20000424 	.word	0x20000424
 800145c:	2000024c 	.word	0x2000024c

08001460 <ESC_checkSM23>:
 *
 * @param[in] state   = Requested state.
 * @return = incoming state request if every thing checks out OK. = state (PREOP | ERROR)  if something isn't correct.
 */
uint8_t ESC_checkSM23 (uint8_t state)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM2, (void *) &ESCvar.SM[2], sizeof (ESCvar.SM[2]));
 800146a:	2208      	movs	r2, #8
 800146c:	4930      	ldr	r1, [pc, #192]	; (8001530 <ESC_checkSM23+0xd0>)
 800146e:	f44f 6001 	mov.w	r0, #2064	; 0x810
 8001472:	f003 f8f9 	bl	8004668 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[2];
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <ESC_checkSM23+0xd0>)
 8001478:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_SM2_sma) || (etohs (SM->Length) != ESCvar.ESC_SM2_sml)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 8001484:	d111      	bne.n	80014aa <ESC_checkSM23+0x4a>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	885b      	ldrh	r3, [r3, #2]
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b29      	ldr	r3, [pc, #164]	; (8001534 <ESC_checkSM23+0xd4>)
 800148e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8001492:	429a      	cmp	r2, r3
 8001494:	d109      	bne.n	80014aa <ESC_checkSM23+0x4a>
       || (SM->Command != ESC_SM2_smc) || !(SM->ActESC & ESC_SM2_act))
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	791b      	ldrb	r3, [r3, #4]
 800149a:	2b24      	cmp	r3, #36	; 0x24
 800149c:	d105      	bne.n	80014aa <ESC_checkSM23+0x4a>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	799b      	ldrb	r3, [r3, #6]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d105      	bne.n	80014b6 <ESC_checkSM23+0x56>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 80014aa:	4b22      	ldr	r3, [pc, #136]	; (8001534 <ESC_checkSM23+0xd4>)
 80014ac:	2204      	movs	r2, #4
 80014ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      /* fail state change */
      return (ESCpreop | ESCerror);
 80014b2:	2312      	movs	r3, #18
 80014b4:	e038      	b.n	8001528 <ESC_checkSM23+0xc8>
   }
   if ((ESC_SM2_sma + (etohs (SM->Length) * 3)) > ESC_SM3_sma)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	885b      	ldrh	r3, [r3, #2]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	4613      	mov	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80014c8:	f5b3 5f8c 	cmp.w	r3, #4480	; 0x1180
 80014cc:	dd05      	ble.n	80014da <ESC_checkSM23+0x7a>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <ESC_checkSM23+0xd4>)
 80014d0:	2204      	movs	r2, #4
 80014d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      /* SM2 overlaps SM3, fail state change */
      return (ESCpreop | ESCerror);
 80014d6:	2312      	movs	r3, #18
 80014d8:	e026      	b.n	8001528 <ESC_checkSM23+0xc8>
   }
   ESC_read (ESCREG_SM3, (void *) &ESCvar.SM[3], sizeof (ESCvar.SM[3]));
 80014da:	2208      	movs	r2, #8
 80014dc:	4916      	ldr	r1, [pc, #88]	; (8001538 <ESC_checkSM23+0xd8>)
 80014de:	f640 0018 	movw	r0, #2072	; 0x818
 80014e2:	f003 f8c1 	bl	8004668 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[3];
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <ESC_checkSM23+0xd8>)
 80014e8:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_SM3_sma) || (etohs (SM->Length) != ESCvar.ESC_SM3_sml)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	f5b3 5f8c 	cmp.w	r3, #4480	; 0x1180
 80014f4:	d111      	bne.n	800151a <ESC_checkSM23+0xba>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	885b      	ldrh	r3, [r3, #2]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <ESC_checkSM23+0xd4>)
 80014fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8001502:	429a      	cmp	r2, r3
 8001504:	d109      	bne.n	800151a <ESC_checkSM23+0xba>
       || (SM->Command != ESC_SM3_smc) || !(SM->ActESC & ESC_SM3_act))
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	791b      	ldrb	r3, [r3, #4]
 800150a:	2b20      	cmp	r3, #32
 800150c:	d105      	bne.n	800151a <ESC_checkSM23+0xba>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	799b      	ldrb	r3, [r3, #6]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d105      	bne.n	8001526 <ESC_checkSM23+0xc6>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <ESC_checkSM23+0xd4>)
 800151c:	2208      	movs	r2, #8
 800151e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      /* fail state change */
      return (ESCpreop | ESCerror);
 8001522:	2312      	movs	r3, #18
 8001524:	e000      	b.n	8001528 <ESC_checkSM23+0xc8>
   }
   return state;
 8001526:	79fb      	ldrb	r3, [r7, #7]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000230 	.word	0x20000230
 8001534:	20000180 	.word	0x20000180
 8001538:	20000238 	.word	0x20000238

0800153c <ESC_startinput>:
 *
 * @param[in] state   = Requested state.
 * @return = state, incoming state request if every thing checks out OK. =state (PREOP | ERROR) if something isn't correct.
 */
uint8_t ESC_startinput (uint8_t state)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]

   state = ESC_checkSM23 (state);
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff89 	bl	8001460 <ESC_checkSM23>
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]

   if (state != (ESCpreop | ESCerror))
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d00a      	beq.n	800156e <ESC_startinput+0x32>
   {
      ESC_SMenable (3);
 8001558:	2003      	movs	r0, #3
 800155a:	f7ff fadf 	bl	8000b1c <ESC_SMenable>
      CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_INPUT);
 800155e:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <ESC_startinput+0xd4>)
 8001560:	f3bf 8f5b 	dmb	ish
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	f3bf 8f5b 	dmb	ish
 800156c:	e013      	b.n	8001596 <ESC_startinput+0x5a>
   }
   else
   {
      ESC_SMdisable (2);
 800156e:	2002      	movs	r0, #2
 8001570:	f7ff faf0 	bl	8000b54 <ESC_SMdisable>
      ESC_SMdisable (3);
 8001574:	2003      	movs	r0, #3
 8001576:	f7ff faed 	bl	8000b54 <ESC_SMdisable>
      if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 800157a:	4b26      	ldr	r3, [pc, #152]	; (8001614 <ESC_startinput+0xd8>)
 800157c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <ESC_startinput+0x54>
      {
         ESC_ALerror (ALERR_INVALIDINPUTSM);
 8001588:	201e      	movs	r0, #30
 800158a:	f7ff f9e3 	bl	8000954 <ESC_ALerror>
 800158e:	e002      	b.n	8001596 <ESC_startinput+0x5a>
      }
      else
      {
         ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 8001590:	201d      	movs	r0, #29
 8001592:	f7ff f9df 	bl	8000954 <ESC_ALerror>
      }
   }

   /* Exit here if polling */
   if (ESCvar.use_interrupt == 0)
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <ESC_startinput+0xd8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <ESC_startinput+0x66>
   {
      return state;
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	e032      	b.n	8001608 <ESC_startinput+0xcc>
   }

   if (state != (ESCpreop | ESCerror))
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b12      	cmp	r3, #18
 80015a6:	d02e      	beq.n	8001606 <ESC_startinput+0xca>
   {
      uint16_t dc_check_result;
      dc_check_result = ESC_checkDC();
 80015a8:	f7ff fb14 	bl	8000bd4 <ESC_checkDC>
 80015ac:	4603      	mov	r3, r0
 80015ae:	81fb      	strh	r3, [r7, #14]
      if(dc_check_result > 0)
 80015b0:	89fb      	ldrh	r3, [r7, #14]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d013      	beq.n	80015de <ESC_startinput+0xa2>
      {
         ESC_ALerror (dc_check_result);
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff f9cb 	bl	8000954 <ESC_ALerror>
         state = (ESCpreop | ESCerror);
 80015be:	2312      	movs	r3, #18
 80015c0:	71fb      	strb	r3, [r7, #7]

         ESC_SMdisable (2);
 80015c2:	2002      	movs	r0, #2
 80015c4:	f7ff fac6 	bl	8000b54 <ESC_SMdisable>
         ESC_SMdisable (3);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f7ff fac3 	bl	8000b54 <ESC_SMdisable>
         CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <ESC_startinput+0xd4>)
 80015d0:	f3bf 8f5b 	dmb	ish
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	f3bf 8f5b 	dmb	ish
 80015dc:	e013      	b.n	8001606 <ESC_startinput+0xca>
      }
      else
      {
         if (ESCvar.esc_hw_interrupt_enable != NULL)
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <ESC_startinput+0xd8>)
 80015e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00f      	beq.n	8001606 <ESC_startinput+0xca>
         {
            if(ESCvar.dcsync > 0)
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <ESC_startinput+0xd8>)
 80015e8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <ESC_startinput+0xc0>
            {
               ESCvar.esc_hw_interrupt_enable(ESCREG_ALEVENT_DC_SYNC0 |
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <ESC_startinput+0xd8>)
 80015f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f4:	f240 4004 	movw	r0, #1028	; 0x404
 80015f8:	4798      	blx	r3
 80015fa:	e004      	b.n	8001606 <ESC_startinput+0xca>
                     ESCREG_ALEVENT_SM2);
            }
            else
            {
               ESCvar.esc_hw_interrupt_enable(ESCREG_ALEVENT_SM2);
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <ESC_startinput+0xd8>)
 80015fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001600:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001604:	4798      	blx	r3
            }
         }
      }
   }

   return state;
 8001606:	79fb      	ldrb	r3, [r7, #7]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	2000024b 	.word	0x2000024b
 8001614:	20000180 	.word	0x20000180

08001618 <ESC_stopinput>:
/** Unconditional stop of updating inputs by disabling Sync Manager 2 & 3.
 * Set the App.state to APPSTATE_IDLE.
 *
 */
void ESC_stopinput (void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
   CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <ESC_stopinput+0x3c>)
 800161e:	f3bf 8f5b 	dmb	ish
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (3);
 800162a:	2003      	movs	r0, #3
 800162c:	f7ff fa92 	bl	8000b54 <ESC_SMdisable>
   ESC_SMdisable (2);
 8001630:	2002      	movs	r0, #2
 8001632:	f7ff fa8f 	bl	8000b54 <ESC_SMdisable>

   /* Call interrupt disable hook case it have been configured  */
   if ((ESCvar.use_interrupt != 0) &&
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <ESC_stopinput+0x40>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d008      	beq.n	8001650 <ESC_stopinput+0x38>
         (ESCvar.esc_hw_interrupt_disable != NULL))
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <ESC_stopinput+0x40>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   if ((ESCvar.use_interrupt != 0) &&
 8001642:	2b00      	cmp	r3, #0
 8001644:	d004      	beq.n	8001650 <ESC_stopinput+0x38>
   {
      ESCvar.esc_hw_interrupt_disable (ESCREG_ALEVENT_DC_SYNC0 |
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <ESC_stopinput+0x40>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f240 4004 	movw	r0, #1028	; 0x404
 800164e:	4798      	blx	r3
            ESCREG_ALEVENT_SM2);
   }
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	2000024b 	.word	0x2000024b
 8001658:	20000180 	.word	0x20000180

0800165c <ESC_startoutput>:
 * @param[in] state   = Not used.
 * @return = state unchanged.
 *
 */
uint8_t ESC_startoutput (uint8_t state)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]

   ESC_SMenable (2);
 8001666:	2002      	movs	r0, #2
 8001668:	f7ff fa58 	bl	8000b1c <ESC_SMenable>
   CC_ATOMIC_OR(ESCvar.App.state, APPSTATE_OUTPUT);
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <ESC_startoutput+0x34>)
 800166e:	f3bf 8f5b 	dmb	ish
 8001672:	e8d3 2f4f 	ldrexb	r2, [r3]
 8001676:	f042 0202 	orr.w	r2, r2, #2
 800167a:	e8c3 2f41 	strexb	r1, r2, [r3]
 800167e:	2900      	cmp	r1, #0
 8001680:	d1f7      	bne.n	8001672 <ESC_startoutput+0x16>
 8001682:	f3bf 8f5b 	dmb	ish
   return state;
 8001686:	79fb      	ldrb	r3, [r7, #7]

}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000024b 	.word	0x2000024b

08001694 <ESC_stopoutput>:
 * Set the App.state to APPSTATE_INPUT. Call application hook APP_safeoutput
 * letting the user to set safe state values on outputs.
 *
 */
void ESC_stopoutput (void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
   CC_ATOMIC_AND(ESCvar.App.state, APPSTATE_INPUT);
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <ESC_stopoutput+0x2c>)
 800169a:	f3bf 8f5b 	dmb	ish
 800169e:	e8d3 2f4f 	ldrexb	r2, [r3]
 80016a2:	f002 0201 	and.w	r2, r2, #1
 80016a6:	e8c3 2f41 	strexb	r1, r2, [r3]
 80016aa:	2900      	cmp	r1, #0
 80016ac:	d1f7      	bne.n	800169e <ESC_stopoutput+0xa>
 80016ae:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (2);
 80016b2:	2002      	movs	r0, #2
 80016b4:	f7ff fa4e 	bl	8000b54 <ESC_SMdisable>
   APP_safeoutput ();
 80016b8:	f7fe ffd4 	bl	8000664 <APP_safeoutput>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	2000024b 	.word	0x2000024b

080016c4 <ESC_sm_act_event>:
/** The state handler acting on SyncManager Activation BIT(4)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_sm_act_event (void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
   uint8_t ac, an, as, ax, ax23;

   /* Have at least on Sync Manager  changed */
   if ((ESCvar.ALevent & ESCREG_ALEVENT_SMCHANGE) == 0)
 80016ca:	4b56      	ldr	r3, [pc, #344]	; (8001824 <ESC_sm_act_event+0x160>)
 80016cc:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 809e 	beq.w	8001818 <ESC_sm_act_event+0x154>
      /* nothing to do */
      return;
   }

   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 80016dc:	4b51      	ldr	r3, [pc, #324]	; (8001824 <ESC_sm_act_event+0x160>)
 80016de:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 80016ea:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <ESC_sm_act_event+0x160>)
 80016ec:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	717b      	strb	r3, [r7, #5]
   an = as;
 80016f8:	797b      	ldrb	r3, [r7, #5]
 80016fa:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2b00      	cmp	r3, #0
 8001704:	d102      	bne.n	800170c <ESC_sm_act_event+0x48>
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d107      	bne.n	800171c <ESC_sm_act_event+0x58>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	71bb      	strb	r3, [r7, #6]
   }
   /* Enter SM changed handling for all steps but Init and Boot when Mailboxes
    * is up and running
    */
   if ((as & ESCREG_AL_ALLBUTINITMASK) &&
 800171c:	797b      	ldrb	r3, [r7, #5]
 800171e:	f003 030e 	and.w	r3, r3, #14
 8001722:	2b00      	cmp	r3, #0
 8001724:	d05f      	beq.n	80017e6 <ESC_sm_act_event+0x122>
 8001726:	797b      	ldrb	r3, [r7, #5]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d05c      	beq.n	80017e6 <ESC_sm_act_event+0x122>
       ((as == ESCboot) == 0) && ESCvar.MBXrun)
 800172c:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <ESC_sm_act_event+0x160>)
 800172e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001732:	2b00      	cmp	r3, #0
 8001734:	d057      	beq.n	80017e6 <ESC_sm_act_event+0x122>
   {
      /* Validate Sync Managers, reading the Activation register will
       * acknowledge the SyncManager Activation event making us enter
       * this execution path.
       */
      ax = ESC_checkmbx (as);
 8001736:	797b      	ldrb	r3, [r7, #5]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fa75 	bl	8000c28 <ESC_checkmbx>
 800173e:	4603      	mov	r3, r0
 8001740:	713b      	strb	r3, [r7, #4]
      ax23 = ESC_checkSM23 (as);
 8001742:	797b      	ldrb	r3, [r7, #5]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fe8b 	bl	8001460 <ESC_checkSM23>
 800174a:	4603      	mov	r3, r0
 800174c:	70fb      	strb	r3, [r7, #3]
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 800174e:	79bb      	ldrb	r3, [r7, #6]
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	2b00      	cmp	r3, #0
 8001756:	d004      	beq.n	8001762 <ESC_sm_act_event+0x9e>
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	2b00      	cmp	r3, #0
 8001760:	d040      	beq.n	80017e4 <ESC_sm_act_event+0x120>
         /* if in error then stay there */
      }
      /* Have we been forced to step down to INIT we will stop mailboxes,
       * update AL Status Code and exit ESC_state
       */
      else if (ax == (ESCinit | ESCerror))
 8001762:	793b      	ldrb	r3, [r7, #4]
 8001764:	2b11      	cmp	r3, #17
 8001766:	d11a      	bne.n	800179e <ESC_sm_act_event+0xda>
      {
         /* If we have activated Inputs and Outputs we need to disable them */
         if (CC_ATOMIC_GET(ESCvar.App.state))
 8001768:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <ESC_sm_act_event+0x164>)
 800176a:	f3bf 8f5b 	dmb	ish
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	f3bf 8f5b 	dmb	ish
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <ESC_sm_act_event+0xbe>
         {
            ESC_stopoutput ();
 800177a:	f7ff ff8b 	bl	8001694 <ESC_stopoutput>
            ESC_stopinput ();
 800177e:	f7ff ff4b 	bl	8001618 <ESC_stopinput>
         }
         /* Stop mailboxes and update ALStatus code */
         ESC_stopmbx ();
 8001782:	f7ff fb53 	bl	8000e2c <ESC_stopmbx>
         ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 8001786:	2016      	movs	r0, #22
 8001788:	f7ff f8e4 	bl	8000954 <ESC_ALerror>
         ESCvar.MBXrun = 0;
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <ESC_sm_act_event+0x160>)
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
         ESC_ALstatus (ax);
 8001794:	793b      	ldrb	r3, [r7, #4]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f8f6 	bl	8000988 <ESC_ALstatus>
         return;
 800179c:	e03f      	b.n	800181e <ESC_sm_act_event+0x15a>
      }
      /* Have we been forced to step down to PREOP we will stop inputs
       * and outputs, update AL Status Code and exit ESC_state
       */
      else if (CC_ATOMIC_GET(ESCvar.App.state) && (ax23 == (ESCpreop | ESCerror)))
 800179e:	4b22      	ldr	r3, [pc, #136]	; (8001828 <ESC_sm_act_event+0x164>)
 80017a0:	f3bf 8f5b 	dmb	ish
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	f3bf 8f5b 	dmb	ish
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d035      	beq.n	800181c <ESC_sm_act_event+0x158>
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	2b12      	cmp	r3, #18
 80017b4:	d132      	bne.n	800181c <ESC_sm_act_event+0x158>
      {
         ESC_stopoutput ();
 80017b6:	f7ff ff6d 	bl	8001694 <ESC_stopoutput>
         ESC_stopinput ();
 80017ba:	f7ff ff2d 	bl	8001618 <ESC_stopinput>
         if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <ESC_sm_act_event+0x160>)
 80017c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <ESC_sm_act_event+0x110>
         {
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 80017cc:	201e      	movs	r0, #30
 80017ce:	f7ff f8c1 	bl	8000954 <ESC_ALerror>
 80017d2:	e002      	b.n	80017da <ESC_sm_act_event+0x116>
         }
         else
         {
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 80017d4:	201d      	movs	r0, #29
 80017d6:	f7ff f8bd 	bl	8000954 <ESC_ALerror>
         }
         ESC_ALstatus (ax23);
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff f8d3 	bl	8000988 <ESC_ALstatus>
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 80017e2:	e01b      	b.n	800181c <ESC_sm_act_event+0x158>
 80017e4:	e01a      	b.n	800181c <ESC_sm_act_event+0x158>
      }
   }
   else
   {
      ESC_SMack (0);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f7ff f946 	bl	8000a78 <ESC_SMack>
      ESC_SMack (1);
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff f943 	bl	8000a78 <ESC_SMack>
      ESC_SMack (2);
 80017f2:	2002      	movs	r0, #2
 80017f4:	f7ff f940 	bl	8000a78 <ESC_SMack>
      ESC_SMack (3);
 80017f8:	2003      	movs	r0, #3
 80017fa:	f7ff f93d 	bl	8000a78 <ESC_SMack>
      ESC_SMack (4);
 80017fe:	2004      	movs	r0, #4
 8001800:	f7ff f93a 	bl	8000a78 <ESC_SMack>
      ESC_SMack (5);
 8001804:	2005      	movs	r0, #5
 8001806:	f7ff f937 	bl	8000a78 <ESC_SMack>
      ESC_SMack (6);
 800180a:	2006      	movs	r0, #6
 800180c:	f7ff f934 	bl	8000a78 <ESC_SMack>
      ESC_SMack (7);
 8001810:	2007      	movs	r0, #7
 8001812:	f7ff f931 	bl	8000a78 <ESC_SMack>
 8001816:	e002      	b.n	800181e <ESC_sm_act_event+0x15a>
      return;
 8001818:	bf00      	nop
 800181a:	e000      	b.n	800181e <ESC_sm_act_event+0x15a>
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 800181c:	bf00      	nop
   }
}
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000180 	.word	0x20000180
 8001828:	2000024b 	.word	0x2000024b

0800182c <ESC_state>:
/** The state handler acting on ALControl Bit(0)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_state (void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
   uint8_t ac, an, as;

   /* Do we have a state change request pending */
   if (ESCvar.ALevent & ESCREG_ALEVENT_CONTROL)
 8001832:	4bdc      	ldr	r3, [pc, #880]	; (8001ba4 <ESC_state+0x378>)
 8001834:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8001838:	b29b      	uxth	r3, r3
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 822f 	beq.w	8001ca2 <ESC_state+0x476>
   {
      ESC_read (ESCREG_ALCONTROL, (void *) &ESCvar.ALcontrol,
 8001844:	2202      	movs	r2, #2
 8001846:	49d8      	ldr	r1, [pc, #864]	; (8001ba8 <ESC_state+0x37c>)
 8001848:	f44f 7090 	mov.w	r0, #288	; 0x120
 800184c:	f002 ff0c 	bl	8004668 <ESC_read>
                sizeof (ESCvar.ALcontrol));
      ESCvar.ALcontrol = etohs (ESCvar.ALcontrol);
 8001850:	4bd4      	ldr	r3, [pc, #848]	; (8001ba4 <ESC_state+0x378>)
 8001852:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 8001856:	4bd3      	ldr	r3, [pc, #844]	; (8001ba4 <ESC_state+0x378>)
 8001858:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
   {
      /* nothing to do */
      return;
   }
   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 800185c:	4bd1      	ldr	r3, [pc, #836]	; (8001ba4 <ESC_state+0x378>)
 800185e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 800186a:	4bce      	ldr	r3, [pc, #824]	; (8001ba4 <ESC_state+0x378>)
 800186c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	b2db      	uxtb	r3, r3
 8001878:	717b      	strb	r3, [r7, #5]
   an = as;
 800187a:	797b      	ldrb	r3, [r7, #5]
 800187c:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <ESC_state+0x62>
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d108      	bne.n	80018a0 <ESC_state+0x74>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	b2db      	uxtb	r3, r3
 800189e:	71bb      	strb	r3, [r7, #6]
   }

   /* Error state not acked, leave original */
   if ((an & ESCerror) && ((ac & ESCerror) == 0))
 80018a0:	79bb      	ldrb	r3, [r7, #6]
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <ESC_state+0x8a>
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 81f8 	beq.w	8001ca6 <ESC_state+0x47a>
   {
      return;
   }

   /* Mask high bits ALcommand, low bits ALstatus */
   as = (ac << 4) | (as & 0x0f);
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	b25a      	sxtb	r2, r3
 80018bc:	797b      	ldrb	r3, [r7, #5]
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	4313      	orrs	r3, r2
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	717b      	strb	r3, [r7, #5]

   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 80018ce:	4bb5      	ldr	r3, [pc, #724]	; (8001ba4 <ESC_state+0x378>)
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d005      	beq.n	80018e2 <ESC_state+0xb6>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 80018d6:	4bb3      	ldr	r3, [pc, #716]	; (8001ba4 <ESC_state+0x378>)
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	1db9      	adds	r1, r7, #6
 80018dc:	1d7a      	adds	r2, r7, #5
 80018de:	4610      	mov	r0, r2
 80018e0:	4798      	blx	r3
   }

   /* Switch through the state change requested via AlControl from
    * current state read in AL status
    */
   switch (as)
 80018e2:	797b      	ldrb	r3, [r7, #5]
 80018e4:	3b11      	subs	r3, #17
 80018e6:	2b77      	cmp	r3, #119	; 0x77
 80018e8:	f200 81a2 	bhi.w	8001c30 <ESC_state+0x404>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <ESC_state+0xc8>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	08001c5b 	.word	0x08001c5b
 80018f8:	08001b29 	.word	0x08001b29
 80018fc:	08001b33 	.word	0x08001b33
 8001900:	08001b1b 	.word	0x08001b1b
 8001904:	08001c31 	.word	0x08001c31
 8001908:	08001c31 	.word	0x08001c31
 800190c:	08001c31 	.word	0x08001c31
 8001910:	08001b09 	.word	0x08001b09
 8001914:	08001c31 	.word	0x08001c31
 8001918:	08001c31 	.word	0x08001c31
 800191c:	08001c31 	.word	0x08001c31
 8001920:	08001c31 	.word	0x08001c31
 8001924:	08001c31 	.word	0x08001c31
 8001928:	08001c31 	.word	0x08001c31
 800192c:	08001c31 	.word	0x08001c31
 8001930:	08001c31 	.word	0x08001c31
 8001934:	08001ad5 	.word	0x08001ad5
 8001938:	08001c5b 	.word	0x08001c5b
 800193c:	08001b3d 	.word	0x08001b3d
 8001940:	08001bf3 	.word	0x08001bf3
 8001944:	08001c31 	.word	0x08001c31
 8001948:	08001c31 	.word	0x08001c31
 800194c:	08001c31 	.word	0x08001c31
 8001950:	08001be5 	.word	0x08001be5
 8001954:	08001c31 	.word	0x08001c31
 8001958:	08001c31 	.word	0x08001c31
 800195c:	08001c31 	.word	0x08001c31
 8001960:	08001c31 	.word	0x08001c31
 8001964:	08001c31 	.word	0x08001c31
 8001968:	08001c31 	.word	0x08001c31
 800196c:	08001c31 	.word	0x08001c31
 8001970:	08001c31 	.word	0x08001c31
 8001974:	08001aeb 	.word	0x08001aeb
 8001978:	08001b3d 	.word	0x08001b3d
 800197c:	08001aeb 	.word	0x08001aeb
 8001980:	08001bfd 	.word	0x08001bfd
 8001984:	08001c31 	.word	0x08001c31
 8001988:	08001c31 	.word	0x08001c31
 800198c:	08001c31 	.word	0x08001c31
 8001990:	08001c17 	.word	0x08001c17
 8001994:	08001c31 	.word	0x08001c31
 8001998:	08001c31 	.word	0x08001c31
 800199c:	08001c31 	.word	0x08001c31
 80019a0:	08001c31 	.word	0x08001c31
 80019a4:	08001c31 	.word	0x08001c31
 80019a8:	08001c31 	.word	0x08001c31
 80019ac:	08001c31 	.word	0x08001c31
 80019b0:	08001c31 	.word	0x08001c31
 80019b4:	08001afd 	.word	0x08001afd
 80019b8:	08001b49 	.word	0x08001b49
 80019bc:	08001b3d 	.word	0x08001b3d
 80019c0:	08001b49 	.word	0x08001b49
 80019c4:	08001c31 	.word	0x08001c31
 80019c8:	08001c31 	.word	0x08001c31
 80019cc:	08001c31 	.word	0x08001c31
 80019d0:	08001c27 	.word	0x08001c27
 80019d4:	08001c31 	.word	0x08001c31
 80019d8:	08001c31 	.word	0x08001c31
 80019dc:	08001c31 	.word	0x08001c31
 80019e0:	08001c31 	.word	0x08001c31
 80019e4:	08001c31 	.word	0x08001c31
 80019e8:	08001c31 	.word	0x08001c31
 80019ec:	08001c31 	.word	0x08001c31
 80019f0:	08001c31 	.word	0x08001c31
 80019f4:	08001c31 	.word	0x08001c31
 80019f8:	08001c31 	.word	0x08001c31
 80019fc:	08001c31 	.word	0x08001c31
 8001a00:	08001c31 	.word	0x08001c31
 8001a04:	08001c31 	.word	0x08001c31
 8001a08:	08001c31 	.word	0x08001c31
 8001a0c:	08001c31 	.word	0x08001c31
 8001a10:	08001c31 	.word	0x08001c31
 8001a14:	08001c31 	.word	0x08001c31
 8001a18:	08001c31 	.word	0x08001c31
 8001a1c:	08001c31 	.word	0x08001c31
 8001a20:	08001c31 	.word	0x08001c31
 8001a24:	08001c31 	.word	0x08001c31
 8001a28:	08001c31 	.word	0x08001c31
 8001a2c:	08001c31 	.word	0x08001c31
 8001a30:	08001c31 	.word	0x08001c31
 8001a34:	08001c31 	.word	0x08001c31
 8001a38:	08001c31 	.word	0x08001c31
 8001a3c:	08001c31 	.word	0x08001c31
 8001a40:	08001c31 	.word	0x08001c31
 8001a44:	08001c31 	.word	0x08001c31
 8001a48:	08001c31 	.word	0x08001c31
 8001a4c:	08001c31 	.word	0x08001c31
 8001a50:	08001c31 	.word	0x08001c31
 8001a54:	08001c31 	.word	0x08001c31
 8001a58:	08001c31 	.word	0x08001c31
 8001a5c:	08001c31 	.word	0x08001c31
 8001a60:	08001c31 	.word	0x08001c31
 8001a64:	08001c31 	.word	0x08001c31
 8001a68:	08001c31 	.word	0x08001c31
 8001a6c:	08001c31 	.word	0x08001c31
 8001a70:	08001c31 	.word	0x08001c31
 8001a74:	08001c31 	.word	0x08001c31
 8001a78:	08001c31 	.word	0x08001c31
 8001a7c:	08001c31 	.word	0x08001c31
 8001a80:	08001c31 	.word	0x08001c31
 8001a84:	08001c31 	.word	0x08001c31
 8001a88:	08001c31 	.word	0x08001c31
 8001a8c:	08001c31 	.word	0x08001c31
 8001a90:	08001c31 	.word	0x08001c31
 8001a94:	08001c31 	.word	0x08001c31
 8001a98:	08001c31 	.word	0x08001c31
 8001a9c:	08001c31 	.word	0x08001c31
 8001aa0:	08001c31 	.word	0x08001c31
 8001aa4:	08001c31 	.word	0x08001c31
 8001aa8:	08001c31 	.word	0x08001c31
 8001aac:	08001c31 	.word	0x08001c31
 8001ab0:	08001c31 	.word	0x08001c31
 8001ab4:	08001afd 	.word	0x08001afd
 8001ab8:	08001bd9 	.word	0x08001bd9
 8001abc:	08001b3d 	.word	0x08001b3d
 8001ac0:	08001c09 	.word	0x08001c09
 8001ac4:	08001c31 	.word	0x08001c31
 8001ac8:	08001c31 	.word	0x08001c31
 8001acc:	08001c31 	.word	0x08001c31
 8001ad0:	08001c5b 	.word	0x08001c5b
         break;
      }
      case INIT_TO_PREOP:
      {
         /* get station address */
         ESC_address ();
 8001ad4:	f7ff f85a 	bl	8000b8c <ESC_address>
         COE_initDefaultValues ();
 8001ad8:	f001 fe82 	bl	80037e0 <COE_initDefaultValues>
         an = ESC_startmbx (ac);
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f918 	bl	8000d14 <ESC_startmbx>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71bb      	strb	r3, [r7, #6]
         break;
 8001ae8:	e0ba      	b.n	8001c60 <ESC_state+0x434>
      }
      case INIT_TO_BOOT:
      case BOOT_TO_BOOT:
      {
         /* get station address */
         ESC_address ();
 8001aea:	f7ff f84f 	bl	8000b8c <ESC_address>
         an = ESC_startmbxboot (ac);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff f955 	bl	8000da0 <ESC_startmbxboot>
 8001af6:	4603      	mov	r3, r0
 8001af8:	71bb      	strb	r3, [r7, #6]
         break;
 8001afa:	e0b1      	b.n	8001c60 <ESC_state+0x434>
      }
      case INIT_TO_SAFEOP:
      case INIT_TO_OP:
      {
         an = ESCinit | ESCerror;
 8001afc:	2311      	movs	r3, #17
 8001afe:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8001b00:	2011      	movs	r0, #17
 8001b02:	f7fe ff27 	bl	8000954 <ESC_ALerror>
         break;
 8001b06:	e0ab      	b.n	8001c60 <ESC_state+0x434>
      }
      case OP_TO_INIT:
      {
         ESC_stopoutput ();
 8001b08:	f7ff fdc4 	bl	8001694 <ESC_stopoutput>
         ESC_stopinput ();
 8001b0c:	f7ff fd84 	bl	8001618 <ESC_stopinput>
         ESC_stopmbx ();
 8001b10:	f7ff f98c 	bl	8000e2c <ESC_stopmbx>
         an = ESCinit;
 8001b14:	2301      	movs	r3, #1
 8001b16:	71bb      	strb	r3, [r7, #6]
         break;
 8001b18:	e0a2      	b.n	8001c60 <ESC_state+0x434>
      }
      case SAFEOP_TO_INIT:
      {
         ESC_stopinput ();
 8001b1a:	f7ff fd7d 	bl	8001618 <ESC_stopinput>
         ESC_stopmbx ();
 8001b1e:	f7ff f985 	bl	8000e2c <ESC_stopmbx>
         an = ESCinit;
 8001b22:	2301      	movs	r3, #1
 8001b24:	71bb      	strb	r3, [r7, #6]
         break;
 8001b26:	e09b      	b.n	8001c60 <ESC_state+0x434>
      }
      case PREOP_TO_INIT:
      {
         ESC_stopmbx ();
 8001b28:	f7ff f980 	bl	8000e2c <ESC_stopmbx>
         an = ESCinit;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	71bb      	strb	r3, [r7, #6]
         break;
 8001b30:	e096      	b.n	8001c60 <ESC_state+0x434>
      }
      case BOOT_TO_INIT:
      {
         ESC_stopmbx ();
 8001b32:	f7ff f97b 	bl	8000e2c <ESC_stopmbx>
         an = ESCinit;
 8001b36:	2301      	movs	r3, #1
 8001b38:	71bb      	strb	r3, [r7, #6]
         break;
 8001b3a:	e091      	b.n	8001c60 <ESC_state+0x434>
      case PREOP_TO_BOOT:
      case BOOT_TO_PREOP:
      case BOOT_TO_SAFEOP:
      case BOOT_TO_OP:
      {
         an = ESCpreop | ESCerror;
 8001b3c:	2312      	movs	r3, #18
 8001b3e:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8001b40:	2011      	movs	r0, #17
 8001b42:	f7fe ff07 	bl	8000954 <ESC_ALerror>
         break;
 8001b46:	e08b      	b.n	8001c60 <ESC_state+0x434>
      }
      case PREOP_TO_SAFEOP:
      case SAFEOP_TO_SAFEOP:
      {
         ESCvar.ESC_SM2_sml = sizeOfPDO (RX_PDO_OBJIDX, &ESCvar.sm2mappings,
 8001b48:	2304      	movs	r3, #4
 8001b4a:	4a18      	ldr	r2, [pc, #96]	; (8001bac <ESC_state+0x380>)
 8001b4c:	4918      	ldr	r1, [pc, #96]	; (8001bb0 <ESC_state+0x384>)
 8001b4e:	f641 4012 	movw	r0, #7186	; 0x1c12
 8001b52:	f000 f9a7 	bl	8001ea4 <sizeOfPDO>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <ESC_state+0x378>)
 8001b5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
                                         SMmap2, MAX_MAPPINGS_SM2);
         if (ESCvar.sm2mappings < 0)
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <ESC_state+0x378>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	da05      	bge.n	8001b76 <ESC_state+0x34a>
         {
            an = ESCpreop | ESCerror;
 8001b6a:	2312      	movs	r3, #18
 8001b6c:	71bb      	strb	r3, [r7, #6]
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 8001b6e:	201d      	movs	r0, #29
 8001b70:	f7fe fef0 	bl	8000954 <ESC_ALerror>
            break;
 8001b74:	e074      	b.n	8001c60 <ESC_state+0x434>
         }

         ESCvar.ESC_SM3_sml = sizeOfPDO (TX_PDO_OBJIDX, &ESCvar.sm3mappings,
 8001b76:	2307      	movs	r3, #7
 8001b78:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <ESC_state+0x388>)
 8001b7a:	490f      	ldr	r1, [pc, #60]	; (8001bb8 <ESC_state+0x38c>)
 8001b7c:	f641 4013 	movw	r0, #7187	; 0x1c13
 8001b80:	f000 f990 	bl	8001ea4 <sizeOfPDO>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <ESC_state+0x378>)
 8001b8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
                                         SMmap3, MAX_MAPPINGS_SM3);
         if (ESCvar.sm3mappings < 0)
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <ESC_state+0x378>)
 8001b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	da11      	bge.n	8001bbc <ESC_state+0x390>
         {
            an = ESCpreop | ESCerror;
 8001b98:	2312      	movs	r3, #18
 8001b9a:	71bb      	strb	r3, [r7, #6]
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 8001b9c:	201e      	movs	r0, #30
 8001b9e:	f7fe fed9 	bl	8000954 <ESC_ALerror>
            break;
 8001ba2:	e05d      	b.n	8001c60 <ESC_state+0x434>
 8001ba4:	20000180 	.word	0x20000180
 8001ba8:	200001f2 	.word	0x200001f2
 8001bac:	200003cc 	.word	0x200003cc
 8001bb0:	20000210 	.word	0x20000210
 8001bb4:	200003ec 	.word	0x200003ec
 8001bb8:	20000214 	.word	0x20000214
         }

         an = ESC_startinput (ac);
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fcbc 	bl	800153c <ESC_startinput>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	71bb      	strb	r3, [r7, #6]
         if (an == ac)
 8001bc8:	79bb      	ldrb	r3, [r7, #6]
 8001bca:	79fa      	ldrb	r2, [r7, #7]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d146      	bne.n	8001c5e <ESC_state+0x432>
         {
            ESC_SMenable (2);
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f7fe ffa3 	bl	8000b1c <ESC_SMenable>
         }
         break;
 8001bd6:	e042      	b.n	8001c5e <ESC_state+0x432>
      }
      case PREOP_TO_OP:
      {
         an = ESCpreop | ESCerror;
 8001bd8:	2312      	movs	r3, #18
 8001bda:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8001bdc:	2011      	movs	r0, #17
 8001bde:	f7fe feb9 	bl	8000954 <ESC_ALerror>
         break;
 8001be2:	e03d      	b.n	8001c60 <ESC_state+0x434>
      }
      case OP_TO_PREOP:
      {
         ESC_stopoutput ();
 8001be4:	f7ff fd56 	bl	8001694 <ESC_stopoutput>
         ESC_stopinput ();
 8001be8:	f7ff fd16 	bl	8001618 <ESC_stopinput>
         an = ESCpreop;
 8001bec:	2302      	movs	r3, #2
 8001bee:	71bb      	strb	r3, [r7, #6]
         break;
 8001bf0:	e036      	b.n	8001c60 <ESC_state+0x434>
      }
      case SAFEOP_TO_PREOP:
      {
         ESC_stopinput ();
 8001bf2:	f7ff fd11 	bl	8001618 <ESC_stopinput>
         an = ESCpreop;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	71bb      	strb	r3, [r7, #6]
         break;
 8001bfa:	e031      	b.n	8001c60 <ESC_state+0x434>
      }
      case SAFEOP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 8001bfc:	2314      	movs	r3, #20
 8001bfe:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8001c00:	2011      	movs	r0, #17
 8001c02:	f7fe fea7 	bl	8000954 <ESC_ALerror>
         break;
 8001c06:	e02b      	b.n	8001c60 <ESC_state+0x434>
      }
      case SAFEOP_TO_OP:
      {
         an = ESC_startoutput (ac);
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fd26 	bl	800165c <ESC_startoutput>
 8001c10:	4603      	mov	r3, r0
 8001c12:	71bb      	strb	r3, [r7, #6]
         break;
 8001c14:	e024      	b.n	8001c60 <ESC_state+0x434>
      }
      case OP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 8001c16:	2314      	movs	r3, #20
 8001c18:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8001c1a:	2011      	movs	r0, #17
 8001c1c:	f7fe fe9a 	bl	8000954 <ESC_ALerror>
         ESC_stopoutput ();
 8001c20:	f7ff fd38 	bl	8001694 <ESC_stopoutput>
         break;
 8001c24:	e01c      	b.n	8001c60 <ESC_state+0x434>
      }
      case OP_TO_SAFEOP:
      {
         an = ESCsafeop;
 8001c26:	2304      	movs	r3, #4
 8001c28:	71bb      	strb	r3, [r7, #6]
         ESC_stopoutput ();
 8001c2a:	f7ff fd33 	bl	8001694 <ESC_stopoutput>
         break;
 8001c2e:	e017      	b.n	8001c60 <ESC_state+0x434>
      }
      default:
      {
         if (an == ESCop)
 8001c30:	79bb      	ldrb	r3, [r7, #6]
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d103      	bne.n	8001c3e <ESC_state+0x412>
         {
            ESC_stopoutput ();
 8001c36:	f7ff fd2d 	bl	8001694 <ESC_stopoutput>
            an = ESCsafeop;
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	71bb      	strb	r3, [r7, #6]
         }
         if (as == ESCsafeop)
 8001c3e:	797b      	ldrb	r3, [r7, #5]
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d101      	bne.n	8001c48 <ESC_state+0x41c>
         {
            ESC_stopinput ();
 8001c44:	f7ff fce8 	bl	8001618 <ESC_stopinput>
         }
         an |= ESCerror;
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_UNKNOWNSTATE);
 8001c52:	2012      	movs	r0, #18
 8001c54:	f7fe fe7e 	bl	8000954 <ESC_ALerror>
         break;
 8001c58:	e002      	b.n	8001c60 <ESC_state+0x434>
         break;
 8001c5a:	bf00      	nop
 8001c5c:	e000      	b.n	8001c60 <ESC_state+0x434>
         break;
 8001c5e:	bf00      	nop
      }
   }

   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <ESC_state+0x484>)
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <ESC_state+0x448>
   {
      ESCvar.post_state_change_hook (&as, &an);
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <ESC_state+0x484>)
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	1db9      	adds	r1, r7, #6
 8001c6e:	1d7a      	adds	r2, r7, #5
 8001c70:	4610      	mov	r0, r2
 8001c72:	4798      	blx	r3
   }

   if (!(an & ESCerror) && (ESCvar.ALerror))
 8001c74:	79bb      	ldrb	r3, [r7, #6]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d107      	bne.n	8001c8e <ESC_state+0x462>
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <ESC_state+0x484>)
 8001c80:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <ESC_state+0x462>
   {
      /* clear error */
      ESC_ALerror (ALERR_NONE);
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7fe fe63 	bl	8000954 <ESC_ALerror>
   }

   ESC_ALstatus (an);
 8001c8e:	79bb      	ldrb	r3, [r7, #6]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fe79 	bl	8000988 <ESC_ALstatus>
   DPRINT ("state %x\n", an);
 8001c96:	79bb      	ldrb	r3, [r7, #6]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <ESC_state+0x488>)
 8001c9c:	f008 fe08 	bl	800a8b0 <iprintf>
 8001ca0:	e002      	b.n	8001ca8 <ESC_state+0x47c>
      return;
 8001ca2:	bf00      	nop
 8001ca4:	e000      	b.n	8001ca8 <ESC_state+0x47c>
      return;
 8001ca6:	bf00      	nop
}
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000180 	.word	0x20000180
 8001cb4:	0800b2e0 	.word	0x0800b2e0

08001cb8 <ESC_config>:
 *
 * @param[in] cfg   = Pointer to the Application configuration variable
 * holding application specific details. Data is copied.
 */
void ESC_config (esc_cfg_t * cfg)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
   static sm_cfg_t mb1 = {MBX1_sma, MBX1_sml, MBX1_sme, MBX1_smc, 0};
   static sm_cfg_t mbboot0 = {MBX0_sma_b, MBX0_sml_b, MBX0_sme_b, MBX0_smc_b, 0};
   static sm_cfg_t mbboot1 = {MBX1_sma_b, MBX1_sml_b, MBX1_sme_b, MBX1_smc_b, 0};

   /* Configure stack */
   ESCvar.use_interrupt = cfg->use_interrupt;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4a2e      	ldr	r2, [pc, #184]	; (8001d80 <ESC_config+0xc8>)
 8001cc6:	6013      	str	r3, [r2, #0]
   ESCvar.watchdogcnt = cfg->watchdog_cnt;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4a2c      	ldr	r2, [pc, #176]	; (8001d80 <ESC_config+0xc8>)
 8001cce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

   ESCvar.mb[0] = mb0;
 8001cd2:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <ESC_config+0xc8>)
 8001cd4:	4a2b      	ldr	r2, [pc, #172]	; (8001d84 <ESC_config+0xcc>)
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cdc:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mb[1] = mb1;
 8001ce0:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <ESC_config+0xc8>)
 8001ce2:	4a29      	ldr	r2, [pc, #164]	; (8001d88 <ESC_config+0xd0>)
 8001ce4:	330c      	adds	r3, #12
 8001ce6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cea:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mbboot[0] = mbboot0;
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <ESC_config+0xc8>)
 8001cf0:	4a26      	ldr	r2, [pc, #152]	; (8001d8c <ESC_config+0xd4>)
 8001cf2:	3314      	adds	r3, #20
 8001cf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cf8:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mbboot[1] = mbboot1;
 8001cfc:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <ESC_config+0xc8>)
 8001cfe:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <ESC_config+0xd8>)
 8001d00:	331c      	adds	r3, #28
 8001d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d06:	e883 0003 	stmia.w	r3, {r0, r1}

   ESCvar.set_defaults_hook = cfg->set_defaults_hook;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	4a1c      	ldr	r2, [pc, #112]	; (8001d80 <ESC_config+0xc8>)
 8001d10:	6253      	str	r3, [r2, #36]	; 0x24
   ESCvar.pre_state_change_hook = cfg->pre_state_change_hook;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	4a1a      	ldr	r2, [pc, #104]	; (8001d80 <ESC_config+0xc8>)
 8001d18:	6293      	str	r3, [r2, #40]	; 0x28
   ESCvar.post_state_change_hook = cfg->post_state_change_hook;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4a18      	ldr	r2, [pc, #96]	; (8001d80 <ESC_config+0xc8>)
 8001d20:	62d3      	str	r3, [r2, #44]	; 0x2c
   ESCvar.application_hook = cfg->application_hook;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	4a16      	ldr	r2, [pc, #88]	; (8001d80 <ESC_config+0xc8>)
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
   ESCvar.safeoutput_override = cfg->safeoutput_override;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <ESC_config+0xc8>)
 8001d30:	6353      	str	r3, [r2, #52]	; 0x34
   ESCvar.pre_object_download_hook = cfg->pre_object_download_hook;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <ESC_config+0xc8>)
 8001d38:	6393      	str	r3, [r2, #56]	; 0x38
   ESCvar.post_object_download_hook = cfg->post_object_download_hook;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <ESC_config+0xc8>)
 8001d40:	63d3      	str	r3, [r2, #60]	; 0x3c
   ESCvar.rxpdo_override = cfg->rxpdo_override;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <ESC_config+0xc8>)
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
   ESCvar.txpdo_override = cfg->txpdo_override;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <ESC_config+0xc8>)
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
   ESCvar.esc_hw_interrupt_enable = cfg->esc_hw_interrupt_enable;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <ESC_config+0xc8>)
 8001d58:	6493      	str	r3, [r2, #72]	; 0x48
   ESCvar.esc_hw_interrupt_disable = cfg->esc_hw_interrupt_disable;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5e:	4a08      	ldr	r2, [pc, #32]	; (8001d80 <ESC_config+0xc8>)
 8001d60:	64d3      	str	r3, [r2, #76]	; 0x4c
   ESCvar.esc_hw_eep_handler = cfg->esc_hw_eep_handler;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d66:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <ESC_config+0xc8>)
 8001d68:	6513      	str	r3, [r2, #80]	; 0x50
   ESCvar.esc_check_dc_handler = cfg->esc_check_dc_handler;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <ESC_config+0xc8>)
 8001d70:	6553      	str	r3, [r2, #84]	; 0x54
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000180 	.word	0x20000180
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000008 	.word	0x20000008
 8001d8c:	20000010 	.word	0x20000010
 8001d90:	20000018 	.word	0x20000018

08001d94 <SDO_findsubindex>:
 * @param[in] nidx   = local array index of object we want to find sub-index to
 * @param[in] subindex   = value on sub-index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int16_t SDO_findsubindex (int16_t nidx, uint8_t subindex)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	460a      	mov	r2, r1
 8001d9e:	80fb      	strh	r3, [r7, #6]
 8001da0:	4613      	mov	r3, r2
 8001da2:	717b      	strb	r3, [r7, #5]
   const _objd *objd;
   int16_t n = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	82fb      	strh	r3, [r7, #22]
   uint8_t maxsub;
   objd = SDOobjects[nidx].objdesc;
 8001da8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dac:	4924      	ldr	r1, [pc, #144]	; (8001e40 <SDO_findsubindex+0xac>)
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	1a9b      	subs	r3, r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	440b      	add	r3, r1
 8001db8:	3308      	adds	r3, #8
 8001dba:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001dbe:	613b      	str	r3, [r7, #16]
   maxsub = SDOobjects[nidx].maxsub;
 8001dc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001dc4:	491e      	ldr	r1, [pc, #120]	; (8001e40 <SDO_findsubindex+0xac>)
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	1a9b      	subs	r3, r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	440b      	add	r3, r1
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	73fb      	strb	r3, [r7, #15]
   while (((objd + n)->subindex < subindex) && (n < maxsub))
 8001dd6:	e005      	b.n	8001de4 <SDO_findsubindex+0x50>
   {
      n++;
 8001dd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	3301      	adds	r3, #1
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	82fb      	strh	r3, [r7, #22]
   while (((objd + n)->subindex < subindex) && (n < maxsub))
 8001de4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	461a      	mov	r2, r3
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4413      	add	r3, r2
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	797b      	ldrb	r3, [r7, #5]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d204      	bcs.n	8001e0c <SDO_findsubindex+0x78>
 8001e02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	dbe5      	blt.n	8001dd8 <SDO_findsubindex+0x44>
   }
   if ((objd + n)->subindex != subindex)
 8001e0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	797b      	ldrb	r3, [r7, #5]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d002      	beq.n	8001e30 <SDO_findsubindex+0x9c>
   {
      return -1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2e:	e001      	b.n	8001e34 <SDO_findsubindex+0xa0>
   }
   return n;
 8001e30:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	0800bd60 	.word	0x0800bd60

08001e44 <SDO_findobject>:
 *
 * @param[in] index   = value on index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int32_t SDO_findobject (uint16_t index)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	80fb      	strh	r3, [r7, #6]
   int32_t n = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 8001e52:	e002      	b.n	8001e5a <SDO_findobject+0x16>
   {
      n++;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3301      	adds	r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 8001e5a:	4911      	ldr	r1, [pc, #68]	; (8001ea0 <SDO_findobject+0x5c>)
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	440b      	add	r3, r1
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	88fa      	ldrh	r2, [r7, #6]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d8f0      	bhi.n	8001e54 <SDO_findobject+0x10>
   }
   if (SDOobjects[n].index != index)
 8001e72:	490b      	ldr	r1, [pc, #44]	; (8001ea0 <SDO_findobject+0x5c>)
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	1a9b      	subs	r3, r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	440b      	add	r3, r1
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	88fa      	ldrh	r2, [r7, #6]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d002      	beq.n	8001e90 <SDO_findobject+0x4c>
   {
      return -1;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	e000      	b.n	8001e92 <SDO_findobject+0x4e>
   }
   return n;
 8001e90:	68fb      	ldr	r3, [r7, #12]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	0800bd60 	.word	0x0800bd60

08001ea4 <sizeOfPDO>:
 * @param[out] max_mappings = max number of mapped objects in SM
 * @return size of RxPDO or TxPDOs in Bytes.
 */
uint16_t sizeOfPDO (uint16_t index, int * nmappings, _SMmap * mappings,
                    int max_mappings)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b090      	sub	sp, #64	; 0x40
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	81fb      	strh	r3, [r7, #14]
   uint16_t offset = 0, hobj;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
   uint8_t si, sic, c;
   int16_t nidx;
   const _objd *objd;
   const _objd *objd1c1x;
   int mapIx = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	63bb      	str	r3, [r7, #56]	; 0x38

   if ((index != RX_PDO_OBJIDX) && (index != TX_PDO_OBJIDX))
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f641 4212 	movw	r2, #7186	; 0x1c12
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d006      	beq.n	8001ed4 <sizeOfPDO+0x30>
 8001ec6:	89fb      	ldrh	r3, [r7, #14]
 8001ec8:	f641 4213 	movw	r2, #7187	; 0x1c13
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d001      	beq.n	8001ed4 <sizeOfPDO+0x30>
   {
      return 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e130      	b.n	8002136 <sizeOfPDO+0x292>
   }

   nidx = SDO_findobject (index);
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ffb4 	bl	8001e44 <SDO_findobject>
 8001edc:	4603      	mov	r3, r0
 8001ede:	867b      	strh	r3, [r7, #50]	; 0x32
   if(nidx < 0)
 8001ee0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	da01      	bge.n	8001eec <sizeOfPDO+0x48>
   {
      return 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e124      	b.n	8002136 <sizeOfPDO+0x292>
   }

   objd1c1x = SDOobjects[nidx].objdesc;
 8001eec:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001ef0:	4993      	ldr	r1, [pc, #588]	; (8002140 <sizeOfPDO+0x29c>)
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	440b      	add	r3, r1
 8001efc:	3308      	adds	r3, #8
 8001efe:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c

   si = OBJ_VALUE_FETCH (si, objd1c1x[0]);
 8001f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <sizeOfPDO+0x70>
 8001f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	e002      	b.n	8001f1a <sizeOfPDO+0x76>
 8001f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   if (si)
 8001f1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 80f9 	beq.w	800211a <sizeOfPDO+0x276>
   {
      for (sic = 1; sic <= si; sic++)
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001f2e:	e0ed      	b.n	800210c <sizeOfPDO+0x268>
      {
         hobj = OBJ_VALUE_FETCH (hobj, objd1c1x[sic]);
 8001f30:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f40:	4413      	add	r3, r2
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00b      	beq.n	8001f60 <sizeOfPDO+0xbc>
 8001f48:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	461a      	mov	r2, r3
 8001f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f58:	4413      	add	r3, r2
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	e00a      	b.n	8001f76 <sizeOfPDO+0xd2>
 8001f60:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f70:	4413      	add	r3, r2
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	853b      	strh	r3, [r7, #40]	; 0x28
         nidx = SDO_findobject (hobj);
 8001f78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff62 	bl	8001e44 <SDO_findobject>
 8001f80:	4603      	mov	r3, r0
 8001f82:	867b      	strh	r3, [r7, #50]	; 0x32
         if (nidx >= 0)
 8001f84:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f2c0 80ba 	blt.w	8002102 <sizeOfPDO+0x25e>
         {
            uint8_t maxsub;

            objd = SDOobjects[nidx].objdesc;
 8001f8e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001f92:	496b      	ldr	r1, [pc, #428]	; (8002140 <sizeOfPDO+0x29c>)
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3308      	adds	r3, #8
 8001fa0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
            maxsub = OBJ_VALUE_FETCH (maxsub, objd[0]);
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <sizeOfPDO+0x112>
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	e002      	b.n	8001fbc <sizeOfPDO+0x118>
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            for (c = 1; c <= maxsub; c++)
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001fc6:	e095      	b.n	80020f4 <sizeOfPDO+0x250>
            {
               uint32_t value = OBJ_VALUE_FETCH (value, objd[c]);
 8001fc8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	4413      	add	r3, r2
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00b      	beq.n	8001ff8 <sizeOfPDO+0x154>
 8001fe0:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	461a      	mov	r2, r3
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	4413      	add	r3, r2
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	e009      	b.n	800200c <sizeOfPDO+0x168>
 8001ff8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	461a      	mov	r2, r3
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	4413      	add	r3, r2
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	61fb      	str	r3, [r7, #28]
               uint8_t bitlength = value & 0xFF;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	76fb      	strb	r3, [r7, #27]

               if (max_mappings > 0)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	dd63      	ble.n	80020e0 <sizeOfPDO+0x23c>
               {
                  uint16_t index = value >> 16;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	0c1b      	lsrs	r3, r3, #16
 800201c:	833b      	strh	r3, [r7, #24]
                  uint8_t subindex = (value >> 8) & 0xFF;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	75fb      	strb	r3, [r7, #23]
                  const _objd * mapping;

                  if (mapIx == max_mappings)
 8002024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d105      	bne.n	8002038 <sizeOfPDO+0x194>
                  {
                     /* Too many mapped objects */
                     *nmappings = -1;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f04f 32ff 	mov.w	r2, #4294967295
 8002032:	601a      	str	r2, [r3, #0]
                     return 0;
 8002034:	2300      	movs	r3, #0
 8002036:	e07e      	b.n	8002136 <sizeOfPDO+0x292>
                  }

                  DPRINT ("%04x:%02x @ %d\n", index, subindex, offset);
 8002038:	8b39      	ldrh	r1, [r7, #24]
 800203a:	7dfa      	ldrb	r2, [r7, #23]
 800203c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800203e:	4841      	ldr	r0, [pc, #260]	; (8002144 <sizeOfPDO+0x2a0>)
 8002040:	f008 fc36 	bl	800a8b0 <iprintf>

                  if (index == 0 && subindex == 0)
 8002044:	8b3b      	ldrh	r3, [r7, #24]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d105      	bne.n	8002056 <sizeOfPDO+0x1b2>
 800204a:	7dfb      	ldrb	r3, [r7, #23]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <sizeOfPDO+0x1b2>
                  {
                     /* Padding element */
                     mapping = NULL;
 8002050:	2300      	movs	r3, #0
 8002052:	637b      	str	r3, [r7, #52]	; 0x34
 8002054:	e036      	b.n	80020c4 <sizeOfPDO+0x220>
                  }
                  else
                  {
                     nidx = SDO_findobject (index);
 8002056:	8b3b      	ldrh	r3, [r7, #24]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fef3 	bl	8001e44 <SDO_findobject>
 800205e:	4603      	mov	r3, r0
 8002060:	867b      	strh	r3, [r7, #50]	; 0x32
                     if (nidx >= 0)
 8002062:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002066:	2b00      	cmp	r3, #0
 8002068:	db26      	blt.n	80020b8 <sizeOfPDO+0x214>
                     {
                        int16_t nsub;

                        nsub = SDO_findsubindex (nidx, subindex);
 800206a:	7dfa      	ldrb	r2, [r7, #23]
 800206c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002070:	4611      	mov	r1, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fe8e 	bl	8001d94 <SDO_findsubindex>
 8002078:	4603      	mov	r3, r0
 800207a:	82bb      	strh	r3, [r7, #20]
                        if (nsub < 0)
 800207c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	da05      	bge.n	8002090 <sizeOfPDO+0x1ec>
                        {
                           /* Mapped subindex does not exist */
                           *nmappings = -1;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f04f 32ff 	mov.w	r2, #4294967295
 800208a:	601a      	str	r2, [r3, #0]
                           return 0;
 800208c:	2300      	movs	r3, #0
 800208e:	e052      	b.n	8002136 <sizeOfPDO+0x292>
                        }

                        mapping = &SDOobjects[nidx].objdesc[nsub];
 8002090:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002094:	492a      	ldr	r1, [pc, #168]	; (8002140 <sizeOfPDO+0x29c>)
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	440b      	add	r3, r1
 80020a0:	3308      	adds	r3, #8
 80020a2:	f8d3 1002 	ldr.w	r1, [r3, #2]
 80020a6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	637b      	str	r3, [r7, #52]	; 0x34
 80020b6:	e005      	b.n	80020c4 <sizeOfPDO+0x220>
                     }
                     else
                     {
                        /* Mapped index does not exist */
                        *nmappings = -1;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f04f 32ff 	mov.w	r2, #4294967295
 80020be:	601a      	str	r2, [r3, #0]
                        return 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	e038      	b.n	8002136 <sizeOfPDO+0x292>
                     }
                  }

                  mappings[mapIx].obj = mapping;
 80020c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020ce:	601a      	str	r2, [r3, #0]
                  mappings[mapIx++].offset = offset;
 80020d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80020de:	809a      	strh	r2, [r3, #4]
               }

               offset += bitlength;
 80020e0:	7efb      	ldrb	r3, [r7, #27]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80020e6:	4413      	add	r3, r2
 80020e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
            for (c = 1; c <= maxsub; c++)
 80020ea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80020ee:	3301      	adds	r3, #1
 80020f0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80020f4:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80020f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020fc:	429a      	cmp	r2, r3
 80020fe:	f67f af63 	bls.w	8001fc8 <sizeOfPDO+0x124>
      for (sic = 1; sic <= si; sic++)
 8002102:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002106:	3301      	adds	r3, #1
 8002108:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800210c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002110:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002114:	429a      	cmp	r2, r3
 8002116:	f67f af0b 	bls.w	8001f30 <sizeOfPDO+0x8c>
            }
         }
      }
   }

   if (max_mappings > 0)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	dd03      	ble.n	8002128 <sizeOfPDO+0x284>
   {
      *nmappings = mapIx;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e002      	b.n	800212e <sizeOfPDO+0x28a>
   }
   else
   {
      *nmappings = 0;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
   }

   return BITS2BYTES (offset);
 800212e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002130:	3307      	adds	r3, #7
 8002132:	10db      	asrs	r3, r3, #3
 8002134:	b29b      	uxth	r3, r3
}
 8002136:	4618      	mov	r0, r3
 8002138:	3740      	adds	r7, #64	; 0x40
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	0800bd60 	.word	0x0800bd60
 8002144:	0800b2f0 	.word	0x0800b2f0

08002148 <copy2mbx>:
 * @param[in] source = pointer to source
 * @param[in] dest   = pointer to destination
 * @param[in] size   = Size to copy
 */
void copy2mbx (void *source, void *dest, uint16_t size)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]
   memcpy (dest, source, size);
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	461a      	mov	r2, r3
 800215a:	68f9      	ldr	r1, [r7, #12]
 800215c:	68b8      	ldr	r0, [r7, #8]
 800215e:	f008 f8cd 	bl	800a2fc <memcpy>
}
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <SDO_abort>:
 * @param[in] index      = index of object causing abort reply
 * @param[in] sub-index  = sub-index of object causing abort reply
 * @param[in] abortcode  = abort code to send in reply
 */
void SDO_abort (uint16_t index, uint8_t subindex, uint32_t abortcode)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	603a      	str	r2, [r7, #0]
 8002176:	80fb      	strh	r3, [r7, #6]
 8002178:	460b      	mov	r3, r1
 800217a:	717b      	strb	r3, [r7, #5]
   uint8_t MBXout;
   _COEsdo *coeres;
   MBXout = ESC_claimbuffer ();
 800217c:	f7fe ff46 	bl	800100c <ESC_claimbuffer>
 8002180:	4603      	mov	r3, r0
 8002182:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d02c      	beq.n	80021e4 <SDO_abort+0x78>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	4a17      	ldr	r2, [pc, #92]	; (80021ec <SDO_abort+0x80>)
 800218e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002190:	fb02 f303 	mul.w	r3, r2, r3
 8002194:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <SDO_abort+0x84>)
 8002196:	4413      	add	r3, r2
 8002198:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2200      	movs	r2, #0
 800219e:	f042 020a 	orr.w	r2, r2, #10
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	2200      	movs	r2, #0
 80021a6:	705a      	strb	r2, [r3, #1]
      coeres->mbxheader.mbxtype = MBXCOE;
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	7953      	ldrb	r3, [r2, #5]
 80021ac:	2103      	movs	r1, #3
 80021ae:	f361 0303 	bfi	r3, r1, #0, #4
 80021b2:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2200      	movs	r2, #0
 80021b8:	719a      	strb	r2, [r3, #6]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f042 0220 	orr.w	r2, r2, #32
 80021c0:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDOREQUEST << 12));
      coeres->index = htoes (index);
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	88fa      	ldrh	r2, [r7, #6]
 80021c6:	f8a3 2009 	strh.w	r2, [r3, #9]
      coeres->subindex = subindex;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	797a      	ldrb	r2, [r7, #5]
 80021ce:	72da      	strb	r2, [r3, #11]
      coeres->command = COE_COMMAND_SDOABORT;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2280      	movs	r2, #128	; 0x80
 80021d4:	721a      	strb	r2, [r3, #8]
      coeres->size = htoel (abortcode);
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	60da      	str	r2, [r3, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <SDO_abort+0x88>)
 80021e0:	2103      	movs	r1, #3
 80021e2:	54d1      	strb	r1, [r2, r3]
   }
}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000180 	.word	0x20000180
 80021f0:	2000024c 	.word	0x2000024c
 80021f4:	20000424 	.word	0x20000424

080021f8 <SDO_upload>:
/** Function for responding on requested SDO Upload, sending the content
 *  requested in a free Mailbox buffer. Depending of size of data expedited,
 *  normal or segmented transfer is used. On error an SDO Abort will be sent.
 */
void SDO_upload (void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
   int16_t nidx, nsub;
   uint8_t MBXout;
   uint32_t size;
   uint8_t dss;
   const _objd *objd;
   coesdo = (_COEsdo *) &MBX[0];
 80021fe:	4b8d      	ldr	r3, [pc, #564]	; (8002434 <SDO_upload+0x23c>)
 8002200:	617b      	str	r3, [r7, #20]
   index = etohs (coesdo->index);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	7a5a      	ldrb	r2, [r3, #9]
 8002206:	7a9b      	ldrb	r3, [r3, #10]
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	4313      	orrs	r3, r2
 800220c:	827b      	strh	r3, [r7, #18]
   subindex = coesdo->subindex;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	7adb      	ldrb	r3, [r3, #11]
 8002212:	747b      	strb	r3, [r7, #17]
   nidx = SDO_findobject (index);
 8002214:	8a7b      	ldrh	r3, [r7, #18]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fe14 	bl	8001e44 <SDO_findobject>
 800221c:	4603      	mov	r3, r0
 800221e:	81fb      	strh	r3, [r7, #14]
   if (nidx >= 0)
 8002220:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002224:	2b00      	cmp	r3, #0
 8002226:	f2c0 80f3 	blt.w	8002410 <SDO_upload+0x218>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 800222a:	7c7a      	ldrb	r2, [r7, #17]
 800222c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fdae 	bl	8001d94 <SDO_findsubindex>
 8002238:	4603      	mov	r3, r0
 800223a:	81bb      	strh	r3, [r7, #12]
      if (nsub >= 0)
 800223c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f2c0 80de 	blt.w	8002402 <SDO_upload+0x20a>
      {
         objd = SDOobjects[nidx].objdesc;
 8002246:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800224a:	497b      	ldr	r1, [pc, #492]	; (8002438 <SDO_upload+0x240>)
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	440b      	add	r3, r1
 8002256:	3308      	adds	r3, #8
 8002258:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800225c:	60bb      	str	r3, [r7, #8]
         MBXout = ESC_claimbuffer ();
 800225e:	f7fe fed5 	bl	800100c <ESC_claimbuffer>
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
         if (MBXout)
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80d7 	beq.w	800241c <SDO_upload+0x224>
         {
            coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	4a72      	ldr	r2, [pc, #456]	; (800243c <SDO_upload+0x244>)
 8002272:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	4a6e      	ldr	r2, [pc, #440]	; (8002434 <SDO_upload+0x23c>)
 800227a:	4413      	add	r3, r2
 800227c:	603b      	str	r3, [r7, #0]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2200      	movs	r2, #0
 8002282:	f042 020a 	orr.w	r2, r2, #10
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	2200      	movs	r2, #0
 800228a:	705a      	strb	r2, [r3, #1]
            coeres->mbxheader.mbxtype = MBXCOE;
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	7953      	ldrb	r3, [r2, #5]
 8002290:	2103      	movs	r1, #3
 8002292:	f361 0303 	bfi	r3, r1, #0, #4
 8002296:	7153      	strb	r3, [r2, #5]
            coeres->coeheader.numberservice =
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2200      	movs	r2, #0
 800229c:	719a      	strb	r2, [r3, #6]
 800229e:	2200      	movs	r2, #0
 80022a0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80022a4:	71da      	strb	r2, [r3, #7]
               htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
            size = (objd + nsub)->bitlength;
 80022a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4413      	add	r3, r2
 80022b8:	889b      	ldrh	r3, [r3, #4]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	61fb      	str	r3, [r7, #28]
            /* expedited bits used calculation */
            dss = 0x0c;
 80022be:	230c      	movs	r3, #12
 80022c0:	76fb      	strb	r3, [r7, #27]
            if (size > 8)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d901      	bls.n	80022cc <SDO_upload+0xd4>
            {
               dss = 0x08;
 80022c8:	2308      	movs	r3, #8
 80022ca:	76fb      	strb	r3, [r7, #27]
            }
            if (size > 16)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d901      	bls.n	80022d6 <SDO_upload+0xde>
            {
               dss = 0x04;
 80022d2:	2304      	movs	r3, #4
 80022d4:	76fb      	strb	r3, [r7, #27]
            }
            if (size > 24)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	2b18      	cmp	r3, #24
 80022da:	d901      	bls.n	80022e0 <SDO_upload+0xe8>
            {
               dss = 0x00;
 80022dc:	2300      	movs	r3, #0
 80022de:	76fb      	strb	r3, [r7, #27]
            }
            coeres->index = htoes (index);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	8a7a      	ldrh	r2, [r7, #18]
 80022e4:	f8a3 2009 	strh.w	r2, [r3, #9]
            coeres->subindex = subindex;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	7c7a      	ldrb	r2, [r7, #17]
 80022ec:	72da      	strb	r2, [r3, #11]
            if (size <= 32)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d833      	bhi.n	800235c <SDO_upload+0x164>
            {
               /* expedited response i.e. length<=4 bytes */
               coeres->command = COE_COMMAND_UPLOADRESPONSE +
                  COE_SIZE_INDICATOR + COE_EXPEDITED_INDICATOR + dss;
 80022f4:	7efb      	ldrb	r3, [r7, #27]
 80022f6:	3343      	adds	r3, #67	; 0x43
 80022f8:	b2da      	uxtb	r2, r3
               coeres->command = COE_COMMAND_UPLOADRESPONSE +
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	721a      	strb	r2, [r3, #8]
               if ((objd + nsub)->data == NULL)
 80022fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	461a      	mov	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4413      	add	r3, r2
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10c      	bne.n	8002330 <SDO_upload+0x138>
               {
                  /* use constant value */
                  coeres->size = htoel ((objd + nsub)->value);
 8002316:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	461a      	mov	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4413      	add	r3, r2
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	e063      	b.n	80023f8 <SDO_upload+0x200>
               }
               else
               {
                  /* convert bits to bytes */
                  size = (size + 7) >> 3;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	3307      	adds	r3, #7
 8002334:	08db      	lsrs	r3, r3, #3
 8002336:	61fb      	str	r3, [r7, #28]
                  /* use dynamic data */
                  copy2mbx ((objd + nsub)->data, &(coeres->size), size);
 8002338:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	461a      	mov	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	4413      	add	r3, r2
 800234a:	6918      	ldr	r0, [r3, #16]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	330c      	adds	r3, #12
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	b292      	uxth	r2, r2
 8002354:	4619      	mov	r1, r3
 8002356:	f7ff fef7 	bl	8002148 <copy2mbx>
 800235a:	e04d      	b.n	80023f8 <SDO_upload+0x200>
               }
            }
            else
            {
               /* normal response i.e. length>4 bytes */
               coeres->command = COE_COMMAND_UPLOADRESPONSE +
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2241      	movs	r2, #65	; 0x41
 8002360:	721a      	strb	r2, [r3, #8]
                  COE_SIZE_INDICATOR;
               /* convert bits to bytes */
               size = (size + 7) >> 3;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3307      	adds	r3, #7
 8002366:	08db      	lsrs	r3, r3, #3
 8002368:	61fb      	str	r3, [r7, #28]
               coeres->size = htoel (size);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	60da      	str	r2, [r3, #12]
               if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f103 020a 	add.w	r2, r3, #10
 8002376:	4b31      	ldr	r3, [pc, #196]	; (800243c <SDO_upload+0x244>)
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	3b06      	subs	r3, #6
 800237c:	429a      	cmp	r2, r3
 800237e:	d91f      	bls.n	80023c0 <SDO_upload+0x1c8>
               {
                  /* segmented transfer needed */
                  /* set total size in bytes */
                  ESCvar.frags = size;
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	b29a      	uxth	r2, r3
 8002384:	4b2d      	ldr	r3, [pc, #180]	; (800243c <SDO_upload+0x244>)
 8002386:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
                  /* limit to mailbox size */
                  size = ESC_MBXDSIZE - COE_HEADERSIZE;
 800238a:	4b2c      	ldr	r3, [pc, #176]	; (800243c <SDO_upload+0x244>)
 800238c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238e:	3b10      	subs	r3, #16
 8002390:	61fb      	str	r3, [r7, #28]
                  /* number of bytes done */
                  ESCvar.fragsleft = size;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	b29a      	uxth	r2, r3
 8002396:	4b29      	ldr	r3, [pc, #164]	; (800243c <SDO_upload+0x244>)
 8002398:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
                  /* signal segmented transfer */
                  ESCvar.segmented = MBXSEU;
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <SDO_upload+0x244>)
 800239e:	2240      	movs	r2, #64	; 0x40
 80023a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                  ESCvar.data = (objd + nsub)->data;
 80023a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	4413      	add	r3, r2
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	4a20      	ldr	r2, [pc, #128]	; (800243c <SDO_upload+0x244>)
 80023ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80023be:	e003      	b.n	80023c8 <SDO_upload+0x1d0>
               }
               else
               {
                  ESCvar.segmented = 0;
 80023c0:	4b1e      	ldr	r3, [pc, #120]	; (800243c <SDO_upload+0x244>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
               }
               coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	330a      	adds	r3, #10
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	801a      	strh	r2, [r3, #0]
               /* use dynamic data */
               copy2mbx ((objd + nsub)->data, (&(coeres->size)) + 1, size);
 80023d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	4413      	add	r3, r2
 80023e6:	6918      	ldr	r0, [r3, #16]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	330c      	adds	r3, #12
 80023ec:	3304      	adds	r3, #4
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	b292      	uxth	r2, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	f7ff fea8 	bl	8002148 <copy2mbx>
            }
            MBXcontrol[MBXout].state = MBXstate_outreq;
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	4a11      	ldr	r2, [pc, #68]	; (8002440 <SDO_upload+0x248>)
 80023fc:	2103      	movs	r1, #3
 80023fe:	54d1      	strb	r1, [r2, r3]
 8002400:	e00c      	b.n	800241c <SDO_upload+0x224>
         }
      }
      else
      {
         SDO_abort (index, subindex, ABORT_NOSUBINDEX);
 8002402:	7c79      	ldrb	r1, [r7, #17]
 8002404:	8a7b      	ldrh	r3, [r7, #18]
 8002406:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <SDO_upload+0x24c>)
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff feaf 	bl	800216c <SDO_abort>
 800240e:	e005      	b.n	800241c <SDO_upload+0x224>
      }
   }
   else
   {
      SDO_abort (index, subindex, ABORT_NOOBJECT);
 8002410:	7c79      	ldrb	r1, [r7, #17]
 8002412:	8a7b      	ldrh	r3, [r7, #18]
 8002414:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <SDO_upload+0x250>)
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fea8 	bl	800216c <SDO_abort>
   }
   MBXcontrol[0].state = MBXstate_idle;
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <SDO_upload+0x248>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <SDO_upload+0x244>)
 8002424:	2200      	movs	r2, #0
 8002426:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
}
 800242a:	bf00      	nop
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2000024c 	.word	0x2000024c
 8002438:	0800bd60 	.word	0x0800bd60
 800243c:	20000180 	.word	0x20000180
 8002440:	20000424 	.word	0x20000424
 8002444:	06090011 	.word	0x06090011
 8002448:	06020000 	.word	0x06020000

0800244c <SDO_uploadsegment>:
/** Function for handling the following SDO Upload if previous SDOUpload
 * response was flagged it needed to be segmented.
 *
 */
void SDO_uploadsegment (void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
   _COEsdo *coesdo, *coeres;
   uint8_t MBXout;
   uint32_t size, offset;
   coesdo = (_COEsdo *) &MBX[0];
 8002452:	4b4d      	ldr	r3, [pc, #308]	; (8002588 <SDO_uploadsegment+0x13c>)
 8002454:	613b      	str	r3, [r7, #16]
   MBXout = ESC_claimbuffer ();
 8002456:	f7fe fdd9 	bl	800100c <ESC_claimbuffer>
 800245a:	4603      	mov	r3, r0
 800245c:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8086 	beq.w	8002572 <SDO_uploadsegment+0x126>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	4a48      	ldr	r2, [pc, #288]	; (800258c <SDO_uploadsegment+0x140>)
 800246a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800246c:	fb02 f303 	mul.w	r3, r2, r3
 8002470:	4a45      	ldr	r2, [pc, #276]	; (8002588 <SDO_uploadsegment+0x13c>)
 8002472:	4413      	add	r3, r2
 8002474:	60bb      	str	r3, [r7, #8]
      offset = ESCvar.fragsleft;
 8002476:	4b45      	ldr	r3, [pc, #276]	; (800258c <SDO_uploadsegment+0x140>)
 8002478:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800247c:	607b      	str	r3, [r7, #4]
      size = ESCvar.frags - ESCvar.fragsleft;
 800247e:	4b43      	ldr	r3, [pc, #268]	; (800258c <SDO_uploadsegment+0x140>)
 8002480:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002484:	461a      	mov	r2, r3
 8002486:	4b41      	ldr	r3, [pc, #260]	; (800258c <SDO_uploadsegment+0x140>)
 8002488:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	617b      	str	r3, [r7, #20]
      coeres->mbxheader.mbxtype = MBXCOE;
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	7953      	ldrb	r3, [r2, #5]
 8002494:	2103      	movs	r1, #3
 8002496:	f361 0303 	bfi	r3, r1, #0, #4
 800249a:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2200      	movs	r2, #0
 80024a0:	719a      	strb	r2, [r3, #6]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80024a8:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
      coeres->command = COE_COMMAND_UPLOADSEGMENT + (coesdo->command & COE_TOGGLEBIT);  // copy toggle bit
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	7a1b      	ldrb	r3, [r3, #8]
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	721a      	strb	r2, [r3, #8]
      if ((size + COE_SEGMENTHEADERSIZE) > ESC_MBXDSIZE)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	1cda      	adds	r2, r3, #3
 80024bc:	4b33      	ldr	r3, [pc, #204]	; (800258c <SDO_uploadsegment+0x140>)
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	3b06      	subs	r3, #6
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d914      	bls.n	80024f0 <SDO_uploadsegment+0xa4>
      {
         /* more segmented transfer needed */
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_SEGMENTHEADERSIZE;
 80024c6:	4b31      	ldr	r3, [pc, #196]	; (800258c <SDO_uploadsegment+0x140>)
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	3b09      	subs	r3, #9
 80024cc:	617b      	str	r3, [r7, #20]
         /* number of bytes done */
         ESCvar.fragsleft += size;
 80024ce:	4b2f      	ldr	r3, [pc, #188]	; (800258c <SDO_uploadsegment+0x140>)
 80024d0:	f8b3 208c 	ldrh.w	r2, [r3, #140]	; 0x8c
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	4413      	add	r3, r2
 80024da:	b29a      	uxth	r2, r3
 80024dc:	4b2b      	ldr	r3, [pc, #172]	; (800258c <SDO_uploadsegment+0x140>)
 80024de:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
         coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3303      	adds	r3, #3
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	801a      	strh	r2, [r3, #0]
 80024ee:	e02f      	b.n	8002550 <SDO_uploadsegment+0x104>
      }
      else
      {
         /* last segment */
         ESCvar.segmented = 0;
 80024f0:	4b26      	ldr	r3, [pc, #152]	; (800258c <SDO_uploadsegment+0x140>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
         ESCvar.frags = 0;
 80024f8:	4b24      	ldr	r3, [pc, #144]	; (800258c <SDO_uploadsegment+0x140>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
         ESCvar.fragsleft = 0;
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <SDO_uploadsegment+0x140>)
 8002502:	2200      	movs	r2, #0
 8002504:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
         coeres->command += COE_COMMAND_LASTSEGMENTBIT;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	7a1b      	ldrb	r3, [r3, #8]
 800250c:	3301      	adds	r3, #1
 800250e:	b2da      	uxtb	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	721a      	strb	r2, [r3, #8]
         if (size >= 7)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b06      	cmp	r3, #6
 8002518:	d906      	bls.n	8002528 <SDO_uploadsegment+0xdc>
         {
            coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	b29b      	uxth	r3, r3
 800251e:	3303      	adds	r3, #3
 8002520:	b29a      	uxth	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	801a      	strh	r2, [r3, #0]
 8002526:	e013      	b.n	8002550 <SDO_uploadsegment+0x104>
         }
         else
         {
            coeres->command += (7 - size) << 1;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	7a1a      	ldrb	r2, [r3, #8]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f1c3 0307 	rsb	r3, r3, #7
 8002534:	b2db      	uxtb	r3, r3
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	4413      	add	r3, r2
 800253c:	b2da      	uxtb	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	721a      	strb	r2, [r3, #8]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2200      	movs	r2, #0
 8002546:	f042 020a 	orr.w	r2, r2, #10
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	2200      	movs	r2, #0
 800254e:	705a      	strb	r2, [r3, #1]
         }
      }
      copy2mbx ((uint8_t *) ESCvar.data + offset, (&(coeres->command)) + 1, size);        //copy to mailbox
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <SDO_uploadsegment+0x140>)
 8002552:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	18d0      	adds	r0, r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	3308      	adds	r3, #8
 800255e:	3301      	adds	r3, #1
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	b292      	uxth	r2, r2
 8002564:	4619      	mov	r1, r3
 8002566:	f7ff fdef 	bl	8002148 <copy2mbx>

      MBXcontrol[MBXout].state = MBXstate_outreq;
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	4a08      	ldr	r2, [pc, #32]	; (8002590 <SDO_uploadsegment+0x144>)
 800256e:	2103      	movs	r1, #3
 8002570:	54d1      	strb	r1, [r2, r3]
   }
   MBXcontrol[0].state = MBXstate_idle;
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <SDO_uploadsegment+0x144>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <SDO_uploadsegment+0x140>)
 800257a:	2200      	movs	r2, #0
 800257c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
}
 8002580:	bf00      	nop
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	2000024c 	.word	0x2000024c
 800258c:	20000180 	.word	0x20000180
 8002590:	20000424 	.word	0x20000424

08002594 <SDO_download>:

/** Function for handling incoming requested SDO Download, validating the
 * request and sending an response. On error an SDO Abort will be sent.
 */
void SDO_download (void)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b08d      	sub	sp, #52	; 0x34
 8002598:	af02      	add	r7, sp, #8
   uint16_t size, actsize;
   const _objd *objd;
   uint32_t *mbxdata;
   uint32_t abort;

   coesdo = (_COEsdo *) &MBX[0];
 800259a:	4b93      	ldr	r3, [pc, #588]	; (80027e8 <SDO_download+0x254>)
 800259c:	61fb      	str	r3, [r7, #28]
   index = etohs (coesdo->index);
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	7a5a      	ldrb	r2, [r3, #9]
 80025a2:	7a9b      	ldrb	r3, [r3, #10]
 80025a4:	021b      	lsls	r3, r3, #8
 80025a6:	4313      	orrs	r3, r2
 80025a8:	837b      	strh	r3, [r7, #26]
   subindex = coesdo->subindex;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	7adb      	ldrb	r3, [r3, #11]
 80025ae:	767b      	strb	r3, [r7, #25]
   nidx = SDO_findobject (index);
 80025b0:	8b7b      	ldrh	r3, [r7, #26]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fc46 	bl	8001e44 <SDO_findobject>
 80025b8:	4603      	mov	r3, r0
 80025ba:	82fb      	strh	r3, [r7, #22]
   if (nidx >= 0)
 80025bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f2c0 80ff 	blt.w	80027c4 <SDO_download+0x230>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 80025c6:	7e7a      	ldrb	r2, [r7, #25]
 80025c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fbe0 	bl	8001d94 <SDO_findsubindex>
 80025d4:	4603      	mov	r3, r0
 80025d6:	82bb      	strh	r3, [r7, #20]
      if (nsub >= 0)
 80025d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f2c0 80ea 	blt.w	80027b6 <SDO_download+0x222>
      {
         objd = SDOobjects[nidx].objdesc;
 80025e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80025e6:	4981      	ldr	r1, [pc, #516]	; (80027ec <SDO_download+0x258>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	440b      	add	r3, r1
 80025f2:	3308      	adds	r3, #8
 80025f4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80025f8:	613b      	str	r3, [r7, #16]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 80025fa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	461a      	mov	r2, r3
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	88db      	ldrh	r3, [r3, #6]
 800260e:	b29b      	uxth	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002616:	73fb      	strb	r3, [r7, #15]
         uint8_t state = ESCvar.ALstatus & 0x0f;
 8002618:	4b75      	ldr	r3, [pc, #468]	; (80027f0 <SDO_download+0x25c>)
 800261a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	73bb      	strb	r3, [r7, #14]
         if (access == ATYPE_RW ||
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	2b3f      	cmp	r3, #63	; 0x3f
 800262a:	d007      	beq.n	800263c <SDO_download+0xa8>
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b0f      	cmp	r3, #15
 8002630:	f040 80b0 	bne.w	8002794 <SDO_download+0x200>
             (access == ATYPE_RWpre && state == ESCpreop))
 8002634:	7bbb      	ldrb	r3, [r7, #14]
 8002636:	2b02      	cmp	r3, #2
 8002638:	f040 80ac 	bne.w	8002794 <SDO_download+0x200>
         {
            /* expedited? */
            if (coesdo->command & COE_EXPEDITED_INDICATOR)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	7a1b      	ldrb	r3, [r3, #8]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00d      	beq.n	8002664 <SDO_download+0xd0>
            {
               size = 4 - ((coesdo->command & 0x0c) >> 2);
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	7a1b      	ldrb	r3, [r3, #8]
 800264c:	109b      	asrs	r3, r3, #2
 800264e:	b29b      	uxth	r3, r3
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	b29b      	uxth	r3, r3
 8002656:	f1c3 0304 	rsb	r3, r3, #4
 800265a:	84fb      	strh	r3, [r7, #38]	; 0x26
               mbxdata = &(coesdo->size);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	330c      	adds	r3, #12
 8002660:	623b      	str	r3, [r7, #32]
 8002662:	e006      	b.n	8002672 <SDO_download+0xde>
            }
            else
            {
               /* normal download */
               size = (etohl (coesdo->size) & 0xffff);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	84fb      	strh	r3, [r7, #38]	; 0x26
               mbxdata = (&(coesdo->size)) + 1;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	330c      	adds	r3, #12
 800266e:	3304      	adds	r3, #4
 8002670:	623b      	str	r3, [r7, #32]
            }
            actsize = ((objd + nsub)->bitlength + 7) >> 3;
 8002672:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	461a      	mov	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	889b      	ldrh	r3, [r3, #4]
 8002686:	b29b      	uxth	r3, r3
 8002688:	3307      	adds	r3, #7
 800268a:	10db      	asrs	r3, r3, #3
 800268c:	81bb      	strh	r3, [r7, #12]
            if (actsize == size)
 800268e:	89ba      	ldrh	r2, [r7, #12]
 8002690:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002692:	429a      	cmp	r2, r3
 8002694:	d177      	bne.n	8002786 <SDO_download+0x1f2>
            {
               abort = ESC_pre_objecthandler (
 8002696:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
                  index,
                  subindex,
                  mbxdata,
                  size,
                  (objd + nsub)->flags
 8002698:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	461a      	mov	r2, r3
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4413      	add	r3, r2
               abort = ESC_pre_objecthandler (
 80026aa:	88db      	ldrh	r3, [r3, #6]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	7e79      	ldrb	r1, [r7, #25]
 80026b0:	8b78      	ldrh	r0, [r7, #26]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	4623      	mov	r3, r4
 80026b6:	6a3a      	ldr	r2, [r7, #32]
 80026b8:	f7fd ff72 	bl	80005a0 <ESC_pre_objecthandler>
 80026bc:	60b8      	str	r0, [r7, #8]
               );
               if (abort == 0)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d159      	bne.n	8002778 <SDO_download+0x1e4>
               {
                  copy2mbx (mbxdata, (objd + nsub)->data, size);
 80026c4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	461a      	mov	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4413      	add	r3, r2
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80026da:	4619      	mov	r1, r3
 80026dc:	6a38      	ldr	r0, [r7, #32]
 80026de:	f7ff fd33 	bl	8002148 <copy2mbx>
                  MBXout = ESC_claimbuffer ();
 80026e2:	f7fe fc93 	bl	800100c <ESC_claimbuffer>
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
                  if (MBXout)
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d032      	beq.n	8002756 <SDO_download+0x1c2>
                  {
                     coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	4a3f      	ldr	r2, [pc, #252]	; (80027f0 <SDO_download+0x25c>)
 80026f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	4a3b      	ldr	r2, [pc, #236]	; (80027e8 <SDO_download+0x254>)
 80026fc:	4413      	add	r3, r2
 80026fe:	603b      	str	r3, [r7, #0]
                     coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2200      	movs	r2, #0
 8002704:	f042 020a 	orr.w	r2, r2, #10
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	2200      	movs	r2, #0
 800270c:	705a      	strb	r2, [r3, #1]
                     coeres->mbxheader.mbxtype = MBXCOE;
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	7953      	ldrb	r3, [r2, #5]
 8002712:	2103      	movs	r1, #3
 8002714:	f361 0303 	bfi	r3, r1, #0, #4
 8002718:	7153      	strb	r3, [r2, #5]
                     coeres->coeheader.numberservice =
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2200      	movs	r2, #0
 800271e:	719a      	strb	r2, [r3, #6]
 8002720:	2200      	movs	r2, #0
 8002722:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8002726:	71da      	strb	r2, [r3, #7]
                        htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
                     coeres->index = htoes (index);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	8b7a      	ldrh	r2, [r7, #26]
 800272c:	f8a3 2009 	strh.w	r2, [r3, #9]
                     coeres->subindex = subindex;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	7e7a      	ldrb	r2, [r7, #25]
 8002734:	72da      	strb	r2, [r3, #11]
                     coeres->command = COE_COMMAND_DOWNLOADRESPONSE;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2260      	movs	r2, #96	; 0x60
 800273a:	721a      	strb	r2, [r3, #8]
                     coeres->size = htoel (0);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2200      	movs	r2, #0
 8002740:	731a      	strb	r2, [r3, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	735a      	strb	r2, [r3, #13]
 8002746:	2200      	movs	r2, #0
 8002748:	739a      	strb	r2, [r3, #14]
 800274a:	2200      	movs	r2, #0
 800274c:	73da      	strb	r2, [r3, #15]
                     MBXcontrol[MBXout].state = MBXstate_outreq;
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	4a28      	ldr	r2, [pc, #160]	; (80027f4 <SDO_download+0x260>)
 8002752:	2103      	movs	r1, #3
 8002754:	54d1      	strb	r1, [r2, r3]
                  }
                  /* external object write handler */
                  ESC_objecthandler (index, subindex, (objd + nsub)->flags);
 8002756:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	461a      	mov	r2, r3
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	88db      	ldrh	r3, [r3, #6]
 800276a:	b29a      	uxth	r2, r3
 800276c:	7e79      	ldrb	r1, [r7, #25]
 800276e:	8b7b      	ldrh	r3, [r7, #26]
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd ff5d 	bl	8000630 <ESC_objecthandler>
            if (actsize == size)
 8002776:	e02b      	b.n	80027d0 <SDO_download+0x23c>
               }
               else
               {
                  SDO_abort (index, subindex, abort);
 8002778:	7e79      	ldrb	r1, [r7, #25]
 800277a:	8b7b      	ldrh	r3, [r7, #26]
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fcf4 	bl	800216c <SDO_abort>
            if (actsize == size)
 8002784:	e024      	b.n	80027d0 <SDO_download+0x23c>
               }
            }
            else
            {
               SDO_abort (index, subindex, ABORT_TYPEMISMATCH);
 8002786:	7e79      	ldrb	r1, [r7, #25]
 8002788:	8b7b      	ldrh	r3, [r7, #26]
 800278a:	4a1b      	ldr	r2, [pc, #108]	; (80027f8 <SDO_download+0x264>)
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fced 	bl	800216c <SDO_abort>
            if (actsize == size)
 8002792:	e01d      	b.n	80027d0 <SDO_download+0x23c>
            }
         }
         else
         {
            if (access == ATYPE_RWpre)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b0f      	cmp	r3, #15
 8002798:	d106      	bne.n	80027a8 <SDO_download+0x214>
            {
               SDO_abort (index, subindex, ABORT_NOTINTHISSTATE);
 800279a:	7e79      	ldrb	r1, [r7, #25]
 800279c:	8b7b      	ldrh	r3, [r7, #26]
 800279e:	4a17      	ldr	r2, [pc, #92]	; (80027fc <SDO_download+0x268>)
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fce3 	bl	800216c <SDO_abort>
 80027a6:	e013      	b.n	80027d0 <SDO_download+0x23c>
            }
            else
            {
               SDO_abort (index, subindex, ABORT_READONLY);
 80027a8:	7e79      	ldrb	r1, [r7, #25]
 80027aa:	8b7b      	ldrh	r3, [r7, #26]
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <SDO_download+0x26c>)
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fcdc 	bl	800216c <SDO_abort>
 80027b4:	e00c      	b.n	80027d0 <SDO_download+0x23c>
            }
         }
      }
      else
      {
         SDO_abort (index, subindex, ABORT_NOSUBINDEX);
 80027b6:	7e79      	ldrb	r1, [r7, #25]
 80027b8:	8b7b      	ldrh	r3, [r7, #26]
 80027ba:	4a12      	ldr	r2, [pc, #72]	; (8002804 <SDO_download+0x270>)
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fcd5 	bl	800216c <SDO_abort>
 80027c2:	e005      	b.n	80027d0 <SDO_download+0x23c>
      }
   }
   else
   {
      SDO_abort (index, subindex, ABORT_NOOBJECT);
 80027c4:	7e79      	ldrb	r1, [r7, #25]
 80027c6:	8b7b      	ldrh	r3, [r7, #26]
 80027c8:	4a0f      	ldr	r2, [pc, #60]	; (8002808 <SDO_download+0x274>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fcce 	bl	800216c <SDO_abort>
   }
   MBXcontrol[0].state = MBXstate_idle;
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <SDO_download+0x260>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <SDO_download+0x25c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
}
 80027de:	bf00      	nop
 80027e0:	372c      	adds	r7, #44	; 0x2c
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd90      	pop	{r4, r7, pc}
 80027e6:	bf00      	nop
 80027e8:	2000024c 	.word	0x2000024c
 80027ec:	0800bd60 	.word	0x0800bd60
 80027f0:	20000180 	.word	0x20000180
 80027f4:	20000424 	.word	0x20000424
 80027f8:	06070010 	.word	0x06070010
 80027fc:	08000022 	.word	0x08000022
 8002800:	06010002 	.word	0x06010002
 8002804:	06090011 	.word	0x06090011
 8002808:	06020000 	.word	0x06020000

0800280c <SDO_infoerror>:
/** Function for sending an SDO Info Error reply.
 *
 * @param[in] abortcode  = = abort code to send in reply
 */
void SDO_infoerror (uint32_t abortcode)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
   uint8_t MBXout;
   _COEobjdesc *coeres;
   MBXout = ESC_claimbuffer ();
 8002814:	f7fe fbfa 	bl	800100c <ESC_claimbuffer>
 8002818:	4603      	mov	r3, r0
 800281a:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d042      	beq.n	80028a8 <SDO_infoerror+0x9c>
   {
      coeres = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	4a22      	ldr	r2, [pc, #136]	; (80028b0 <SDO_infoerror+0xa4>)
 8002826:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	4a21      	ldr	r2, [pc, #132]	; (80028b4 <SDO_infoerror+0xa8>)
 800282e:	4413      	add	r3, r2
 8002830:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes ((uint16_t) 0x0a);
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2200      	movs	r2, #0
 8002836:	f042 020a 	orr.w	r2, r2, #10
 800283a:	701a      	strb	r2, [r3, #0]
 800283c:	2200      	movs	r2, #0
 800283e:	705a      	strb	r2, [r3, #1]
      coeres->mbxheader.mbxtype = MBXCOE;
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	7953      	ldrb	r3, [r2, #5]
 8002844:	2103      	movs	r1, #3
 8002846:	f361 0303 	bfi	r3, r1, #0, #4
 800284a:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2200      	movs	r2, #0
 8002850:	719a      	strb	r2, [r3, #6]
 8002852:	2200      	movs	r2, #0
 8002854:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002858:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      /* SDO info error request */
      coeres->infoheader.opcode = COE_INFOERROR;
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	7a13      	ldrb	r3, [r2, #8]
 800285e:	2107      	movs	r1, #7
 8002860:	f361 0306 	bfi	r3, r1, #0, #7
 8002864:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.incomplete = 0;
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	7a13      	ldrb	r3, [r2, #8]
 800286a:	f36f 13c7 	bfc	r3, #7, #1
 800286e:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.reserved = 0x00;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2200      	movs	r2, #0
 8002874:	725a      	strb	r2, [r3, #9]
      coeres->infoheader.fragmentsleft = 0;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2200      	movs	r2, #0
 800287a:	729a      	strb	r2, [r3, #10]
 800287c:	2200      	movs	r2, #0
 800287e:	72da      	strb	r2, [r3, #11]
      coeres->index = (uint16_t)htoel (abortcode);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	b29a      	uxth	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	819a      	strh	r2, [r3, #12]
      coeres->datatype = (uint16_t)(htoel (abortcode) >> 16);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	0c1b      	lsrs	r3, r3, #16
 800288c:	b29a      	uxth	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	81da      	strh	r2, [r3, #14]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <SDO_infoerror+0xac>)
 8002896:	2103      	movs	r1, #3
 8002898:	54d1      	strb	r1, [r2, r3]
      MBXcontrol[0].state = MBXstate_idle;
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <SDO_infoerror+0xac>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
      ESCvar.xoe = 0;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <SDO_infoerror+0xa4>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
   }
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000180 	.word	0x20000180
 80028b4:	2000024c 	.word	0x2000024c
 80028b8:	20000424 	.word	0x20000424

080028bc <SDO_getodlist>:

/** Function for handling incoming requested SDO Get OD List, validating the
 * request and sending an response. On error an SDO Info Error will be sent.
 */
void SDO_getodlist (void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
   uint16_t frags;
   uint8_t MBXout = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	75fb      	strb	r3, [r7, #23]
   uint16_t entries = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	82bb      	strh	r3, [r7, #20]
   uint16_t i, n;
   uint16_t *p;
   _COEobjdesc *coel, *coer;

   while (SDOobjects[entries].index != 0xffff)
 80028ca:	e002      	b.n	80028d2 <SDO_getodlist+0x16>
   {
      entries++;
 80028cc:	8abb      	ldrh	r3, [r7, #20]
 80028ce:	3301      	adds	r3, #1
 80028d0:	82bb      	strh	r3, [r7, #20]
   while (SDOobjects[entries].index != 0xffff)
 80028d2:	8aba      	ldrh	r2, [r7, #20]
 80028d4:	4988      	ldr	r1, [pc, #544]	; (8002af8 <SDO_getodlist+0x23c>)
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	440b      	add	r3, r1
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d1ef      	bne.n	80028cc <SDO_getodlist+0x10>
   }
   ESCvar.entries = entries;
 80028ec:	4a83      	ldr	r2, [pc, #524]	; (8002afc <SDO_getodlist+0x240>)
 80028ee:	8abb      	ldrh	r3, [r7, #20]
 80028f0:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
   frags = ((entries << 1) + ODLISTSIZE - 1);
 80028f4:	8abb      	ldrh	r3, [r7, #20]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	4b80      	ldr	r3, [pc, #512]	; (8002afc <SDO_getodlist+0x240>)
 80028fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028fe:	885b      	ldrh	r3, [r3, #2]
 8002900:	3b0e      	subs	r3, #14
 8002902:	b29b      	uxth	r3, r3
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	b29b      	uxth	r3, r3
 800290a:	4413      	add	r3, r2
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	817b      	strh	r3, [r7, #10]
   frags /= ODLISTSIZE;
 8002912:	897a      	ldrh	r2, [r7, #10]
 8002914:	4b79      	ldr	r3, [pc, #484]	; (8002afc <SDO_getodlist+0x240>)
 8002916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002918:	885b      	ldrh	r3, [r3, #2]
 800291a:	f1a3 010e 	sub.w	r1, r3, #14
 800291e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002922:	400b      	ands	r3, r1
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	817b      	strh	r3, [r7, #10]
   coer = (_COEobjdesc *) &MBX[0];
 800292a:	4b75      	ldr	r3, [pc, #468]	; (8002b00 <SDO_getodlist+0x244>)
 800292c:	607b      	str	r3, [r7, #4]
   /* check for unsupported opcodes */
   if (etohs (coer->index) > 0x01)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	899b      	ldrh	r3, [r3, #12]
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d903      	bls.n	8002940 <SDO_getodlist+0x84>
   {
      SDO_infoerror (ABORT_UNSUPPORTED);
 8002938:	4872      	ldr	r0, [pc, #456]	; (8002b04 <SDO_getodlist+0x248>)
 800293a:	f7ff ff67 	bl	800280c <SDO_infoerror>
 800293e:	e003      	b.n	8002948 <SDO_getodlist+0x8c>
   }
   else
   {
      MBXout = ESC_claimbuffer ();
 8002940:	f7fe fb64 	bl	800100c <ESC_claimbuffer>
 8002944:	4603      	mov	r3, r0
 8002946:	75fb      	strb	r3, [r7, #23]
   }
   if (MBXout)
 8002948:	7dfb      	ldrb	r3, [r7, #23]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80d0 	beq.w	8002af0 <SDO_getodlist+0x234>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8002950:	7dfb      	ldrb	r3, [r7, #23]
 8002952:	4a6a      	ldr	r2, [pc, #424]	; (8002afc <SDO_getodlist+0x240>)
 8002954:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	4a69      	ldr	r2, [pc, #420]	; (8002b00 <SDO_getodlist+0x244>)
 800295c:	4413      	add	r3, r2
 800295e:	603b      	str	r3, [r7, #0]
      coel->mbxheader.mbxtype = MBXCOE;
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	7953      	ldrb	r3, [r2, #5]
 8002964:	2103      	movs	r1, #3
 8002966:	f361 0303 	bfi	r3, r1, #0, #4
 800296a:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	719a      	strb	r2, [r3, #6]
 8002972:	2200      	movs	r2, #0
 8002974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002978:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	7a13      	ldrb	r3, [r2, #8]
 800297e:	2102      	movs	r1, #2
 8002980:	f361 0306 	bfi	r3, r1, #0, #7
 8002984:	7213      	strb	r3, [r2, #8]
      /* number of objects request */
      if (etohs (coer->index) == 0x00)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	899b      	ldrh	r3, [r3, #12]
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d147      	bne.n	8002a20 <SDO_getodlist+0x164>
      {
         coel->index = htoes ((uint16_t) 0x00);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2200      	movs	r2, #0
 8002994:	731a      	strb	r2, [r3, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	735a      	strb	r2, [r3, #13]
         coel->infoheader.incomplete = 0;
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	7a13      	ldrb	r3, [r2, #8]
 800299e:	f36f 13c7 	bfc	r3, #7, #1
 80029a2:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes ((uint16_t) 0);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2200      	movs	r2, #0
 80029ae:	729a      	strb	r2, [r3, #10]
 80029b0:	2200      	movs	r2, #0
 80029b2:	72da      	strb	r2, [r3, #11]
         MBXcontrol[0].state = MBXstate_idle;
 80029b4:	4b54      	ldr	r3, [pc, #336]	; (8002b08 <SDO_getodlist+0x24c>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 80029ba:	4b50      	ldr	r3, [pc, #320]	; (8002afc <SDO_getodlist+0x240>)
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
         ESCvar.frags = frags;
 80029c2:	4a4e      	ldr	r2, [pc, #312]	; (8002afc <SDO_getodlist+0x240>)
 80029c4:	897b      	ldrh	r3, [r7, #10]
 80029c6:	f8a2 308a 	strh.w	r3, [r2, #138]	; 0x8a
         ESCvar.fragsleft = frags - 1;
 80029ca:	897b      	ldrh	r3, [r7, #10]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	4b4a      	ldr	r3, [pc, #296]	; (8002afc <SDO_getodlist+0x240>)
 80029d2:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
         p = &(coel->datatype);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	330e      	adds	r3, #14
 80029da:	60fb      	str	r3, [r7, #12]
         *p = htoes (entries);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8aba      	ldrh	r2, [r7, #20]
 80029e0:	801a      	strh	r2, [r3, #0]
         p++;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3302      	adds	r3, #2
 80029e6:	60fb      	str	r3, [r7, #12]
         *p = 0;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	801a      	strh	r2, [r3, #0]
         p++;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3302      	adds	r3, #2
 80029f2:	60fb      	str	r3, [r7, #12]
         *p = 0;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	801a      	strh	r2, [r3, #0]
         p++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3302      	adds	r3, #2
 80029fe:	60fb      	str	r3, [r7, #12]
         *p = 0;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	801a      	strh	r2, [r3, #0]
         p++;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	3302      	adds	r3, #2
 8002a0a:	60fb      	str	r3, [r7, #12]
         *p = 0;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	801a      	strh	r2, [r3, #0]
         coel->mbxheader.length = htoes (0x08 + (5 << 1));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f042 0212 	orr.w	r2, r2, #18
 8002a1a:	701a      	strb	r2, [r3, #0]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	705a      	strb	r2, [r3, #1]
      }
      /* only return all objects */
      if (etohs (coer->index) == 0x01)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	899b      	ldrh	r3, [r3, #12]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d15e      	bne.n	8002ae8 <SDO_getodlist+0x22c>
      {
         if (frags > 1)
 8002a2a:	897b      	ldrh	r3, [r7, #10]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d912      	bls.n	8002a56 <SDO_getodlist+0x19a>
         {
            coel->infoheader.incomplete = 1;
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	7a13      	ldrb	r3, [r2, #8]
 8002a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a38:	7213      	strb	r3, [r2, #8]
            ESCvar.xoe = MBXCOE + MBXODL;
 8002a3a:	4b30      	ldr	r3, [pc, #192]	; (8002afc <SDO_getodlist+0x240>)
 8002a3c:	2213      	movs	r2, #19
 8002a3e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
            n = ODLISTSIZE >> 1;
 8002a42:	4b2e      	ldr	r3, [pc, #184]	; (8002afc <SDO_getodlist+0x240>)
 8002a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a46:	885b      	ldrh	r3, [r3, #2]
 8002a48:	3b0e      	subs	r3, #14
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002a52:	823b      	strh	r3, [r7, #16]
 8002a54:	e00d      	b.n	8002a72 <SDO_getodlist+0x1b6>
         }
         else
         {
            coel->infoheader.incomplete = 0;
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	7a13      	ldrb	r3, [r2, #8]
 8002a5a:	f36f 13c7 	bfc	r3, #7, #1
 8002a5e:	7213      	strb	r3, [r2, #8]
            MBXcontrol[0].state = MBXstate_idle;
 8002a60:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <SDO_getodlist+0x24c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 8002a66:	4b25      	ldr	r3, [pc, #148]	; (8002afc <SDO_getodlist+0x240>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
            n = entries;
 8002a6e:	8abb      	ldrh	r3, [r7, #20]
 8002a70:	823b      	strh	r3, [r7, #16]
         }
         coel->infoheader.reserved = 0x00;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2200      	movs	r2, #0
 8002a76:	725a      	strb	r2, [r3, #9]
         ESCvar.frags = frags;
 8002a78:	4a20      	ldr	r2, [pc, #128]	; (8002afc <SDO_getodlist+0x240>)
 8002a7a:	897b      	ldrh	r3, [r7, #10]
 8002a7c:	f8a2 308a 	strh.w	r3, [r2, #138]	; 0x8a
         ESCvar.fragsleft = frags - 1;
 8002a80:	897b      	ldrh	r3, [r7, #10]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <SDO_getodlist+0x240>)
 8002a88:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
         coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <SDO_getodlist+0x240>)
 8002a8e:	f8b3 208c 	ldrh.w	r2, [r3, #140]	; 0x8c
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	815a      	strh	r2, [r3, #10]
         coel->index = htoes ((uint16_t) 0x01);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	731a      	strb	r2, [r3, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	735a      	strb	r2, [r3, #13]

         p = &(coel->datatype);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	330e      	adds	r3, #14
 8002aa8:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	827b      	strh	r3, [r7, #18]
 8002aae:	e010      	b.n	8002ad2 <SDO_getodlist+0x216>
         {
            *p = htoes (SDOobjects[i].index);
 8002ab0:	8a7a      	ldrh	r2, [r7, #18]
 8002ab2:	4911      	ldr	r1, [pc, #68]	; (8002af8 <SDO_getodlist+0x23c>)
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	440b      	add	r3, r1
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	801a      	strh	r2, [r3, #0]
            p++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	3302      	adds	r3, #2
 8002aca:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 8002acc:	8a7b      	ldrh	r3, [r7, #18]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	827b      	strh	r3, [r7, #18]
 8002ad2:	8a7a      	ldrh	r2, [r7, #18]
 8002ad4:	8a3b      	ldrh	r3, [r7, #16]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d3ea      	bcc.n	8002ab0 <SDO_getodlist+0x1f4>
         }

         coel->mbxheader.length = htoes (0x08 + (n << 1));
 8002ada:	8a3b      	ldrh	r3, [r7, #16]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3308      	adds	r3, #8
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	801a      	strh	r2, [r3, #0]
      }
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <SDO_getodlist+0x24c>)
 8002aec:	2103      	movs	r1, #3
 8002aee:	54d1      	strb	r1, [r2, r3]
   }
}
 8002af0:	bf00      	nop
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	0800bd60 	.word	0x0800bd60
 8002afc:	20000180 	.word	0x20000180
 8002b00:	2000024c 	.word	0x2000024c
 8002b04:	06010000 	.word	0x06010000
 8002b08:	20000424 	.word	0x20000424

08002b0c <SDO_getodlistcont>:
/** Function for continuing sending left overs from previous requested
 * SDO Get OD List, validating the request and sending an response.
 *
 */
void SDO_getodlistcont (void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t i, n, s;
   uint16_t *p;
   _COEobjdesc *coel;

   MBXout = ESC_claimbuffer ();
 8002b12:	f7fe fa7b 	bl	800100c <ESC_claimbuffer>
 8002b16:	4603      	mov	r3, r0
 8002b18:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 808f 	beq.w	8002c40 <SDO_getodlistcont+0x134>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	4a48      	ldr	r2, [pc, #288]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002b26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b28:	fb02 f303 	mul.w	r3, r2, r3
 8002b2c:	4a47      	ldr	r2, [pc, #284]	; (8002c4c <SDO_getodlistcont+0x140>)
 8002b2e:	4413      	add	r3, r2
 8002b30:	60bb      	str	r3, [r7, #8]
      coel->mbxheader.mbxtype = MBXCOE;
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	7953      	ldrb	r3, [r2, #5]
 8002b36:	2103      	movs	r1, #3
 8002b38:	f361 0303 	bfi	r3, r1, #0, #4
 8002b3c:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2200      	movs	r2, #0
 8002b42:	719a      	strb	r2, [r3, #6]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b4a:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	7a13      	ldrb	r3, [r2, #8]
 8002b50:	2102      	movs	r1, #2
 8002b52:	f361 0306 	bfi	r3, r1, #0, #7
 8002b56:	7213      	strb	r3, [r2, #8]
      s = (ESCvar.frags - ESCvar.fragsleft) * (ODLISTSIZE >> 1);
 8002b58:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002b5a:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8002b5e:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002b60:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b6c:	885b      	ldrh	r3, [r3, #2]
 8002b6e:	3b0e      	subs	r3, #14
 8002b70:	085b      	lsrs	r3, r3, #1
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	fb12 f303 	smulbb	r3, r2, r3
 8002b7e:	80fb      	strh	r3, [r7, #6]
      if (ESCvar.fragsleft > 1)
 8002b80:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002b82:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d911      	bls.n	8002bae <SDO_getodlistcont+0xa2>
      {
         coel->infoheader.incomplete = 1;
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	7a13      	ldrb	r3, [r2, #8]
 8002b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b92:	7213      	strb	r3, [r2, #8]
         n = s + (ODLISTSIZE >> 1);
 8002b94:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b98:	885b      	ldrh	r3, [r3, #2]
 8002b9a:	3b0e      	subs	r3, #14
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	4413      	add	r3, r2
 8002baa:	82bb      	strh	r3, [r7, #20]
 8002bac:	e00f      	b.n	8002bce <SDO_getodlistcont+0xc2>
      }
      else
      {
         coel->infoheader.incomplete = 0;
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	7a13      	ldrb	r3, [r2, #8]
 8002bb2:	f36f 13c7 	bfc	r3, #7, #1
 8002bb6:	7213      	strb	r3, [r2, #8]
         MBXcontrol[0].state = MBXstate_idle;
 8002bb8:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <SDO_getodlistcont+0x144>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 8002bbe:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
         n = ESCvar.entries;
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002bc8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002bcc:	82bb      	strh	r3, [r7, #20]
      }
      coel->infoheader.reserved = 0x00;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	725a      	strb	r2, [r3, #9]
      ESCvar.fragsleft--;
 8002bd4:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002bd6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002be0:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
      coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
 8002be4:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <SDO_getodlistcont+0x13c>)
 8002be6:	f8b3 208c 	ldrh.w	r2, [r3, #140]	; 0x8c
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	815a      	strh	r2, [r3, #10]
      /* pointer 2 bytes back to exclude index */
      p = &(coel->index);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	330c      	adds	r3, #12
 8002bf2:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	82fb      	strh	r3, [r7, #22]
 8002bf8:	e010      	b.n	8002c1c <SDO_getodlistcont+0x110>
      {
         *p = htoes (SDOobjects[i].index);
 8002bfa:	8afa      	ldrh	r2, [r7, #22]
 8002bfc:	4915      	ldr	r1, [pc, #84]	; (8002c54 <SDO_getodlistcont+0x148>)
 8002bfe:	4613      	mov	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	440b      	add	r3, r1
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	801a      	strh	r2, [r3, #0]
         p++;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	3302      	adds	r3, #2
 8002c14:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 8002c16:	8afb      	ldrh	r3, [r7, #22]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	82fb      	strh	r3, [r7, #22]
 8002c1c:	8afa      	ldrh	r2, [r7, #22]
 8002c1e:	8abb      	ldrh	r3, [r7, #20]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d3ea      	bcc.n	8002bfa <SDO_getodlistcont+0xee>
      }
      coel->mbxheader.length = htoes (0x06 + ((n - s) << 1));
 8002c24:	8aba      	ldrh	r2, [r7, #20]
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3306      	adds	r3, #6
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	801a      	strh	r2, [r3, #0]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <SDO_getodlistcont+0x144>)
 8002c3c:	2103      	movs	r1, #3
 8002c3e:	54d1      	strb	r1, [r2, r3]
   }
}
 8002c40:	bf00      	nop
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20000180 	.word	0x20000180
 8002c4c:	2000024c 	.word	0x2000024c
 8002c50:	20000424 	.word	0x20000424
 8002c54:	0800bd60 	.word	0x0800bd60

08002c58 <SDO_getod>:
/** Function for handling incoming requested SDO Get Object Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
void SDO_getod (void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08c      	sub	sp, #48	; 0x30
 8002c5c:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t index;
   int32_t nidx;
   uint8_t *d;
   const uint8_t *s;
   uint8_t n = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   _COEobjdesc *coer, *coel;
   coer = (_COEobjdesc *) &MBX[0];
 8002c64:	4b8b      	ldr	r3, [pc, #556]	; (8002e94 <SDO_getod+0x23c>)
 8002c66:	623b      	str	r3, [r7, #32]
   index = etohs (coer->index);
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	7b1a      	ldrb	r2, [r3, #12]
 8002c6c:	7b5b      	ldrb	r3, [r3, #13]
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	4313      	orrs	r3, r2
 8002c72:	83fb      	strh	r3, [r7, #30]
   nidx = SDO_findobject (index);
 8002c74:	8bfb      	ldrh	r3, [r7, #30]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff f8e4 	bl	8001e44 <SDO_findobject>
 8002c7c:	61b8      	str	r0, [r7, #24]
   if (nidx >= 0)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f2c0 8100 	blt.w	8002e86 <SDO_getod+0x22e>
   {
      MBXout = ESC_claimbuffer ();
 8002c86:	f7fe f9c1 	bl	800100c <ESC_claimbuffer>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	75fb      	strb	r3, [r7, #23]
      if (MBXout)
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80fb 	beq.w	8002e8c <SDO_getod+0x234>
      {
         coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
 8002c98:	4a7f      	ldr	r2, [pc, #508]	; (8002e98 <SDO_getod+0x240>)
 8002c9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ca0:	4a7c      	ldr	r2, [pc, #496]	; (8002e94 <SDO_getod+0x23c>)
 8002ca2:	4413      	add	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
         coel->mbxheader.mbxtype = MBXCOE;
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	7953      	ldrb	r3, [r2, #5]
 8002caa:	2103      	movs	r1, #3
 8002cac:	f361 0303 	bfi	r3, r1, #0, #4
 8002cb0:	7153      	strb	r3, [r2, #5]
         coel->coeheader.numberservice =
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	719a      	strb	r2, [r3, #6]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cbe:	71da      	strb	r2, [r3, #7]
            htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
         coel->infoheader.opcode = COE_GETODRESPONSE;
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	7a13      	ldrb	r3, [r2, #8]
 8002cc4:	2104      	movs	r1, #4
 8002cc6:	f361 0306 	bfi	r3, r1, #0, #7
 8002cca:	7213      	strb	r3, [r2, #8]
         coel->infoheader.incomplete = 0;
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	7a13      	ldrb	r3, [r2, #8]
 8002cd0:	f36f 13c7 	bfc	r3, #7, #1
 8002cd4:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	729a      	strb	r2, [r3, #10]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	72da      	strb	r2, [r3, #11]
         coel->index = htoes (index);
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	8bfa      	ldrh	r2, [r7, #30]
 8002cea:	819a      	strh	r2, [r3, #12]
         if (SDOobjects[nidx].objtype == OTYPE_VAR)
 8002cec:	496b      	ldr	r1, [pc, #428]	; (8002e9c <SDO_getod+0x244>)
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	440b      	add	r3, r1
 8002cfa:	885b      	ldrh	r3, [r3, #2]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b07      	cmp	r3, #7
 8002d00:	d12a      	bne.n	8002d58 <SDO_getod+0x100>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	b21b      	sxth	r3, r3
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff f843 	bl	8001d94 <SDO_findsubindex>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	607b      	str	r3, [r7, #4]
            const _objd *objd = SDOobjects[nidx].objdesc;
 8002d12:	4962      	ldr	r1, [pc, #392]	; (8002e9c <SDO_getod+0x244>)
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	440b      	add	r3, r1
 8002d20:	3308      	adds	r3, #8
 8002d22:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002d26:	603b      	str	r3, [r7, #0]
            coel->datatype = htoes ((objd + nsub)->datatype);
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	461a      	mov	r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	885b      	ldrh	r3, [r3, #2]
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	81da      	strh	r2, [r3, #14]
            coel->maxsub = SDOobjects[nidx].maxsub;
 8002d40:	4956      	ldr	r1, [pc, #344]	; (8002e9c <SDO_getod+0x244>)
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3304      	adds	r3, #4
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	741a      	strb	r2, [r3, #16]
 8002d56:	e04b      	b.n	8002df0 <SDO_getod+0x198>
         }
         else if (SDOobjects[nidx].objtype == OTYPE_ARRAY)
 8002d58:	4950      	ldr	r1, [pc, #320]	; (8002e9c <SDO_getod+0x244>)
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	440b      	add	r3, r1
 8002d66:	885b      	ldrh	r3, [r3, #2]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d12d      	bne.n	8002dca <SDO_getod+0x172>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	b21b      	sxth	r3, r3
 8002d72:	2100      	movs	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f80d 	bl	8001d94 <SDO_findsubindex>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	60fb      	str	r3, [r7, #12]
            const _objd *objd = SDOobjects[nidx].objdesc;
 8002d7e:	4947      	ldr	r1, [pc, #284]	; (8002e9c <SDO_getod+0x244>)
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3308      	adds	r3, #8
 8002d8e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002d92:	60bb      	str	r3, [r7, #8]
            coel->datatype = htoes ((objd + nsub)->datatype);
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4413      	add	r3, r2
 8002da4:	885b      	ldrh	r3, [r3, #2]
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	81da      	strh	r2, [r3, #14]
            coel->maxsub = SDOobjects[nidx].objdesc->value;
 8002dac:	493b      	ldr	r1, [pc, #236]	; (8002e9c <SDO_getod+0x244>)
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	440b      	add	r3, r1
 8002dba:	3308      	adds	r3, #8
 8002dbc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	741a      	strb	r2, [r3, #16]
 8002dc8:	e012      	b.n	8002df0 <SDO_getod+0x198>
         }
         else
         {
            coel->datatype = htoes (0);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	739a      	strb	r2, [r3, #14]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	73da      	strb	r2, [r3, #15]
            coel->maxsub = SDOobjects[nidx].objdesc->value;
 8002dd4:	4931      	ldr	r1, [pc, #196]	; (8002e9c <SDO_getod+0x244>)
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	440b      	add	r3, r1
 8002de2:	3308      	adds	r3, #8
 8002de4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	741a      	strb	r2, [r3, #16]
         }
         coel->objectcode = SDOobjects[nidx].objtype;
 8002df0:	492a      	ldr	r1, [pc, #168]	; (8002e9c <SDO_getod+0x244>)
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	440b      	add	r3, r1
 8002dfe:	885b      	ldrh	r3, [r3, #2]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	745a      	strb	r2, [r3, #17]
         s = (uint8_t *) SDOobjects[nidx].name;
 8002e08:	4924      	ldr	r1, [pc, #144]	; (8002e9c <SDO_getod+0x244>)
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	440b      	add	r3, r1
 8002e16:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002e1a:	62bb      	str	r3, [r7, #40]	; 0x28
         d = (uint8_t *) &(coel->name);
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	3312      	adds	r3, #18
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 8002e22:	e00e      	b.n	8002e42 <SDO_getod+0x1ea>
         {
            *d = *s;
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2a:	701a      	strb	r2, [r3, #0]
            n++;
 8002e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e30:	3301      	adds	r3, #1
 8002e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            s++;
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	3301      	adds	r3, #1
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
            d++;
 8002e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3e:	3301      	adds	r3, #1
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d006      	beq.n	8002e58 <SDO_getod+0x200>
 8002e4a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002e4e:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <SDO_getod+0x240>)
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	3b12      	subs	r3, #18
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d3e5      	bcc.n	8002e24 <SDO_getod+0x1cc>
         }
         *d = *s;
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	701a      	strb	r2, [r3, #0]
         coel->mbxheader.length = htoes ((uint16_t) 0x0c + n);
 8002e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	330c      	adds	r3, #12
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	801a      	strh	r2, [r3, #0]
         MBXcontrol[MBXout].state = MBXstate_outreq;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	4a0b      	ldr	r2, [pc, #44]	; (8002ea0 <SDO_getod+0x248>)
 8002e72:	2103      	movs	r1, #3
 8002e74:	54d1      	strb	r1, [r2, r3]
         MBXcontrol[0].state = MBXstate_idle;
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <SDO_getod+0x248>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <SDO_getod+0x240>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
   }
}
 8002e84:	e002      	b.n	8002e8c <SDO_getod+0x234>
      SDO_infoerror (ABORT_NOOBJECT);
 8002e86:	4807      	ldr	r0, [pc, #28]	; (8002ea4 <SDO_getod+0x24c>)
 8002e88:	f7ff fcc0 	bl	800280c <SDO_infoerror>
}
 8002e8c:	bf00      	nop
 8002e8e:	3730      	adds	r7, #48	; 0x30
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	2000024c 	.word	0x2000024c
 8002e98:	20000180 	.word	0x20000180
 8002e9c:	0800bd60 	.word	0x0800bd60
 8002ea0:	20000424 	.word	0x20000424
 8002ea4:	06020000 	.word	0x06020000

08002ea8 <SDO_geted>:
/** Function for handling incoming requested SDO Get Entry Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
void SDO_geted (void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	; 0x28
 8002eac:	af00      	add	r7, sp, #0
   int32_t nidx, nsub;
   uint8_t subindex;
   uint8_t *d;
   const uint8_t *s;
   const _objd *objd;
   uint8_t n = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	77fb      	strb	r3, [r7, #31]
   _COEentdesc *coer, *coel;
   coer = (_COEentdesc *) &MBX[0];
 8002eb2:	4b67      	ldr	r3, [pc, #412]	; (8003050 <SDO_geted+0x1a8>)
 8002eb4:	61bb      	str	r3, [r7, #24]
   index = etohs (coer->index);
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	7b1a      	ldrb	r2, [r3, #12]
 8002eba:	7b5b      	ldrb	r3, [r3, #13]
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	82fb      	strh	r3, [r7, #22]
   subindex = coer->subindex;
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	7b9b      	ldrb	r3, [r3, #14]
 8002ec6:	757b      	strb	r3, [r7, #21]
   nidx = SDO_findobject (index);
 8002ec8:	8afb      	ldrh	r3, [r7, #22]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe ffba 	bl	8001e44 <SDO_findobject>
 8002ed0:	6138      	str	r0, [r7, #16]
   if (nidx >= 0)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f2c0 80b4 	blt.w	8003042 <SDO_geted+0x19a>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	b21b      	sxth	r3, r3
 8002ede:	7d7a      	ldrb	r2, [r7, #21]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe ff56 	bl	8001d94 <SDO_findsubindex>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	60fb      	str	r3, [r7, #12]
      if (nsub >= 0)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f2c0 80a3 	blt.w	800303a <SDO_geted+0x192>
      {
         objd = SDOobjects[nidx].objdesc;
 8002ef4:	4957      	ldr	r1, [pc, #348]	; (8003054 <SDO_geted+0x1ac>)
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	440b      	add	r3, r1
 8002f02:	3308      	adds	r3, #8
 8002f04:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002f08:	60bb      	str	r3, [r7, #8]
         MBXout = ESC_claimbuffer ();
 8002f0a:	f7fe f87f 	bl	800100c <ESC_claimbuffer>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
         if (MBXout)
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8097 	beq.w	8003048 <SDO_geted+0x1a0>
         {
            coel = (_COEentdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	4a4e      	ldr	r2, [pc, #312]	; (8003058 <SDO_geted+0x1b0>)
 8002f1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f20:	fb02 f303 	mul.w	r3, r2, r3
 8002f24:	4a4a      	ldr	r2, [pc, #296]	; (8003050 <SDO_geted+0x1a8>)
 8002f26:	4413      	add	r3, r2
 8002f28:	603b      	str	r3, [r7, #0]
            coel->mbxheader.mbxtype = MBXCOE;
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	7953      	ldrb	r3, [r2, #5]
 8002f2e:	2103      	movs	r1, #3
 8002f30:	f361 0303 	bfi	r3, r1, #0, #4
 8002f34:	7153      	strb	r3, [r2, #5]
            coel->coeheader.numberservice =
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	719a      	strb	r2, [r3, #6]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f42:	71da      	strb	r2, [r3, #7]
               htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
            coel->infoheader.opcode = COE_ENTRYDESCRIPTIONRESPONSE;
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	7a13      	ldrb	r3, [r2, #8]
 8002f48:	2106      	movs	r1, #6
 8002f4a:	f361 0306 	bfi	r3, r1, #0, #7
 8002f4e:	7213      	strb	r3, [r2, #8]
            coel->infoheader.incomplete = 0;
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	7a13      	ldrb	r3, [r2, #8]
 8002f54:	f36f 13c7 	bfc	r3, #7, #1
 8002f58:	7213      	strb	r3, [r2, #8]
            coel->infoheader.reserved = 0x00;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	725a      	strb	r2, [r3, #9]
            coel->infoheader.fragmentsleft = htoes ((uint16_t) 0);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2200      	movs	r2, #0
 8002f64:	729a      	strb	r2, [r3, #10]
 8002f66:	2200      	movs	r2, #0
 8002f68:	72da      	strb	r2, [r3, #11]
            coel->index = htoes (index);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	8afa      	ldrh	r2, [r7, #22]
 8002f6e:	819a      	strh	r2, [r3, #12]
            coel->subindex = subindex;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	7d7a      	ldrb	r2, [r7, #21]
 8002f74:	739a      	strb	r2, [r3, #14]
            coel->valueinfo = COE_VALUEINFO_ACCESS +
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2207      	movs	r2, #7
 8002f7a:	73da      	strb	r2, [r3, #15]
               COE_VALUEINFO_OBJECT + COE_VALUEINFO_MAPPABLE;
            coel->datatype = htoes ((objd + nsub)->datatype);
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	461a      	mov	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	885b      	ldrh	r3, [r3, #2]
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	821a      	strh	r2, [r3, #16]
            coel->bitlength = htoes ((objd + nsub)->bitlength);
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	889b      	ldrh	r3, [r3, #4]
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	825a      	strh	r2, [r3, #18]
            coel->access = htoes ((objd + nsub)->flags);
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4413      	add	r3, r2
 8002fbc:	88db      	ldrh	r3, [r3, #6]
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	829a      	strh	r2, [r3, #20]
            s = (uint8_t *) (objd + nsub)->name;
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	623b      	str	r3, [r7, #32]
            d = (uint8_t *) &(coel->name);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	3316      	adds	r3, #22
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 8002fde:	e00c      	b.n	8002ffa <SDO_geted+0x152>
            {
               *d = *s;
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	781a      	ldrb	r2, [r3, #0]
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	701a      	strb	r2, [r3, #0]
               n++;
 8002fe8:	7ffb      	ldrb	r3, [r7, #31]
 8002fea:	3301      	adds	r3, #1
 8002fec:	77fb      	strb	r3, [r7, #31]
               s++;
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	623b      	str	r3, [r7, #32]
               d++;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <SDO_geted+0x166>
 8003002:	7ffa      	ldrb	r2, [r7, #31]
 8003004:	4b14      	ldr	r3, [pc, #80]	; (8003058 <SDO_geted+0x1b0>)
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	3b16      	subs	r3, #22
 800300a:	429a      	cmp	r2, r3
 800300c:	d3e8      	bcc.n	8002fe0 <SDO_geted+0x138>
            }
            *d = *s;
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	781a      	ldrb	r2, [r3, #0]
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	701a      	strb	r2, [r3, #0]
            coel->mbxheader.length = htoes ((uint16_t) 0x10 + n);
 8003016:	7ffb      	ldrb	r3, [r7, #31]
 8003018:	b29b      	uxth	r3, r3
 800301a:	3310      	adds	r3, #16
 800301c:	b29a      	uxth	r2, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	801a      	strh	r2, [r3, #0]
            MBXcontrol[MBXout].state = MBXstate_outreq;
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	4a0d      	ldr	r2, [pc, #52]	; (800305c <SDO_geted+0x1b4>)
 8003026:	2103      	movs	r1, #3
 8003028:	54d1      	strb	r1, [r2, r3]
            MBXcontrol[0].state = MBXstate_idle;
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <SDO_geted+0x1b4>)
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <SDO_geted+0x1b0>)
 8003032:	2200      	movs	r2, #0
 8003034:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
   }
}
 8003038:	e006      	b.n	8003048 <SDO_geted+0x1a0>
         SDO_infoerror (ABORT_NOSUBINDEX);
 800303a:	4809      	ldr	r0, [pc, #36]	; (8003060 <SDO_geted+0x1b8>)
 800303c:	f7ff fbe6 	bl	800280c <SDO_infoerror>
}
 8003040:	e002      	b.n	8003048 <SDO_geted+0x1a0>
      SDO_infoerror (ABORT_NOOBJECT);
 8003042:	4808      	ldr	r0, [pc, #32]	; (8003064 <SDO_geted+0x1bc>)
 8003044:	f7ff fbe2 	bl	800280c <SDO_infoerror>
}
 8003048:	bf00      	nop
 800304a:	3728      	adds	r7, #40	; 0x28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	2000024c 	.word	0x2000024c
 8003054:	0800bd60 	.word	0x0800bd60
 8003058:	20000180 	.word	0x20000180
 800305c:	20000424 	.word	0x20000424
 8003060:	06090011 	.word	0x06090011
 8003064:	06020000 	.word	0x06020000

08003068 <ESC_coeprocess>:
/** Main CoE function checking the status on current mailbox buffers carrying
 * data, distributing the mailboxes to appropriate CoE functions.
 * On Error an MBX_error or SDO Abort will be sent depending on error cause.
 */
void ESC_coeprocess (void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   _COEsdo *coesdo;
   _COEobjdesc *coeobjdesc;
   uint8_t service;
   if (ESCvar.MBXrun == 0)
 800306e:	4b5c      	ldr	r3, [pc, #368]	; (80031e0 <ESC_coeprocess+0x178>)
 8003070:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80af 	beq.w	80031d8 <ESC_coeprocess+0x170>
   {
      return;
   }
   if (!ESCvar.xoe && (MBXcontrol[0].state == MBXstate_inclaim))
 800307a:	4b59      	ldr	r3, [pc, #356]	; (80031e0 <ESC_coeprocess+0x178>)
 800307c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003080:	2b00      	cmp	r3, #0
 8003082:	d119      	bne.n	80030b8 <ESC_coeprocess+0x50>
 8003084:	4b57      	ldr	r3, [pc, #348]	; (80031e4 <ESC_coeprocess+0x17c>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d115      	bne.n	80030b8 <ESC_coeprocess+0x50>
   {
      mbh = (_MBXh *) &MBX[0];
 800308c:	4b56      	ldr	r3, [pc, #344]	; (80031e8 <ESC_coeprocess+0x180>)
 800308e:	60fb      	str	r3, [r7, #12]
      if (mbh->mbxtype == MBXCOE)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	795b      	ldrb	r3, [r3, #5]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b03      	cmp	r3, #3
 800309c:	d10c      	bne.n	80030b8 <ESC_coeprocess+0x50>
      {
         if (etohs (mbh->length) < COE_MINIMUM_LENGTH)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b07      	cmp	r3, #7
 80030a6:	d803      	bhi.n	80030b0 <ESC_coeprocess+0x48>
         {
            MBX_error (MBXERR_INVALIDSIZE);
 80030a8:	2008      	movs	r0, #8
 80030aa:	f7fe f833 	bl	8001114 <MBX_error>
 80030ae:	e003      	b.n	80030b8 <ESC_coeprocess+0x50>
         }
         else
         {
            ESCvar.xoe = MBXCOE;
 80030b0:	4b4b      	ldr	r3, [pc, #300]	; (80031e0 <ESC_coeprocess+0x178>)
 80030b2:	2203      	movs	r2, #3
 80030b4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
         }
      }
   }
   if ((ESCvar.xoe == (MBXCOE + MBXODL)) && (!ESCvar.mbxoutpost))
 80030b8:	4b49      	ldr	r3, [pc, #292]	; (80031e0 <ESC_coeprocess+0x178>)
 80030ba:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80030be:	2b13      	cmp	r3, #19
 80030c0:	d106      	bne.n	80030d0 <ESC_coeprocess+0x68>
 80030c2:	4b47      	ldr	r3, [pc, #284]	; (80031e0 <ESC_coeprocess+0x178>)
 80030c4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <ESC_coeprocess+0x68>
   {
      /* continue get OD list */
      SDO_getodlistcont ();
 80030cc:	f7ff fd1e 	bl	8002b0c <SDO_getodlistcont>
   }
   if (ESCvar.xoe == MBXCOE)
 80030d0:	4b43      	ldr	r3, [pc, #268]	; (80031e0 <ESC_coeprocess+0x178>)
 80030d2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d17f      	bne.n	80031da <ESC_coeprocess+0x172>
   {
      coesdo = (_COEsdo *) &MBX[0];
 80030da:	4b43      	ldr	r3, [pc, #268]	; (80031e8 <ESC_coeprocess+0x180>)
 80030dc:	60bb      	str	r3, [r7, #8]
      coeobjdesc = (_COEobjdesc *) &MBX[0];
 80030de:	4b42      	ldr	r3, [pc, #264]	; (80031e8 <ESC_coeprocess+0x180>)
 80030e0:	607b      	str	r3, [r7, #4]
      service = etohs (coesdo->coeheader.numberservice) >> 12;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	88db      	ldrh	r3, [r3, #6]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	0b1b      	lsrs	r3, r3, #12
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	70fb      	strb	r3, [r7, #3]
      /* initiate SDO upload request */
      if ((service == COE_SDOREQUEST)
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d10a      	bne.n	800310a <ESC_coeprocess+0xa2>
          && (coesdo->command == COE_COMMAND_UPLOADREQUEST)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	7a1b      	ldrb	r3, [r3, #8]
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	d106      	bne.n	800310a <ESC_coeprocess+0xa2>
          && (etohs (coesdo->mbxheader.length) == 0x0a))
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b0a      	cmp	r3, #10
 8003104:	d101      	bne.n	800310a <ESC_coeprocess+0xa2>
      {
         SDO_upload ();
 8003106:	f7ff f877 	bl	80021f8 <SDO_upload>
      }
      /* SDO upload segment request */
      if ((service == COE_SDOREQUEST)
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d112      	bne.n	8003136 <ESC_coeprocess+0xce>
          && ((coesdo->command & 0xef) == COE_COMMAND_UPLOADSEGREQ)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	7a1b      	ldrb	r3, [r3, #8]
 8003114:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8003118:	2b60      	cmp	r3, #96	; 0x60
 800311a:	d10c      	bne.n	8003136 <ESC_coeprocess+0xce>
          && (etohs (coesdo->mbxheader.length) == 0x0a)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b0a      	cmp	r3, #10
 8003124:	d107      	bne.n	8003136 <ESC_coeprocess+0xce>
          && (ESCvar.segmented == MBXSEU))
 8003126:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <ESC_coeprocess+0x178>)
 8003128:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d102      	bne.n	8003136 <ESC_coeprocess+0xce>
      {
         SDO_uploadsegment ();
 8003130:	f7ff f98c 	bl	800244c <SDO_uploadsegment>
 8003134:	e051      	b.n	80031da <ESC_coeprocess+0x172>
      }
      /* initiate SDO download request */
      else
      {
         if ((service == COE_SDOREQUEST) && ((coesdo->command & 0xf1) == 0x21))
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d108      	bne.n	800314e <ESC_coeprocess+0xe6>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	7a1b      	ldrb	r3, [r3, #8]
 8003140:	f003 03f1 	and.w	r3, r3, #241	; 0xf1
 8003144:	2b21      	cmp	r3, #33	; 0x21
 8003146:	d102      	bne.n	800314e <ESC_coeprocess+0xe6>
         {
            SDO_download ();
 8003148:	f7ff fa24 	bl	8002594 <SDO_download>
 800314c:	e045      	b.n	80031da <ESC_coeprocess+0x172>
         }
         /* initiate SDO get OD list */
         else
         {
            if ((service == COE_SDOINFORMATION)
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	2b08      	cmp	r3, #8
 8003152:	d109      	bne.n	8003168 <ESC_coeprocess+0x100>
                && (coeobjdesc->infoheader.opcode == 0x01))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	7a1b      	ldrb	r3, [r3, #8]
 8003158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <ESC_coeprocess+0x100>
            {
               SDO_getodlist ();
 8003162:	f7ff fbab 	bl	80028bc <SDO_getodlist>
 8003166:	e038      	b.n	80031da <ESC_coeprocess+0x172>
            }
            /* initiate SDO get OD */
            else
            {
               if ((service == COE_SDOINFORMATION)
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	2b08      	cmp	r3, #8
 800316c:	d109      	bne.n	8003182 <ESC_coeprocess+0x11a>
                   && (coeobjdesc->infoheader.opcode == 0x03))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	7a1b      	ldrb	r3, [r3, #8]
 8003172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b03      	cmp	r3, #3
 800317a:	d102      	bne.n	8003182 <ESC_coeprocess+0x11a>
               {
                  SDO_getod ();
 800317c:	f7ff fd6c 	bl	8002c58 <SDO_getod>
 8003180:	e02b      	b.n	80031da <ESC_coeprocess+0x172>
               }
               /* initiate SDO get ED */
               else
               {
                  if ((service == COE_SDOINFORMATION)
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d109      	bne.n	800319c <ESC_coeprocess+0x134>
                      && (coeobjdesc->infoheader.opcode == 0x05))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7a1b      	ldrb	r3, [r3, #8]
 800318c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b05      	cmp	r3, #5
 8003194:	d102      	bne.n	800319c <ESC_coeprocess+0x134>
                  {
                     SDO_geted ();
 8003196:	f7ff fe87 	bl	8002ea8 <SDO_geted>
 800319a:	e01e      	b.n	80031da <ESC_coeprocess+0x172>
                  }
                  else
                  {
                     /* COE not recognised above */
                     if (ESCvar.xoe == MBXCOE)
 800319c:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <ESC_coeprocess+0x178>)
 800319e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d119      	bne.n	80031da <ESC_coeprocess+0x172>
                     {
                        if (service == 0)
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d103      	bne.n	80031b4 <ESC_coeprocess+0x14c>
                        {
                           MBX_error (MBXERR_INVALIDHEADER);
 80031ac:	2005      	movs	r0, #5
 80031ae:	f7fd ffb1 	bl	8001114 <MBX_error>
 80031b2:	e009      	b.n	80031c8 <ESC_coeprocess+0x160>
                        }
                        else
                        {
                           SDO_abort (etohs (coesdo->index), coesdo->subindex, ABORT_UNSUPPORTED);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80031ba:	b298      	uxth	r0, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	7adb      	ldrb	r3, [r3, #11]
 80031c0:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <ESC_coeprocess+0x184>)
 80031c2:	4619      	mov	r1, r3
 80031c4:	f7fe ffd2 	bl	800216c <SDO_abort>
                        }
                        MBXcontrol[0].state = MBXstate_idle;
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <ESC_coeprocess+0x17c>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
                        ESCvar.xoe = 0;
 80031ce:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <ESC_coeprocess+0x178>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80031d6:	e000      	b.n	80031da <ESC_coeprocess+0x172>
      return;
 80031d8:	bf00      	nop
               }
            }
         }
      }
   }
}
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20000180 	.word	0x20000180
 80031e4:	20000424 	.word	0x20000424
 80031e8:	2000024c 	.word	0x2000024c
 80031ec:	06010000 	.word	0x06010000

080031f0 <COE_bitsliceGet>:
 * @param[in] offset = start offset
 * @param[in] length = number of bits to get
 * @return bitslice value
 */
static uint64_t COE_bitsliceGet (uint64_t * bitmap, int offset, int length)
{
 80031f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031f4:	b08d      	sub	sp, #52	; 0x34
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
   const int word_offset = offset / 64;
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	2a00      	cmp	r2, #0
 8003202:	da00      	bge.n	8003206 <COE_bitsliceGet+0x16>
 8003204:	323f      	adds	r2, #63	; 0x3f
 8003206:	1192      	asrs	r2, r2, #6
 8003208:	627a      	str	r2, [r7, #36]	; 0x24
   const int bit_offset = offset % 64;
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	4251      	negs	r1, r2
 800320e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003212:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003216:	bf58      	it	pl
 8003218:	424a      	negpl	r2, r1
 800321a:	623a      	str	r2, [r7, #32]
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	2a40      	cmp	r2, #64	; 0x40
 8003220:	d019      	beq.n	8003256 <COE_bitsliceGet+0x66>
 8003222:	f04f 0101 	mov.w	r1, #1
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f1a0 0e20 	sub.w	lr, r0, #32
 8003230:	f1c0 0c20 	rsb	ip, r0, #32
 8003234:	fa02 f900 	lsl.w	r9, r2, r0
 8003238:	fa01 fe0e 	lsl.w	lr, r1, lr
 800323c:	ea49 090e 	orr.w	r9, r9, lr
 8003240:	fa21 fc0c 	lsr.w	ip, r1, ip
 8003244:	ea49 090c 	orr.w	r9, r9, ip
 8003248:	fa01 f800 	lsl.w	r8, r1, r0
 800324c:	f118 31ff 	adds.w	r1, r8, #4294967295
 8003250:	f149 32ff 	adc.w	r2, r9, #4294967295
 8003254:	e003      	b.n	800325e <COE_bitsliceGet+0x6e>
 8003256:	f04f 31ff 	mov.w	r1, #4294967295
 800325a:	f04f 32ff 	mov.w	r2, #4294967295
 800325e:	e9c7 1206 	strd	r1, r2, [r7, #24]
   uint64_t w0;
   uint64_t w1 = 0;
 8003262:	f04f 0100 	mov.w	r1, #0
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28

   /* Get the least significant word */
   w0 = bitmap[word_offset];
 800326e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003270:	00d2      	lsls	r2, r2, #3
 8003272:	68f9      	ldr	r1, [r7, #12]
 8003274:	440a      	add	r2, r1
 8003276:	e9d2 1200 	ldrd	r1, r2, [r2]
 800327a:	e9c7 1204 	strd	r1, r2, [r7, #16]
   w0 = w0 >> bit_offset;
 800327e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003282:	6a38      	ldr	r0, [r7, #32]
 8003284:	f1c0 0e20 	rsb	lr, r0, #32
 8003288:	f1a0 0c20 	sub.w	ip, r0, #32
 800328c:	fa21 f500 	lsr.w	r5, r1, r0
 8003290:	fa02 fe0e 	lsl.w	lr, r2, lr
 8003294:	ea45 050e 	orr.w	r5, r5, lr
 8003298:	fa22 fc0c 	lsr.w	ip, r2, ip
 800329c:	ea45 050c 	orr.w	r5, r5, ip
 80032a0:	fa22 f600 	lsr.w	r6, r2, r0
 80032a4:	e9c7 5604 	strd	r5, r6, [r7, #16]

   /* Get the most significant word, if required */
   if (length + bit_offset > 64)
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	6a3a      	ldr	r2, [r7, #32]
 80032ac:	440a      	add	r2, r1
 80032ae:	2a40      	cmp	r2, #64	; 0x40
 80032b0:	dd1d      	ble.n	80032ee <COE_bitsliceGet+0xfe>
   {
      w1 = bitmap[word_offset + 1];
 80032b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b4:	3201      	adds	r2, #1
 80032b6:	00d2      	lsls	r2, r2, #3
 80032b8:	68f9      	ldr	r1, [r7, #12]
 80032ba:	440a      	add	r2, r1
 80032bc:	e9d2 1200 	ldrd	r1, r2, [r2]
 80032c0:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
      w1 = w1 << (64 - bit_offset);
 80032c4:	6a3a      	ldr	r2, [r7, #32]
 80032c6:	f1c2 0040 	rsb	r0, r2, #64	; 0x40
 80032ca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80032ce:	f1a0 0620 	sub.w	r6, r0, #32
 80032d2:	f1c0 0520 	rsb	r5, r0, #32
 80032d6:	fa02 f400 	lsl.w	r4, r2, r0
 80032da:	fa01 f606 	lsl.w	r6, r1, r6
 80032de:	4334      	orrs	r4, r6
 80032e0:	fa21 f505 	lsr.w	r5, r1, r5
 80032e4:	432c      	orrs	r4, r5
 80032e6:	fa01 f300 	lsl.w	r3, r1, r0
 80032ea:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
   }

   w0 = (w1 | w0);
 80032ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80032f2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80032f6:	ea43 0501 	orr.w	r5, r3, r1
 80032fa:	ea44 0602 	orr.w	r6, r4, r2
 80032fe:	e9c7 5604 	strd	r5, r6, [r7, #16]
   return (w0 & mask);
 8003302:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003306:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800330a:	ea03 0501 	and.w	r5, r3, r1
 800330e:	ea04 0602 	and.w	r6, r4, r2
 8003312:	462b      	mov	r3, r5
 8003314:	4634      	mov	r4, r6
}
 8003316:	4618      	mov	r0, r3
 8003318:	4621      	mov	r1, r4
 800331a:	3734      	adds	r7, #52	; 0x34
 800331c:	46bd      	mov	sp, r7
 800331e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003322 <COE_bitsliceSet>:
 * @param[in] length = number of bits to set
 * @param[in] value  = value to set
 */
static void COE_bitsliceSet (uint64_t * bitmap, int offset, int length,
                             uint64_t value)
{
 8003322:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003326:	b09a      	sub	sp, #104	; 0x68
 8003328:	af00      	add	r7, sp, #0
 800332a:	6278      	str	r0, [r7, #36]	; 0x24
 800332c:	6239      	str	r1, [r7, #32]
 800332e:	61fa      	str	r2, [r7, #28]
   const int word_offset = offset / 64;
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	2b00      	cmp	r3, #0
 8003334:	da00      	bge.n	8003338 <COE_bitsliceSet+0x16>
 8003336:	333f      	adds	r3, #63	; 0x3f
 8003338:	119b      	asrs	r3, r3, #6
 800333a:	667b      	str	r3, [r7, #100]	; 0x64
   const int bit_offset = offset % 64;
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	425a      	negs	r2, r3
 8003340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003344:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003348:	bf58      	it	pl
 800334a:	4253      	negpl	r3, r2
 800334c:	663b      	str	r3, [r7, #96]	; 0x60
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	2b40      	cmp	r3, #64	; 0x40
 8003352:	d01e      	beq.n	8003392 <COE_bitsliceSet+0x70>
 8003354:	f04f 0301 	mov.w	r3, #1
 8003358:	f04f 0400 	mov.w	r4, #0
 800335c:	69f9      	ldr	r1, [r7, #28]
 800335e:	f1a1 0020 	sub.w	r0, r1, #32
 8003362:	f1c1 0220 	rsb	r2, r1, #32
 8003366:	fa04 f501 	lsl.w	r5, r4, r1
 800336a:	617d      	str	r5, [r7, #20]
 800336c:	fa03 f000 	lsl.w	r0, r3, r0
 8003370:	697d      	ldr	r5, [r7, #20]
 8003372:	4305      	orrs	r5, r0
 8003374:	617d      	str	r5, [r7, #20]
 8003376:	fa23 f202 	lsr.w	r2, r3, r2
 800337a:	6978      	ldr	r0, [r7, #20]
 800337c:	4310      	orrs	r0, r2
 800337e:	6178      	str	r0, [r7, #20]
 8003380:	408b      	lsls	r3, r1
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003388:	f113 33ff 	adds.w	r3, r3, #4294967295
 800338c:	f144 34ff 	adc.w	r4, r4, #4294967295
 8003390:	e003      	b.n	800339a <COE_bitsliceSet+0x78>
 8003392:	f04f 33ff 	mov.w	r3, #4294967295
 8003396:	f04f 34ff 	mov.w	r4, #4294967295
 800339a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
   const uint64_t mask0 = mask << bit_offset;
 800339e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80033a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033a4:	f1a2 0020 	sub.w	r0, r2, #32
 80033a8:	f1c2 0120 	rsb	r1, r2, #32
 80033ac:	fa04 f502 	lsl.w	r5, r4, r2
 80033b0:	60fd      	str	r5, [r7, #12]
 80033b2:	fa03 f000 	lsl.w	r0, r3, r0
 80033b6:	68fd      	ldr	r5, [r7, #12]
 80033b8:	4305      	orrs	r5, r0
 80033ba:	60fd      	str	r5, [r7, #12]
 80033bc:	fa23 f101 	lsr.w	r1, r3, r1
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	4308      	orrs	r0, r1
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	4093      	lsls	r3, r2
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80033ce:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
   uint64_t v0 = value << bit_offset;
 80033d2:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80033d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033d8:	f1a2 0020 	sub.w	r0, r2, #32
 80033dc:	f1c2 0120 	rsb	r1, r2, #32
 80033e0:	fa04 f502 	lsl.w	r5, r4, r2
 80033e4:	607d      	str	r5, [r7, #4]
 80033e6:	fa03 f000 	lsl.w	r0, r3, r0
 80033ea:	687d      	ldr	r5, [r7, #4]
 80033ec:	4305      	orrs	r5, r0
 80033ee:	607d      	str	r5, [r7, #4]
 80033f0:	fa23 f101 	lsr.w	r1, r3, r1
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4308      	orrs	r0, r1
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	4093      	lsls	r3, r2
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003402:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
   uint64_t w0 = bitmap[word_offset];
 8003406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340c:	4413      	add	r3, r2
 800340e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003412:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

   /* Set the least significant word */
   w0 = (w0 & ~mask0) | (v0 & mask0);
 8003416:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800341a:	ea6f 0503 	mvn.w	r5, r3
 800341e:	ea6f 0604 	mvn.w	r6, r4
 8003422:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003426:	ea05 0103 	and.w	r1, r5, r3
 800342a:	ea06 0204 	and.w	r2, r6, r4
 800342e:	e9c7 1204 	strd	r1, r2, [r7, #16]
 8003432:	e9d7 5612 	ldrd	r5, r6, [r7, #72]	; 0x48
 8003436:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800343a:	ea03 0105 	and.w	r1, r3, r5
 800343e:	ea04 0206 	and.w	r2, r4, r6
 8003442:	460b      	mov	r3, r1
 8003444:	4614      	mov	r4, r2
 8003446:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800344a:	ea41 0103 	orr.w	r1, r1, r3
 800344e:	ea42 0204 	orr.w	r2, r2, r4
 8003452:	460b      	mov	r3, r1
 8003454:	4614      	mov	r4, r2
 8003456:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
   bitmap[word_offset] = w0;
 800345a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003460:	441a      	add	r2, r3
 8003462:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003466:	e9c2 3400 	strd	r3, r4, [r2]

   /* Set the most significant word, if required */
   if (length + bit_offset > 64)
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800346e:	4413      	add	r3, r2
 8003470:	2b40      	cmp	r3, #64	; 0x40
 8003472:	dd59      	ble.n	8003528 <COE_bitsliceSet+0x206>
   {
      const uint64_t mask1 = mask >> (64 - bit_offset);
 8003474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003476:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 800347a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800347e:	f1c2 0020 	rsb	r0, r2, #32
 8003482:	f1a2 0120 	sub.w	r1, r2, #32
 8003486:	fa23 fa02 	lsr.w	sl, r3, r2
 800348a:	fa04 f000 	lsl.w	r0, r4, r0
 800348e:	ea4a 0a00 	orr.w	sl, sl, r0
 8003492:	fa24 f101 	lsr.w	r1, r4, r1
 8003496:	ea4a 0a01 	orr.w	sl, sl, r1
 800349a:	fa24 fb02 	lsr.w	fp, r4, r2
 800349e:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      uint64_t v1 = value >> (64 - bit_offset);
 80034a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034a4:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80034a8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80034ac:	f1c2 0020 	rsb	r0, r2, #32
 80034b0:	f1a2 0120 	sub.w	r1, r2, #32
 80034b4:	fa23 f802 	lsr.w	r8, r3, r2
 80034b8:	fa04 f000 	lsl.w	r0, r4, r0
 80034bc:	ea48 0800 	orr.w	r8, r8, r0
 80034c0:	fa24 f101 	lsr.w	r1, r4, r1
 80034c4:	ea48 0801 	orr.w	r8, r8, r1
 80034c8:	fa24 f902 	lsr.w	r9, r4, r2
 80034cc:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
      uint64_t w1 = bitmap[word_offset + 1];
 80034d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034d2:	3301      	adds	r3, #1
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d8:	4413      	add	r3, r2
 80034da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034de:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

      w1 = (w1 & ~mask1) | (v1 & mask1);
 80034e2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80034e6:	ea6f 0503 	mvn.w	r5, r3
 80034ea:	ea6f 0604 	mvn.w	r6, r4
 80034ee:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80034f2:	ea05 0103 	and.w	r1, r5, r3
 80034f6:	ea06 0204 	and.w	r2, r6, r4
 80034fa:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 80034fe:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003502:	ea03 0805 	and.w	r8, r3, r5
 8003506:	ea04 0906 	and.w	r9, r4, r6
 800350a:	ea48 0301 	orr.w	r3, r8, r1
 800350e:	ea49 0402 	orr.w	r4, r9, r2
 8003512:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      bitmap[word_offset + 1] = w1;
 8003516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003518:	3301      	adds	r3, #1
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351e:	441a      	add	r2, r3
 8003520:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003524:	e9c2 3400 	strd	r3, r4, [r2]
   }
}
 8003528:	bf00      	nop
 800352a:	3768      	adds	r7, #104	; 0x68
 800352c:	46bd      	mov	sp, r7
 800352e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003532:	4770      	bx	lr

08003534 <COE_getValue>:
 *
 * @param[in] obj   = object description
 * @return object value
 */
static uint64_t COE_getValue (const _objd * obj)
{
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
   uint64_t value = 0;
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	f04f 0400 	mov.w	r4, #0
 8003544:	e9c7 3402 	strd	r3, r4, [r7, #8]

   /* TODO: const data */

   switch(obj->datatype)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	885b      	ldrh	r3, [r3, #2]
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	2b36      	cmp	r3, #54	; 0x36
 8003552:	f200 8092 	bhi.w	800367a <COE_getValue+0x146>
 8003556:	a201      	add	r2, pc, #4	; (adr r2, 800355c <COE_getValue+0x28>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	08003639 	.word	0x08003639
 8003560:	08003639 	.word	0x08003639
 8003564:	0800364b 	.word	0x0800364b
 8003568:	0800365d 	.word	0x0800365d
 800356c:	08003639 	.word	0x08003639
 8003570:	0800364b 	.word	0x0800364b
 8003574:	0800365d 	.word	0x0800365d
 8003578:	0800365d 	.word	0x0800365d
 800357c:	0800367b 	.word	0x0800367b
 8003580:	0800367b 	.word	0x0800367b
 8003584:	0800367b 	.word	0x0800367b
 8003588:	0800367b 	.word	0x0800367b
 800358c:	0800367b 	.word	0x0800367b
 8003590:	0800367b 	.word	0x0800367b
 8003594:	0800367b 	.word	0x0800367b
 8003598:	0800367b 	.word	0x0800367b
 800359c:	0800366d 	.word	0x0800366d
 80035a0:	0800367b 	.word	0x0800367b
 80035a4:	0800367b 	.word	0x0800367b
 80035a8:	0800367b 	.word	0x0800367b
 80035ac:	0800366d 	.word	0x0800366d
 80035b0:	0800367b 	.word	0x0800367b
 80035b4:	0800367b 	.word	0x0800367b
 80035b8:	0800367b 	.word	0x0800367b
 80035bc:	0800367b 	.word	0x0800367b
 80035c0:	0800367b 	.word	0x0800367b
 80035c4:	0800366d 	.word	0x0800366d
 80035c8:	0800367b 	.word	0x0800367b
 80035cc:	0800367b 	.word	0x0800367b
 80035d0:	0800367b 	.word	0x0800367b
 80035d4:	0800367b 	.word	0x0800367b
 80035d8:	0800367b 	.word	0x0800367b
 80035dc:	0800367b 	.word	0x0800367b
 80035e0:	0800367b 	.word	0x0800367b
 80035e4:	0800367b 	.word	0x0800367b
 80035e8:	0800367b 	.word	0x0800367b
 80035ec:	0800367b 	.word	0x0800367b
 80035f0:	0800367b 	.word	0x0800367b
 80035f4:	0800367b 	.word	0x0800367b
 80035f8:	0800367b 	.word	0x0800367b
 80035fc:	0800367b 	.word	0x0800367b
 8003600:	0800367b 	.word	0x0800367b
 8003604:	0800367b 	.word	0x0800367b
 8003608:	0800367b 	.word	0x0800367b
 800360c:	0800367b 	.word	0x0800367b
 8003610:	0800367b 	.word	0x0800367b
 8003614:	0800367b 	.word	0x0800367b
 8003618:	08003639 	.word	0x08003639
 800361c:	08003639 	.word	0x08003639
 8003620:	08003639 	.word	0x08003639
 8003624:	08003639 	.word	0x08003639
 8003628:	08003639 	.word	0x08003639
 800362c:	08003639 	.word	0x08003639
 8003630:	08003639 	.word	0x08003639
 8003634:	08003639 	.word	0x08003639
   case DTYPE_BIT7:
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
      value = *(uint8_t *)obj->data;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f04f 0400 	mov.w	r4, #0
 8003644:	e9c7 3402 	strd	r3, r4, [r7, #8]
      break;
 8003648:	e01e      	b.n	8003688 <COE_getValue+0x154>

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
      value = *(uint16_t *)obj->data;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	f04f 0400 	mov.w	r4, #0
 8003656:	e9c7 3402 	strd	r3, r4, [r7, #8]
      break;
 800365a:	e015      	b.n	8003688 <COE_getValue+0x154>

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
      value = *(uint32_t *)obj->data;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f04f 0400 	mov.w	r4, #0
 8003666:	e9c7 3402 	strd	r3, r4, [r7, #8]
      break;
 800366a:	e00d      	b.n	8003688 <COE_getValue+0x154>

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      value = *(uint64_t *)obj->data;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003674:	e9c7 3402 	strd	r3, r4, [r7, #8]
      break;
 8003678:	e006      	b.n	8003688 <COE_getValue+0x154>

   default:
      CC_ASSERT (0);
 800367a:	4b07      	ldr	r3, [pc, #28]	; (8003698 <COE_getValue+0x164>)
 800367c:	4a07      	ldr	r2, [pc, #28]	; (800369c <COE_getValue+0x168>)
 800367e:	f240 4119 	movw	r1, #1049	; 0x419
 8003682:	4807      	ldr	r0, [pc, #28]	; (80036a0 <COE_getValue+0x16c>)
 8003684:	f006 fde0 	bl	800a248 <__assert_func>
   }

   return value;
 8003688:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 800368c:	4618      	mov	r0, r3
 800368e:	4621      	mov	r1, r4
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	bd90      	pop	{r4, r7, pc}
 8003696:	bf00      	nop
 8003698:	0800b308 	.word	0x0800b308
 800369c:	0800b5d8 	.word	0x0800b5d8
 80036a0:	0800b30c 	.word	0x0800b30c

080036a4 <COE_setValue>:
 *
 * @param[in] obj   = object description
 * @param[in] value = new value
 */
static void COE_setValue (const _objd * obj, uint64_t value)
{
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	e9c7 2300 	strd	r2, r3, [r7]
   switch(obj->datatype)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	885b      	ldrh	r3, [r3, #2]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	2b36      	cmp	r3, #54	; 0x36
 80036ba:	f200 8087 	bhi.w	80037cc <COE_setValue+0x128>
 80036be:	a201      	add	r2, pc, #4	; (adr r2, 80036c4 <COE_setValue+0x20>)
 80036c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c4:	080037a1 	.word	0x080037a1
 80036c8:	080037a1 	.word	0x080037a1
 80036cc:	080037ab 	.word	0x080037ab
 80036d0:	080037b5 	.word	0x080037b5
 80036d4:	080037a1 	.word	0x080037a1
 80036d8:	080037ab 	.word	0x080037ab
 80036dc:	080037b5 	.word	0x080037b5
 80036e0:	080037b5 	.word	0x080037b5
 80036e4:	080037cd 	.word	0x080037cd
 80036e8:	080037cd 	.word	0x080037cd
 80036ec:	080037cd 	.word	0x080037cd
 80036f0:	080037cd 	.word	0x080037cd
 80036f4:	080037cd 	.word	0x080037cd
 80036f8:	080037cd 	.word	0x080037cd
 80036fc:	080037cd 	.word	0x080037cd
 8003700:	080037cd 	.word	0x080037cd
 8003704:	080037bf 	.word	0x080037bf
 8003708:	080037cd 	.word	0x080037cd
 800370c:	080037cd 	.word	0x080037cd
 8003710:	080037cd 	.word	0x080037cd
 8003714:	080037bf 	.word	0x080037bf
 8003718:	080037cd 	.word	0x080037cd
 800371c:	080037cd 	.word	0x080037cd
 8003720:	080037cd 	.word	0x080037cd
 8003724:	080037cd 	.word	0x080037cd
 8003728:	080037cd 	.word	0x080037cd
 800372c:	080037bf 	.word	0x080037bf
 8003730:	080037cd 	.word	0x080037cd
 8003734:	080037cd 	.word	0x080037cd
 8003738:	080037cd 	.word	0x080037cd
 800373c:	080037cd 	.word	0x080037cd
 8003740:	080037cd 	.word	0x080037cd
 8003744:	080037cd 	.word	0x080037cd
 8003748:	080037cd 	.word	0x080037cd
 800374c:	080037cd 	.word	0x080037cd
 8003750:	080037cd 	.word	0x080037cd
 8003754:	080037cd 	.word	0x080037cd
 8003758:	080037cd 	.word	0x080037cd
 800375c:	080037cd 	.word	0x080037cd
 8003760:	080037cd 	.word	0x080037cd
 8003764:	080037cd 	.word	0x080037cd
 8003768:	080037cd 	.word	0x080037cd
 800376c:	080037cd 	.word	0x080037cd
 8003770:	080037cd 	.word	0x080037cd
 8003774:	080037cd 	.word	0x080037cd
 8003778:	080037cd 	.word	0x080037cd
 800377c:	080037cd 	.word	0x080037cd
 8003780:	080037a1 	.word	0x080037a1
 8003784:	080037a1 	.word	0x080037a1
 8003788:	080037a1 	.word	0x080037a1
 800378c:	080037a1 	.word	0x080037a1
 8003790:	080037a1 	.word	0x080037a1
 8003794:	080037a1 	.word	0x080037a1
 8003798:	080037a1 	.word	0x080037a1
 800379c:	080037a1 	.word	0x080037a1
   case DTYPE_BIT7:
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
      *(uint8_t *)obj->data = value & UINT8_MAX;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	783a      	ldrb	r2, [r7, #0]
 80037a6:	701a      	strb	r2, [r3, #0]
      break;
 80037a8:	e014      	b.n	80037d4 <COE_setValue+0x130>

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
      *(uint16_t *)obj->data = value & UINT16_MAX;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	883a      	ldrh	r2, [r7, #0]
 80037b0:	801a      	strh	r2, [r3, #0]
      break;
 80037b2:	e00f      	b.n	80037d4 <COE_setValue+0x130>

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
      *(uint32_t *)obj->data = value & UINT32_MAX;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	601a      	str	r2, [r3, #0]
      break;
 80037bc:	e00a      	b.n	80037d4 <COE_setValue+0x130>

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      *(uint64_t *)obj->data = value;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80037c6:	e9c2 3400 	strd	r3, r4, [r2]
      break;
 80037ca:	e003      	b.n	80037d4 <COE_setValue+0x130>

   default:
      DPRINT ("ignored\n");
 80037cc:	4803      	ldr	r0, [pc, #12]	; (80037dc <COE_setValue+0x138>)
 80037ce:	f007 f8e3 	bl	800a998 <puts>
      break;
 80037d2:	bf00      	nop
   }
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd90      	pop	{r4, r7, pc}
 80037dc:	0800b328 	.word	0x0800b328

080037e0 <COE_initDefaultValues>:

/**
 * Init default values for SDO objects
 */
void COE_initDefaultValues (void)
{
 80037e0:	b590      	push	{r4, r7, lr}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
   const _objd *objd;
   int n;
   uint8_t maxsub;

   /* Set default values from object descriptor */
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	e06f      	b.n	80038cc <COE_initDefaultValues+0xec>
   {
      objd = SDOobjects[n].objdesc;
 80037ec:	4943      	ldr	r1, [pc, #268]	; (80038fc <COE_initDefaultValues+0x11c>)
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	440b      	add	r3, r1
 80037fa:	3308      	adds	r3, #8
 80037fc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003800:	607b      	str	r3, [r7, #4]
      maxsub = SDOobjects[n].maxsub;
 8003802:	493e      	ldr	r1, [pc, #248]	; (80038fc <COE_initDefaultValues+0x11c>)
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	440b      	add	r3, r1
 8003810:	3304      	adds	r3, #4
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	70fb      	strb	r3, [r7, #3]

      i = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
      do
      {
         if (objd[i].data != NULL)
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	461a      	mov	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d039      	beq.n	80038a4 <COE_initDefaultValues+0xc4>
         {
            COE_setValue (&objd[i], objd[i].value);
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	461a      	mov	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	1899      	adds	r1, r3, r2
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	461a      	mov	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4413      	add	r3, r2
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f04f 0400 	mov.w	r4, #0
 8003856:	461a      	mov	r2, r3
 8003858:	4623      	mov	r3, r4
 800385a:	4608      	mov	r0, r1
 800385c:	f7ff ff22 	bl	80036a4 <COE_setValue>
            DPRINT ("%04x:%02x = %x\n", SDOobjects[n].index, objd[i].subindex, objd[i].value);
 8003860:	4926      	ldr	r1, [pc, #152]	; (80038fc <COE_initDefaultValues+0x11c>)
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	440b      	add	r3, r1
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	b29b      	uxth	r3, r3
 8003872:	4619      	mov	r1, r3
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	461a      	mov	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4413      	add	r3, r2
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	4618      	mov	r0, r3
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	461a      	mov	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4413      	add	r3, r2
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4602      	mov	r2, r0
 800389e:	4818      	ldr	r0, [pc, #96]	; (8003900 <COE_initDefaultValues+0x120>)
 80038a0:	f007 f806 	bl	800a8b0 <iprintf>
         }
      } while (objd[i++].subindex < maxsub);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	60fa      	str	r2, [r7, #12]
 80038aa:	461a      	mov	r2, r3
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	461a      	mov	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4413      	add	r3, r2
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	b29a      	uxth	r2, r3
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d3a9      	bcc.n	800381a <COE_initDefaultValues+0x3a>
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3301      	adds	r3, #1
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	490b      	ldr	r1, [pc, #44]	; (80038fc <COE_initDefaultValues+0x11c>)
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	440b      	add	r3, r1
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d182      	bne.n	80037ec <COE_initDefaultValues+0xc>
   }

   /* Let application override default values */
   if (ESCvar.set_defaults_hook != NULL)
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <COE_initDefaultValues+0x124>)
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <COE_initDefaultValues+0x114>
   {
      ESCvar.set_defaults_hook();
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <COE_initDefaultValues+0x124>)
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	4798      	blx	r3
   }
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd90      	pop	{r4, r7, pc}
 80038fc:	0800bd60 	.word	0x0800bd60
 8003900:	0800b338 	.word	0x0800b338
 8003904:	20000180 	.word	0x20000180

08003908 <COE_pdoPack>:
 * @param[in] buffer     = input process data
 * @param[in] nmappings  = number of mappings in sync manager
 * @param[in] mappings   = list of mapped objects in sync manager
 */
void COE_pdoPack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b08d      	sub	sp, #52	; 0x34
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	2b00      	cmp	r3, #0
 800391c:	d006      	beq.n	800392c <COE_pdoPack+0x24>
 800391e:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <COE_pdoPack+0xac>)
 8003920:	4a25      	ldr	r2, [pc, #148]	; (80039b8 <COE_pdoPack+0xb0>)
 8003922:	f240 4182 	movw	r1, #1154	; 0x482
 8003926:	4825      	ldr	r0, [pc, #148]	; (80039bc <COE_pdoPack+0xb4>)
 8003928:	f006 fc8e 	bl	800a248 <__assert_func>

   for (ix = 0; ix < nmappings; ix++)
 800392c:	2300      	movs	r3, #0
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
 8003930:	e038      	b.n	80039a4 <COE_pdoPack+0x9c>
   {
      const _objd * obj = mappings[ix].obj;
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	4413      	add	r3, r2
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	623b      	str	r3, [r7, #32]
      uint16_t offset = mappings[ix].offset;
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	889b      	ldrh	r3, [r3, #4]
 8003948:	83fb      	strh	r3, [r7, #30]

      if (obj != NULL)
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d026      	beq.n	800399e <COE_pdoPack+0x96>
      {
         if (obj->bitlength > 64)
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	889b      	ldrh	r3, [r3, #4]
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	d910      	bls.n	800397c <COE_pdoPack+0x74>
         {
            memcpy (
               &buffer[BITS2BYTES (offset)],
 800395a:	8bfb      	ldrh	r3, [r7, #30]
 800395c:	3307      	adds	r3, #7
 800395e:	10db      	asrs	r3, r3, #3
 8003960:	461a      	mov	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1898      	adds	r0, r3, r2
               obj->data,
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	6919      	ldr	r1, [r3, #16]
               BITS2BYTES (obj->bitlength)
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	889b      	ldrh	r3, [r3, #4]
 800396e:	b29b      	uxth	r3, r3
 8003970:	3307      	adds	r3, #7
 8003972:	10db      	asrs	r3, r3, #3
            memcpy (
 8003974:	461a      	mov	r2, r3
 8003976:	f006 fcc1 	bl	800a2fc <memcpy>
 800397a:	e010      	b.n	800399e <COE_pdoPack+0x96>
            );
         }
         else
         {
            /* Atomically get object value */
            uint64_t value = COE_getValue (obj);
 800397c:	6a38      	ldr	r0, [r7, #32]
 800397e:	f7ff fdd9 	bl	8003534 <COE_getValue>
 8003982:	e9c7 0104 	strd	r0, r1, [r7, #16]
            COE_bitsliceSet (
 8003986:	8bf9      	ldrh	r1, [r7, #30]
               (uint64_t *)buffer,
               offset,
               obj->bitlength,
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	889b      	ldrh	r3, [r3, #4]
 800398c:	b29b      	uxth	r3, r3
            COE_bitsliceSet (
 800398e:	461a      	mov	r2, r3
 8003990:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003994:	e9cd 3400 	strd	r3, r4, [sp]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7ff fcc2 	bl	8003322 <COE_bitsliceSet>
   for (ix = 0; ix < nmappings; ix++)
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	3301      	adds	r3, #1
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
 80039a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	dbc2      	blt.n	8003932 <COE_pdoPack+0x2a>
               value
            );
         }
      }
   }
}
 80039ac:	bf00      	nop
 80039ae:	372c      	adds	r7, #44	; 0x2c
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd90      	pop	{r4, r7, pc}
 80039b4:	0800b350 	.word	0x0800b350
 80039b8:	0800b5e8 	.word	0x0800b5e8
 80039bc:	0800b30c 	.word	0x0800b30c

080039c0 <COE_pdoUnpack>:
 * @param[in] buffer    = output process data
 * @param[in] nmappings = number of mappings in sync manager
 * @param[in] mappings  = list of mapped objects in sync manager
 */
void COE_pdoUnpack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d006      	beq.n	80039e4 <COE_pdoUnpack+0x24>
 80039d6:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <COE_pdoUnpack+0xa8>)
 80039d8:	4a24      	ldr	r2, [pc, #144]	; (8003a6c <COE_pdoUnpack+0xac>)
 80039da:	f240 41b1 	movw	r1, #1201	; 0x4b1
 80039de:	4824      	ldr	r0, [pc, #144]	; (8003a70 <COE_pdoUnpack+0xb0>)
 80039e0:	f006 fc32 	bl	800a248 <__assert_func>

   for (ix = 0; ix < nmappings; ix++)
 80039e4:	2300      	movs	r3, #0
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
 80039e8:	e036      	b.n	8003a58 <COE_pdoUnpack+0x98>
   {
      const _objd * obj = mappings[ix].obj;
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4413      	add	r3, r2
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	623b      	str	r3, [r7, #32]
      uint16_t offset = mappings[ix].offset;
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4413      	add	r3, r2
 80039fe:	889b      	ldrh	r3, [r3, #4]
 8003a00:	83fb      	strh	r3, [r7, #30]

      if (obj != NULL)
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d024      	beq.n	8003a52 <COE_pdoUnpack+0x92>
      {
         if (obj->bitlength > 64)
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	889b      	ldrh	r3, [r3, #4]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b40      	cmp	r3, #64	; 0x40
 8003a10:	d910      	bls.n	8003a34 <COE_pdoUnpack+0x74>
         {
            memcpy (
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	6918      	ldr	r0, [r3, #16]
               obj->data,
               &buffer[BITS2BYTES (offset)],
 8003a16:	8bfb      	ldrh	r3, [r7, #30]
 8003a18:	3307      	adds	r3, #7
 8003a1a:	10db      	asrs	r3, r3, #3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1899      	adds	r1, r3, r2
               BITS2BYTES (obj->bitlength)
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	889b      	ldrh	r3, [r3, #4]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3307      	adds	r3, #7
 8003a2a:	10db      	asrs	r3, r3, #3
            memcpy (
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f006 fc65 	bl	800a2fc <memcpy>
 8003a32:	e00e      	b.n	8003a52 <COE_pdoUnpack+0x92>
            );
         }
         else
         {
            /* Atomically set object value */
            uint64_t value = COE_bitsliceGet (
 8003a34:	8bf9      	ldrh	r1, [r7, #30]
               (uint64_t *)buffer,
               offset,
               obj->bitlength
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	889b      	ldrh	r3, [r3, #4]
 8003a3a:	b29b      	uxth	r3, r3
            uint64_t value = COE_bitsliceGet (
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f7ff fbd6 	bl	80031f0 <COE_bitsliceGet>
 8003a44:	e9c7 0104 	strd	r0, r1, [r7, #16]
            );
            COE_setValue (obj, value);
 8003a48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a4c:	6a38      	ldr	r0, [r7, #32]
 8003a4e:	f7ff fe29 	bl	80036a4 <COE_setValue>
   for (ix = 0; ix < nmappings; ix++)
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	3301      	adds	r3, #1
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
 8003a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	dbc4      	blt.n	80039ea <COE_pdoUnpack+0x2a>
         }
      }
   }
}
 8003a60:	bf00      	nop
 8003a62:	3728      	adds	r7, #40	; 0x28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	0800b350 	.word	0x0800b350
 8003a6c:	0800b5f4 	.word	0x0800b5f4
 8003a70:	0800b30c 	.word	0x0800b30c

08003a74 <COE_maxSub>:
 * This function fetches the value of subindex 0 (max subindex).
 *
 * @param[in] index = object index
 */
uint8_t COE_maxSub (uint16_t index)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	80fb      	strh	r3, [r7, #6]
   int nidx;
   uint8_t maxsub;

   nidx = SDO_findobject (index);
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe f9df 	bl	8001e44 <SDO_findobject>
 8003a86:	60f8      	str	r0, [r7, #12]
   if (nidx == -1)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d101      	bne.n	8003a94 <COE_maxSub+0x20>
      return 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e027      	b.n	8003ae4 <COE_maxSub+0x70>

   maxsub = OBJ_VALUE_FETCH (maxsub, SDOobjects[nidx].objdesc[0]);
 8003a94:	4915      	ldr	r1, [pc, #84]	; (8003aec <COE_maxSub+0x78>)
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3308      	adds	r3, #8
 8003aa4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <COE_maxSub+0x54>
 8003aae:	490f      	ldr	r1, [pc, #60]	; (8003aec <COE_maxSub+0x78>)
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	1a9b      	subs	r3, r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	440b      	add	r3, r1
 8003abc:	3308      	adds	r3, #8
 8003abe:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	e00b      	b.n	8003ae0 <COE_maxSub+0x6c>
 8003ac8:	4908      	ldr	r1, [pc, #32]	; (8003aec <COE_maxSub+0x78>)
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	72fb      	strb	r3, [r7, #11]
   return maxsub;
 8003ae2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	0800bd60 	.word	0x0800bd60

08003af0 <FOE_fopen>:
 * @param[in] op        = Request op-code
 * @return 0= if we succeed, FOE_ERR_NOTFOUND something wrong with filename or
 * password
 */
int FOE_fopen (char *name, uint8_t num_chars, uint32_t pass, uint8_t op)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	461a      	mov	r2, r3
 8003afc:	460b      	mov	r3, r1
 8003afe:	72fb      	strb	r3, [r7, #11]
 8003b00:	4613      	mov	r3, r2
 8003b02:	72bb      	strb	r3, [r7, #10]
   uint32_t i;

   /* Unpack the file name into characters we can look at. */
   if (num_chars > FOE_FN_MAX)
 8003b04:	7afb      	ldrb	r3, [r7, #11]
 8003b06:	2b0f      	cmp	r3, #15
 8003b08:	d901      	bls.n	8003b0e <FOE_fopen+0x1e>
   {
      num_chars = FOE_FN_MAX;
 8003b0a:	230f      	movs	r3, #15
 8003b0c:	72fb      	strb	r3, [r7, #11]
   }

   for (i = 0; i < num_chars; i++)
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	e00b      	b.n	8003b2c <FOE_fopen+0x3c>
   {
      foe_file_name[i] = name[i];
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	4413      	add	r3, r2
 8003b1a:	7819      	ldrb	r1, [r3, #0]
 8003b1c:	4a42      	ldr	r2, [pc, #264]	; (8003c28 <FOE_fopen+0x138>)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	4413      	add	r3, r2
 8003b22:	460a      	mov	r2, r1
 8003b24:	701a      	strb	r2, [r3, #0]
   for (i = 0; i < num_chars; i++)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	7afb      	ldrb	r3, [r7, #11]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d3ef      	bcc.n	8003b14 <FOE_fopen+0x24>
   }
   foe_file_name[i] = '\0';
 8003b34:	4a3c      	ldr	r2, [pc, #240]	; (8003c28 <FOE_fopen+0x138>)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	4413      	add	r3, r2
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]

   /* Figure out what file they're talking about. */
   for (i = 0; i < foe_cfg->n_files; i++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	e065      	b.n	8003c10 <FOE_fopen+0x120>
   {
      if ((0 == strncmp (foe_file_name, foe_files[i].name, num_chars)) &&
 8003b44:	4b39      	ldr	r3, [pc, #228]	; (8003c2c <FOE_fopen+0x13c>)
 8003b46:	6819      	ldr	r1, [r3, #0]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	7afa      	ldrb	r2, [r7, #11]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4833      	ldr	r0, [pc, #204]	; (8003c28 <FOE_fopen+0x138>)
 8003b5c:	f006 ff24 	bl	800a9a8 <strncmp>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d151      	bne.n	8003c0a <FOE_fopen+0x11a>
          (pass == foe_files[i].filepass))
 8003b66:	4b31      	ldr	r3, [pc, #196]	; (8003c2c <FOE_fopen+0x13c>)
 8003b68:	6819      	ldr	r1, [r3, #0]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	695b      	ldr	r3, [r3, #20]
      if ((0 == strncmp (foe_file_name, foe_files[i].name, num_chars)) &&
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d145      	bne.n	8003c0a <FOE_fopen+0x11a>
      {
         foe_file = &foe_files[i];
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <FOE_fopen+0x13c>)
 8003b80:	6819      	ldr	r1, [r3, #0]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	4a28      	ldr	r2, [pc, #160]	; (8003c30 <FOE_fopen+0x140>)
 8003b90:	6013      	str	r3, [r2, #0]
         foe_file->address_offset = 0;
 8003b92:	4b27      	ldr	r3, [pc, #156]	; (8003c30 <FOE_fopen+0x140>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2200      	movs	r2, #0
 8003b98:	60da      	str	r2, [r3, #12]
         foe_file->total_size = 0;
 8003b9a:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <FOE_fopen+0x140>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	611a      	str	r2, [r3, #16]
         switch (op)
 8003ba2:	7abb      	ldrb	r3, [r7, #10]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d002      	beq.n	8003bae <FOE_fopen+0xbe>
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d017      	beq.n	8003bdc <FOE_fopen+0xec>
 8003bac:	e02d      	b.n	8003c0a <FOE_fopen+0x11a>
         {
            case FOE_OP_RRQ:
            {
               FOEvar.fposition = 0;
 8003bae:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <FOE_fopen+0x144>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	71da      	strb	r2, [r3, #7]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	721a      	strb	r2, [r3, #8]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	725a      	strb	r2, [r3, #9]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	729a      	strb	r2, [r3, #10]
               FOEvar.fend = foe_files[i].max_data;
 8003bc0:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <FOE_fopen+0x13c>)
 8003bc2:	6819      	ldr	r1, [r3, #0]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <FOE_fopen+0x144>)
 8003bd4:	f8c2 300f 	str.w	r3, [r2, #15]
               return 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e021      	b.n	8003c20 <FOE_fopen+0x130>
            }
            case FOE_OP_WRQ:
            {
               FOEvar.fposition = 0;
 8003bdc:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <FOE_fopen+0x144>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	71da      	strb	r2, [r3, #7]
 8003be2:	2200      	movs	r2, #0
 8003be4:	721a      	strb	r2, [r3, #8]
 8003be6:	2200      	movs	r2, #0
 8003be8:	725a      	strb	r2, [r3, #9]
 8003bea:	2200      	movs	r2, #0
 8003bec:	729a      	strb	r2, [r3, #10]
               FOEvar.fend = foe_files[i].max_data;
 8003bee:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <FOE_fopen+0x13c>)
 8003bf0:	6819      	ldr	r1, [r3, #0]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4a0c      	ldr	r2, [pc, #48]	; (8003c34 <FOE_fopen+0x144>)
 8003c02:	f8c2 300f 	str.w	r3, [r2, #15]
               return 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	e00a      	b.n	8003c20 <FOE_fopen+0x130>
   for (i = 0; i < foe_cfg->n_files; i++)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <FOE_fopen+0x148>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d393      	bcc.n	8003b44 <FOE_fopen+0x54>
            }
         }
      }
   }

   return FOE_ERR_NOTFOUND;
 8003c1c:	f248 0301 	movw	r3, #32769	; 0x8001
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000428 	.word	0x20000428
 8003c2c:	20000158 	.word	0x20000158
 8003c30:	2000015c 	.word	0x2000015c
 8003c34:	20000160 	.word	0x20000160
 8003c38:	20000154 	.word	0x20000154

08003c3c <FOE_fwrite>:
 * @param[in] length = Length of data to read

 * @return Number of copied bytes.
 */
uint16_t FOE_fwrite (uint8_t *data, uint16_t length)
{
 8003c3c:	b590      	push	{r4, r7, lr}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	807b      	strh	r3, [r7, #2]
    uint16_t ncopied = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	81fb      	strh	r3, [r7, #14]
    uint32_t failed = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60bb      	str	r3, [r7, #8]

    DPRINT("FOE_fwrite\n");
 8003c50:	4837      	ldr	r0, [pc, #220]	; (8003d30 <FOE_fwrite+0xf4>)
 8003c52:	f006 fea1 	bl	800a998 <puts>
    FOEvar.fprevposition = FOEvar.fposition;
 8003c56:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <FOE_fwrite+0xf8>)
 8003c58:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8003c5c:	4a35      	ldr	r2, [pc, #212]	; (8003d34 <FOE_fwrite+0xf8>)
 8003c5e:	f8c2 300b 	str.w	r3, [r2, #11]
    while (length && (FOEvar.fend - FOEvar.fposition) && !failed)
 8003c62:	e045      	b.n	8003cf0 <FOE_fwrite+0xb4>
    {
       length--;
 8003c64:	887b      	ldrh	r3, [r7, #2]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	807b      	strh	r3, [r7, #2]
       foe_cfg->fbuffer[FOEvar.fbufposition++] = *(data++);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	4a31      	ldr	r2, [pc, #196]	; (8003d38 <FOE_fwrite+0xfc>)
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	6811      	ldr	r1, [r2, #0]
 8003c76:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <FOE_fwrite+0xf8>)
 8003c78:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8003c7c:	b292      	uxth	r2, r2
 8003c7e:	1c50      	adds	r0, r2, #1
 8003c80:	b284      	uxth	r4, r0
 8003c82:	482c      	ldr	r0, [pc, #176]	; (8003d34 <FOE_fwrite+0xf8>)
 8003c84:	f8a0 4001 	strh.w	r4, [r0, #1]
 8003c88:	440a      	add	r2, r1
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	7013      	strb	r3, [r2, #0]
       if(FOEvar.fbufposition >= foe_cfg->buffer_size)
 8003c8e:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <FOE_fwrite+0xf8>)
 8003c90:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <FOE_fwrite+0xfc>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d31c      	bcc.n	8003cdc <FOE_fwrite+0xa0>
       {
          failed = foe_file->write_function (foe_file, foe_cfg->fbuffer, FOEvar.fbufposition);
 8003ca2:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <FOE_fwrite+0x100>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	4a24      	ldr	r2, [pc, #144]	; (8003d3c <FOE_fwrite+0x100>)
 8003caa:	6810      	ldr	r0, [r2, #0]
 8003cac:	4a22      	ldr	r2, [pc, #136]	; (8003d38 <FOE_fwrite+0xfc>)
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	6811      	ldr	r1, [r2, #0]
 8003cb2:	4a20      	ldr	r2, [pc, #128]	; (8003d34 <FOE_fwrite+0xf8>)
 8003cb4:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8003cb8:	b292      	uxth	r2, r2
 8003cba:	4798      	blx	r3
 8003cbc:	60b8      	str	r0, [r7, #8]
          FOEvar.fbufposition = 0;
 8003cbe:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <FOE_fwrite+0xf8>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	705a      	strb	r2, [r3, #1]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	709a      	strb	r2, [r3, #2]
          foe_file->address_offset += foe_cfg->buffer_size;
 8003cc8:	4b1c      	ldr	r3, [pc, #112]	; (8003d3c <FOE_fwrite+0x100>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68d9      	ldr	r1, [r3, #12]
 8003cce:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <FOE_fwrite+0xfc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <FOE_fwrite+0x100>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	440a      	add	r2, r1
 8003cda:	60da      	str	r2, [r3, #12]
       }
       FOEvar.fposition++;
 8003cdc:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <FOE_fwrite+0xf8>)
 8003cde:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <FOE_fwrite+0xf8>)
 8003ce6:	f8c2 3007 	str.w	r3, [r2, #7]
       ncopied++;
 8003cea:	89fb      	ldrh	r3, [r7, #14]
 8003cec:	3301      	adds	r3, #1
 8003cee:	81fb      	strh	r3, [r7, #14]
    while (length && (FOEvar.fend - FOEvar.fposition) && !failed)
 8003cf0:	887b      	ldrh	r3, [r7, #2]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <FOE_fwrite+0xd0>
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <FOE_fwrite+0xf8>)
 8003cf8:	f8d3 200f 	ldr.w	r2, [r3, #15]
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <FOE_fwrite+0xf8>)
 8003cfe:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d002      	beq.n	8003d0c <FOE_fwrite+0xd0>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0ab      	beq.n	8003c64 <FOE_fwrite+0x28>
    }

    foe_file->total_size += ncopied;
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <FOE_fwrite+0x100>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6919      	ldr	r1, [r3, #16]
 8003d12:	89fa      	ldrh	r2, [r7, #14]
 8003d14:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <FOE_fwrite+0x100>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	440a      	add	r2, r1
 8003d1a:	611a      	str	r2, [r3, #16]

    DPRINT("FOE_fwrite END with : %d\n",ncopied);
 8003d1c:	89fb      	ldrh	r3, [r7, #14]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4807      	ldr	r0, [pc, #28]	; (8003d40 <FOE_fwrite+0x104>)
 8003d22:	f006 fdc5 	bl	800a8b0 <iprintf>
    return ncopied;
 8003d26:	89fb      	ldrh	r3, [r7, #14]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd90      	pop	{r4, r7, pc}
 8003d30:	0800b370 	.word	0x0800b370
 8003d34:	20000160 	.word	0x20000160
 8003d38:	20000154 	.word	0x20000154
 8003d3c:	2000015c 	.word	0x2000015c
 8003d40:	0800b384 	.word	0x0800b384

08003d44 <FOE_fclose>:
 * if we have filled the buffers or not.
 *
 * @return Number of copied bytes on success, 0= if failed.
 */
uint32_t FOE_fclose (void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
   uint32_t failed = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	607b      	str	r3, [r7, #4]

   DPRINT("FOE_fclose\n");
 8003d4e:	4813      	ldr	r0, [pc, #76]	; (8003d9c <FOE_fclose+0x58>)
 8003d50:	f006 fe22 	bl	800a998 <puts>
   
   failed = foe_file->write_function (foe_file, foe_cfg->fbuffer, FOEvar.fbufposition);
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <FOE_fclose+0x5c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	4a11      	ldr	r2, [pc, #68]	; (8003da0 <FOE_fclose+0x5c>)
 8003d5c:	6810      	ldr	r0, [r2, #0]
 8003d5e:	4a11      	ldr	r2, [pc, #68]	; (8003da4 <FOE_fclose+0x60>)
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	6811      	ldr	r1, [r2, #0]
 8003d64:	4a10      	ldr	r2, [pc, #64]	; (8003da8 <FOE_fclose+0x64>)
 8003d66:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8003d6a:	b292      	uxth	r2, r2
 8003d6c:	4798      	blx	r3
 8003d6e:	6078      	str	r0, [r7, #4]
   foe_file->address_offset += FOEvar.fbufposition;
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <FOE_fclose+0x5c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <FOE_fclose+0x64>)
 8003d78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <FOE_fclose+0x5c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	440a      	add	r2, r1
 8003d86:	60da      	str	r2, [r3, #12]
   FOEvar.fbufposition = 0;
 8003d88:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <FOE_fclose+0x64>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	705a      	strb	r2, [r3, #1]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	709a      	strb	r2, [r3, #2]

   return failed;
 8003d92:	687b      	ldr	r3, [r7, #4]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	0800b3a4 	.word	0x0800b3a4
 8003da0:	2000015c 	.word	0x2000015c
 8003da4:	20000154 	.word	0x20000154
 8003da8:	20000160 	.word	0x20000160

08003dac <FOE_init>:

/** Initialize by clearing all current status variables.
 *
 */
void FOE_init ()
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
   DPRINT("FOE_init\n");
 8003db0:	4813      	ldr	r0, [pc, #76]	; (8003e00 <FOE_init+0x54>)
 8003db2:	f006 fdf1 	bl	800a998 <puts>
   FOEvar.foepacket = 0;
 8003db6:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <FOE_init+0x58>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	70da      	strb	r2, [r3, #3]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	711a      	strb	r2, [r3, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	715a      	strb	r2, [r3, #5]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	719a      	strb	r2, [r3, #6]
   FOEvar.foestate = FOE_READY;
 8003dc8:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <FOE_init+0x58>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
   FOEvar.fposition = 0;
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <FOE_init+0x58>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	71da      	strb	r2, [r3, #7]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	721a      	strb	r2, [r3, #8]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	725a      	strb	r2, [r3, #9]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	729a      	strb	r2, [r3, #10]
   FOEvar.fprevposition = 0;
 8003de0:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <FOE_init+0x58>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	72da      	strb	r2, [r3, #11]
 8003de6:	2200      	movs	r2, #0
 8003de8:	731a      	strb	r2, [r3, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	735a      	strb	r2, [r3, #13]
 8003dee:	2200      	movs	r2, #0
 8003df0:	739a      	strb	r2, [r3, #14]
   FOEvar.fbufposition = 0;
 8003df2:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <FOE_init+0x58>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	705a      	strb	r2, [r3, #1]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	709a      	strb	r2, [r3, #2]
}
 8003dfc:	bf00      	nop
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	0800b3b8 	.word	0x0800b3b8
 8003e04:	20000160 	.word	0x20000160

08003e08 <FOE_abort>:
/** Function for sending an FOE abort frame.
 *
 * @param[in] code   = abort code
 */
void FOE_abort (uint32_t code)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
   _FOE *foembx;
   uint8_t mbxhandle;

   if (code)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d025      	beq.n	8003e62 <FOE_abort+0x5a>
   {
      /* Send back an error packet. */
      mbxhandle = ESC_claimbuffer ();
 8003e16:	f7fd f8f9 	bl	800100c <ESC_claimbuffer>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	73fb      	strb	r3, [r7, #15]
      if (mbxhandle)
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01e      	beq.n	8003e62 <FOE_abort+0x5a>
      {
         foembx = (_FOE *) &MBX[mbxhandle * ESC_MBXSIZE];
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	4a14      	ldr	r2, [pc, #80]	; (8003e78 <FOE_abort+0x70>)
 8003e28:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e2a:	fb02 f303 	mul.w	r3, r2, r3
 8003e2e:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <FOE_abort+0x74>)
 8003e30:	4413      	add	r3, r2
 8003e32:	60bb      	str	r3, [r7, #8]
         foembx->mbxheader.length = htoes (ESC_FOEHSIZE);   /* Don't bother with error text for now. */
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f042 0206 	orr.w	r2, r2, #6
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	705a      	strb	r2, [r3, #1]
         foembx->mbxheader.mbxtype = MBXFOE;
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	7953      	ldrb	r3, [r2, #5]
 8003e46:	2104      	movs	r1, #4
 8003e48:	f361 0303 	bfi	r3, r1, #0, #4
 8003e4c:	7153      	strb	r3, [r2, #5]
         foembx->foeheader.opcode = FOE_OP_ERR;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2205      	movs	r2, #5
 8003e52:	719a      	strb	r2, [r3, #6]
         foembx->foeheader.errorcode = htoel (code);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	609a      	str	r2, [r3, #8]
         MBXcontrol[mbxhandle].state = MBXstate_outreq;
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <FOE_abort+0x78>)
 8003e5e:	2103      	movs	r1, #3
 8003e60:	54d1      	strb	r1, [r2, r3]
      }
      /* Nothing we can do if we can't get an outbound mailbox. */
   }
   DPRINT("FOE_abort: 0x%X\n", code);
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4807      	ldr	r0, [pc, #28]	; (8003e84 <FOE_abort+0x7c>)
 8003e66:	f006 fd23 	bl	800a8b0 <iprintf>
   FOE_init ();
 8003e6a:	f7ff ff9f 	bl	8003dac <FOE_init>
}
 8003e6e:	bf00      	nop
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000180 	.word	0x20000180
 8003e7c:	2000024c 	.word	0x2000024c
 8003e80:	20000424 	.word	0x20000424
 8003e84:	0800b3c8 	.word	0x0800b3c8

08003e88 <FOE_send_ack>:
/** Sends an FoE ack data frame.

 * @return 0= or error number.
 */
int FOE_send_ack ()
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
   _FOE *foembx;
   uint8_t mbxhandle;

   mbxhandle = ESC_claimbuffer ();
 8003e8e:	f7fd f8bd 	bl	800100c <ESC_claimbuffer>
 8003e92:	4603      	mov	r3, r0
 8003e94:	71fb      	strb	r3, [r7, #7]
   if (mbxhandle)
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d02c      	beq.n	8003ef6 <FOE_send_ack+0x6e>
   {
      DPRINT("FOE_send_ack\n");
 8003e9c:	481a      	ldr	r0, [pc, #104]	; (8003f08 <FOE_send_ack+0x80>)
 8003e9e:	f006 fd7b 	bl	800a998 <puts>
      foembx = (_FOE *) &MBX[mbxhandle * ESC_MBXSIZE];
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <FOE_send_ack+0x84>)
 8003ea6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ea8:	fb02 f303 	mul.w	r3, r2, r3
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <FOE_send_ack+0x88>)
 8003eae:	4413      	add	r3, r2
 8003eb0:	603b      	str	r3, [r7, #0]
      foembx->mbxheader.length = htoes (ESC_FOEHSIZE);
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f042 0206 	orr.w	r2, r2, #6
 8003eba:	701a      	strb	r2, [r3, #0]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	705a      	strb	r2, [r3, #1]
      foembx->mbxheader.mbxtype = MBXFOE;
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	7953      	ldrb	r3, [r2, #5]
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	f361 0303 	bfi	r3, r1, #0, #4
 8003eca:	7153      	strb	r3, [r2, #5]
      foembx->foeheader.opcode = FOE_OP_ACK;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2204      	movs	r2, #4
 8003ed0:	719a      	strb	r2, [r3, #6]
      foembx->foeheader.packetnumber = htoel (FOEvar.foepacket);
 8003ed2:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <FOE_send_ack+0x8c>)
 8003ed4:	f8d3 2003 	ldr.w	r2, [r3, #3]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	609a      	str	r2, [r3, #8]
      FOEvar.foepacket++;
 8003edc:	4b0d      	ldr	r3, [pc, #52]	; (8003f14 <FOE_send_ack+0x8c>)
 8003ede:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	4a0b      	ldr	r2, [pc, #44]	; (8003f14 <FOE_send_ack+0x8c>)
 8003ee6:	f8c2 3003 	str.w	r3, [r2, #3]
      MBXcontrol[mbxhandle].state = MBXstate_outreq;
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <FOE_send_ack+0x90>)
 8003eee:	2103      	movs	r1, #3
 8003ef0:	54d1      	strb	r1, [r2, r3]
      return 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e004      	b.n	8003f00 <FOE_send_ack+0x78>
   }
   else
   {
      DPRINT("ERROR:FOE_send_ack\n");
 8003ef6:	4809      	ldr	r0, [pc, #36]	; (8003f1c <FOE_send_ack+0x94>)
 8003ef8:	f006 fd4e 	bl	800a998 <puts>
      return FOE_ERR_PROGERROR;
 8003efc:	f248 030b 	movw	r3, #32779	; 0x800b
   }
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	0800b3e0 	.word	0x0800b3e0
 8003f0c:	20000180 	.word	0x20000180
 8003f10:	2000024c 	.word	0x2000024c
 8003f14:	20000160 	.word	0x20000160
 8003f18:	20000424 	.word	0x20000424
 8003f1c:	0800b3f4 	.word	0x0800b3f4

08003f20 <FOE_write>:
/** FoE write request handler. Starts with Initialize, Open and Ack that we can/will
 * receive data. On error we will send FOE Abort.
 *
 */
void FOE_write ()
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
   _FOE *foembx;
   uint32_t data_len;
   uint32_t password;
   int res;

   if (FOEvar.foestate != FOE_READY)
 8003f26:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <FOE_write+0x7c>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d004      	beq.n	8003f38 <FOE_write+0x18>
   {
      FOE_abort (FOE_ERR_ILLEGAL);
 8003f2e:	f248 0004 	movw	r0, #32772	; 0x8004
 8003f32:	f7ff ff69 	bl	8003e08 <FOE_abort>
      return;
 8003f36:	e02e      	b.n	8003f96 <FOE_write+0x76>
   }

   FOE_init ();
 8003f38:	f7ff ff38 	bl	8003dac <FOE_init>
   foembx = (_FOE *) &MBX[0];
 8003f3c:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <FOE_write+0x80>)
 8003f3e:	60fb      	str	r3, [r7, #12]
   data_len = etohs (foembx->mbxheader.length) - ESC_FOEHSIZE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b06      	subs	r3, #6
 8003f48:	60bb      	str	r3, [r7, #8]
   password = etohl (foembx->foeheader.password);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	607b      	str	r3, [r7, #4]

   /* Get an address we can write the file to, if possible. */
   res = FOE_fopen (foembx->filename, data_len, password, FOE_OP_WRQ);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f103 000c 	add.w	r0, r3, #12
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	b2d9      	uxtb	r1, r3
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	f7ff fdc7 	bl	8003af0 <FOE_fopen>
 8003f62:	6038      	str	r0, [r7, #0]
   DPRINT("FOE_write\n");
 8003f64:	480f      	ldr	r0, [pc, #60]	; (8003fa4 <FOE_write+0x84>)
 8003f66:	f006 fd17 	bl	800a998 <puts>
   if (res == 0)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10e      	bne.n	8003f8e <FOE_write+0x6e>
   {
      res = FOE_send_ack ();
 8003f70:	f7ff ff8a 	bl	8003e88 <FOE_send_ack>
 8003f74:	6038      	str	r0, [r7, #0]
      if (res)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <FOE_write+0x66>
      {
         FOE_abort (res);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff ff42 	bl	8003e08 <FOE_abort>
 8003f84:	e007      	b.n	8003f96 <FOE_write+0x76>
      }
      else
      {
         FOEvar.foestate = FOE_WAIT_FOR_DATA;
 8003f86:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <FOE_write+0x7c>)
 8003f88:	2203      	movs	r2, #3
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	e003      	b.n	8003f96 <FOE_write+0x76>
      }
   }
   else
   {
      FOE_abort (res);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff39 	bl	8003e08 <FOE_abort>
   }
}
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000160 	.word	0x20000160
 8003fa0:	2000024c 	.word	0x2000024c
 8003fa4:	0800b410 	.word	0x0800b410

08003fa8 <FOE_data>:
/** FoE data request handler. Validates and reads data until we're finsihed. Every
 * read frame follwed by an Ack frame. On error we will send FOE Abort.
 *
 */
void FOE_data ()
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
   _FOE *foembx;
   uint32_t packet;
   uint16_t data_len, ncopied;
   int res;

   if(FOEvar.foestate != FOE_WAIT_FOR_DATA)
 8003fae:	4b4c      	ldr	r3, [pc, #304]	; (80040e0 <FOE_data+0x138>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d004      	beq.n	8003fc0 <FOE_data+0x18>
   {
      FOE_abort(FOE_ERR_ILLEGAL);
 8003fb6:	f248 0004 	movw	r0, #32772	; 0x8004
 8003fba:	f7ff ff25 	bl	8003e08 <FOE_abort>
      return;
 8003fbe:	e08b      	b.n	80040d8 <FOE_data+0x130>
   }

   foembx = (_FOE*)&MBX[0];
 8003fc0:	4b48      	ldr	r3, [pc, #288]	; (80040e4 <FOE_data+0x13c>)
 8003fc2:	617b      	str	r3, [r7, #20]
   data_len = etohs(foembx->mbxheader.length) - ESC_FOEHSIZE;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b06      	subs	r3, #6
 8003fcc:	827b      	strh	r3, [r7, #18]
   packet = etohl(foembx->foeheader.packetnumber);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	60fb      	str	r3, [r7, #12]

   if (packet != FOEvar.foepacket)
 8003fd4:	4b42      	ldr	r3, [pc, #264]	; (80040e0 <FOE_data+0x138>)
 8003fd6:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d00c      	beq.n	8003ffa <FOE_data+0x52>
   {
      DPRINT("FOE_data packet error,packet: %d foeheader.packet: %d\n",packet,FOEvar.foepacket);
 8003fe0:	4b3f      	ldr	r3, [pc, #252]	; (80040e0 <FOE_data+0x138>)
 8003fe2:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68f9      	ldr	r1, [r7, #12]
 8003fea:	483f      	ldr	r0, [pc, #252]	; (80040e8 <FOE_data+0x140>)
 8003fec:	f006 fc60 	bl	800a8b0 <iprintf>
      FOE_abort (FOE_ERR_PACKETNO);
 8003ff0:	f248 0005 	movw	r0, #32773	; 0x8005
 8003ff4:	f7ff ff08 	bl	8003e08 <FOE_abort>
 8003ff8:	e06e      	b.n	80040d8 <FOE_data+0x130>
   }
   else if (data_len == 0)
 8003ffa:	8a7b      	ldrh	r3, [r7, #18]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <FOE_data+0x6e>
   {
      DPRINT("FOE_data completed\n");
 8004000:	483a      	ldr	r0, [pc, #232]	; (80040ec <FOE_data+0x144>)
 8004002:	f006 fcc9 	bl	800a998 <puts>
      FOE_fclose ();
 8004006:	f7ff fe9d 	bl	8003d44 <FOE_fclose>
      res = FOE_send_ack ();
 800400a:	f7ff ff3d 	bl	8003e88 <FOE_send_ack>
 800400e:	6078      	str	r0, [r7, #4]
      FOE_init ();
 8004010:	f7ff fecc 	bl	8003dac <FOE_init>
 8004014:	e060      	b.n	80040d8 <FOE_data+0x130>
   }
   else if (FOEvar.fposition + data_len > FOEvar.fend)
 8004016:	4b32      	ldr	r3, [pc, #200]	; (80040e0 <FOE_data+0x138>)
 8004018:	f8d3 2007 	ldr.w	r2, [r3, #7]
 800401c:	8a7b      	ldrh	r3, [r7, #18]
 800401e:	441a      	add	r2, r3
 8004020:	4b2f      	ldr	r3, [pc, #188]	; (80040e0 <FOE_data+0x138>)
 8004022:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8004026:	429a      	cmp	r2, r3
 8004028:	d907      	bls.n	800403a <FOE_data+0x92>
   {
      DPRINT("FOE_data disk full\n");
 800402a:	4831      	ldr	r0, [pc, #196]	; (80040f0 <FOE_data+0x148>)
 800402c:	f006 fcb4 	bl	800a998 <puts>
      FOE_abort (FOE_ERR_DISKFULL);
 8004030:	f248 0003 	movw	r0, #32771	; 0x8003
 8004034:	f7ff fee8 	bl	8003e08 <FOE_abort>
 8004038:	e04e      	b.n	80040d8 <FOE_data+0x130>
   }
   else
   {
      ncopied = FOE_fwrite (foembx->data, data_len);
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	330c      	adds	r3, #12
 800403e:	8a7a      	ldrh	r2, [r7, #18]
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fdfa 	bl	8003c3c <FOE_fwrite>
 8004048:	4603      	mov	r3, r0
 800404a:	817b      	strh	r3, [r7, #10]
      if (!ncopied)
 800404c:	897b      	ldrh	r3, [r7, #10]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d107      	bne.n	8004062 <FOE_data+0xba>
      {
         DPRINT("FOE_data no copied\n");
 8004052:	4828      	ldr	r0, [pc, #160]	; (80040f4 <FOE_data+0x14c>)
 8004054:	f006 fca0 	bl	800a998 <puts>
         FOE_abort (FOE_ERR_PROGERROR);
 8004058:	f248 000b 	movw	r0, #32779	; 0x800b
 800405c:	f7ff fed4 	bl	8003e08 <FOE_abort>
 8004060:	e03a      	b.n	80040d8 <FOE_data+0x130>
      }
      else if (data_len == ESC_FOE_DATA_SIZE)
 8004062:	8a7a      	ldrh	r2, [r7, #18]
 8004064:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <FOE_data+0x150>)
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	3b0c      	subs	r3, #12
 800406a:	429a      	cmp	r2, r3
 800406c:	d11b      	bne.n	80040a6 <FOE_data+0xfe>
      {
         DPRINT("FOE_data data_len == FOE_DATA_SIZE\n");
 800406e:	4823      	ldr	r0, [pc, #140]	; (80040fc <FOE_data+0x154>)
 8004070:	f006 fc92 	bl	800a998 <puts>
         if (ncopied != data_len)
 8004074:	897a      	ldrh	r2, [r7, #10]
 8004076:	8a7b      	ldrh	r3, [r7, #18]
 8004078:	429a      	cmp	r2, r3
 800407a:	d009      	beq.n	8004090 <FOE_data+0xe8>
         {
            DPRINT("FOE_data only %d of %d copied\n",ncopied, data_len);
 800407c:	897b      	ldrh	r3, [r7, #10]
 800407e:	8a7a      	ldrh	r2, [r7, #18]
 8004080:	4619      	mov	r1, r3
 8004082:	481f      	ldr	r0, [pc, #124]	; (8004100 <FOE_data+0x158>)
 8004084:	f006 fc14 	bl	800a8b0 <iprintf>
            FOE_abort (FOE_ERR_PROGERROR);
 8004088:	f248 000b 	movw	r0, #32779	; 0x800b
 800408c:	f7ff febc 	bl	8003e08 <FOE_abort>
         }
         res = FOE_send_ack ();
 8004090:	f7ff fefa 	bl	8003e88 <FOE_send_ack>
 8004094:	6078      	str	r0, [r7, #4]
         if (res)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d01d      	beq.n	80040d8 <FOE_data+0x130>
         {
            FOE_abort (res);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff feb2 	bl	8003e08 <FOE_abort>
 80040a4:	e018      	b.n	80040d8 <FOE_data+0x130>
         }
      }
      else
      {
         if ((ncopied != data_len) || FOE_fclose ())
 80040a6:	897a      	ldrh	r2, [r7, #10]
 80040a8:	8a7b      	ldrh	r3, [r7, #18]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d104      	bne.n	80040b8 <FOE_data+0x110>
 80040ae:	f7ff fe49 	bl	8003d44 <FOE_fclose>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <FOE_data+0x120>
         {
            DPRINT("FOE_fclose failed to write extra buffer\n");
 80040b8:	4812      	ldr	r0, [pc, #72]	; (8004104 <FOE_data+0x15c>)
 80040ba:	f006 fc6d 	bl	800a998 <puts>
            FOE_abort (FOE_ERR_PROGERROR);
 80040be:	f248 000b 	movw	r0, #32779	; 0x800b
 80040c2:	f7ff fea1 	bl	8003e08 <FOE_abort>
         {
 80040c6:	e007      	b.n	80040d8 <FOE_data+0x130>
         }
         else
         {
            DPRINT("FOE_data completed\n");
 80040c8:	4808      	ldr	r0, [pc, #32]	; (80040ec <FOE_data+0x144>)
 80040ca:	f006 fc65 	bl	800a998 <puts>
            res = FOE_send_ack ();
 80040ce:	f7ff fedb 	bl	8003e88 <FOE_send_ack>
 80040d2:	6078      	str	r0, [r7, #4]
            FOE_init ();
 80040d4:	f7ff fe6a 	bl	8003dac <FOE_init>
         }
      }
   }
}
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000160 	.word	0x20000160
 80040e4:	2000024c 	.word	0x2000024c
 80040e8:	0800b420 	.word	0x0800b420
 80040ec:	0800b460 	.word	0x0800b460
 80040f0:	0800b47c 	.word	0x0800b47c
 80040f4:	0800b498 	.word	0x0800b498
 80040f8:	20000180 	.word	0x20000180
 80040fc:	0800b4b4 	.word	0x0800b4b4
 8004100:	0800b4e0 	.word	0x0800b4e0
 8004104:	0800b508 	.word	0x0800b508

08004108 <FOE_error>:

/** FoE error requesthandler. Send an FOE Abort.
 *
 */
void FOE_error ()
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
   /* Master panic! abort the transfer. */
   FOE_abort (0);
 800410c:	2000      	movs	r0, #0
 800410e:	f7ff fe7b 	bl	8003e08 <FOE_abort>
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <ESC_foeprocess>:
 * data, distributing the mailboxes to appropriate FOE functions depending
 * on requested opcode.
 * On Error an FoE Error or FoE Abort will be sent.
 */
void ESC_foeprocess (void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   _FOE *foembx;

   if (ESCvar.MBXrun == 0)
 800411e:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <ESC_foeprocess+0xb8>)
 8004120:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004124:	2b00      	cmp	r3, #0
 8004126:	d04f      	beq.n	80041c8 <ESC_foeprocess+0xb0>
   {
      return;
   }
   if (!ESCvar.xoe && (MBXcontrol[0].state == MBXstate_inclaim))
 8004128:	4b29      	ldr	r3, [pc, #164]	; (80041d0 <ESC_foeprocess+0xb8>)
 800412a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800412e:	2b00      	cmp	r3, #0
 8004130:	d110      	bne.n	8004154 <ESC_foeprocess+0x3c>
 8004132:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <ESC_foeprocess+0xbc>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d10c      	bne.n	8004154 <ESC_foeprocess+0x3c>
   {
      mbh = (_MBXh *) &MBX[0];
 800413a:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <ESC_foeprocess+0xc0>)
 800413c:	607b      	str	r3, [r7, #4]
      if (mbh->mbxtype == MBXFOE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	795b      	ldrb	r3, [r3, #5]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b04      	cmp	r3, #4
 800414a:	d103      	bne.n	8004154 <ESC_foeprocess+0x3c>
      {
         ESCvar.xoe = MBXFOE;
 800414c:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <ESC_foeprocess+0xb8>)
 800414e:	2204      	movs	r2, #4
 8004150:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
      }
   }
   if (ESCvar.xoe == MBXFOE)
 8004154:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <ESC_foeprocess+0xb8>)
 8004156:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800415a:	2b04      	cmp	r3, #4
 800415c:	d135      	bne.n	80041ca <ESC_foeprocess+0xb2>
   {
      foembx = (_FOE *) &MBX[0];
 800415e:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <ESC_foeprocess+0xc0>)
 8004160:	603b      	str	r3, [r7, #0]
      /* Verify the size of the file data. */
      if (etohs (foembx->mbxheader.length) < ESC_FOEHSIZE)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b05      	cmp	r3, #5
 800416a:	d803      	bhi.n	8004174 <ESC_foeprocess+0x5c>
      {
         FOE_abort (MBXERR_SIZETOOSHORT);
 800416c:	2006      	movs	r0, #6
 800416e:	f7ff fe4b 	bl	8003e08 <FOE_abort>
 8004172:	e021      	b.n	80041b8 <ESC_foeprocess+0xa0>
      }
      else
      {
         switch (foembx->foeheader.opcode)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	799b      	ldrb	r3, [r3, #6]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d009      	beq.n	8004190 <ESC_foeprocess+0x78>
 800417c:	2b05      	cmp	r3, #5
 800417e:	d00d      	beq.n	800419c <ESC_foeprocess+0x84>
 8004180:	2b02      	cmp	r3, #2
 8004182:	d111      	bne.n	80041a8 <ESC_foeprocess+0x90>
         {
            case FOE_OP_WRQ:
            {
               DPRINT("FOE_OP_WRQ\n");
 8004184:	4815      	ldr	r0, [pc, #84]	; (80041dc <ESC_foeprocess+0xc4>)
 8004186:	f006 fc07 	bl	800a998 <puts>
               FOE_write ();
 800418a:	f7ff fec9 	bl	8003f20 <FOE_write>
               break;
 800418e:	e013      	b.n	80041b8 <ESC_foeprocess+0xa0>
            }
            case FOE_OP_DATA:
            {
               DPRINT("FOE_OP_DATA\n");
 8004190:	4813      	ldr	r0, [pc, #76]	; (80041e0 <ESC_foeprocess+0xc8>)
 8004192:	f006 fc01 	bl	800a998 <puts>
               FOE_data ();
 8004196:	f7ff ff07 	bl	8003fa8 <FOE_data>
               break;
 800419a:	e00d      	b.n	80041b8 <ESC_foeprocess+0xa0>
               break;
            }
#endif
            case FOE_OP_ERR:
            {
               DPRINT("FOE_OP_ERR\n");
 800419c:	4811      	ldr	r0, [pc, #68]	; (80041e4 <ESC_foeprocess+0xcc>)
 800419e:	f006 fbfb 	bl	800a998 <puts>
               FOE_error ();
 80041a2:	f7ff ffb1 	bl	8004108 <FOE_error>
               break;
 80041a6:	e007      	b.n	80041b8 <ESC_foeprocess+0xa0>
            }
            default:
            {
               DPRINT("FOE_ERR_NOTDEFINED\n");
 80041a8:	480f      	ldr	r0, [pc, #60]	; (80041e8 <ESC_foeprocess+0xd0>)
 80041aa:	f006 fbf5 	bl	800a998 <puts>
               FOE_abort (FOE_ERR_NOTDEFINED);
 80041ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80041b2:	f7ff fe29 	bl	8003e08 <FOE_abort>
               break;
 80041b6:	bf00      	nop
            }
         }
      }
      MBXcontrol[0].state = MBXstate_idle;
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <ESC_foeprocess+0xbc>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
      ESCvar.xoe = 0;
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <ESC_foeprocess+0xb8>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80041c6:	e000      	b.n	80041ca <ESC_foeprocess+0xb2>
      return;
 80041c8:	bf00      	nop
   }
}
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20000180 	.word	0x20000180
 80041d4:	20000424 	.word	0x20000424
 80041d8:	2000024c 	.word	0x2000024c
 80041dc:	0800b538 	.word	0x0800b538
 80041e0:	0800b54c 	.word	0x0800b54c
 80041e4:	0800b560 	.word	0x0800b560
 80041e8:	0800b574 	.word	0x0800b574

080041ec <lan9252_write_32>:

static int lan9252 = -1;

/* lan9252 singel write */
static void lan9252_write_32 (uint16_t address, uint32_t val)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	6039      	str	r1, [r7, #0]
 80041f6:	80fb      	strh	r3, [r7, #6]
    uint8_t data[7];

    data[0] = ESC_CMD_SERIAL_WRITE;
 80041f8:	2302      	movs	r3, #2
 80041fa:	723b      	strb	r3, [r7, #8]
    data[1] = ((address >> 8) & 0xFF);
 80041fc:	88fb      	ldrh	r3, [r7, #6]
 80041fe:	0a1b      	lsrs	r3, r3, #8
 8004200:	b29b      	uxth	r3, r3
 8004202:	b2db      	uxtb	r3, r3
 8004204:	727b      	strb	r3, [r7, #9]
    data[2] = (address & 0xFF);
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	72bb      	strb	r3, [r7, #10]
    data[3] = (val & 0xFF);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	72fb      	strb	r3, [r7, #11]
    data[4] = ((val >> 8) & 0xFF);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	0a1b      	lsrs	r3, r3, #8
 8004216:	b2db      	uxtb	r3, r3
 8004218:	733b      	strb	r3, [r7, #12]
    data[5] = ((val >> 16) & 0xFF);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	0c1b      	lsrs	r3, r3, #16
 800421e:	b2db      	uxtb	r3, r3
 8004220:	737b      	strb	r3, [r7, #13]
    data[6] = ((val >> 24) & 0xFF);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	0e1b      	lsrs	r3, r3, #24
 8004226:	b2db      	uxtb	r3, r3
 8004228:	73bb      	strb	r3, [r7, #14]

    /* Select device. */
    spi_select (lan9252);
 800422a:	4b0c      	ldr	r3, [pc, #48]	; (800425c <lan9252_write_32+0x70>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	b25b      	sxtb	r3, r3
 8004230:	4618      	mov	r0, r3
 8004232:	f000 faf4 	bl	800481e <spi_select>
    /* Write data */
    write (lan9252, data, sizeof(data));
 8004236:	4b09      	ldr	r3, [pc, #36]	; (800425c <lan9252_write_32+0x70>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	b25b      	sxtb	r3, r3
 800423c:	f107 0108 	add.w	r1, r7, #8
 8004240:	2207      	movs	r2, #7
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fb0a 	bl	800485c <write>
    /* Un-select device. */
    spi_unselect (lan9252);
 8004248:	4b04      	ldr	r3, [pc, #16]	; (800425c <lan9252_write_32+0x70>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	b25b      	sxtb	r3, r3
 800424e:	4618      	mov	r0, r3
 8004250:	f000 faf4 	bl	800483c <spi_unselect>
}
 8004254:	bf00      	nop
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000020 	.word	0x20000020

08004260 <lan9252_read_32>:

/* lan9252 single read */
static uint32_t lan9252_read_32 (uint32_t address)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
   uint8_t data[4];
   uint8_t result[4];

   data[0] = ESC_CMD_FAST_READ;
 8004268:	230b      	movs	r3, #11
 800426a:	733b      	strb	r3, [r7, #12]
   data[1] = ((address >> 8) & 0xFF);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	b2db      	uxtb	r3, r3
 8004272:	737b      	strb	r3, [r7, #13]
   data[2] = (address & 0xFF);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	73bb      	strb	r3, [r7, #14]
   data[3] = ESC_CMD_FAST_READ_DUMMY;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]

   /* Select device. */
   spi_select (lan9252);
 800427e:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <lan9252_read_32+0x78>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	b25b      	sxtb	r3, r3
 8004284:	4618      	mov	r0, r3
 8004286:	f000 faca 	bl	800481e <spi_select>
   /* Read data */
   write (lan9252, data, sizeof(data));
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <lan9252_read_32+0x78>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	b25b      	sxtb	r3, r3
 8004290:	f107 010c 	add.w	r1, r7, #12
 8004294:	2204      	movs	r2, #4
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fae0 	bl	800485c <write>
   read (lan9252, result, sizeof(result));
 800429c:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <lan9252_read_32+0x78>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	b25b      	sxtb	r3, r3
 80042a2:	f107 0108 	add.w	r1, r7, #8
 80042a6:	2204      	movs	r2, #4
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 faed 	bl	8004888 <read>
   /* Un-select device. */
   spi_unselect (lan9252);
 80042ae:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <lan9252_read_32+0x78>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	b25b      	sxtb	r3, r3
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fac1 	bl	800483c <spi_unselect>

   return ((result[3] << 24) |
 80042ba:	7afb      	ldrb	r3, [r7, #11]
 80042bc:	061a      	lsls	r2, r3, #24
           (result[2] << 16) |
 80042be:	7abb      	ldrb	r3, [r7, #10]
 80042c0:	041b      	lsls	r3, r3, #16
   return ((result[3] << 24) |
 80042c2:	431a      	orrs	r2, r3
           (result[1] << 8) |
 80042c4:	7a7b      	ldrb	r3, [r7, #9]
 80042c6:	021b      	lsls	r3, r3, #8
           (result[2] << 16) |
 80042c8:	4313      	orrs	r3, r2
            result[0]);
 80042ca:	7a3a      	ldrb	r2, [r7, #8]
           (result[1] << 8) |
 80042cc:	4313      	orrs	r3, r2
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000020 	.word	0x20000020

080042dc <ESC_read_csr>:

/* ESC read CSR function */
static void ESC_read_csr (uint16_t address, void *buf, uint16_t len)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	6039      	str	r1, [r7, #0]
 80042e6:	80fb      	strh	r3, [r7, #6]
 80042e8:	4613      	mov	r3, r2
 80042ea:	80bb      	strh	r3, [r7, #4]
   uint32_t value;

   value = (ESC_CSR_CMD_READ | ESC_CSR_CMD_SIZE(len) | address);
 80042ec:	88bb      	ldrh	r3, [r7, #4]
 80042ee:	041b      	lsls	r3, r3, #16
 80042f0:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
   lan9252_write_32(ESC_CSR_CMD_REG, value);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4619      	mov	r1, r3
 80042fe:	f44f 7041 	mov.w	r0, #772	; 0x304
 8004302:	f7ff ff73 	bl	80041ec <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_CSR_CMD_REG);
 8004306:	f44f 7041 	mov.w	r0, #772	; 0x304
 800430a:	f7ff ffa9 	bl	8004260 <lan9252_read_32>
 800430e:	4603      	mov	r3, r0
 8004310:	60fb      	str	r3, [r7, #12]
   } while(value & ESC_CSR_CMD_BUSY);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	dbf6      	blt.n	8004306 <ESC_read_csr+0x2a>

   value = lan9252_read_32(ESC_CSR_DATA_REG);
 8004318:	f44f 7040 	mov.w	r0, #768	; 0x300
 800431c:	f7ff ffa0 	bl	8004260 <lan9252_read_32>
 8004320:	4603      	mov	r3, r0
 8004322:	60fb      	str	r3, [r7, #12]
   memcpy(buf, (uint8_t *)&value, len);
 8004324:	88ba      	ldrh	r2, [r7, #4]
 8004326:	f107 030c 	add.w	r3, r7, #12
 800432a:	4619      	mov	r1, r3
 800432c:	6838      	ldr	r0, [r7, #0]
 800432e:	f005 ffe5 	bl	800a2fc <memcpy>
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <ESC_write_csr>:

/* ESC write CSR function */
static void ESC_write_csr (uint16_t address, void *buf, uint16_t len)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	4603      	mov	r3, r0
 8004342:	6039      	str	r1, [r7, #0]
 8004344:	80fb      	strh	r3, [r7, #6]
 8004346:	4613      	mov	r3, r2
 8004348:	80bb      	strh	r3, [r7, #4]
   uint32_t value;

   memcpy((uint8_t*)&value, buf,len);
 800434a:	88ba      	ldrh	r2, [r7, #4]
 800434c:	f107 030c 	add.w	r3, r7, #12
 8004350:	6839      	ldr	r1, [r7, #0]
 8004352:	4618      	mov	r0, r3
 8004354:	f005 ffd2 	bl	800a2fc <memcpy>
   lan9252_write_32(ESC_CSR_DATA_REG, value);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4619      	mov	r1, r3
 800435c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8004360:	f7ff ff44 	bl	80041ec <lan9252_write_32>
   value = (ESC_CSR_CMD_WRITE | ESC_CSR_CMD_SIZE(len) | address);
 8004364:	88bb      	ldrh	r3, [r7, #4]
 8004366:	041b      	lsls	r3, r3, #16
 8004368:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
   lan9252_write_32(ESC_CSR_CMD_REG, value);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4619      	mov	r1, r3
 8004376:	f44f 7041 	mov.w	r0, #772	; 0x304
 800437a:	f7ff ff37 	bl	80041ec <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_CSR_CMD_REG);
 800437e:	f44f 7041 	mov.w	r0, #772	; 0x304
 8004382:	f7ff ff6d 	bl	8004260 <lan9252_read_32>
 8004386:	4603      	mov	r3, r0
 8004388:	60fb      	str	r3, [r7, #12]
   } while(value & ESC_CSR_CMD_BUSY);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	dbf6      	blt.n	800437e <ESC_write_csr+0x44>
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <ESC_read_pram>:

/* ESC read process data ram function */
static void ESC_read_pram (uint16_t address, void *buf, uint16_t len)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	6039      	str	r1, [r7, #0]
 80043a2:	80fb      	strh	r3, [r7, #6]
 80043a4:	4613      	mov	r3, r2
 80043a6:	80bb      	strh	r3, [r7, #4]
   uint32_t value;
   uint8_t * temp_buf = buf;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	61bb      	str	r3, [r7, #24]
   uint16_t byte_offset = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	83fb      	strh	r3, [r7, #30]
   uint8_t fifo_cnt, first_byte_position, temp_len, data[4];

   value = ESC_PRAM_CMD_ABORT;
 80043b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043b4:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_RD_CMD_REG, value);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4619      	mov	r1, r3
 80043ba:	f44f 7043 	mov.w	r0, #780	; 0x30c
 80043be:	f7ff ff15 	bl	80041ec <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_PRAM_RD_CMD_REG);
 80043c2:	f44f 7043 	mov.w	r0, #780	; 0x30c
 80043c6:	f7ff ff4b 	bl	8004260 <lan9252_read_32>
 80043ca:	4603      	mov	r3, r0
 80043cc:	613b      	str	r3, [r7, #16]
   }while(value & ESC_PRAM_CMD_BUSY);
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	dbf6      	blt.n	80043c2 <ESC_read_pram+0x2a>

   value = ESC_PRAM_SIZE(len) | ESC_PRAM_ADDR(address);
 80043d4:	88bb      	ldrh	r3, [r7, #4]
 80043d6:	041a      	lsls	r2, r3, #16
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_RD_ADDR_LEN_REG, value);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4619      	mov	r1, r3
 80043e2:	f44f 7042 	mov.w	r0, #776	; 0x308
 80043e6:	f7ff ff01 	bl	80041ec <lan9252_write_32>

   value = ESC_PRAM_CMD_BUSY;
 80043ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80043ee:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_RD_CMD_REG, value);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4619      	mov	r1, r3
 80043f4:	f44f 7043 	mov.w	r0, #780	; 0x30c
 80043f8:	f7ff fef8 	bl	80041ec <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_PRAM_RD_CMD_REG);
 80043fc:	f44f 7043 	mov.w	r0, #780	; 0x30c
 8004400:	f7ff ff2e 	bl	8004260 <lan9252_read_32>
 8004404:	4603      	mov	r3, r0
 8004406:	613b      	str	r3, [r7, #16]
   }while((value & ESC_PRAM_CMD_AVAIL) == 0);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f4      	beq.n	80043fc <ESC_read_pram+0x64>

   /* Fifo count */
   fifo_cnt = ESC_PRAM_CMD_CNT(value);
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	0a1b      	lsrs	r3, r3, #8
 8004416:	b2db      	uxtb	r3, r3
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	777b      	strb	r3, [r7, #29]

   /* Read first value from FIFO */
   value = lan9252_read_32(ESC_PRAM_RD_FIFO_REG);
 800441e:	2000      	movs	r0, #0
 8004420:	f7ff ff1e 	bl	8004260 <lan9252_read_32>
 8004424:	4603      	mov	r3, r0
 8004426:	613b      	str	r3, [r7, #16]
   fifo_cnt--;
 8004428:	7f7b      	ldrb	r3, [r7, #29]
 800442a:	3b01      	subs	r3, #1
 800442c:	777b      	strb	r3, [r7, #29]

   /* Find out first byte position and adjust the copy from that
    * according to LAN9252 datasheet and MicroChip SDK code
    */
   first_byte_position = (address & 0x03);
 800442e:	88fb      	ldrh	r3, [r7, #6]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	75fb      	strb	r3, [r7, #23]
   temp_len = ((4 - first_byte_position) > len) ? len : (4 - first_byte_position);
 8004438:	7dfb      	ldrb	r3, [r7, #23]
 800443a:	f1c3 0204 	rsb	r2, r3, #4
 800443e:	88bb      	ldrh	r3, [r7, #4]
 8004440:	4293      	cmp	r3, r2
 8004442:	bfa8      	it	ge
 8004444:	4613      	movge	r3, r2
 8004446:	75bb      	strb	r3, [r7, #22]

   memcpy(temp_buf ,((uint8_t *)&value + first_byte_position), temp_len);
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	f107 0210 	add.w	r2, r7, #16
 800444e:	4413      	add	r3, r2
 8004450:	7dba      	ldrb	r2, [r7, #22]
 8004452:	4619      	mov	r1, r3
 8004454:	69b8      	ldr	r0, [r7, #24]
 8004456:	f005 ff51 	bl	800a2fc <memcpy>
   len -= temp_len;
 800445a:	7dbb      	ldrb	r3, [r7, #22]
 800445c:	b29b      	uxth	r3, r3
 800445e:	88ba      	ldrh	r2, [r7, #4]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	80bb      	strh	r3, [r7, #4]
   byte_offset += temp_len;
 8004464:	7dbb      	ldrb	r3, [r7, #22]
 8004466:	b29a      	uxth	r2, r3
 8004468:	8bfb      	ldrh	r3, [r7, #30]
 800446a:	4413      	add	r3, r2
 800446c:	83fb      	strh	r3, [r7, #30]

   /* Select device. */
   spi_select (lan9252);
 800446e:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <ESC_read_pram+0x15c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	b25b      	sxtb	r3, r3
 8004474:	4618      	mov	r0, r3
 8004476:	f000 f9d2 	bl	800481e <spi_select>
   /* Send command and address for fifo read */
   data[0] = ESC_CMD_FAST_READ;
 800447a:	230b      	movs	r3, #11
 800447c:	733b      	strb	r3, [r7, #12]
   data[1] = ((ESC_PRAM_RD_FIFO_REG >> 8) & 0xFF);
 800447e:	2300      	movs	r3, #0
 8004480:	737b      	strb	r3, [r7, #13]
   data[2] = (ESC_PRAM_RD_FIFO_REG & 0xFF);
 8004482:	2300      	movs	r3, #0
 8004484:	73bb      	strb	r3, [r7, #14]
   data[3] = ESC_CMD_FAST_READ_DUMMY;
 8004486:	2301      	movs	r3, #1
 8004488:	73fb      	strb	r3, [r7, #15]
   write (lan9252, data, sizeof(data));
 800448a:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <ESC_read_pram+0x15c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	b25b      	sxtb	r3, r3
 8004490:	f107 010c 	add.w	r1, r7, #12
 8004494:	2204      	movs	r2, #4
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f9e0 	bl	800485c <write>

   /* Continue reading until we have read len */
   while(len > 0)
 800449c:	e01c      	b.n	80044d8 <ESC_read_pram+0x140>
   {
      temp_len = (len > 4) ? 4: len;
 800449e:	88bb      	ldrh	r3, [r7, #4]
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	bf28      	it	cs
 80044a4:	2304      	movcs	r3, #4
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	75bb      	strb	r3, [r7, #22]
      /* Always read 4 byte */
      read (lan9252, (temp_buf + byte_offset), sizeof(uint32_t));
 80044aa:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <ESC_read_pram+0x15c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	b258      	sxtb	r0, r3
 80044b0:	8bfb      	ldrh	r3, [r7, #30]
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	4413      	add	r3, r2
 80044b6:	2204      	movs	r2, #4
 80044b8:	4619      	mov	r1, r3
 80044ba:	f000 f9e5 	bl	8004888 <read>

      fifo_cnt--;
 80044be:	7f7b      	ldrb	r3, [r7, #29]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	777b      	strb	r3, [r7, #29]
      len -= temp_len;
 80044c4:	7dbb      	ldrb	r3, [r7, #22]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	88ba      	ldrh	r2, [r7, #4]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	80bb      	strh	r3, [r7, #4]
      byte_offset += temp_len;
 80044ce:	7dbb      	ldrb	r3, [r7, #22]
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	8bfb      	ldrh	r3, [r7, #30]
 80044d4:	4413      	add	r3, r2
 80044d6:	83fb      	strh	r3, [r7, #30]
   while(len > 0)
 80044d8:	88bb      	ldrh	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1df      	bne.n	800449e <ESC_read_pram+0x106>
   }
   /* Un-select device. */
   spi_unselect (lan9252);
 80044de:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <ESC_read_pram+0x15c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	b25b      	sxtb	r3, r3
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 f9a9 	bl	800483c <spi_unselect>
}
 80044ea:	bf00      	nop
 80044ec:	3720      	adds	r7, #32
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000020 	.word	0x20000020

080044f8 <ESC_write_pram>:

/* ESC write process data ram function */
static void ESC_write_pram (uint16_t address, void *buf, uint16_t len)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	6039      	str	r1, [r7, #0]
 8004502:	80fb      	strh	r3, [r7, #6]
 8004504:	4613      	mov	r3, r2
 8004506:	80bb      	strh	r3, [r7, #4]
   uint32_t value;
   uint8_t * temp_buf = buf;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	61bb      	str	r3, [r7, #24]
   uint16_t byte_offset = 0;
 800450c:	2300      	movs	r3, #0
 800450e:	83fb      	strh	r3, [r7, #30]
   uint8_t fifo_cnt, first_byte_position, temp_len, data[3];

   value = ESC_PRAM_CMD_ABORT;
 8004510:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004514:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_WR_CMD_REG, value);
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	4619      	mov	r1, r3
 800451a:	f44f 7045 	mov.w	r0, #788	; 0x314
 800451e:	f7ff fe65 	bl	80041ec <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_PRAM_WR_CMD_REG);
 8004522:	f44f 7045 	mov.w	r0, #788	; 0x314
 8004526:	f7ff fe9b 	bl	8004260 <lan9252_read_32>
 800452a:	4603      	mov	r3, r0
 800452c:	613b      	str	r3, [r7, #16]
   }while(value & ESC_PRAM_CMD_BUSY);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	dbf6      	blt.n	8004522 <ESC_write_pram+0x2a>

   value = ESC_PRAM_SIZE(len) | ESC_PRAM_ADDR(address);
 8004534:	88bb      	ldrh	r3, [r7, #4]
 8004536:	041a      	lsls	r2, r3, #16
 8004538:	88fb      	ldrh	r3, [r7, #6]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_WR_ADDR_LEN_REG, value);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4619      	mov	r1, r3
 8004542:	f44f 7044 	mov.w	r0, #784	; 0x310
 8004546:	f7ff fe51 	bl	80041ec <lan9252_write_32>

   value = ESC_PRAM_CMD_BUSY;
 800454a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800454e:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_WR_CMD_REG, value);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4619      	mov	r1, r3
 8004554:	f44f 7045 	mov.w	r0, #788	; 0x314
 8004558:	f7ff fe48 	bl	80041ec <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_PRAM_WR_CMD_REG);
 800455c:	f44f 7045 	mov.w	r0, #788	; 0x314
 8004560:	f7ff fe7e 	bl	8004260 <lan9252_read_32>
 8004564:	4603      	mov	r3, r0
 8004566:	613b      	str	r3, [r7, #16]
   }while((value & ESC_PRAM_CMD_AVAIL) == 0);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f4      	beq.n	800455c <ESC_write_pram+0x64>

   /* Fifo count */
   fifo_cnt = ESC_PRAM_CMD_CNT(value);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	0a1b      	lsrs	r3, r3, #8
 8004576:	b2db      	uxtb	r3, r3
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	777b      	strb	r3, [r7, #29]

   /* Find out first byte position and adjust the copy from that
    * according to LAN9252 datasheet
    */
   first_byte_position = (address & 0x03);
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	75fb      	strb	r3, [r7, #23]
   temp_len = ((4 - first_byte_position) > len) ? len : (4 - first_byte_position);
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	f1c3 0204 	rsb	r2, r3, #4
 800458e:	88bb      	ldrh	r3, [r7, #4]
 8004590:	4293      	cmp	r3, r2
 8004592:	bfa8      	it	ge
 8004594:	4613      	movge	r3, r2
 8004596:	75bb      	strb	r3, [r7, #22]

   memcpy(((uint8_t *)&value + first_byte_position), temp_buf, temp_len);
 8004598:	7dfb      	ldrb	r3, [r7, #23]
 800459a:	f107 0210 	add.w	r2, r7, #16
 800459e:	4413      	add	r3, r2
 80045a0:	7dba      	ldrb	r2, [r7, #22]
 80045a2:	69b9      	ldr	r1, [r7, #24]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f005 fea9 	bl	800a2fc <memcpy>

   /* Write first value from FIFO */
   lan9252_write_32(ESC_PRAM_WR_FIFO_REG, value);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4619      	mov	r1, r3
 80045ae:	2020      	movs	r0, #32
 80045b0:	f7ff fe1c 	bl	80041ec <lan9252_write_32>

   len -= temp_len;
 80045b4:	7dbb      	ldrb	r3, [r7, #22]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	88ba      	ldrh	r2, [r7, #4]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	80bb      	strh	r3, [r7, #4]
   byte_offset += temp_len;
 80045be:	7dbb      	ldrb	r3, [r7, #22]
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	8bfb      	ldrh	r3, [r7, #30]
 80045c4:	4413      	add	r3, r2
 80045c6:	83fb      	strh	r3, [r7, #30]
   fifo_cnt--;
 80045c8:	7f7b      	ldrb	r3, [r7, #29]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	777b      	strb	r3, [r7, #29]

   /* Select device. */
   spi_select (lan9252);
 80045ce:	4b25      	ldr	r3, [pc, #148]	; (8004664 <ESC_write_pram+0x16c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	b25b      	sxtb	r3, r3
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 f922 	bl	800481e <spi_select>
   /* Send command and address for incrementing write */
   data[0] = ESC_CMD_SERIAL_WRITE;
 80045da:	2302      	movs	r3, #2
 80045dc:	733b      	strb	r3, [r7, #12]
   data[1] = ((ESC_PRAM_WR_FIFO_REG >> 8) & 0xFF);
 80045de:	2300      	movs	r3, #0
 80045e0:	737b      	strb	r3, [r7, #13]
   data[2] = (ESC_PRAM_WR_FIFO_REG & 0xFF);
 80045e2:	2320      	movs	r3, #32
 80045e4:	73bb      	strb	r3, [r7, #14]
   write (lan9252, data, sizeof(data));
 80045e6:	4b1f      	ldr	r3, [pc, #124]	; (8004664 <ESC_write_pram+0x16c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	b25b      	sxtb	r3, r3
 80045ec:	f107 010c 	add.w	r1, r7, #12
 80045f0:	2203      	movs	r2, #3
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 f932 	bl	800485c <write>

   /* Continue reading until we have read len */
   while(len > 0)
 80045f8:	e026      	b.n	8004648 <ESC_write_pram+0x150>
   {
      temp_len = (len > 4) ? 4 : len;
 80045fa:	88bb      	ldrh	r3, [r7, #4]
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	bf28      	it	cs
 8004600:	2304      	movcs	r3, #4
 8004602:	b29b      	uxth	r3, r3
 8004604:	75bb      	strb	r3, [r7, #22]
      value = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
      memcpy((uint8_t *)&value, (temp_buf + byte_offset), temp_len);
 800460a:	8bfb      	ldrh	r3, [r7, #30]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	18d1      	adds	r1, r2, r3
 8004610:	7dba      	ldrb	r2, [r7, #22]
 8004612:	f107 0310 	add.w	r3, r7, #16
 8004616:	4618      	mov	r0, r3
 8004618:	f005 fe70 	bl	800a2fc <memcpy>
      /* Always write 4 byte */
      write (lan9252, (void *)&value, sizeof(value));
 800461c:	4b11      	ldr	r3, [pc, #68]	; (8004664 <ESC_write_pram+0x16c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	b25b      	sxtb	r3, r3
 8004622:	f107 0110 	add.w	r1, r7, #16
 8004626:	2204      	movs	r2, #4
 8004628:	4618      	mov	r0, r3
 800462a:	f000 f917 	bl	800485c <write>

      fifo_cnt--;
 800462e:	7f7b      	ldrb	r3, [r7, #29]
 8004630:	3b01      	subs	r3, #1
 8004632:	777b      	strb	r3, [r7, #29]
      len -= temp_len;
 8004634:	7dbb      	ldrb	r3, [r7, #22]
 8004636:	b29b      	uxth	r3, r3
 8004638:	88ba      	ldrh	r2, [r7, #4]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	80bb      	strh	r3, [r7, #4]
      byte_offset += temp_len;
 800463e:	7dbb      	ldrb	r3, [r7, #22]
 8004640:	b29a      	uxth	r2, r3
 8004642:	8bfb      	ldrh	r3, [r7, #30]
 8004644:	4413      	add	r3, r2
 8004646:	83fb      	strh	r3, [r7, #30]
   while(len > 0)
 8004648:	88bb      	ldrh	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1d5      	bne.n	80045fa <ESC_write_pram+0x102>
   }
   /* Un-select device. */
   spi_unselect (lan9252);
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <ESC_write_pram+0x16c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	b25b      	sxtb	r3, r3
 8004654:	4618      	mov	r0, r3
 8004656:	f000 f8f1 	bl	800483c <spi_unselect>
}
 800465a:	bf00      	nop
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000020 	.word	0x20000020

08004668 <ESC_read>:
 * @param[in]   address     = address of ESC register to read
 * @param[out]  buf         = pointer to buffer to read in
 * @param[in]   len         = number of bytes to read
 */
void ESC_read (uint16_t address, void *buf, uint16_t len)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	6039      	str	r1, [r7, #0]
 8004672:	80fb      	strh	r3, [r7, #6]
 8004674:	4613      	mov	r3, r2
 8004676:	80bb      	strh	r3, [r7, #4]
   /* Select Read function depending on address, process data ram or not */
   if (address >= 0x1000)
 8004678:	88fb      	ldrh	r3, [r7, #6]
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467e:	d306      	bcc.n	800468e <ESC_read+0x26>
   {
      ESC_read_pram(address, buf, len);
 8004680:	88ba      	ldrh	r2, [r7, #4]
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	6839      	ldr	r1, [r7, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff fe86 	bl	8004398 <ESC_read_pram>
 800468c:	e038      	b.n	8004700 <ESC_read+0x98>
   }
   else
   {
      uint16_t size;
      uint8_t *temp_buf = (uint8_t *)buf;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	60bb      	str	r3, [r7, #8]

      while(len > 0)
 8004692:	e032      	b.n	80046fa <ESC_read+0x92>
      {
         /* We write maximum 4 bytes at the time */
         size = (len > 4) ? 4 : len;
 8004694:	88bb      	ldrh	r3, [r7, #4]
 8004696:	2b04      	cmp	r3, #4
 8004698:	bf28      	it	cs
 800469a:	2304      	movcs	r3, #4
 800469c:	81fb      	strh	r3, [r7, #14]
         /* Make size aligned to address according to LAN9252 datasheet
          * Table 12-14 EtherCAT CSR Address VS size and MicroChip SDK code
          */
         /* If we got an odd address size is 1 , 01b 11b is captured */
         if(address & BIT(0))
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <ESC_read+0x46>
         {
            size = 1;
 80046a8:	2301      	movs	r3, #1
 80046aa:	81fb      	strh	r3, [r7, #14]
 80046ac:	e013      	b.n	80046d6 <ESC_read+0x6e>
         }
         /* If address 1xb and size != 1 and 3 , allow size 2 else size 1 */
         else if (address & BIT(1))
 80046ae:	88fb      	ldrh	r3, [r7, #6]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d009      	beq.n	80046cc <ESC_read+0x64>
         {
            size = (size & BIT(0)) ? 1 : 2;
 80046b8:	89fb      	ldrh	r3, [r7, #14]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <ESC_read+0x5e>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <ESC_read+0x60>
 80046c6:	2302      	movs	r3, #2
 80046c8:	81fb      	strh	r3, [r7, #14]
 80046ca:	e004      	b.n	80046d6 <ESC_read+0x6e>
         }
         /* size 3 not valid */
         else if (size == 3)
 80046cc:	89fb      	ldrh	r3, [r7, #14]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d101      	bne.n	80046d6 <ESC_read+0x6e>
         {
            size = 1;
 80046d2:	2301      	movs	r3, #1
 80046d4:	81fb      	strh	r3, [r7, #14]
         }
         /* else size is kept AS IS */
         ESC_read_csr(address, temp_buf, size);
 80046d6:	89fa      	ldrh	r2, [r7, #14]
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff fdfd 	bl	80042dc <ESC_read_csr>

         /* next address */
         len -= size;
 80046e2:	88ba      	ldrh	r2, [r7, #4]
 80046e4:	89fb      	ldrh	r3, [r7, #14]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	80bb      	strh	r3, [r7, #4]
         temp_buf += size;
 80046ea:	89fb      	ldrh	r3, [r7, #14]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	4413      	add	r3, r2
 80046f0:	60bb      	str	r3, [r7, #8]
         address += size;
 80046f2:	88fa      	ldrh	r2, [r7, #6]
 80046f4:	89fb      	ldrh	r3, [r7, #14]
 80046f6:	4413      	add	r3, r2
 80046f8:	80fb      	strh	r3, [r7, #6]
      while(len > 0)
 80046fa:	88bb      	ldrh	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1c9      	bne.n	8004694 <ESC_read+0x2c>
      }
   }
   /* To mimic the ET1100 always providing AlEvent on every read or write */
   ESC_read_csr(ESCREG_ALEVENT,(void *)&ESCvar.ALevent,sizeof(ESCvar.ALevent));
 8004700:	2202      	movs	r2, #2
 8004702:	4908      	ldr	r1, [pc, #32]	; (8004724 <ESC_read+0xbc>)
 8004704:	f44f 7008 	mov.w	r0, #544	; 0x220
 8004708:	f7ff fde8 	bl	80042dc <ESC_read_csr>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <ESC_read+0xc0>)
 800470e:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8004712:	b29a      	uxth	r2, r3
 8004714:	4b04      	ldr	r3, [pc, #16]	; (8004728 <ESC_read+0xc0>)
 8004716:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8

}
 800471a:	bf00      	nop
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000248 	.word	0x20000248
 8004728:	20000180 	.word	0x20000180

0800472c <ESC_write>:
 * @param[in]   address     = address of ESC register to write
 * @param[out]  buf         = pointer to buffer to write from
 * @param[in]   len         = number of bytes to write
 */
void ESC_write (uint16_t address, void *buf, uint16_t len)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	6039      	str	r1, [r7, #0]
 8004736:	80fb      	strh	r3, [r7, #6]
 8004738:	4613      	mov	r3, r2
 800473a:	80bb      	strh	r3, [r7, #4]
   /* Select Write function depending on address, process data ram or not */
   if (address >= 0x1000)
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004742:	d306      	bcc.n	8004752 <ESC_write+0x26>
   {
      ESC_write_pram(address, buf, len);
 8004744:	88ba      	ldrh	r2, [r7, #4]
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	6839      	ldr	r1, [r7, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fed4 	bl	80044f8 <ESC_write_pram>
 8004750:	e038      	b.n	80047c4 <ESC_write+0x98>
   }
   else
   {
      uint16_t size;
      uint8_t *temp_buf = (uint8_t *)buf;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	60bb      	str	r3, [r7, #8]

      while(len > 0)
 8004756:	e032      	b.n	80047be <ESC_write+0x92>
      {
         /* We write maximum 4 bytes at the time */
         size = (len > 4) ? 4 : len;
 8004758:	88bb      	ldrh	r3, [r7, #4]
 800475a:	2b04      	cmp	r3, #4
 800475c:	bf28      	it	cs
 800475e:	2304      	movcs	r3, #4
 8004760:	81fb      	strh	r3, [r7, #14]
         /* Make size aligned to address according to LAN9252 datasheet
          * Table 12-14 EtherCAT CSR Address VS size  and MicroChip SDK code
          */
         /* If we got an odd address size is 1 , 01b 11b is captured */
         if(address & BIT(0))
 8004762:	88fb      	ldrh	r3, [r7, #6]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <ESC_write+0x46>
         {
            size = 1;
 800476c:	2301      	movs	r3, #1
 800476e:	81fb      	strh	r3, [r7, #14]
 8004770:	e013      	b.n	800479a <ESC_write+0x6e>
         }
         /* If address 1xb and size != 1 and 3 , allow size 2 else size 1 */
         else if (address & BIT(1))
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d009      	beq.n	8004790 <ESC_write+0x64>
         {
            size = (size & BIT(0)) ? 1 : 2;
 800477c:	89fb      	ldrh	r3, [r7, #14]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <ESC_write+0x5e>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <ESC_write+0x60>
 800478a:	2302      	movs	r3, #2
 800478c:	81fb      	strh	r3, [r7, #14]
 800478e:	e004      	b.n	800479a <ESC_write+0x6e>
         }
         /* size 3 not valid */
         else if (size == 3)
 8004790:	89fb      	ldrh	r3, [r7, #14]
 8004792:	2b03      	cmp	r3, #3
 8004794:	d101      	bne.n	800479a <ESC_write+0x6e>
         {
            size = 1;
 8004796:	2301      	movs	r3, #1
 8004798:	81fb      	strh	r3, [r7, #14]
         }
         /* else size is kept AS IS */
         ESC_write_csr(address, temp_buf, size);
 800479a:	89fa      	ldrh	r2, [r7, #14]
 800479c:	88fb      	ldrh	r3, [r7, #6]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff fdca 	bl	800433a <ESC_write_csr>

         /* next address */
         len -= size;
 80047a6:	88ba      	ldrh	r2, [r7, #4]
 80047a8:	89fb      	ldrh	r3, [r7, #14]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	80bb      	strh	r3, [r7, #4]
         temp_buf += size;
 80047ae:	89fb      	ldrh	r3, [r7, #14]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	4413      	add	r3, r2
 80047b4:	60bb      	str	r3, [r7, #8]
         address += size;
 80047b6:	88fa      	ldrh	r2, [r7, #6]
 80047b8:	89fb      	ldrh	r3, [r7, #14]
 80047ba:	4413      	add	r3, r2
 80047bc:	80fb      	strh	r3, [r7, #6]
      while(len > 0)
 80047be:	88bb      	ldrh	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1c9      	bne.n	8004758 <ESC_write+0x2c>
      }
   }

   /* To mimic the ET1x00 always providing AlEvent on every read or write */
   ESC_read_csr(ESCREG_ALEVENT,(void *)&ESCvar.ALevent,sizeof(ESCvar.ALevent));
 80047c4:	2202      	movs	r2, #2
 80047c6:	4908      	ldr	r1, [pc, #32]	; (80047e8 <ESC_write+0xbc>)
 80047c8:	f44f 7008 	mov.w	r0, #544	; 0x220
 80047cc:	f7ff fd86 	bl	80042dc <ESC_read_csr>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 80047d0:	4b06      	ldr	r3, [pc, #24]	; (80047ec <ESC_write+0xc0>)
 80047d2:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	4b04      	ldr	r3, [pc, #16]	; (80047ec <ESC_write+0xc0>)
 80047da:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000248 	.word	0x20000248
 80047ec:	20000180 	.word	0x20000180

080047f0 <ESC_init>:
{

}

void ESC_init (const esc_cfg_t * config)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
   //lan9252 = open (spi_name, O_RDWR, 0);

   /* Reset the ecat core here due to evb-lan9252-digio not having any GPIO
    * for that purpose.
    */
   lan9252_write_32(ESC_RESET_CTRL_REG,ESC_RESET_CTRL_RST);
 80047f8:	2140      	movs	r1, #64	; 0x40
 80047fa:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
 80047fe:	f7ff fcf5 	bl	80041ec <lan9252_write_32>
   do
   {
      value = lan9252_read_32(ESC_CSR_CMD_REG);
 8004802:	f44f 7041 	mov.w	r0, #772	; 0x304
 8004806:	f7ff fd2b 	bl	8004260 <lan9252_read_32>
 800480a:	60f8      	str	r0, [r7, #12]
   } while(value & ESC_RESET_CTRL_RST);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f5      	bne.n	8004802 <ESC_init+0x12>



}
 8004816:	bf00      	nop
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <spi_select>:

extern SPI_HandleTypeDef hspi1;


void spi_select (int8_t board)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	4603      	mov	r3, r0
 8004826:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8004828:	2200      	movs	r2, #0
 800482a:	2101      	movs	r1, #1
 800482c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004830:	f001 f8f0 	bl	8005a14 <HAL_GPIO_WritePin>
}
 8004834:	bf00      	nop
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <spi_unselect>:

void spi_unselect (int8_t board)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8004846:	2201      	movs	r2, #1
 8004848:	2101      	movs	r1, #1
 800484a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800484e:	f001 f8e1 	bl	8005a14 <HAL_GPIO_WritePin>
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <write>:

void write (int8_t board, uint8_t *data, uint8_t size)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	6039      	str	r1, [r7, #0]
 8004866:	71fb      	strb	r3, [r7, #7]
 8004868:	4613      	mov	r3, r2
 800486a:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, data, size, tout);
 800486c:	79bb      	ldrb	r3, [r7, #6]
 800486e:	b29a      	uxth	r2, r3
 8004870:	f241 3388 	movw	r3, #5000	; 0x1388
 8004874:	6839      	ldr	r1, [r7, #0]
 8004876:	4803      	ldr	r0, [pc, #12]	; (8004884 <write+0x28>)
 8004878:	f002 ff58 	bl	800772c <HAL_SPI_Transmit>
}
 800487c:	bf00      	nop
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	20000958 	.word	0x20000958

08004888 <read>:

void read (int8_t board, uint8_t *result, uint8_t size)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	6039      	str	r1, [r7, #0]
 8004892:	71fb      	strb	r3, [r7, #7]
 8004894:	4613      	mov	r3, r2
 8004896:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Receive(&hspi1, result, size, tout);
 8004898:	79bb      	ldrb	r3, [r7, #6]
 800489a:	b29a      	uxth	r2, r3
 800489c:	f241 3388 	movw	r3, #5000	; 0x1388
 80048a0:	6839      	ldr	r1, [r7, #0]
 80048a2:	4803      	ldr	r0, [pc, #12]	; (80048b0 <read+0x28>)
 80048a4:	f003 f8a8 	bl	80079f8 <HAL_SPI_Receive>
}
 80048a8:	bf00      	nop
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20000958 	.word	0x20000958

080048b4 <cb_get_inputs>:
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void cb_get_inputs (void)					//just add
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
	if (Obj.BUTTON.BUTTON_1 == 1) {
 80048b8:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <cb_get_inputs+0x70>)
 80048ba:	795b      	ldrb	r3, [r3, #5]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d109      	bne.n	80048d4 <cb_get_inputs+0x20>
		Obj.LED.LED_RED = 1;
 80048c0:	4b18      	ldr	r3, [pc, #96]	; (8004924 <cb_get_inputs+0x70>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80048c6:	2201      	movs	r2, #1
 80048c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048cc:	4816      	ldr	r0, [pc, #88]	; (8004928 <cb_get_inputs+0x74>)
 80048ce:	f001 f8a1 	bl	8005a14 <HAL_GPIO_WritePin>
 80048d2:	e008      	b.n	80048e6 <cb_get_inputs+0x32>
	}
	else {
		Obj.LED.LED_RED = 0;
 80048d4:	4b13      	ldr	r3, [pc, #76]	; (8004924 <cb_get_inputs+0x70>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80048da:	2200      	movs	r2, #0
 80048dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80048e0:	4811      	ldr	r0, [pc, #68]	; (8004928 <cb_get_inputs+0x74>)
 80048e2:	f001 f897 	bl	8005a14 <HAL_GPIO_WritePin>
	}

	if (Obj.BUTTON.BUTTON_2 == 1) {
 80048e6:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <cb_get_inputs+0x70>)
 80048e8:	799b      	ldrb	r3, [r3, #6]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d10b      	bne.n	8004906 <cb_get_inputs+0x52>
		Obj.BUTTON_VAL = 1;
 80048ee:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <cb_get_inputs+0x70>)
 80048f0:	2201      	movs	r2, #1
 80048f2:	71da      	strb	r2, [r3, #7]
		Obj.LED.LED_BLUE = 1;
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <cb_get_inputs+0x70>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80048fa:	2201      	movs	r2, #1
 80048fc:	2180      	movs	r1, #128	; 0x80
 80048fe:	480a      	ldr	r0, [pc, #40]	; (8004928 <cb_get_inputs+0x74>)
 8004900:	f001 f888 	bl	8005a14 <HAL_GPIO_WritePin>
 8004904:	e007      	b.n	8004916 <cb_get_inputs+0x62>
	}
	else {
		Obj.LED.LED_BLUE = 0;
 8004906:	4b07      	ldr	r3, [pc, #28]	; (8004924 <cb_get_inputs+0x70>)
 8004908:	2200      	movs	r2, #0
 800490a:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800490c:	2200      	movs	r2, #0
 800490e:	2180      	movs	r1, #128	; 0x80
 8004910:	4805      	ldr	r0, [pc, #20]	; (8004928 <cb_get_inputs+0x74>)
 8004912:	f001 f87f 	bl	8005a14 <HAL_GPIO_WritePin>
//	else {
//		Obj.LED.LED_GREEN = 0;
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
//	}

	Obj.LED_VAL = Obj.BUTTON_VAL;
 8004916:	4b03      	ldr	r3, [pc, #12]	; (8004924 <cb_get_inputs+0x70>)
 8004918:	79da      	ldrb	r2, [r3, #7]
 800491a:	4b02      	ldr	r3, [pc, #8]	; (8004924 <cb_get_inputs+0x70>)
 800491c:	70da      	strb	r2, [r3, #3]
}
 800491e:	bf00      	nop
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	200009bc 	.word	0x200009bc
 8004928:	48000400 	.word	0x48000400

0800492c <cb_set_outputs>:

void cb_set_outputs (void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
}
 8004930:	bf00      	nop
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
	...

0800493c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	80fb      	strh	r3, [r7, #6]
	Obj.PHY_BUTTON ^= 0x01;
 8004946:	4b06      	ldr	r3, [pc, #24]	; (8004960 <HAL_GPIO_EXTI_Callback+0x24>)
 8004948:	791b      	ldrb	r3, [r3, #4]
 800494a:	f083 0301 	eor.w	r3, r3, #1
 800494e:	b2da      	uxtb	r2, r3
 8004950:	4b03      	ldr	r3, [pc, #12]	; (8004960 <HAL_GPIO_EXTI_Callback+0x24>)
 8004952:	711a      	strb	r2, [r3, #4]
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	200009bc 	.word	0x200009bc

08004964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004968:	f000 fd1d 	bl	80053a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800496c:	f000 f818 	bl	80049a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004970:	f000 f996 	bl	8004ca0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8004974:	f000 f89c 	bl	8004ab0 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8004978:	f000 f8de 	bl	8004b38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800497c:	f000 f966 	bl	8004c4c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8004980:	f000 f926 	bl	8004bd0 <MX_SPI1_Init>
     .esc_hw_eep_handler = NULL,
     .esc_check_dc_handler = NULL,
  };


  ecat_slv_init (&config);
 8004984:	4804      	ldr	r0, [pc, #16]	; (8004998 <main+0x34>)
 8004986:	f7fb ffa5 	bl	80008d4 <ecat_slv_init>
  DPRINT("Hello Main\n");
 800498a:	4804      	ldr	r0, [pc, #16]	; (800499c <main+0x38>)
 800498c:	f006 f804 	bl	800a998 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ecat_slv();								//just add
 8004990:	f7fb ff96 	bl	80008c0 <ecat_slv>
 8004994:	e7fc      	b.n	8004990 <main+0x2c>
 8004996:	bf00      	nop
 8004998:	20000024 	.word	0x20000024
 800499c:	0800b5a4 	.word	0x0800b5a4

080049a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b0bc      	sub	sp, #240	; 0xf0
 80049a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80049aa:	2244      	movs	r2, #68	; 0x44
 80049ac:	2100      	movs	r1, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f005 fcaf 	bl	800a312 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	605a      	str	r2, [r3, #4]
 80049be:	609a      	str	r2, [r3, #8]
 80049c0:	60da      	str	r2, [r3, #12]
 80049c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049c4:	1d3b      	adds	r3, r7, #4
 80049c6:	2294      	movs	r2, #148	; 0x94
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f005 fca1 	bl	800a312 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80049d0:	2000      	movs	r0, #0
 80049d2:	f001 f9b7 	bl	8005d44 <HAL_PWREx_ControlVoltageScaling>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80049dc:	f000 fa44 	bl	8004e68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80049e6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80049ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049ee:	2302      	movs	r3, #2
 80049f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80049f4:	2303      	movs	r3, #3
 80049f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 8004a00:	231e      	movs	r3, #30
 8004a02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a06:	2302      	movs	r3, #2
 8004a08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a12:	2302      	movs	r3, #2
 8004a14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a18:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f001 fa55 	bl	8005ecc <HAL_RCC_OscConfig>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004a28:	f000 fa1e 	bl	8004e68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a2c:	230f      	movs	r3, #15
 8004a2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a32:	2303      	movs	r3, #3
 8004a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a46:	2300      	movs	r3, #0
 8004a48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004a4c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004a50:	2105      	movs	r1, #5
 8004a52:	4618      	mov	r0, r3
 8004a54:	f001 fe28 	bl	80066a8 <HAL_RCC_ClockConfig>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004a5e:	f000 fa03 	bl	8004e68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 8004a62:	f242 0324 	movw	r3, #8228	; 0x2024
 8004a66:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004a70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004a74:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8004a76:	2303      	movs	r3, #3
 8004a78:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8004a7e:	230c      	movs	r3, #12
 8004a80:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8004a82:	2302      	movs	r3, #2
 8004a84:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004a86:	2302      	movs	r3, #2
 8004a88:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8004a8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004a92:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a94:	1d3b      	adds	r3, r7, #4
 8004a96:	4618      	mov	r0, r3
 8004a98:	f002 f8b6 	bl	8006c08 <HAL_RCCEx_PeriphCLKConfig>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8004aa2:	f000 f9e1 	bl	8004e68 <Error_Handler>
  }
}
 8004aa6:	bf00      	nop
 8004aa8:	37f0      	adds	r7, #240	; 0xf0
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004ab4:	4b1e      	ldr	r3, [pc, #120]	; (8004b30 <MX_LPUART1_UART_Init+0x80>)
 8004ab6:	4a1f      	ldr	r2, [pc, #124]	; (8004b34 <MX_LPUART1_UART_Init+0x84>)
 8004ab8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8004aba:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <MX_LPUART1_UART_Init+0x80>)
 8004abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ac0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004ac2:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <MX_LPUART1_UART_Init+0x80>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004ac8:	4b19      	ldr	r3, [pc, #100]	; (8004b30 <MX_LPUART1_UART_Init+0x80>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004ace:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <MX_LPUART1_UART_Init+0x80>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004ad4:	4b16      	ldr	r3, [pc, #88]	; (8004b30 <MX_LPUART1_UART_Init+0x80>)
 8004ad6:	220c      	movs	r2, #12
 8004ad8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ada:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <MX_LPUART1_UART_Init+0x80>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ae0:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <MX_LPUART1_UART_Init+0x80>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ae6:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <MX_LPUART1_UART_Init+0x80>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004aec:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <MX_LPUART1_UART_Init+0x80>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8004af2:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <MX_LPUART1_UART_Init+0x80>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004af8:	480d      	ldr	r0, [pc, #52]	; (8004b30 <MX_LPUART1_UART_Init+0x80>)
 8004afa:	f003 fc2d 	bl	8008358 <HAL_UART_Init>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8004b04:	f000 f9b0 	bl	8004e68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4809      	ldr	r0, [pc, #36]	; (8004b30 <MX_LPUART1_UART_Init+0x80>)
 8004b0c:	f005 f839 	bl	8009b82 <HAL_UARTEx_SetTxFifoThreshold>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004b16:	f000 f9a7 	bl	8004e68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	4804      	ldr	r0, [pc, #16]	; (8004b30 <MX_LPUART1_UART_Init+0x80>)
 8004b1e:	f005 f86e 	bl	8009bfe <HAL_UARTEx_SetRxFifoThreshold>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004b28:	f000 f99e 	bl	8004e68 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004b2c:	bf00      	nop
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	200008cc 	.word	0x200008cc
 8004b34:	40008000 	.word	0x40008000

08004b38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004b3c:	4b22      	ldr	r3, [pc, #136]	; (8004bc8 <MX_USART3_UART_Init+0x90>)
 8004b3e:	4a23      	ldr	r2, [pc, #140]	; (8004bcc <MX_USART3_UART_Init+0x94>)
 8004b40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004b42:	4b21      	ldr	r3, [pc, #132]	; (8004bc8 <MX_USART3_UART_Init+0x90>)
 8004b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b4a:	4b1f      	ldr	r3, [pc, #124]	; (8004bc8 <MX_USART3_UART_Init+0x90>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b50:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <MX_USART3_UART_Init+0x90>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b56:	4b1c      	ldr	r3, [pc, #112]	; (8004bc8 <MX_USART3_UART_Init+0x90>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004b5c:	4b1a      	ldr	r3, [pc, #104]	; (8004bc8 <MX_USART3_UART_Init+0x90>)
 8004b5e:	220c      	movs	r2, #12
 8004b60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b62:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <MX_USART3_UART_Init+0x90>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b68:	4b17      	ldr	r3, [pc, #92]	; (8004bc8 <MX_USART3_UART_Init+0x90>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b6e:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <MX_USART3_UART_Init+0x90>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004b74:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <MX_USART3_UART_Init+0x90>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b7a:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <MX_USART3_UART_Init+0x90>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b80:	4811      	ldr	r0, [pc, #68]	; (8004bc8 <MX_USART3_UART_Init+0x90>)
 8004b82:	f003 fbe9 	bl	8008358 <HAL_UART_Init>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004b8c:	f000 f96c 	bl	8004e68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b90:	2100      	movs	r1, #0
 8004b92:	480d      	ldr	r0, [pc, #52]	; (8004bc8 <MX_USART3_UART_Init+0x90>)
 8004b94:	f004 fff5 	bl	8009b82 <HAL_UARTEx_SetTxFifoThreshold>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004b9e:	f000 f963 	bl	8004e68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	4808      	ldr	r0, [pc, #32]	; (8004bc8 <MX_USART3_UART_Init+0x90>)
 8004ba6:	f005 f82a 	bl	8009bfe <HAL_UARTEx_SetRxFifoThreshold>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004bb0:	f000 f95a 	bl	8004e68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004bb4:	4804      	ldr	r0, [pc, #16]	; (8004bc8 <MX_USART3_UART_Init+0x90>)
 8004bb6:	f004 ffab 	bl	8009b10 <HAL_UARTEx_DisableFifoMode>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004bc0:	f000 f952 	bl	8004e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004bc4:	bf00      	nop
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20000438 	.word	0x20000438
 8004bcc:	40004800 	.word	0x40004800

08004bd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004bd4:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <MX_SPI1_Init+0x74>)
 8004bd6:	4a1c      	ldr	r2, [pc, #112]	; (8004c48 <MX_SPI1_Init+0x78>)
 8004bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004bda:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <MX_SPI1_Init+0x74>)
 8004bdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004be2:	4b18      	ldr	r3, [pc, #96]	; (8004c44 <MX_SPI1_Init+0x74>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004be8:	4b16      	ldr	r3, [pc, #88]	; (8004c44 <MX_SPI1_Init+0x74>)
 8004bea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004bee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bf0:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <MX_SPI1_Init+0x74>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004bf6:	4b13      	ldr	r3, [pc, #76]	; (8004c44 <MX_SPI1_Init+0x74>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004bfc:	4b11      	ldr	r3, [pc, #68]	; (8004c44 <MX_SPI1_Init+0x74>)
 8004bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004c04:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <MX_SPI1_Init+0x74>)
 8004c06:	2208      	movs	r2, #8
 8004c08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c0a:	4b0e      	ldr	r3, [pc, #56]	; (8004c44 <MX_SPI1_Init+0x74>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <MX_SPI1_Init+0x74>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c16:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <MX_SPI1_Init+0x74>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004c1c:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <MX_SPI1_Init+0x74>)
 8004c1e:	2207      	movs	r2, #7
 8004c20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004c22:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <MX_SPI1_Init+0x74>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <MX_SPI1_Init+0x74>)
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c2e:	4805      	ldr	r0, [pc, #20]	; (8004c44 <MX_SPI1_Init+0x74>)
 8004c30:	f002 fcf2 	bl	8007618 <HAL_SPI_Init>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004c3a:	f000 f915 	bl	8004e68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004c3e:	bf00      	nop
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000958 	.word	0x20000958
 8004c48:	40013000 	.word	0x40013000

08004c4c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004c50:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004c56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004c58:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c5a:	2206      	movs	r2, #6
 8004c5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004c5e:	4b0f      	ldr	r3, [pc, #60]	; (8004c9c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c60:	2202      	movs	r2, #2
 8004c62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8004c64:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004c6a:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004c70:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8004c76:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004c7c:	4b07      	ldr	r3, [pc, #28]	; (8004c9c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c84:	2201      	movs	r2, #1
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004c88:	4804      	ldr	r0, [pc, #16]	; (8004c9c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8004c8a:	f000 fef3 	bl	8005a74 <HAL_PCD_Init>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8004c94:	f000 f8e8 	bl	8004e68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004c98:	bf00      	nop
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	200004c4 	.word	0x200004c4

08004ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08c      	sub	sp, #48	; 0x30
 8004ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca6:	f107 031c 	add.w	r3, r7, #28
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	605a      	str	r2, [r3, #4]
 8004cb0:	609a      	str	r2, [r3, #8]
 8004cb2:	60da      	str	r2, [r3, #12]
 8004cb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cb6:	4b67      	ldr	r3, [pc, #412]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cba:	4a66      	ldr	r2, [pc, #408]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004cbc:	f043 0304 	orr.w	r3, r3, #4
 8004cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cc2:	4b64      	ldr	r3, [pc, #400]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	61bb      	str	r3, [r7, #24]
 8004ccc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004cce:	4b61      	ldr	r3, [pc, #388]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd2:	4a60      	ldr	r2, [pc, #384]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cda:	4b5e      	ldr	r3, [pc, #376]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ce6:	4b5b      	ldr	r3, [pc, #364]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cea:	4a5a      	ldr	r2, [pc, #360]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cf2:	4b58      	ldr	r3, [pc, #352]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cfe:	4b55      	ldr	r3, [pc, #340]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d02:	4a54      	ldr	r2, [pc, #336]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004d04:	f043 0302 	orr.w	r3, r3, #2
 8004d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d0a:	4b52      	ldr	r3, [pc, #328]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d16:	4b4f      	ldr	r3, [pc, #316]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1a:	4a4e      	ldr	r2, [pc, #312]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004d1c:	f043 0308 	orr.w	r3, r3, #8
 8004d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d22:	4b4c      	ldr	r3, [pc, #304]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d2e:	4b49      	ldr	r3, [pc, #292]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d32:	4a48      	ldr	r2, [pc, #288]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d3a:	4b46      	ldr	r3, [pc, #280]	; (8004e54 <MX_GPIO_Init+0x1b4>)
 8004d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d42:	607b      	str	r3, [r7, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8004d46:	f001 f8b1 	bl	8005eac <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_SET);
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	2121      	movs	r1, #33	; 0x21
 8004d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d52:	f000 fe5f 	bl	8005a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004d56:	2200      	movs	r2, #0
 8004d58:	f244 0181 	movw	r1, #16513	; 0x4081
 8004d5c:	483e      	ldr	r0, [pc, #248]	; (8004e58 <MX_GPIO_Init+0x1b8>)
 8004d5e:	f000 fe59 	bl	8005a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004d62:	2200      	movs	r2, #0
 8004d64:	2120      	movs	r1, #32
 8004d66:	483d      	ldr	r0, [pc, #244]	; (8004e5c <MX_GPIO_Init+0x1bc>)
 8004d68:	f000 fe54 	bl	8005a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2180      	movs	r1, #128	; 0x80
 8004d70:	483b      	ldr	r0, [pc, #236]	; (8004e60 <MX_GPIO_Init+0x1c0>)
 8004d72:	f000 fe4f 	bl	8005a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d7c:	4b39      	ldr	r3, [pc, #228]	; (8004e64 <MX_GPIO_Init+0x1c4>)
 8004d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004d84:	f107 031c 	add.w	r3, r7, #28
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4835      	ldr	r0, [pc, #212]	; (8004e60 <MX_GPIO_Init+0x1c0>)
 8004d8c:	f000 fcb0 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004d90:	2301      	movs	r3, #1
 8004d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d94:	2301      	movs	r3, #1
 8004d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004da0:	f107 031c 	add.w	r3, r7, #28
 8004da4:	4619      	mov	r1, r3
 8004da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004daa:	f000 fca1 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004dae:	2320      	movs	r3, #32
 8004db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004db2:	2301      	movs	r3, #1
 8004db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004db6:	2301      	movs	r3, #1
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dbe:	f107 031c 	add.w	r3, r7, #28
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dc8:	f000 fc92 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin;
 8004dcc:	f244 0381 	movw	r3, #16513	; 0x4081
 8004dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dde:	f107 031c 	add.w	r3, r7, #28
 8004de2:	4619      	mov	r1, r3
 8004de4:	481c      	ldr	r0, [pc, #112]	; (8004e58 <MX_GPIO_Init+0x1b8>)
 8004de6:	f000 fc83 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004dea:	2320      	movs	r3, #32
 8004dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dee:	2301      	movs	r3, #1
 8004df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df6:	2300      	movs	r3, #0
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004dfa:	f107 031c 	add.w	r3, r7, #28
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4816      	ldr	r0, [pc, #88]	; (8004e5c <MX_GPIO_Init+0x1bc>)
 8004e02:	f000 fc75 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004e06:	2340      	movs	r3, #64	; 0x40
 8004e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004e12:	f107 031c 	add.w	r3, r7, #28
 8004e16:	4619      	mov	r1, r3
 8004e18:	4810      	ldr	r0, [pc, #64]	; (8004e5c <MX_GPIO_Init+0x1bc>)
 8004e1a:	f000 fc69 	bl	80056f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004e1e:	2380      	movs	r3, #128	; 0x80
 8004e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e22:	2301      	movs	r3, #1
 8004e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e26:	2301      	movs	r3, #1
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e2e:	f107 031c 	add.w	r3, r7, #28
 8004e32:	4619      	mov	r1, r3
 8004e34:	480a      	ldr	r0, [pc, #40]	; (8004e60 <MX_GPIO_Init+0x1c0>)
 8004e36:	f000 fc5b 	bl	80056f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	2028      	movs	r0, #40	; 0x28
 8004e40:	f000 fc1f 	bl	8005682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004e44:	2028      	movs	r0, #40	; 0x28
 8004e46:	f000 fc38 	bl	80056ba <HAL_NVIC_EnableIRQ>

}
 8004e4a:	bf00      	nop
 8004e4c:	3730      	adds	r7, #48	; 0x30
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	48000400 	.word	0x48000400
 8004e5c:	48001800 	.word	0x48001800
 8004e60:	48000800 	.word	0x48000800
 8004e64:	10110000 	.word	0x10110000

08004e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004e6c:	bf00      	nop
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <HAL_MspInit+0x44>)
 8004e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e82:	4a0e      	ldr	r2, [pc, #56]	; (8004ebc <HAL_MspInit+0x44>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	6613      	str	r3, [r2, #96]	; 0x60
 8004e8a:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <HAL_MspInit+0x44>)
 8004e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	607b      	str	r3, [r7, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e96:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <HAL_MspInit+0x44>)
 8004e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9a:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <HAL_MspInit+0x44>)
 8004e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <HAL_MspInit+0x44>)
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000

08004ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08c      	sub	sp, #48	; 0x30
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec8:	f107 031c 	add.w	r3, r7, #28
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	605a      	str	r2, [r3, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
 8004ed4:	60da      	str	r2, [r3, #12]
 8004ed6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a30      	ldr	r2, [pc, #192]	; (8004fa0 <HAL_UART_MspInit+0xe0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d12b      	bne.n	8004f3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004ee2:	4b30      	ldr	r3, [pc, #192]	; (8004fa4 <HAL_UART_MspInit+0xe4>)
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee6:	4a2f      	ldr	r2, [pc, #188]	; (8004fa4 <HAL_UART_MspInit+0xe4>)
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004eee:	4b2d      	ldr	r3, [pc, #180]	; (8004fa4 <HAL_UART_MspInit+0xe4>)
 8004ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004efa:	4b2a      	ldr	r3, [pc, #168]	; (8004fa4 <HAL_UART_MspInit+0xe4>)
 8004efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efe:	4a29      	ldr	r2, [pc, #164]	; (8004fa4 <HAL_UART_MspInit+0xe4>)
 8004f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f06:	4b27      	ldr	r3, [pc, #156]	; (8004fa4 <HAL_UART_MspInit+0xe4>)
 8004f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8004f12:	f000 ffcb 	bl	8005eac <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8004f16:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f24:	2303      	movs	r3, #3
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004f28:	2308      	movs	r3, #8
 8004f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004f2c:	f107 031c 	add.w	r3, r7, #28
 8004f30:	4619      	mov	r1, r3
 8004f32:	481d      	ldr	r0, [pc, #116]	; (8004fa8 <HAL_UART_MspInit+0xe8>)
 8004f34:	f000 fbdc 	bl	80056f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004f38:	e02d      	b.n	8004f96 <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART3)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1b      	ldr	r2, [pc, #108]	; (8004fac <HAL_UART_MspInit+0xec>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d128      	bne.n	8004f96 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004f44:	4b17      	ldr	r3, [pc, #92]	; (8004fa4 <HAL_UART_MspInit+0xe4>)
 8004f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f48:	4a16      	ldr	r2, [pc, #88]	; (8004fa4 <HAL_UART_MspInit+0xe4>)
 8004f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f50:	4b14      	ldr	r3, [pc, #80]	; (8004fa4 <HAL_UART_MspInit+0xe4>)
 8004f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f5c:	4b11      	ldr	r3, [pc, #68]	; (8004fa4 <HAL_UART_MspInit+0xe4>)
 8004f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f60:	4a10      	ldr	r2, [pc, #64]	; (8004fa4 <HAL_UART_MspInit+0xe4>)
 8004f62:	f043 0308 	orr.w	r3, r3, #8
 8004f66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f68:	4b0e      	ldr	r3, [pc, #56]	; (8004fa4 <HAL_UART_MspInit+0xe4>)
 8004f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004f74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f82:	2303      	movs	r3, #3
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004f86:	2307      	movs	r3, #7
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f8a:	f107 031c 	add.w	r3, r7, #28
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4807      	ldr	r0, [pc, #28]	; (8004fb0 <HAL_UART_MspInit+0xf0>)
 8004f92:	f000 fbad 	bl	80056f0 <HAL_GPIO_Init>
}
 8004f96:	bf00      	nop
 8004f98:	3730      	adds	r7, #48	; 0x30
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40008000 	.word	0x40008000
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	48001800 	.word	0x48001800
 8004fac:	40004800 	.word	0x40004800
 8004fb0:	48000c00 	.word	0x48000c00

08004fb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08a      	sub	sp, #40	; 0x28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fbc:	f107 0314 	add.w	r3, r7, #20
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	605a      	str	r2, [r3, #4]
 8004fc6:	609a      	str	r2, [r3, #8]
 8004fc8:	60da      	str	r2, [r3, #12]
 8004fca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a17      	ldr	r2, [pc, #92]	; (8005030 <HAL_SPI_MspInit+0x7c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d128      	bne.n	8005028 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004fd6:	4b17      	ldr	r3, [pc, #92]	; (8005034 <HAL_SPI_MspInit+0x80>)
 8004fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fda:	4a16      	ldr	r2, [pc, #88]	; (8005034 <HAL_SPI_MspInit+0x80>)
 8004fdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004fe0:	6613      	str	r3, [r2, #96]	; 0x60
 8004fe2:	4b14      	ldr	r3, [pc, #80]	; (8005034 <HAL_SPI_MspInit+0x80>)
 8004fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fee:	4b11      	ldr	r3, [pc, #68]	; (8005034 <HAL_SPI_MspInit+0x80>)
 8004ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff2:	4a10      	ldr	r2, [pc, #64]	; (8005034 <HAL_SPI_MspInit+0x80>)
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ffa:	4b0e      	ldr	r3, [pc, #56]	; (8005034 <HAL_SPI_MspInit+0x80>)
 8004ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8005006:	23c2      	movs	r3, #194	; 0xc2
 8005008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800500a:	2302      	movs	r3, #2
 800500c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500e:	2300      	movs	r3, #0
 8005010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005012:	2303      	movs	r3, #3
 8005014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005016:	2305      	movs	r3, #5
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800501a:	f107 0314 	add.w	r3, r7, #20
 800501e:	4619      	mov	r1, r3
 8005020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005024:	f000 fb64 	bl	80056f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005028:	bf00      	nop
 800502a:	3728      	adds	r7, #40	; 0x28
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40013000 	.word	0x40013000
 8005034:	40021000 	.word	0x40021000

08005038 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005040:	f107 0314 	add.w	r3, r7, #20
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	605a      	str	r2, [r3, #4]
 800504a:	609a      	str	r2, [r3, #8]
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005058:	d154      	bne.n	8005104 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800505a:	4b2c      	ldr	r3, [pc, #176]	; (800510c <HAL_PCD_MspInit+0xd4>)
 800505c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505e:	4a2b      	ldr	r2, [pc, #172]	; (800510c <HAL_PCD_MspInit+0xd4>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005066:	4b29      	ldr	r3, [pc, #164]	; (800510c <HAL_PCD_MspInit+0xd4>)
 8005068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005072:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005078:	2302      	movs	r3, #2
 800507a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507c:	2300      	movs	r3, #0
 800507e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005080:	2303      	movs	r3, #3
 8005082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005084:	230a      	movs	r3, #10
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005088:	f107 0314 	add.w	r3, r7, #20
 800508c:	4619      	mov	r1, r3
 800508e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005092:	f000 fb2d 	bl	80056f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800509a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800509c:	2300      	movs	r3, #0
 800509e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80050a4:	f107 0314 	add.w	r3, r7, #20
 80050a8:	4619      	mov	r1, r3
 80050aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050ae:	f000 fb1f 	bl	80056f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80050b2:	4b16      	ldr	r3, [pc, #88]	; (800510c <HAL_PCD_MspInit+0xd4>)
 80050b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b6:	4a15      	ldr	r2, [pc, #84]	; (800510c <HAL_PCD_MspInit+0xd4>)
 80050b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050be:	4b13      	ldr	r3, [pc, #76]	; (800510c <HAL_PCD_MspInit+0xd4>)
 80050c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ca:	4b10      	ldr	r3, [pc, #64]	; (800510c <HAL_PCD_MspInit+0xd4>)
 80050cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d114      	bne.n	8005100 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d6:	4b0d      	ldr	r3, [pc, #52]	; (800510c <HAL_PCD_MspInit+0xd4>)
 80050d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050da:	4a0c      	ldr	r2, [pc, #48]	; (800510c <HAL_PCD_MspInit+0xd4>)
 80050dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e0:	6593      	str	r3, [r2, #88]	; 0x58
 80050e2:	4b0a      	ldr	r3, [pc, #40]	; (800510c <HAL_PCD_MspInit+0xd4>)
 80050e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80050ee:	f000 fecd 	bl	8005e8c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f2:	4b06      	ldr	r3, [pc, #24]	; (800510c <HAL_PCD_MspInit+0xd4>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	4a05      	ldr	r2, [pc, #20]	; (800510c <HAL_PCD_MspInit+0xd4>)
 80050f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050fc:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80050fe:	e001      	b.n	8005104 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8005100:	f000 fec4 	bl	8005e8c <HAL_PWREx_EnableVddUSB>
}
 8005104:	bf00      	nop
 8005106:	3728      	adds	r7, #40	; 0x28
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40021000 	.word	0x40021000

08005110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800511e:	b480      	push	{r7}
 8005120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005122:	e7fe      	b.n	8005122 <HardFault_Handler+0x4>

08005124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005128:	e7fe      	b.n	8005128 <MemManage_Handler+0x4>

0800512a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800512a:	b480      	push	{r7}
 800512c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800512e:	e7fe      	b.n	800512e <BusFault_Handler+0x4>

08005130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005134:	e7fe      	b.n	8005134 <UsageFault_Handler+0x4>

08005136 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005136:	b480      	push	{r7}
 8005138:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800513a:	bf00      	nop
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005148:	bf00      	nop
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005152:	b480      	push	{r7}
 8005154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005156:	bf00      	nop
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005164:	f000 f972 	bl	800544c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005168:	bf00      	nop
 800516a:	bd80      	pop	{r7, pc}

0800516c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005170:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005174:	f000 fc66 	bl	8005a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005178:	bf00      	nop
 800517a:	bd80      	pop	{r7, pc}

0800517c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
	return 1;
 8005180:	2301      	movs	r3, #1
}
 8005182:	4618      	mov	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <_kill>:

int _kill(int pid, int sig)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005196:	f005 f875 	bl	800a284 <__errno>
 800519a:	4602      	mov	r2, r0
 800519c:	2316      	movs	r3, #22
 800519e:	6013      	str	r3, [r2, #0]
	return -1;
 80051a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <_exit>:

void _exit (int status)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80051b4:	f04f 31ff 	mov.w	r1, #4294967295
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7ff ffe7 	bl	800518c <_kill>
	while (1) {}		/* Make sure we hang here */
 80051be:	e7fe      	b.n	80051be <_exit+0x12>

080051c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051cc:	2300      	movs	r3, #0
 80051ce:	617b      	str	r3, [r7, #20]
 80051d0:	e00a      	b.n	80051e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80051d2:	f3af 8000 	nop.w
 80051d6:	4601      	mov	r1, r0
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	60ba      	str	r2, [r7, #8]
 80051de:	b2ca      	uxtb	r2, r1
 80051e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	3301      	adds	r3, #1
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	dbf0      	blt.n	80051d2 <_read+0x12>
	}

return len;
 80051f0:	687b      	ldr	r3, [r7, #4]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <_write>:

extern UART_HandleTypeDef hlpuart1;

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
	{
		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
	}
	return len;*/
	HAL_UART_Transmit(&hlpuart1, ptr, len , HAL_MAX_DELAY);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	b29a      	uxth	r2, r3
 800520c:	f04f 33ff 	mov.w	r3, #4294967295
 8005210:	68b9      	ldr	r1, [r7, #8]
 8005212:	4804      	ldr	r0, [pc, #16]	; (8005224 <_write+0x28>)
 8005214:	f003 f8f0 	bl	80083f8 <HAL_UART_Transmit>
	return len;
 8005218:	687b      	ldr	r3, [r7, #4]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	200008cc 	.word	0x200008cc

08005228 <_close>:

int _close(int file)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	return -1;
 8005230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005250:	605a      	str	r2, [r3, #4]
	return 0;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <_isatty>:

int _isatty(int file)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
	return 1;
 8005268:	2301      	movs	r3, #1
}
 800526a:	4618      	mov	r0, r3
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005276:	b480      	push	{r7}
 8005278:	b085      	sub	sp, #20
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	607a      	str	r2, [r7, #4]
	return 0;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005298:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <_sbrk+0x50>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d102      	bne.n	80052a6 <_sbrk+0x16>
		heap_end = &end;
 80052a0:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <_sbrk+0x50>)
 80052a2:	4a10      	ldr	r2, [pc, #64]	; (80052e4 <_sbrk+0x54>)
 80052a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80052a6:	4b0e      	ldr	r3, [pc, #56]	; (80052e0 <_sbrk+0x50>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80052ac:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <_sbrk+0x50>)
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4413      	add	r3, r2
 80052b4:	466a      	mov	r2, sp
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d907      	bls.n	80052ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80052ba:	f004 ffe3 	bl	800a284 <__errno>
 80052be:	4602      	mov	r2, r0
 80052c0:	230c      	movs	r3, #12
 80052c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80052c4:	f04f 33ff 	mov.w	r3, #4294967295
 80052c8:	e006      	b.n	80052d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <_sbrk+0x50>)
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4413      	add	r3, r2
 80052d2:	4a03      	ldr	r2, [pc, #12]	; (80052e0 <_sbrk+0x50>)
 80052d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80052d6:	68fb      	ldr	r3, [r7, #12]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	20000174 	.word	0x20000174
 80052e4:	200009d0 	.word	0x200009d0

080052e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052ec:	4b17      	ldr	r3, [pc, #92]	; (800534c <SystemInit+0x64>)
 80052ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f2:	4a16      	ldr	r2, [pc, #88]	; (800534c <SystemInit+0x64>)
 80052f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80052fc:	4b14      	ldr	r3, [pc, #80]	; (8005350 <SystemInit+0x68>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a13      	ldr	r2, [pc, #76]	; (8005350 <SystemInit+0x68>)
 8005302:	f043 0301 	orr.w	r3, r3, #1
 8005306:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005308:	4b11      	ldr	r3, [pc, #68]	; (8005350 <SystemInit+0x68>)
 800530a:	2200      	movs	r2, #0
 800530c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800530e:	4b10      	ldr	r3, [pc, #64]	; (8005350 <SystemInit+0x68>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a0f      	ldr	r2, [pc, #60]	; (8005350 <SystemInit+0x68>)
 8005314:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005318:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800531c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800531e:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <SystemInit+0x68>)
 8005320:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005324:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005326:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <SystemInit+0x68>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a09      	ldr	r2, [pc, #36]	; (8005350 <SystemInit+0x68>)
 800532c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005330:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005332:	4b07      	ldr	r3, [pc, #28]	; (8005350 <SystemInit+0x68>)
 8005334:	2200      	movs	r2, #0
 8005336:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005338:	4b04      	ldr	r3, [pc, #16]	; (800534c <SystemInit+0x64>)
 800533a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800533e:	609a      	str	r2, [r3, #8]
#endif
}
 8005340:	bf00      	nop
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	e000ed00 	.word	0xe000ed00
 8005350:	40021000 	.word	0x40021000

08005354 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005354:	f8df d034 	ldr.w	sp, [pc, #52]	; 800538c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005358:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800535a:	e003      	b.n	8005364 <LoopCopyDataInit>

0800535c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800535c:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800535e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005360:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005362:	3104      	adds	r1, #4

08005364 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005364:	480b      	ldr	r0, [pc, #44]	; (8005394 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005366:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005368:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800536a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800536c:	d3f6      	bcc.n	800535c <CopyDataInit>
	ldr	r2, =_sbss
 800536e:	4a0b      	ldr	r2, [pc, #44]	; (800539c <LoopForever+0x12>)
	b	LoopFillZerobss
 8005370:	e002      	b.n	8005378 <LoopFillZerobss>

08005372 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005372:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005374:	f842 3b04 	str.w	r3, [r2], #4

08005378 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005378:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <LoopForever+0x16>)
	cmp	r2, r3
 800537a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800537c:	d3f9      	bcc.n	8005372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800537e:	f7ff ffb3 	bl	80052e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005382:	f004 ff97 	bl	800a2b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005386:	f7ff faed 	bl	8004964 <main>

0800538a <LoopForever>:

LoopForever:
    b LoopForever
 800538a:	e7fe      	b.n	800538a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800538c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8005390:	0800bfa4 	.word	0x0800bfa4
	ldr	r0, =_sdata
 8005394:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005398:	200000d4 	.word	0x200000d4
	ldr	r2, =_sbss
 800539c:	200000d8 	.word	0x200000d8
	ldr	r3, = _ebss
 80053a0:	200009d0 	.word	0x200009d0

080053a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80053a4:	e7fe      	b.n	80053a4 <ADC1_IRQHandler>

080053a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b082      	sub	sp, #8
 80053aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053b0:	2003      	movs	r0, #3
 80053b2:	f000 f95b 	bl	800566c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80053b6:	2000      	movs	r0, #0
 80053b8:	f000 f80e 	bl	80053d8 <HAL_InitTick>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	71fb      	strb	r3, [r7, #7]
 80053c6:	e001      	b.n	80053cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80053c8:	f7ff fd56 	bl	8004e78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80053cc:	79fb      	ldrb	r3, [r7, #7]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80053e4:	4b16      	ldr	r3, [pc, #88]	; (8005440 <HAL_InitTick+0x68>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d022      	beq.n	8005432 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80053ec:	4b15      	ldr	r3, [pc, #84]	; (8005444 <HAL_InitTick+0x6c>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	4b13      	ldr	r3, [pc, #76]	; (8005440 <HAL_InitTick+0x68>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80053f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80053fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005400:	4618      	mov	r0, r3
 8005402:	f000 f968 	bl	80056d6 <HAL_SYSTICK_Config>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10f      	bne.n	800542c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b0f      	cmp	r3, #15
 8005410:	d809      	bhi.n	8005426 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005412:	2200      	movs	r2, #0
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	f04f 30ff 	mov.w	r0, #4294967295
 800541a:	f000 f932 	bl	8005682 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800541e:	4a0a      	ldr	r2, [pc, #40]	; (8005448 <HAL_InitTick+0x70>)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	e007      	b.n	8005436 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	73fb      	strb	r3, [r7, #15]
 800542a:	e004      	b.n	8005436 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	73fb      	strb	r3, [r7, #15]
 8005430:	e001      	b.n	8005436 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005436:	7bfb      	ldrb	r3, [r7, #15]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	2000006c 	.word	0x2000006c
 8005444:	20000064 	.word	0x20000064
 8005448:	20000068 	.word	0x20000068

0800544c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005450:	4b05      	ldr	r3, [pc, #20]	; (8005468 <HAL_IncTick+0x1c>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <HAL_IncTick+0x20>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4413      	add	r3, r2
 800545a:	4a03      	ldr	r2, [pc, #12]	; (8005468 <HAL_IncTick+0x1c>)
 800545c:	6013      	str	r3, [r2, #0]
}
 800545e:	bf00      	nop
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	200009c8 	.word	0x200009c8
 800546c:	2000006c 	.word	0x2000006c

08005470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  return uwTick;
 8005474:	4b03      	ldr	r3, [pc, #12]	; (8005484 <HAL_GetTick+0x14>)
 8005476:	681b      	ldr	r3, [r3, #0]
}
 8005478:	4618      	mov	r0, r3
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	200009c8 	.word	0x200009c8

08005488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005490:	f7ff ffee 	bl	8005470 <HAL_GetTick>
 8005494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d004      	beq.n	80054ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80054a2:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <HAL_Delay+0x40>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054ac:	bf00      	nop
 80054ae:	f7ff ffdf 	bl	8005470 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d8f7      	bhi.n	80054ae <HAL_Delay+0x26>
  {
  }
}
 80054be:	bf00      	nop
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	2000006c 	.word	0x2000006c

080054cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054dc:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <__NVIC_SetPriorityGrouping+0x44>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80054e8:	4013      	ands	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80054f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054fe:	4a04      	ldr	r2, [pc, #16]	; (8005510 <__NVIC_SetPriorityGrouping+0x44>)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	60d3      	str	r3, [r2, #12]
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	e000ed00 	.word	0xe000ed00

08005514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005518:	4b04      	ldr	r3, [pc, #16]	; (800552c <__NVIC_GetPriorityGrouping+0x18>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	0a1b      	lsrs	r3, r3, #8
 800551e:	f003 0307 	and.w	r3, r3, #7
}
 8005522:	4618      	mov	r0, r3
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	e000ed00 	.word	0xe000ed00

08005530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800553a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553e:	2b00      	cmp	r3, #0
 8005540:	db0b      	blt.n	800555a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	f003 021f 	and.w	r2, r3, #31
 8005548:	4907      	ldr	r1, [pc, #28]	; (8005568 <__NVIC_EnableIRQ+0x38>)
 800554a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	2001      	movs	r0, #1
 8005552:	fa00 f202 	lsl.w	r2, r0, r2
 8005556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	e000e100 	.word	0xe000e100

0800556c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	6039      	str	r1, [r7, #0]
 8005576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557c:	2b00      	cmp	r3, #0
 800557e:	db0a      	blt.n	8005596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	b2da      	uxtb	r2, r3
 8005584:	490c      	ldr	r1, [pc, #48]	; (80055b8 <__NVIC_SetPriority+0x4c>)
 8005586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558a:	0112      	lsls	r2, r2, #4
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	440b      	add	r3, r1
 8005590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005594:	e00a      	b.n	80055ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	b2da      	uxtb	r2, r3
 800559a:	4908      	ldr	r1, [pc, #32]	; (80055bc <__NVIC_SetPriority+0x50>)
 800559c:	79fb      	ldrb	r3, [r7, #7]
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	3b04      	subs	r3, #4
 80055a4:	0112      	lsls	r2, r2, #4
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	440b      	add	r3, r1
 80055aa:	761a      	strb	r2, [r3, #24]
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	e000e100 	.word	0xe000e100
 80055bc:	e000ed00 	.word	0xe000ed00

080055c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b089      	sub	sp, #36	; 0x24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	f1c3 0307 	rsb	r3, r3, #7
 80055da:	2b04      	cmp	r3, #4
 80055dc:	bf28      	it	cs
 80055de:	2304      	movcs	r3, #4
 80055e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	3304      	adds	r3, #4
 80055e6:	2b06      	cmp	r3, #6
 80055e8:	d902      	bls.n	80055f0 <NVIC_EncodePriority+0x30>
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	3b03      	subs	r3, #3
 80055ee:	e000      	b.n	80055f2 <NVIC_EncodePriority+0x32>
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055f4:	f04f 32ff 	mov.w	r2, #4294967295
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	43da      	mvns	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	401a      	ands	r2, r3
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005608:	f04f 31ff 	mov.w	r1, #4294967295
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	fa01 f303 	lsl.w	r3, r1, r3
 8005612:	43d9      	mvns	r1, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005618:	4313      	orrs	r3, r2
         );
}
 800561a:	4618      	mov	r0, r3
 800561c:	3724      	adds	r7, #36	; 0x24
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3b01      	subs	r3, #1
 8005634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005638:	d301      	bcc.n	800563e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800563a:	2301      	movs	r3, #1
 800563c:	e00f      	b.n	800565e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800563e:	4a0a      	ldr	r2, [pc, #40]	; (8005668 <SysTick_Config+0x40>)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3b01      	subs	r3, #1
 8005644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005646:	210f      	movs	r1, #15
 8005648:	f04f 30ff 	mov.w	r0, #4294967295
 800564c:	f7ff ff8e 	bl	800556c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <SysTick_Config+0x40>)
 8005652:	2200      	movs	r2, #0
 8005654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005656:	4b04      	ldr	r3, [pc, #16]	; (8005668 <SysTick_Config+0x40>)
 8005658:	2207      	movs	r2, #7
 800565a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	e000e010 	.word	0xe000e010

0800566c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff ff29 	bl	80054cc <__NVIC_SetPriorityGrouping>
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af00      	add	r7, sp, #0
 8005688:	4603      	mov	r3, r0
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005694:	f7ff ff3e 	bl	8005514 <__NVIC_GetPriorityGrouping>
 8005698:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	6978      	ldr	r0, [r7, #20]
 80056a0:	f7ff ff8e 	bl	80055c0 <NVIC_EncodePriority>
 80056a4:	4602      	mov	r2, r0
 80056a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056aa:	4611      	mov	r1, r2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff ff5d 	bl	800556c <__NVIC_SetPriority>
}
 80056b2:	bf00      	nop
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	4603      	mov	r3, r0
 80056c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff ff31 	bl	8005530 <__NVIC_EnableIRQ>
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7ff ffa2 	bl	8005628 <SysTick_Config>
 80056e4:	4603      	mov	r3, r0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056fa:	2300      	movs	r3, #0
 80056fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056fe:	e166      	b.n	80059ce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	2101      	movs	r1, #1
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	fa01 f303 	lsl.w	r3, r1, r3
 800570c:	4013      	ands	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 8158 	beq.w	80059c8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	2b02      	cmp	r3, #2
 800571e:	d003      	beq.n	8005728 <HAL_GPIO_Init+0x38>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b12      	cmp	r3, #18
 8005726:	d123      	bne.n	8005770 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	08da      	lsrs	r2, r3, #3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3208      	adds	r2, #8
 8005730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005734:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	220f      	movs	r2, #15
 8005740:	fa02 f303 	lsl.w	r3, r2, r3
 8005744:	43db      	mvns	r3, r3
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4013      	ands	r3, r2
 800574a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	08da      	lsrs	r2, r3, #3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3208      	adds	r2, #8
 800576a:	6939      	ldr	r1, [r7, #16]
 800576c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	2203      	movs	r2, #3
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	43db      	mvns	r3, r3
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4013      	ands	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f003 0203 	and.w	r2, r3, #3
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d00b      	beq.n	80057c4 <HAL_GPIO_Init+0xd4>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d007      	beq.n	80057c4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057b8:	2b11      	cmp	r3, #17
 80057ba:	d003      	beq.n	80057c4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b12      	cmp	r3, #18
 80057c2:	d130      	bne.n	8005826 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	2203      	movs	r2, #3
 80057d0:	fa02 f303 	lsl.w	r3, r2, r3
 80057d4:	43db      	mvns	r3, r3
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	4013      	ands	r3, r2
 80057da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	fa02 f303 	lsl.w	r3, r2, r3
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057fa:	2201      	movs	r2, #1
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	43db      	mvns	r3, r3
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4013      	ands	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	091b      	lsrs	r3, r3, #4
 8005810:	f003 0201 	and.w	r2, r3, #1
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	2203      	movs	r2, #3
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	43db      	mvns	r3, r3
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4013      	ands	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	fa02 f303 	lsl.w	r3, r2, r3
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 80b2 	beq.w	80059c8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005864:	4b61      	ldr	r3, [pc, #388]	; (80059ec <HAL_GPIO_Init+0x2fc>)
 8005866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005868:	4a60      	ldr	r2, [pc, #384]	; (80059ec <HAL_GPIO_Init+0x2fc>)
 800586a:	f043 0301 	orr.w	r3, r3, #1
 800586e:	6613      	str	r3, [r2, #96]	; 0x60
 8005870:	4b5e      	ldr	r3, [pc, #376]	; (80059ec <HAL_GPIO_Init+0x2fc>)
 8005872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800587c:	4a5c      	ldr	r2, [pc, #368]	; (80059f0 <HAL_GPIO_Init+0x300>)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	089b      	lsrs	r3, r3, #2
 8005882:	3302      	adds	r3, #2
 8005884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f003 0303 	and.w	r3, r3, #3
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	220f      	movs	r2, #15
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	43db      	mvns	r3, r3
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4013      	ands	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80058a6:	d02b      	beq.n	8005900 <HAL_GPIO_Init+0x210>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a52      	ldr	r2, [pc, #328]	; (80059f4 <HAL_GPIO_Init+0x304>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d025      	beq.n	80058fc <HAL_GPIO_Init+0x20c>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a51      	ldr	r2, [pc, #324]	; (80059f8 <HAL_GPIO_Init+0x308>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d01f      	beq.n	80058f8 <HAL_GPIO_Init+0x208>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a50      	ldr	r2, [pc, #320]	; (80059fc <HAL_GPIO_Init+0x30c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d019      	beq.n	80058f4 <HAL_GPIO_Init+0x204>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a4f      	ldr	r2, [pc, #316]	; (8005a00 <HAL_GPIO_Init+0x310>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d013      	beq.n	80058f0 <HAL_GPIO_Init+0x200>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a4e      	ldr	r2, [pc, #312]	; (8005a04 <HAL_GPIO_Init+0x314>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00d      	beq.n	80058ec <HAL_GPIO_Init+0x1fc>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a4d      	ldr	r2, [pc, #308]	; (8005a08 <HAL_GPIO_Init+0x318>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <HAL_GPIO_Init+0x1f8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a4c      	ldr	r2, [pc, #304]	; (8005a0c <HAL_GPIO_Init+0x31c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d101      	bne.n	80058e4 <HAL_GPIO_Init+0x1f4>
 80058e0:	2307      	movs	r3, #7
 80058e2:	e00e      	b.n	8005902 <HAL_GPIO_Init+0x212>
 80058e4:	2308      	movs	r3, #8
 80058e6:	e00c      	b.n	8005902 <HAL_GPIO_Init+0x212>
 80058e8:	2306      	movs	r3, #6
 80058ea:	e00a      	b.n	8005902 <HAL_GPIO_Init+0x212>
 80058ec:	2305      	movs	r3, #5
 80058ee:	e008      	b.n	8005902 <HAL_GPIO_Init+0x212>
 80058f0:	2304      	movs	r3, #4
 80058f2:	e006      	b.n	8005902 <HAL_GPIO_Init+0x212>
 80058f4:	2303      	movs	r3, #3
 80058f6:	e004      	b.n	8005902 <HAL_GPIO_Init+0x212>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e002      	b.n	8005902 <HAL_GPIO_Init+0x212>
 80058fc:	2301      	movs	r3, #1
 80058fe:	e000      	b.n	8005902 <HAL_GPIO_Init+0x212>
 8005900:	2300      	movs	r3, #0
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	f002 0203 	and.w	r2, r2, #3
 8005908:	0092      	lsls	r2, r2, #2
 800590a:	4093      	lsls	r3, r2
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005912:	4937      	ldr	r1, [pc, #220]	; (80059f0 <HAL_GPIO_Init+0x300>)
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	089b      	lsrs	r3, r3, #2
 8005918:	3302      	adds	r3, #2
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005920:	4b3b      	ldr	r3, [pc, #236]	; (8005a10 <HAL_GPIO_Init+0x320>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	43db      	mvns	r3, r3
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4013      	ands	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005944:	4a32      	ldr	r2, [pc, #200]	; (8005a10 <HAL_GPIO_Init+0x320>)
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800594a:	4b31      	ldr	r3, [pc, #196]	; (8005a10 <HAL_GPIO_Init+0x320>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	43db      	mvns	r3, r3
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4013      	ands	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800596e:	4a28      	ldr	r2, [pc, #160]	; (8005a10 <HAL_GPIO_Init+0x320>)
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005974:	4b26      	ldr	r3, [pc, #152]	; (8005a10 <HAL_GPIO_Init+0x320>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	43db      	mvns	r3, r3
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	4013      	ands	r3, r2
 8005982:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005998:	4a1d      	ldr	r2, [pc, #116]	; (8005a10 <HAL_GPIO_Init+0x320>)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800599e:	4b1c      	ldr	r3, [pc, #112]	; (8005a10 <HAL_GPIO_Init+0x320>)
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	43db      	mvns	r3, r3
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4013      	ands	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80059c2:	4a13      	ldr	r2, [pc, #76]	; (8005a10 <HAL_GPIO_Init+0x320>)
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	3301      	adds	r3, #1
 80059cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	fa22 f303 	lsr.w	r3, r2, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f47f ae91 	bne.w	8005700 <HAL_GPIO_Init+0x10>
  }
}
 80059de:	bf00      	nop
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40021000 	.word	0x40021000
 80059f0:	40010000 	.word	0x40010000
 80059f4:	48000400 	.word	0x48000400
 80059f8:	48000800 	.word	0x48000800
 80059fc:	48000c00 	.word	0x48000c00
 8005a00:	48001000 	.word	0x48001000
 8005a04:	48001400 	.word	0x48001400
 8005a08:	48001800 	.word	0x48001800
 8005a0c:	48001c00 	.word	0x48001c00
 8005a10:	40010400 	.word	0x40010400

08005a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	807b      	strh	r3, [r7, #2]
 8005a20:	4613      	mov	r3, r2
 8005a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a24:	787b      	ldrb	r3, [r7, #1]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a2a:	887a      	ldrh	r2, [r7, #2]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a30:	e002      	b.n	8005a38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a32:	887a      	ldrh	r2, [r7, #2]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a4e:	4b08      	ldr	r3, [pc, #32]	; (8005a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a50:	695a      	ldr	r2, [r3, #20]
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	4013      	ands	r3, r2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d006      	beq.n	8005a68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a5a:	4a05      	ldr	r2, [pc, #20]	; (8005a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a60:	88fb      	ldrh	r3, [r7, #6]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe ff6a 	bl	800493c <HAL_GPIO_EXTI_Callback>
  }
}
 8005a68:	bf00      	nop
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40010400 	.word	0x40010400

08005a74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a76:	b08f      	sub	sp, #60	; 0x3c
 8005a78:	af0a      	add	r7, sp, #40	; 0x28
 8005a7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e116      	b.n	8005cb4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d106      	bne.n	8005aa6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff fac9 	bl	8005038 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d102      	bne.n	8005ac0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f004 f993 	bl	8009df0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	687e      	ldr	r6, [r7, #4]
 8005ad2:	466d      	mov	r5, sp
 8005ad4:	f106 0410 	add.w	r4, r6, #16
 8005ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ade:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ae0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ae4:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ae8:	1d33      	adds	r3, r6, #4
 8005aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005aec:	6838      	ldr	r0, [r7, #0]
 8005aee:	f004 f92d 	bl	8009d4c <USB_CoreInit>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0d7      	b.n	8005cb4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f004 f981 	bl	8009e12 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b10:	2300      	movs	r3, #0
 8005b12:	73fb      	strb	r3, [r7, #15]
 8005b14:	e04a      	b.n	8005bac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b16:	7bfa      	ldrb	r2, [r7, #15]
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	440b      	add	r3, r1
 8005b24:	333d      	adds	r3, #61	; 0x3d
 8005b26:	2201      	movs	r2, #1
 8005b28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b2a:	7bfa      	ldrb	r2, [r7, #15]
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	1a9b      	subs	r3, r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	440b      	add	r3, r1
 8005b38:	333c      	adds	r3, #60	; 0x3c
 8005b3a:	7bfa      	ldrb	r2, [r7, #15]
 8005b3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b3e:	7bfa      	ldrb	r2, [r7, #15]
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
 8005b42:	b298      	uxth	r0, r3
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	4613      	mov	r3, r2
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	1a9b      	subs	r3, r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	440b      	add	r3, r1
 8005b50:	3342      	adds	r3, #66	; 0x42
 8005b52:	4602      	mov	r2, r0
 8005b54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b56:	7bfa      	ldrb	r2, [r7, #15]
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	1a9b      	subs	r3, r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	333f      	adds	r3, #63	; 0x3f
 8005b66:	2200      	movs	r2, #0
 8005b68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b6a:	7bfa      	ldrb	r2, [r7, #15]
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	1a9b      	subs	r3, r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	3344      	adds	r3, #68	; 0x44
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b7e:	7bfa      	ldrb	r2, [r7, #15]
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	1a9b      	subs	r3, r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	440b      	add	r3, r1
 8005b8c:	3348      	adds	r3, #72	; 0x48
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b92:	7bfa      	ldrb	r2, [r7, #15]
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	4613      	mov	r3, r2
 8005b98:	00db      	lsls	r3, r3, #3
 8005b9a:	1a9b      	subs	r3, r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	440b      	add	r3, r1
 8005ba0:	3350      	adds	r3, #80	; 0x50
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	73fb      	strb	r3, [r7, #15]
 8005bac:	7bfa      	ldrb	r2, [r7, #15]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d3af      	bcc.n	8005b16 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	73fb      	strb	r3, [r7, #15]
 8005bba:	e044      	b.n	8005c46 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005bbc:	7bfa      	ldrb	r2, [r7, #15]
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	1a9b      	subs	r3, r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	440b      	add	r3, r1
 8005bca:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005bd2:	7bfa      	ldrb	r2, [r7, #15]
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	1a9b      	subs	r3, r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	440b      	add	r3, r1
 8005be0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005be4:	7bfa      	ldrb	r2, [r7, #15]
 8005be6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005be8:	7bfa      	ldrb	r2, [r7, #15]
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	4613      	mov	r3, r2
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	1a9b      	subs	r3, r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005bfe:	7bfa      	ldrb	r2, [r7, #15]
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	1a9b      	subs	r3, r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c14:	7bfa      	ldrb	r2, [r7, #15]
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	1a9b      	subs	r3, r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c2a:	7bfa      	ldrb	r2, [r7, #15]
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	1a9b      	subs	r3, r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	440b      	add	r3, r1
 8005c38:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	3301      	adds	r3, #1
 8005c44:	73fb      	strb	r3, [r7, #15]
 8005c46:	7bfa      	ldrb	r2, [r7, #15]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d3b5      	bcc.n	8005bbc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	603b      	str	r3, [r7, #0]
 8005c56:	687e      	ldr	r6, [r7, #4]
 8005c58:	466d      	mov	r5, sp
 8005c5a:	f106 0410 	add.w	r4, r6, #16
 8005c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c6e:	1d33      	adds	r3, r6, #4
 8005c70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c72:	6838      	ldr	r0, [r7, #0]
 8005c74:	f004 f8f8 	bl	8009e68 <USB_DevInit>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d005      	beq.n	8005c8a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2202      	movs	r2, #2
 8005c82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e014      	b.n	8005cb4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d102      	bne.n	8005ca8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f80a 	bl	8005cbc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f004 fa7e 	bl	800a1ae <USB_DevDisconnect>

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005cbc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cee:	f043 0303 	orr.w	r3, r3, #3
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d08:	4b0d      	ldr	r3, [pc, #52]	; (8005d40 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d14:	d102      	bne.n	8005d1c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d1a:	e00b      	b.n	8005d34 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005d1c:	4b08      	ldr	r3, [pc, #32]	; (8005d40 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d2a:	d102      	bne.n	8005d32 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d30:	e000      	b.n	8005d34 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005d32:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40007000 	.word	0x40007000

08005d44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d141      	bne.n	8005dd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d52:	4b4b      	ldr	r3, [pc, #300]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5e:	d131      	bne.n	8005dc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d60:	4b47      	ldr	r3, [pc, #284]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d66:	4a46      	ldr	r2, [pc, #280]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d70:	4b43      	ldr	r3, [pc, #268]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d78:	4a41      	ldr	r2, [pc, #260]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005d80:	4b40      	ldr	r3, [pc, #256]	; (8005e84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2232      	movs	r2, #50	; 0x32
 8005d86:	fb02 f303 	mul.w	r3, r2, r3
 8005d8a:	4a3f      	ldr	r2, [pc, #252]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d90:	0c9b      	lsrs	r3, r3, #18
 8005d92:	3301      	adds	r3, #1
 8005d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d96:	e002      	b.n	8005d9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d9e:	4b38      	ldr	r3, [pc, #224]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005daa:	d102      	bne.n	8005db2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f2      	bne.n	8005d98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005db2:	4b33      	ldr	r3, [pc, #204]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dbe:	d158      	bne.n	8005e72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e057      	b.n	8005e74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dc4:	4b2e      	ldr	r3, [pc, #184]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dca:	4a2d      	ldr	r2, [pc, #180]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005dd4:	e04d      	b.n	8005e72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ddc:	d141      	bne.n	8005e62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005dde:	4b28      	ldr	r3, [pc, #160]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dea:	d131      	bne.n	8005e50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dec:	4b24      	ldr	r3, [pc, #144]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005df2:	4a23      	ldr	r2, [pc, #140]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005dfc:	4b20      	ldr	r3, [pc, #128]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e04:	4a1e      	ldr	r2, [pc, #120]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005e0c:	4b1d      	ldr	r3, [pc, #116]	; (8005e84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2232      	movs	r2, #50	; 0x32
 8005e12:	fb02 f303 	mul.w	r3, r2, r3
 8005e16:	4a1c      	ldr	r2, [pc, #112]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e18:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1c:	0c9b      	lsrs	r3, r3, #18
 8005e1e:	3301      	adds	r3, #1
 8005e20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e22:	e002      	b.n	8005e2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e2a:	4b15      	ldr	r3, [pc, #84]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e36:	d102      	bne.n	8005e3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1f2      	bne.n	8005e24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e3e:	4b10      	ldr	r3, [pc, #64]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4a:	d112      	bne.n	8005e72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e011      	b.n	8005e74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e50:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e56:	4a0a      	ldr	r2, [pc, #40]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005e60:	e007      	b.n	8005e72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e62:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e6a:	4a05      	ldr	r2, [pc, #20]	; (8005e80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e70:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	40007000 	.word	0x40007000
 8005e84:	20000064 	.word	0x20000064
 8005e88:	431bde83 	.word	0x431bde83

08005e8c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005e90:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	4a04      	ldr	r2, [pc, #16]	; (8005ea8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e9a:	6053      	str	r3, [r2, #4]
}
 8005e9c:	bf00      	nop
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	40007000 	.word	0x40007000

08005eac <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005eb0:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	4a04      	ldr	r2, [pc, #16]	; (8005ec8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eba:	6053      	str	r3, [r2, #4]
}
 8005ebc:	bf00      	nop
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40007000 	.word	0x40007000

08005ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e3db      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ede:	4ba4      	ldr	r3, [pc, #656]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 030c 	and.w	r3, r3, #12
 8005ee6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ee8:	4ba1      	ldr	r3, [pc, #644]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0310 	and.w	r3, r3, #16
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 80e1 	beq.w	80060c2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d007      	beq.n	8005f16 <HAL_RCC_OscConfig+0x4a>
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	2b0c      	cmp	r3, #12
 8005f0a:	f040 8088 	bne.w	800601e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	f040 8084 	bne.w	800601e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f16:	4b96      	ldr	r3, [pc, #600]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d005      	beq.n	8005f2e <HAL_RCC_OscConfig+0x62>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e3b3      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1a      	ldr	r2, [r3, #32]
 8005f32:	4b8f      	ldr	r3, [pc, #572]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d004      	beq.n	8005f48 <HAL_RCC_OscConfig+0x7c>
 8005f3e:	4b8c      	ldr	r3, [pc, #560]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f46:	e005      	b.n	8005f54 <HAL_RCC_OscConfig+0x88>
 8005f48:	4b89      	ldr	r3, [pc, #548]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f4e:	091b      	lsrs	r3, r3, #4
 8005f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d223      	bcs.n	8005fa0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fd91 	bl	8006a84 <RCC_SetFlashLatencyFromMSIRange>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e394      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f6c:	4b80      	ldr	r3, [pc, #512]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a7f      	ldr	r2, [pc, #508]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005f72:	f043 0308 	orr.w	r3, r3, #8
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	4b7d      	ldr	r3, [pc, #500]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	497a      	ldr	r1, [pc, #488]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f8a:	4b79      	ldr	r3, [pc, #484]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	4975      	ldr	r1, [pc, #468]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	604b      	str	r3, [r1, #4]
 8005f9e:	e022      	b.n	8005fe6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fa0:	4b73      	ldr	r3, [pc, #460]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a72      	ldr	r2, [pc, #456]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005fa6:	f043 0308 	orr.w	r3, r3, #8
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	4b70      	ldr	r3, [pc, #448]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	496d      	ldr	r1, [pc, #436]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fbe:	4b6c      	ldr	r3, [pc, #432]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	4968      	ldr	r1, [pc, #416]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fd54 	bl	8006a84 <RCC_SetFlashLatencyFromMSIRange>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e357      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005fe6:	f000 fc8b 	bl	8006900 <HAL_RCC_GetSysClockFreq>
 8005fea:	4601      	mov	r1, r0
 8005fec:	4b60      	ldr	r3, [pc, #384]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	091b      	lsrs	r3, r3, #4
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	4a5f      	ldr	r2, [pc, #380]	; (8006174 <HAL_RCC_OscConfig+0x2a8>)
 8005ff8:	5cd3      	ldrb	r3, [r2, r3]
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	fa21 f303 	lsr.w	r3, r1, r3
 8006002:	4a5d      	ldr	r2, [pc, #372]	; (8006178 <HAL_RCC_OscConfig+0x2ac>)
 8006004:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006006:	4b5d      	ldr	r3, [pc, #372]	; (800617c <HAL_RCC_OscConfig+0x2b0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff f9e4 	bl	80053d8 <HAL_InitTick>
 8006010:	4603      	mov	r3, r0
 8006012:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d052      	beq.n	80060c0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	e33b      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d032      	beq.n	800608c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006026:	4b52      	ldr	r3, [pc, #328]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a51      	ldr	r2, [pc, #324]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 800602c:	f043 0301 	orr.w	r3, r3, #1
 8006030:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006032:	f7ff fa1d 	bl	8005470 <HAL_GetTick>
 8006036:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006038:	e008      	b.n	800604c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800603a:	f7ff fa19 	bl	8005470 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d901      	bls.n	800604c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e324      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800604c:	4b48      	ldr	r3, [pc, #288]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0f0      	beq.n	800603a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006058:	4b45      	ldr	r3, [pc, #276]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a44      	ldr	r2, [pc, #272]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 800605e:	f043 0308 	orr.w	r3, r3, #8
 8006062:	6013      	str	r3, [r2, #0]
 8006064:	4b42      	ldr	r3, [pc, #264]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	493f      	ldr	r1, [pc, #252]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8006072:	4313      	orrs	r3, r2
 8006074:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006076:	4b3e      	ldr	r3, [pc, #248]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	021b      	lsls	r3, r3, #8
 8006084:	493a      	ldr	r1, [pc, #232]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8006086:	4313      	orrs	r3, r2
 8006088:	604b      	str	r3, [r1, #4]
 800608a:	e01a      	b.n	80060c2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800608c:	4b38      	ldr	r3, [pc, #224]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a37      	ldr	r2, [pc, #220]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8006092:	f023 0301 	bic.w	r3, r3, #1
 8006096:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006098:	f7ff f9ea 	bl	8005470 <HAL_GetTick>
 800609c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800609e:	e008      	b.n	80060b2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060a0:	f7ff f9e6 	bl	8005470 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e2f1      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060b2:	4b2f      	ldr	r3, [pc, #188]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1f0      	bne.n	80060a0 <HAL_RCC_OscConfig+0x1d4>
 80060be:	e000      	b.n	80060c2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d074      	beq.n	80061b8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d005      	beq.n	80060e0 <HAL_RCC_OscConfig+0x214>
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2b0c      	cmp	r3, #12
 80060d8:	d10e      	bne.n	80060f8 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d10b      	bne.n	80060f8 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060e0:	4b23      	ldr	r3, [pc, #140]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d064      	beq.n	80061b6 <HAL_RCC_OscConfig+0x2ea>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d160      	bne.n	80061b6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e2ce      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006100:	d106      	bne.n	8006110 <HAL_RCC_OscConfig+0x244>
 8006102:	4b1b      	ldr	r3, [pc, #108]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a1a      	ldr	r2, [pc, #104]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8006108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	e01d      	b.n	800614c <HAL_RCC_OscConfig+0x280>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006118:	d10c      	bne.n	8006134 <HAL_RCC_OscConfig+0x268>
 800611a:	4b15      	ldr	r3, [pc, #84]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a14      	ldr	r2, [pc, #80]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8006120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	4b12      	ldr	r3, [pc, #72]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a11      	ldr	r2, [pc, #68]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 800612c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	e00b      	b.n	800614c <HAL_RCC_OscConfig+0x280>
 8006134:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a0d      	ldr	r2, [pc, #52]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 800613a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a0a      	ldr	r2, [pc, #40]	; (8006170 <HAL_RCC_OscConfig+0x2a4>)
 8006146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800614a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01c      	beq.n	800618e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006154:	f7ff f98c 	bl	8005470 <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800615a:	e011      	b.n	8006180 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800615c:	f7ff f988 	bl	8005470 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b64      	cmp	r3, #100	; 0x64
 8006168:	d90a      	bls.n	8006180 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e293      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
 800616e:	bf00      	nop
 8006170:	40021000 	.word	0x40021000
 8006174:	0800be78 	.word	0x0800be78
 8006178:	20000064 	.word	0x20000064
 800617c:	20000068 	.word	0x20000068
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006180:	4bae      	ldr	r3, [pc, #696]	; (800643c <HAL_RCC_OscConfig+0x570>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0e7      	beq.n	800615c <HAL_RCC_OscConfig+0x290>
 800618c:	e014      	b.n	80061b8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618e:	f7ff f96f 	bl	8005470 <HAL_GetTick>
 8006192:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006194:	e008      	b.n	80061a8 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006196:	f7ff f96b 	bl	8005470 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b64      	cmp	r3, #100	; 0x64
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e276      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061a8:	4ba4      	ldr	r3, [pc, #656]	; (800643c <HAL_RCC_OscConfig+0x570>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1f0      	bne.n	8006196 <HAL_RCC_OscConfig+0x2ca>
 80061b4:	e000      	b.n	80061b8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d060      	beq.n	8006286 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d005      	beq.n	80061d6 <HAL_RCC_OscConfig+0x30a>
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	2b0c      	cmp	r3, #12
 80061ce:	d119      	bne.n	8006204 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d116      	bne.n	8006204 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061d6:	4b99      	ldr	r3, [pc, #612]	; (800643c <HAL_RCC_OscConfig+0x570>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d005      	beq.n	80061ee <HAL_RCC_OscConfig+0x322>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e253      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ee:	4b93      	ldr	r3, [pc, #588]	; (800643c <HAL_RCC_OscConfig+0x570>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	061b      	lsls	r3, r3, #24
 80061fc:	498f      	ldr	r1, [pc, #572]	; (800643c <HAL_RCC_OscConfig+0x570>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006202:	e040      	b.n	8006286 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d023      	beq.n	8006254 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800620c:	4b8b      	ldr	r3, [pc, #556]	; (800643c <HAL_RCC_OscConfig+0x570>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a8a      	ldr	r2, [pc, #552]	; (800643c <HAL_RCC_OscConfig+0x570>)
 8006212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006218:	f7ff f92a 	bl	8005470 <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800621e:	e008      	b.n	8006232 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006220:	f7ff f926 	bl	8005470 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e231      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006232:	4b82      	ldr	r3, [pc, #520]	; (800643c <HAL_RCC_OscConfig+0x570>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0f0      	beq.n	8006220 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800623e:	4b7f      	ldr	r3, [pc, #508]	; (800643c <HAL_RCC_OscConfig+0x570>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	061b      	lsls	r3, r3, #24
 800624c:	497b      	ldr	r1, [pc, #492]	; (800643c <HAL_RCC_OscConfig+0x570>)
 800624e:	4313      	orrs	r3, r2
 8006250:	604b      	str	r3, [r1, #4]
 8006252:	e018      	b.n	8006286 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006254:	4b79      	ldr	r3, [pc, #484]	; (800643c <HAL_RCC_OscConfig+0x570>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a78      	ldr	r2, [pc, #480]	; (800643c <HAL_RCC_OscConfig+0x570>)
 800625a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800625e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006260:	f7ff f906 	bl	8005470 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006268:	f7ff f902 	bl	8005470 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e20d      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800627a:	4b70      	ldr	r3, [pc, #448]	; (800643c <HAL_RCC_OscConfig+0x570>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f0      	bne.n	8006268 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d03c      	beq.n	800630c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d01c      	beq.n	80062d4 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800629a:	4b68      	ldr	r3, [pc, #416]	; (800643c <HAL_RCC_OscConfig+0x570>)
 800629c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062a0:	4a66      	ldr	r2, [pc, #408]	; (800643c <HAL_RCC_OscConfig+0x570>)
 80062a2:	f043 0301 	orr.w	r3, r3, #1
 80062a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062aa:	f7ff f8e1 	bl	8005470 <HAL_GetTick>
 80062ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062b0:	e008      	b.n	80062c4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062b2:	f7ff f8dd 	bl	8005470 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d901      	bls.n	80062c4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e1e8      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062c4:	4b5d      	ldr	r3, [pc, #372]	; (800643c <HAL_RCC_OscConfig+0x570>)
 80062c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0ef      	beq.n	80062b2 <HAL_RCC_OscConfig+0x3e6>
 80062d2:	e01b      	b.n	800630c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062d4:	4b59      	ldr	r3, [pc, #356]	; (800643c <HAL_RCC_OscConfig+0x570>)
 80062d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062da:	4a58      	ldr	r2, [pc, #352]	; (800643c <HAL_RCC_OscConfig+0x570>)
 80062dc:	f023 0301 	bic.w	r3, r3, #1
 80062e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e4:	f7ff f8c4 	bl	8005470 <HAL_GetTick>
 80062e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062ea:	e008      	b.n	80062fe <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062ec:	f7ff f8c0 	bl	8005470 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e1cb      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062fe:	4b4f      	ldr	r3, [pc, #316]	; (800643c <HAL_RCC_OscConfig+0x570>)
 8006300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1ef      	bne.n	80062ec <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 80a5 	beq.w	8006464 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800631a:	2300      	movs	r3, #0
 800631c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800631e:	4b47      	ldr	r3, [pc, #284]	; (800643c <HAL_RCC_OscConfig+0x570>)
 8006320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10d      	bne.n	8006346 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800632a:	4b44      	ldr	r3, [pc, #272]	; (800643c <HAL_RCC_OscConfig+0x570>)
 800632c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632e:	4a43      	ldr	r2, [pc, #268]	; (800643c <HAL_RCC_OscConfig+0x570>)
 8006330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006334:	6593      	str	r3, [r2, #88]	; 0x58
 8006336:	4b41      	ldr	r3, [pc, #260]	; (800643c <HAL_RCC_OscConfig+0x570>)
 8006338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633e:	60bb      	str	r3, [r7, #8]
 8006340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006342:	2301      	movs	r3, #1
 8006344:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006346:	4b3e      	ldr	r3, [pc, #248]	; (8006440 <HAL_RCC_OscConfig+0x574>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634e:	2b00      	cmp	r3, #0
 8006350:	d118      	bne.n	8006384 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006352:	4b3b      	ldr	r3, [pc, #236]	; (8006440 <HAL_RCC_OscConfig+0x574>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a3a      	ldr	r2, [pc, #232]	; (8006440 <HAL_RCC_OscConfig+0x574>)
 8006358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800635c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800635e:	f7ff f887 	bl	8005470 <HAL_GetTick>
 8006362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006364:	e008      	b.n	8006378 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006366:	f7ff f883 	bl	8005470 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e18e      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006378:	4b31      	ldr	r3, [pc, #196]	; (8006440 <HAL_RCC_OscConfig+0x574>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0f0      	beq.n	8006366 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d108      	bne.n	800639e <HAL_RCC_OscConfig+0x4d2>
 800638c:	4b2b      	ldr	r3, [pc, #172]	; (800643c <HAL_RCC_OscConfig+0x570>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	4a2a      	ldr	r2, [pc, #168]	; (800643c <HAL_RCC_OscConfig+0x570>)
 8006394:	f043 0301 	orr.w	r3, r3, #1
 8006398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800639c:	e024      	b.n	80063e8 <HAL_RCC_OscConfig+0x51c>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	2b05      	cmp	r3, #5
 80063a4:	d110      	bne.n	80063c8 <HAL_RCC_OscConfig+0x4fc>
 80063a6:	4b25      	ldr	r3, [pc, #148]	; (800643c <HAL_RCC_OscConfig+0x570>)
 80063a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ac:	4a23      	ldr	r2, [pc, #140]	; (800643c <HAL_RCC_OscConfig+0x570>)
 80063ae:	f043 0304 	orr.w	r3, r3, #4
 80063b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063b6:	4b21      	ldr	r3, [pc, #132]	; (800643c <HAL_RCC_OscConfig+0x570>)
 80063b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063bc:	4a1f      	ldr	r2, [pc, #124]	; (800643c <HAL_RCC_OscConfig+0x570>)
 80063be:	f043 0301 	orr.w	r3, r3, #1
 80063c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063c6:	e00f      	b.n	80063e8 <HAL_RCC_OscConfig+0x51c>
 80063c8:	4b1c      	ldr	r3, [pc, #112]	; (800643c <HAL_RCC_OscConfig+0x570>)
 80063ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ce:	4a1b      	ldr	r2, [pc, #108]	; (800643c <HAL_RCC_OscConfig+0x570>)
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063d8:	4b18      	ldr	r3, [pc, #96]	; (800643c <HAL_RCC_OscConfig+0x570>)
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063de:	4a17      	ldr	r2, [pc, #92]	; (800643c <HAL_RCC_OscConfig+0x570>)
 80063e0:	f023 0304 	bic.w	r3, r3, #4
 80063e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d016      	beq.n	800641e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f0:	f7ff f83e 	bl	8005470 <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063f6:	e00a      	b.n	800640e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f8:	f7ff f83a 	bl	8005470 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	f241 3288 	movw	r2, #5000	; 0x1388
 8006406:	4293      	cmp	r3, r2
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e143      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800640e:	4b0b      	ldr	r3, [pc, #44]	; (800643c <HAL_RCC_OscConfig+0x570>)
 8006410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d0ed      	beq.n	80063f8 <HAL_RCC_OscConfig+0x52c>
 800641c:	e019      	b.n	8006452 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641e:	f7ff f827 	bl	8005470 <HAL_GetTick>
 8006422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006424:	e00e      	b.n	8006444 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006426:	f7ff f823 	bl	8005470 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	f241 3288 	movw	r2, #5000	; 0x1388
 8006434:	4293      	cmp	r3, r2
 8006436:	d905      	bls.n	8006444 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e12c      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
 800643c:	40021000 	.word	0x40021000
 8006440:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006444:	4b96      	ldr	r3, [pc, #600]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 8006446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1e9      	bne.n	8006426 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006452:	7ffb      	ldrb	r3, [r7, #31]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d105      	bne.n	8006464 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006458:	4b91      	ldr	r3, [pc, #580]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 800645a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645c:	4a90      	ldr	r2, [pc, #576]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 800645e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006462:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b00      	cmp	r3, #0
 800646e:	d03c      	beq.n	80064ea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	2b00      	cmp	r3, #0
 8006476:	d01c      	beq.n	80064b2 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006478:	4b89      	ldr	r3, [pc, #548]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 800647a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800647e:	4a88      	ldr	r2, [pc, #544]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 8006480:	f043 0301 	orr.w	r3, r3, #1
 8006484:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006488:	f7fe fff2 	bl	8005470 <HAL_GetTick>
 800648c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800648e:	e008      	b.n	80064a2 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006490:	f7fe ffee 	bl	8005470 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	2b02      	cmp	r3, #2
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e0f9      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064a2:	4b7f      	ldr	r3, [pc, #508]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 80064a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0ef      	beq.n	8006490 <HAL_RCC_OscConfig+0x5c4>
 80064b0:	e01b      	b.n	80064ea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80064b2:	4b7b      	ldr	r3, [pc, #492]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 80064b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064b8:	4a79      	ldr	r2, [pc, #484]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 80064ba:	f023 0301 	bic.w	r3, r3, #1
 80064be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c2:	f7fe ffd5 	bl	8005470 <HAL_GetTick>
 80064c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064c8:	e008      	b.n	80064dc <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064ca:	f7fe ffd1 	bl	8005470 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d901      	bls.n	80064dc <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e0dc      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80064dc:	4b70      	ldr	r3, [pc, #448]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 80064de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1ef      	bne.n	80064ca <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80d0 	beq.w	8006694 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	2b0c      	cmp	r3, #12
 80064f8:	f000 808d 	beq.w	8006616 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006500:	2b02      	cmp	r3, #2
 8006502:	d15a      	bne.n	80065ba <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006504:	4b66      	ldr	r3, [pc, #408]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a65      	ldr	r2, [pc, #404]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 800650a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800650e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fe ffae 	bl	8005470 <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006518:	f7fe ffaa 	bl	8005470 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e0b5      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800652a:	4b5d      	ldr	r3, [pc, #372]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f0      	bne.n	8006518 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006536:	4b5a      	ldr	r3, [pc, #360]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	4b5a      	ldr	r3, [pc, #360]	; (80066a4 <HAL_RCC_OscConfig+0x7d8>)
 800653c:	4013      	ands	r3, r2
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006546:	3a01      	subs	r2, #1
 8006548:	0112      	lsls	r2, r2, #4
 800654a:	4311      	orrs	r1, r2
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006550:	0212      	lsls	r2, r2, #8
 8006552:	4311      	orrs	r1, r2
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006558:	0852      	lsrs	r2, r2, #1
 800655a:	3a01      	subs	r2, #1
 800655c:	0552      	lsls	r2, r2, #21
 800655e:	4311      	orrs	r1, r2
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006564:	0852      	lsrs	r2, r2, #1
 8006566:	3a01      	subs	r2, #1
 8006568:	0652      	lsls	r2, r2, #25
 800656a:	4311      	orrs	r1, r2
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006570:	06d2      	lsls	r2, r2, #27
 8006572:	430a      	orrs	r2, r1
 8006574:	494a      	ldr	r1, [pc, #296]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 8006576:	4313      	orrs	r3, r2
 8006578:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800657a:	4b49      	ldr	r3, [pc, #292]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a48      	ldr	r2, [pc, #288]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 8006580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006584:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006586:	4b46      	ldr	r3, [pc, #280]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	4a45      	ldr	r2, [pc, #276]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 800658c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006590:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006592:	f7fe ff6d 	bl	8005470 <HAL_GetTick>
 8006596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006598:	e008      	b.n	80065ac <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800659a:	f7fe ff69 	bl	8005470 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e074      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065ac:	4b3c      	ldr	r3, [pc, #240]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0f0      	beq.n	800659a <HAL_RCC_OscConfig+0x6ce>
 80065b8:	e06c      	b.n	8006694 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ba:	4b39      	ldr	r3, [pc, #228]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a38      	ldr	r2, [pc, #224]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 80065c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065c4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80065c6:	4b36      	ldr	r3, [pc, #216]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d105      	bne.n	80065de <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80065d2:	4b33      	ldr	r3, [pc, #204]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	4a32      	ldr	r2, [pc, #200]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 80065d8:	f023 0303 	bic.w	r3, r3, #3
 80065dc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80065de:	4b30      	ldr	r3, [pc, #192]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	4a2f      	ldr	r2, [pc, #188]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 80065e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80065e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ee:	f7fe ff3f 	bl	8005470 <HAL_GetTick>
 80065f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065f4:	e008      	b.n	8006608 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065f6:	f7fe ff3b 	bl	8005470 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e046      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006608:	4b25      	ldr	r3, [pc, #148]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1f0      	bne.n	80065f6 <HAL_RCC_OscConfig+0x72a>
 8006614:	e03e      	b.n	8006694 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661a:	2b01      	cmp	r3, #1
 800661c:	d101      	bne.n	8006622 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e039      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8006622:	4b1f      	ldr	r3, [pc, #124]	; (80066a0 <HAL_RCC_OscConfig+0x7d4>)
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f003 0203 	and.w	r2, r3, #3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006632:	429a      	cmp	r2, r3
 8006634:	d12c      	bne.n	8006690 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	3b01      	subs	r3, #1
 8006642:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006644:	429a      	cmp	r2, r3
 8006646:	d123      	bne.n	8006690 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006654:	429a      	cmp	r2, r3
 8006656:	d11b      	bne.n	8006690 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006664:	429a      	cmp	r2, r3
 8006666:	d113      	bne.n	8006690 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006672:	085b      	lsrs	r3, r3, #1
 8006674:	3b01      	subs	r3, #1
 8006676:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006678:	429a      	cmp	r2, r3
 800667a:	d109      	bne.n	8006690 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	085b      	lsrs	r3, r3, #1
 8006688:	3b01      	subs	r3, #1
 800668a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800668c:	429a      	cmp	r2, r3
 800668e:	d001      	beq.n	8006694 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e000      	b.n	8006696 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3720      	adds	r7, #32
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	40021000 	.word	0x40021000
 80066a4:	019d800c 	.word	0x019d800c

080066a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80066b2:	2300      	movs	r3, #0
 80066b4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e10f      	b.n	80068e0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066c0:	4b89      	ldr	r3, [pc, #548]	; (80068e8 <HAL_RCC_ClockConfig+0x240>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 030f 	and.w	r3, r3, #15
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d910      	bls.n	80066f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ce:	4b86      	ldr	r3, [pc, #536]	; (80068e8 <HAL_RCC_ClockConfig+0x240>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f023 020f 	bic.w	r2, r3, #15
 80066d6:	4984      	ldr	r1, [pc, #528]	; (80068e8 <HAL_RCC_ClockConfig+0x240>)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	4313      	orrs	r3, r2
 80066dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066de:	4b82      	ldr	r3, [pc, #520]	; (80068e8 <HAL_RCC_ClockConfig+0x240>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d001      	beq.n	80066f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e0f7      	b.n	80068e0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 8089 	beq.w	8006810 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	2b03      	cmp	r3, #3
 8006704:	d133      	bne.n	800676e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006706:	4b79      	ldr	r3, [pc, #484]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e0e4      	b.n	80068e0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006716:	f000 fa0f 	bl	8006b38 <RCC_GetSysClockFreqFromPLLSource>
 800671a:	4602      	mov	r2, r0
 800671c:	4b74      	ldr	r3, [pc, #464]	; (80068f0 <HAL_RCC_ClockConfig+0x248>)
 800671e:	429a      	cmp	r2, r3
 8006720:	d955      	bls.n	80067ce <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006722:	4b72      	ldr	r3, [pc, #456]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10a      	bne.n	8006744 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800672e:	4b6f      	ldr	r3, [pc, #444]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006736:	4a6d      	ldr	r2, [pc, #436]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 8006738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800673c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800673e:	2380      	movs	r3, #128	; 0x80
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	e044      	b.n	80067ce <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d03e      	beq.n	80067ce <HAL_RCC_ClockConfig+0x126>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d13a      	bne.n	80067ce <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006758:	4b64      	ldr	r3, [pc, #400]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006760:	4a62      	ldr	r2, [pc, #392]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 8006762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006766:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006768:	2380      	movs	r3, #128	; 0x80
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e02f      	b.n	80067ce <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d107      	bne.n	8006786 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006776:	4b5d      	ldr	r3, [pc, #372]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d115      	bne.n	80067ae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e0ac      	b.n	80068e0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d107      	bne.n	800679e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800678e:	4b57      	ldr	r3, [pc, #348]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d109      	bne.n	80067ae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e0a0      	b.n	80068e0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800679e:	4b53      	ldr	r3, [pc, #332]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e098      	b.n	80068e0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80067ae:	f000 f8a7 	bl	8006900 <HAL_RCC_GetSysClockFreq>
 80067b2:	4602      	mov	r2, r0
 80067b4:	4b4e      	ldr	r3, [pc, #312]	; (80068f0 <HAL_RCC_ClockConfig+0x248>)
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d909      	bls.n	80067ce <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80067ba:	4b4c      	ldr	r3, [pc, #304]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067c2:	4a4a      	ldr	r2, [pc, #296]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 80067c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80067ca:	2380      	movs	r3, #128	; 0x80
 80067cc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067ce:	4b47      	ldr	r3, [pc, #284]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f023 0203 	bic.w	r2, r3, #3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	4944      	ldr	r1, [pc, #272]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e0:	f7fe fe46 	bl	8005470 <HAL_GetTick>
 80067e4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e6:	e00a      	b.n	80067fe <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e8:	f7fe fe42 	bl	8005470 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e070      	b.n	80068e0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fe:	4b3b      	ldr	r3, [pc, #236]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 020c 	and.w	r2, r3, #12
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	429a      	cmp	r2, r3
 800680e:	d1eb      	bne.n	80067e8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d009      	beq.n	8006830 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800681c:	4b33      	ldr	r3, [pc, #204]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	4930      	ldr	r1, [pc, #192]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 800682a:	4313      	orrs	r3, r2
 800682c:	608b      	str	r3, [r1, #8]
 800682e:	e008      	b.n	8006842 <HAL_RCC_ClockConfig+0x19a>
  }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2b80      	cmp	r3, #128	; 0x80
 8006834:	d105      	bne.n	8006842 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006836:	4b2d      	ldr	r3, [pc, #180]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	4a2c      	ldr	r2, [pc, #176]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 800683c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006840:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006842:	4b29      	ldr	r3, [pc, #164]	; (80068e8 <HAL_RCC_ClockConfig+0x240>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 030f 	and.w	r3, r3, #15
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d210      	bcs.n	8006872 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006850:	4b25      	ldr	r3, [pc, #148]	; (80068e8 <HAL_RCC_ClockConfig+0x240>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f023 020f 	bic.w	r2, r3, #15
 8006858:	4923      	ldr	r1, [pc, #140]	; (80068e8 <HAL_RCC_ClockConfig+0x240>)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	4313      	orrs	r3, r2
 800685e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006860:	4b21      	ldr	r3, [pc, #132]	; (80068e8 <HAL_RCC_ClockConfig+0x240>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d001      	beq.n	8006872 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e036      	b.n	80068e0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	d008      	beq.n	8006890 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800687e:	4b1b      	ldr	r3, [pc, #108]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	4918      	ldr	r1, [pc, #96]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 800688c:	4313      	orrs	r3, r2
 800688e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b00      	cmp	r3, #0
 800689a:	d009      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800689c:	4b13      	ldr	r3, [pc, #76]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	4910      	ldr	r1, [pc, #64]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068b0:	f000 f826 	bl	8006900 <HAL_RCC_GetSysClockFreq>
 80068b4:	4601      	mov	r1, r0
 80068b6:	4b0d      	ldr	r3, [pc, #52]	; (80068ec <HAL_RCC_ClockConfig+0x244>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	091b      	lsrs	r3, r3, #4
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	4a0c      	ldr	r2, [pc, #48]	; (80068f4 <HAL_RCC_ClockConfig+0x24c>)
 80068c2:	5cd3      	ldrb	r3, [r2, r3]
 80068c4:	f003 031f 	and.w	r3, r3, #31
 80068c8:	fa21 f303 	lsr.w	r3, r1, r3
 80068cc:	4a0a      	ldr	r2, [pc, #40]	; (80068f8 <HAL_RCC_ClockConfig+0x250>)
 80068ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80068d0:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <HAL_RCC_ClockConfig+0x254>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fe fd7f 	bl	80053d8 <HAL_InitTick>
 80068da:	4603      	mov	r3, r0
 80068dc:	73fb      	strb	r3, [r7, #15]

  return status;
 80068de:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40022000 	.word	0x40022000
 80068ec:	40021000 	.word	0x40021000
 80068f0:	04c4b400 	.word	0x04c4b400
 80068f4:	0800be78 	.word	0x0800be78
 80068f8:	20000064 	.word	0x20000064
 80068fc:	20000068 	.word	0x20000068

08006900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006900:	b480      	push	{r7}
 8006902:	b089      	sub	sp, #36	; 0x24
 8006904:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	61fb      	str	r3, [r7, #28]
 800690a:	2300      	movs	r3, #0
 800690c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800690e:	4b3d      	ldr	r3, [pc, #244]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x104>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 030c 	and.w	r3, r3, #12
 8006916:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006918:	4b3a      	ldr	r3, [pc, #232]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x104>)
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f003 0303 	and.w	r3, r3, #3
 8006920:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <HAL_RCC_GetSysClockFreq+0x34>
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	2b0c      	cmp	r3, #12
 800692c:	d121      	bne.n	8006972 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d11e      	bne.n	8006972 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006934:	4b33      	ldr	r3, [pc, #204]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x104>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	2b00      	cmp	r3, #0
 800693e:	d107      	bne.n	8006950 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006940:	4b30      	ldr	r3, [pc, #192]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x104>)
 8006942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006946:	0a1b      	lsrs	r3, r3, #8
 8006948:	f003 030f 	and.w	r3, r3, #15
 800694c:	61fb      	str	r3, [r7, #28]
 800694e:	e005      	b.n	800695c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006950:	4b2c      	ldr	r3, [pc, #176]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x104>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	091b      	lsrs	r3, r3, #4
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800695c:	4a2a      	ldr	r2, [pc, #168]	; (8006a08 <HAL_RCC_GetSysClockFreq+0x108>)
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006964:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10d      	bne.n	8006988 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006970:	e00a      	b.n	8006988 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2b04      	cmp	r3, #4
 8006976:	d102      	bne.n	800697e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006978:	4b24      	ldr	r3, [pc, #144]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x10c>)
 800697a:	61bb      	str	r3, [r7, #24]
 800697c:	e004      	b.n	8006988 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	2b08      	cmp	r3, #8
 8006982:	d101      	bne.n	8006988 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006984:	4b22      	ldr	r3, [pc, #136]	; (8006a10 <HAL_RCC_GetSysClockFreq+0x110>)
 8006986:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	2b0c      	cmp	r3, #12
 800698c:	d133      	bne.n	80069f6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800698e:	4b1d      	ldr	r3, [pc, #116]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x104>)
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b02      	cmp	r3, #2
 800699c:	d002      	beq.n	80069a4 <HAL_RCC_GetSysClockFreq+0xa4>
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d003      	beq.n	80069aa <HAL_RCC_GetSysClockFreq+0xaa>
 80069a2:	e005      	b.n	80069b0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80069a4:	4b19      	ldr	r3, [pc, #100]	; (8006a0c <HAL_RCC_GetSysClockFreq+0x10c>)
 80069a6:	617b      	str	r3, [r7, #20]
      break;
 80069a8:	e005      	b.n	80069b6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80069aa:	4b19      	ldr	r3, [pc, #100]	; (8006a10 <HAL_RCC_GetSysClockFreq+0x110>)
 80069ac:	617b      	str	r3, [r7, #20]
      break;
 80069ae:	e002      	b.n	80069b6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	617b      	str	r3, [r7, #20]
      break;
 80069b4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069b6:	4b13      	ldr	r3, [pc, #76]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x104>)
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	091b      	lsrs	r3, r3, #4
 80069bc:	f003 030f 	and.w	r3, r3, #15
 80069c0:	3301      	adds	r3, #1
 80069c2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80069c4:	4b0f      	ldr	r3, [pc, #60]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x104>)
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	0a1b      	lsrs	r3, r3, #8
 80069ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	fb02 f203 	mul.w	r2, r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069da:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069dc:	4b09      	ldr	r3, [pc, #36]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x104>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	0e5b      	lsrs	r3, r3, #25
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	3301      	adds	r3, #1
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80069f6:	69bb      	ldr	r3, [r7, #24]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3724      	adds	r7, #36	; 0x24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	40021000 	.word	0x40021000
 8006a08:	0800be90 	.word	0x0800be90
 8006a0c:	00f42400 	.word	0x00f42400
 8006a10:	007a1200 	.word	0x007a1200

08006a14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a18:	4b03      	ldr	r3, [pc, #12]	; (8006a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	20000064 	.word	0x20000064

08006a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a30:	f7ff fff0 	bl	8006a14 <HAL_RCC_GetHCLKFreq>
 8006a34:	4601      	mov	r1, r0
 8006a36:	4b06      	ldr	r3, [pc, #24]	; (8006a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	0a1b      	lsrs	r3, r3, #8
 8006a3c:	f003 0307 	and.w	r3, r3, #7
 8006a40:	4a04      	ldr	r2, [pc, #16]	; (8006a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a42:	5cd3      	ldrb	r3, [r2, r3]
 8006a44:	f003 031f 	and.w	r3, r3, #31
 8006a48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	40021000 	.word	0x40021000
 8006a54:	0800be88 	.word	0x0800be88

08006a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006a5c:	f7ff ffda 	bl	8006a14 <HAL_RCC_GetHCLKFreq>
 8006a60:	4601      	mov	r1, r0
 8006a62:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	0adb      	lsrs	r3, r3, #11
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	4a04      	ldr	r2, [pc, #16]	; (8006a80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a6e:	5cd3      	ldrb	r3, [r2, r3]
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	0800be88 	.word	0x0800be88

08006a84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006a90:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006a9c:	f7ff f932 	bl	8005d04 <HAL_PWREx_GetVoltageRange>
 8006aa0:	6178      	str	r0, [r7, #20]
 8006aa2:	e014      	b.n	8006ace <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006aa4:	4b22      	ldr	r3, [pc, #136]	; (8006b30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa8:	4a21      	ldr	r2, [pc, #132]	; (8006b30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aae:	6593      	str	r3, [r2, #88]	; 0x58
 8006ab0:	4b1f      	ldr	r3, [pc, #124]	; (8006b30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006abc:	f7ff f922 	bl	8005d04 <HAL_PWREx_GetVoltageRange>
 8006ac0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006ac2:	4b1b      	ldr	r3, [pc, #108]	; (8006b30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac6:	4a1a      	ldr	r2, [pc, #104]	; (8006b30 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006acc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ad4:	d10b      	bne.n	8006aee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b80      	cmp	r3, #128	; 0x80
 8006ada:	d913      	bls.n	8006b04 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2ba0      	cmp	r3, #160	; 0xa0
 8006ae0:	d902      	bls.n	8006ae8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	613b      	str	r3, [r7, #16]
 8006ae6:	e00d      	b.n	8006b04 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006ae8:	2301      	movs	r3, #1
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	e00a      	b.n	8006b04 <RCC_SetFlashLatencyFromMSIRange+0x80>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b7f      	cmp	r3, #127	; 0x7f
 8006af2:	d902      	bls.n	8006afa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006af4:	2302      	movs	r3, #2
 8006af6:	613b      	str	r3, [r7, #16]
 8006af8:	e004      	b.n	8006b04 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b70      	cmp	r3, #112	; 0x70
 8006afe:	d101      	bne.n	8006b04 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b00:	2301      	movs	r3, #1
 8006b02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006b04:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f023 020f 	bic.w	r2, r3, #15
 8006b0c:	4909      	ldr	r1, [pc, #36]	; (8006b34 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006b14:	4b07      	ldr	r3, [pc, #28]	; (8006b34 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 030f 	and.w	r3, r3, #15
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d001      	beq.n	8006b26 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e000      	b.n	8006b28 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	40021000 	.word	0x40021000
 8006b34:	40022000 	.word	0x40022000

08006b38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8006b42:	4b2d      	ldr	r3, [pc, #180]	; (8006bf8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d118      	bne.n	8006b80 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006b4e:	4b2a      	ldr	r3, [pc, #168]	; (8006bf8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d107      	bne.n	8006b6a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006b5a:	4b27      	ldr	r3, [pc, #156]	; (8006bf8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b60:	0a1b      	lsrs	r3, r3, #8
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	e005      	b.n	8006b76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006b6a:	4b23      	ldr	r3, [pc, #140]	; (8006bf8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	091b      	lsrs	r3, r3, #4
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006b76:	4a21      	ldr	r2, [pc, #132]	; (8006bfc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b7e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b80:	4b1d      	ldr	r3, [pc, #116]	; (8006bf8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d002      	beq.n	8006b96 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d003      	beq.n	8006b9c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8006b94:	e005      	b.n	8006ba2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006b96:	4b1a      	ldr	r3, [pc, #104]	; (8006c00 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006b98:	613b      	str	r3, [r7, #16]
    break;
 8006b9a:	e005      	b.n	8006ba8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006b9c:	4b19      	ldr	r3, [pc, #100]	; (8006c04 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006b9e:	613b      	str	r3, [r7, #16]
    break;
 8006ba0:	e002      	b.n	8006ba8 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	613b      	str	r3, [r7, #16]
    break;
 8006ba6:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ba8:	4b13      	ldr	r3, [pc, #76]	; (8006bf8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	091b      	lsrs	r3, r3, #4
 8006bae:	f003 030f 	and.w	r3, r3, #15
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006bb6:	4b10      	ldr	r3, [pc, #64]	; (8006bf8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	0a1b      	lsrs	r3, r3, #8
 8006bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	fb02 f203 	mul.w	r2, r2, r3
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bcc:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006bce:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	0e5b      	lsrs	r3, r3, #25
 8006bd4:	f003 0303 	and.w	r3, r3, #3
 8006bd8:	3301      	adds	r3, #1
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be6:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006be8:	683b      	ldr	r3, [r7, #0]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	371c      	adds	r7, #28
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	0800be90 	.word	0x0800be90
 8006c00:	00f42400 	.word	0x00f42400
 8006c04:	007a1200 	.word	0x007a1200

08006c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c10:	2300      	movs	r3, #0
 8006c12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c14:	2300      	movs	r3, #0
 8006c16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d03d      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c28:	2b40      	cmp	r3, #64	; 0x40
 8006c2a:	d00b      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8006c2c:	2b40      	cmp	r3, #64	; 0x40
 8006c2e:	d804      	bhi.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00e      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006c34:	2b20      	cmp	r3, #32
 8006c36:	d015      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006c38:	e01d      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006c3a:	2b60      	cmp	r3, #96	; 0x60
 8006c3c:	d01e      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006c3e:	2b80      	cmp	r3, #128	; 0x80
 8006c40:	d01c      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006c42:	e018      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006c44:	4b86      	ldr	r3, [pc, #536]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	4a85      	ldr	r2, [pc, #532]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c4e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c50:	e015      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3304      	adds	r3, #4
 8006c56:	2100      	movs	r1, #0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fafd 	bl	8007258 <RCCEx_PLLSAI1_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c62:	e00c      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3320      	adds	r3, #32
 8006c68:	2100      	movs	r1, #0
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fbe4 	bl	8007438 <RCCEx_PLLSAI2_Config>
 8006c70:	4603      	mov	r3, r0
 8006c72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c74:	e003      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	74fb      	strb	r3, [r7, #19]
      break;
 8006c7a:	e000      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8006c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c7e:	7cfb      	ldrb	r3, [r7, #19]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10b      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c84:	4b76      	ldr	r3, [pc, #472]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c8a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c92:	4973      	ldr	r1, [pc, #460]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006c9a:	e001      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9c:	7cfb      	ldrb	r3, [r7, #19]
 8006c9e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d042      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cb4:	d00f      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8006cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cba:	d805      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d011      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8006cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc4:	d017      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8006cc6:	e01f      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8006cc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ccc:	d01f      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd2:	d01c      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006cd4:	e018      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006cd6:	4b62      	ldr	r3, [pc, #392]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	4a61      	ldr	r2, [pc, #388]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ce0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006ce2:	e015      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fab4 	bl	8007258 <RCCEx_PLLSAI1_Config>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006cf4:	e00c      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	3320      	adds	r3, #32
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fb9b 	bl	8007438 <RCCEx_PLLSAI2_Config>
 8006d02:	4603      	mov	r3, r0
 8006d04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006d06:	e003      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	74fb      	strb	r3, [r7, #19]
      break;
 8006d0c:	e000      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8006d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d10:	7cfb      	ldrb	r3, [r7, #19]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10b      	bne.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006d16:	4b52      	ldr	r3, [pc, #328]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d24:	494e      	ldr	r1, [pc, #312]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006d2c:	e001      	b.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2e:	7cfb      	ldrb	r3, [r7, #19]
 8006d30:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 809f 	beq.w	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d40:	2300      	movs	r3, #0
 8006d42:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006d44:	4b46      	ldr	r3, [pc, #280]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006d50:	2301      	movs	r3, #1
 8006d52:	e000      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006d54:	2300      	movs	r3, #0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00d      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d5a:	4b41      	ldr	r3, [pc, #260]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5e:	4a40      	ldr	r2, [pc, #256]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d64:	6593      	str	r3, [r2, #88]	; 0x58
 8006d66:	4b3e      	ldr	r3, [pc, #248]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d6e:	60bb      	str	r3, [r7, #8]
 8006d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d72:	2301      	movs	r3, #1
 8006d74:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d76:	4b3b      	ldr	r3, [pc, #236]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a3a      	ldr	r2, [pc, #232]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d82:	f7fe fb75 	bl	8005470 <HAL_GetTick>
 8006d86:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d88:	e009      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d8a:	f7fe fb71 	bl	8005470 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d902      	bls.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	74fb      	strb	r3, [r7, #19]
        break;
 8006d9c:	e005      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d9e:	4b31      	ldr	r3, [pc, #196]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0ef      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8006daa:	7cfb      	ldrb	r3, [r7, #19]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d15b      	bne.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006db0:	4b2b      	ldr	r3, [pc, #172]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dba:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d01f      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d019      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006dce:	4b24      	ldr	r3, [pc, #144]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006dda:	4b21      	ldr	r3, [pc, #132]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de0:	4a1f      	ldr	r2, [pc, #124]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006dea:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df0:	4a1b      	ldr	r2, [pc, #108]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006dfa:	4a19      	ldr	r2, [pc, #100]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d016      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0c:	f7fe fb30 	bl	8005470 <HAL_GetTick>
 8006e10:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e12:	e00b      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e14:	f7fe fb2c 	bl	8005470 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d902      	bls.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8006e26:	2303      	movs	r3, #3
 8006e28:	74fb      	strb	r3, [r7, #19]
            break;
 8006e2a:	e006      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e2c:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0ec      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8006e3a:	7cfb      	ldrb	r3, [r7, #19]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10c      	bne.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e40:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e50:	4903      	ldr	r1, [pc, #12]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006e58:	e008      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e5a:	7cfb      	ldrb	r3, [r7, #19]
 8006e5c:	74bb      	strb	r3, [r7, #18]
 8006e5e:	e005      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8006e60:	40021000 	.word	0x40021000
 8006e64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e68:	7cfb      	ldrb	r3, [r7, #19]
 8006e6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e6c:	7c7b      	ldrb	r3, [r7, #17]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d105      	bne.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e72:	4ba0      	ldr	r3, [pc, #640]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e76:	4a9f      	ldr	r2, [pc, #636]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e8a:	4b9a      	ldr	r3, [pc, #616]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e90:	f023 0203 	bic.w	r2, r3, #3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e98:	4996      	ldr	r1, [pc, #600]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00a      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006eac:	4b91      	ldr	r3, [pc, #580]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb2:	f023 020c 	bic.w	r2, r3, #12
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	498e      	ldr	r1, [pc, #568]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0304 	and.w	r3, r3, #4
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00a      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ece:	4b89      	ldr	r3, [pc, #548]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006edc:	4985      	ldr	r1, [pc, #532]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0308 	and.w	r3, r3, #8
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00a      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ef0:	4b80      	ldr	r3, [pc, #512]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006efe:	497d      	ldr	r1, [pc, #500]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0310 	and.w	r3, r3, #16
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f12:	4b78      	ldr	r3, [pc, #480]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f20:	4974      	ldr	r1, [pc, #464]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0320 	and.w	r3, r3, #32
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00a      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f34:	4b6f      	ldr	r3, [pc, #444]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f42:	496c      	ldr	r1, [pc, #432]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f56:	4b67      	ldr	r3, [pc, #412]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f64:	4963      	ldr	r1, [pc, #396]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00a      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f78:	4b5e      	ldr	r3, [pc, #376]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f86:	495b      	ldr	r1, [pc, #364]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f9a:	4b56      	ldr	r3, [pc, #344]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa8:	4952      	ldr	r1, [pc, #328]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006fbc:	4b4d      	ldr	r3, [pc, #308]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fca:	494a      	ldr	r1, [pc, #296]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fde:	4b45      	ldr	r3, [pc, #276]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fec:	4941      	ldr	r1, [pc, #260]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007000:	4b3c      	ldr	r3, [pc, #240]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007006:	f023 0203 	bic.w	r2, r3, #3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800700e:	4939      	ldr	r1, [pc, #228]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007010:	4313      	orrs	r3, r2
 8007012:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d028      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007022:	4b34      	ldr	r3, [pc, #208]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007028:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007030:	4930      	ldr	r1, [pc, #192]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007032:	4313      	orrs	r3, r2
 8007034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800703c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007040:	d106      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007042:	4b2c      	ldr	r3, [pc, #176]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	4a2b      	ldr	r2, [pc, #172]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007048:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800704c:	60d3      	str	r3, [r2, #12]
 800704e:	e011      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007054:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007058:	d10c      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3304      	adds	r3, #4
 800705e:	2101      	movs	r1, #1
 8007060:	4618      	mov	r0, r3
 8007062:	f000 f8f9 	bl	8007258 <RCCEx_PLLSAI1_Config>
 8007066:	4603      	mov	r3, r0
 8007068:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800706a:	7cfb      	ldrb	r3, [r7, #19]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8007070:	7cfb      	ldrb	r3, [r7, #19]
 8007072:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d04d      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007088:	d108      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x494>
 800708a:	4b1a      	ldr	r3, [pc, #104]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800708c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007090:	4a18      	ldr	r2, [pc, #96]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007096:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800709a:	e012      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800709c:	4b15      	ldr	r3, [pc, #84]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800709e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070a2:	4a14      	ldr	r2, [pc, #80]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070a8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80070ac:	4b11      	ldr	r3, [pc, #68]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070ba:	490e      	ldr	r1, [pc, #56]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070ca:	d106      	bne.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070cc:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	4a08      	ldr	r2, [pc, #32]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070d6:	60d3      	str	r3, [r2, #12]
 80070d8:	e020      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070e2:	d109      	bne.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80070e4:	4b03      	ldr	r3, [pc, #12]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	4a02      	ldr	r2, [pc, #8]	; (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070ee:	60d3      	str	r3, [r2, #12]
 80070f0:	e014      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80070f2:	bf00      	nop
 80070f4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007100:	d10c      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	3304      	adds	r3, #4
 8007106:	2101      	movs	r1, #1
 8007108:	4618      	mov	r0, r3
 800710a:	f000 f8a5 	bl	8007258 <RCCEx_PLLSAI1_Config>
 800710e:	4603      	mov	r3, r0
 8007110:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007112:	7cfb      	ldrb	r3, [r7, #19]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007118:	7cfb      	ldrb	r3, [r7, #19]
 800711a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d028      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007128:	4b4a      	ldr	r3, [pc, #296]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800712a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007136:	4947      	ldr	r1, [pc, #284]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007138:	4313      	orrs	r3, r2
 800713a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007146:	d106      	bne.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007148:	4b42      	ldr	r3, [pc, #264]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	4a41      	ldr	r2, [pc, #260]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800714e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007152:	60d3      	str	r3, [r2, #12]
 8007154:	e011      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800715a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800715e:	d10c      	bne.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3304      	adds	r3, #4
 8007164:	2101      	movs	r1, #1
 8007166:	4618      	mov	r0, r3
 8007168:	f000 f876 	bl	8007258 <RCCEx_PLLSAI1_Config>
 800716c:	4603      	mov	r3, r0
 800716e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007170:	7cfb      	ldrb	r3, [r7, #19]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8007176:	7cfb      	ldrb	r3, [r7, #19]
 8007178:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d01e      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007186:	4b33      	ldr	r3, [pc, #204]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007196:	492f      	ldr	r1, [pc, #188]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007198:	4313      	orrs	r3, r2
 800719a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071a8:	d10c      	bne.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	3304      	adds	r3, #4
 80071ae:	2102      	movs	r1, #2
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 f851 	bl	8007258 <RCCEx_PLLSAI1_Config>
 80071b6:	4603      	mov	r3, r0
 80071b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80071ba:	7cfb      	ldrb	r3, [r7, #19]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80071c0:	7cfb      	ldrb	r3, [r7, #19]
 80071c2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00b      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80071d0:	4b20      	ldr	r3, [pc, #128]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80071d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071d6:	f023 0204 	bic.w	r2, r3, #4
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e0:	491c      	ldr	r1, [pc, #112]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00b      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80071f4:	4b17      	ldr	r3, [pc, #92]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80071f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071fa:	f023 0218 	bic.w	r2, r3, #24
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007204:	4913      	ldr	r1, [pc, #76]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d017      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007218:	4b0e      	ldr	r3, [pc, #56]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800721a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800721e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007228:	490a      	ldr	r1, [pc, #40]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800722a:	4313      	orrs	r3, r2
 800722c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007236:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800723a:	d105      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800723c:	4b05      	ldr	r3, [pc, #20]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	4a04      	ldr	r2, [pc, #16]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007246:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007248:	7cbb      	ldrb	r3, [r7, #18]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	40021000 	.word	0x40021000

08007258 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007266:	4b70      	ldr	r3, [pc, #448]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00e      	beq.n	8007290 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007272:	4b6d      	ldr	r3, [pc, #436]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f003 0203 	and.w	r2, r3, #3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d103      	bne.n	800728a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
       ||
 8007286:	2b00      	cmp	r3, #0
 8007288:	d13f      	bne.n	800730a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	73fb      	strb	r3, [r7, #15]
 800728e:	e03c      	b.n	800730a <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b02      	cmp	r3, #2
 8007296:	d00c      	beq.n	80072b2 <RCCEx_PLLSAI1_Config+0x5a>
 8007298:	2b03      	cmp	r3, #3
 800729a:	d013      	beq.n	80072c4 <RCCEx_PLLSAI1_Config+0x6c>
 800729c:	2b01      	cmp	r3, #1
 800729e:	d120      	bne.n	80072e2 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80072a0:	4b61      	ldr	r3, [pc, #388]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d11d      	bne.n	80072e8 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072b0:	e01a      	b.n	80072e8 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80072b2:	4b5d      	ldr	r3, [pc, #372]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d116      	bne.n	80072ec <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072c2:	e013      	b.n	80072ec <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80072c4:	4b58      	ldr	r3, [pc, #352]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10f      	bne.n	80072f0 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80072d0:	4b55      	ldr	r3, [pc, #340]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d109      	bne.n	80072f0 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80072e0:	e006      	b.n	80072f0 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	73fb      	strb	r3, [r7, #15]
      break;
 80072e6:	e004      	b.n	80072f2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80072e8:	bf00      	nop
 80072ea:	e002      	b.n	80072f2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80072ec:	bf00      	nop
 80072ee:	e000      	b.n	80072f2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80072f0:	bf00      	nop
    }

    if(status == HAL_OK)
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d108      	bne.n	800730a <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80072f8:	4b4b      	ldr	r3, [pc, #300]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f023 0203 	bic.w	r2, r3, #3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4948      	ldr	r1, [pc, #288]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007306:	4313      	orrs	r3, r2
 8007308:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800730a:	7bfb      	ldrb	r3, [r7, #15]
 800730c:	2b00      	cmp	r3, #0
 800730e:	f040 8086 	bne.w	800741e <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007312:	4b45      	ldr	r3, [pc, #276]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a44      	ldr	r2, [pc, #272]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007318:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800731c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800731e:	f7fe f8a7 	bl	8005470 <HAL_GetTick>
 8007322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007324:	e009      	b.n	800733a <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007326:	f7fe f8a3 	bl	8005470 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	2b02      	cmp	r3, #2
 8007332:	d902      	bls.n	800733a <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	73fb      	strb	r3, [r7, #15]
        break;
 8007338:	e005      	b.n	8007346 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800733a:	4b3b      	ldr	r3, [pc, #236]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1ef      	bne.n	8007326 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8007346:	7bfb      	ldrb	r3, [r7, #15]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d168      	bne.n	800741e <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d113      	bne.n	800737a <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007352:	4b35      	ldr	r3, [pc, #212]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007354:	691a      	ldr	r2, [r3, #16]
 8007356:	4b35      	ldr	r3, [pc, #212]	; (800742c <RCCEx_PLLSAI1_Config+0x1d4>)
 8007358:	4013      	ands	r3, r2
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	6892      	ldr	r2, [r2, #8]
 800735e:	0211      	lsls	r1, r2, #8
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	68d2      	ldr	r2, [r2, #12]
 8007364:	06d2      	lsls	r2, r2, #27
 8007366:	4311      	orrs	r1, r2
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	6852      	ldr	r2, [r2, #4]
 800736c:	3a01      	subs	r2, #1
 800736e:	0112      	lsls	r2, r2, #4
 8007370:	430a      	orrs	r2, r1
 8007372:	492d      	ldr	r1, [pc, #180]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007374:	4313      	orrs	r3, r2
 8007376:	610b      	str	r3, [r1, #16]
 8007378:	e02d      	b.n	80073d6 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d115      	bne.n	80073ac <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007380:	4b29      	ldr	r3, [pc, #164]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	4b2a      	ldr	r3, [pc, #168]	; (8007430 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007386:	4013      	ands	r3, r2
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	6892      	ldr	r2, [r2, #8]
 800738c:	0211      	lsls	r1, r2, #8
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	6912      	ldr	r2, [r2, #16]
 8007392:	0852      	lsrs	r2, r2, #1
 8007394:	3a01      	subs	r2, #1
 8007396:	0552      	lsls	r2, r2, #21
 8007398:	4311      	orrs	r1, r2
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	6852      	ldr	r2, [r2, #4]
 800739e:	3a01      	subs	r2, #1
 80073a0:	0112      	lsls	r2, r2, #4
 80073a2:	430a      	orrs	r2, r1
 80073a4:	4920      	ldr	r1, [pc, #128]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	610b      	str	r3, [r1, #16]
 80073aa:	e014      	b.n	80073d6 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073ac:	4b1e      	ldr	r3, [pc, #120]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 80073ae:	691a      	ldr	r2, [r3, #16]
 80073b0:	4b20      	ldr	r3, [pc, #128]	; (8007434 <RCCEx_PLLSAI1_Config+0x1dc>)
 80073b2:	4013      	ands	r3, r2
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6892      	ldr	r2, [r2, #8]
 80073b8:	0211      	lsls	r1, r2, #8
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6952      	ldr	r2, [r2, #20]
 80073be:	0852      	lsrs	r2, r2, #1
 80073c0:	3a01      	subs	r2, #1
 80073c2:	0652      	lsls	r2, r2, #25
 80073c4:	4311      	orrs	r1, r2
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	6852      	ldr	r2, [r2, #4]
 80073ca:	3a01      	subs	r2, #1
 80073cc:	0112      	lsls	r2, r2, #4
 80073ce:	430a      	orrs	r2, r1
 80073d0:	4915      	ldr	r1, [pc, #84]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80073d6:	4b14      	ldr	r3, [pc, #80]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a13      	ldr	r2, [pc, #76]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 80073dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e2:	f7fe f845 	bl	8005470 <HAL_GetTick>
 80073e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80073e8:	e009      	b.n	80073fe <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073ea:	f7fe f841 	bl	8005470 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d902      	bls.n	80073fe <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	73fb      	strb	r3, [r7, #15]
          break;
 80073fc:	e005      	b.n	800740a <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80073fe:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0ef      	beq.n	80073ea <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800740a:	7bfb      	ldrb	r3, [r7, #15]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d106      	bne.n	800741e <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007412:	691a      	ldr	r2, [r3, #16]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	4903      	ldr	r1, [pc, #12]	; (8007428 <RCCEx_PLLSAI1_Config+0x1d0>)
 800741a:	4313      	orrs	r3, r2
 800741c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800741e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40021000 	.word	0x40021000
 800742c:	07ff800f 	.word	0x07ff800f
 8007430:	ff9f800f 	.word	0xff9f800f
 8007434:	f9ff800f 	.word	0xf9ff800f

08007438 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007446:	4b70      	ldr	r3, [pc, #448]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f003 0303 	and.w	r3, r3, #3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00e      	beq.n	8007470 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007452:	4b6d      	ldr	r3, [pc, #436]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f003 0203 	and.w	r2, r3, #3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	429a      	cmp	r2, r3
 8007460:	d103      	bne.n	800746a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
       ||
 8007466:	2b00      	cmp	r3, #0
 8007468:	d13f      	bne.n	80074ea <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	73fb      	strb	r3, [r7, #15]
 800746e:	e03c      	b.n	80074ea <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b02      	cmp	r3, #2
 8007476:	d00c      	beq.n	8007492 <RCCEx_PLLSAI2_Config+0x5a>
 8007478:	2b03      	cmp	r3, #3
 800747a:	d013      	beq.n	80074a4 <RCCEx_PLLSAI2_Config+0x6c>
 800747c:	2b01      	cmp	r3, #1
 800747e:	d120      	bne.n	80074c2 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007480:	4b61      	ldr	r3, [pc, #388]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d11d      	bne.n	80074c8 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007490:	e01a      	b.n	80074c8 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007492:	4b5d      	ldr	r3, [pc, #372]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800749a:	2b00      	cmp	r3, #0
 800749c:	d116      	bne.n	80074cc <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074a2:	e013      	b.n	80074cc <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80074a4:	4b58      	ldr	r3, [pc, #352]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10f      	bne.n	80074d0 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80074b0:	4b55      	ldr	r3, [pc, #340]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d109      	bne.n	80074d0 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074c0:	e006      	b.n	80074d0 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	73fb      	strb	r3, [r7, #15]
      break;
 80074c6:	e004      	b.n	80074d2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80074c8:	bf00      	nop
 80074ca:	e002      	b.n	80074d2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80074cc:	bf00      	nop
 80074ce:	e000      	b.n	80074d2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80074d0:	bf00      	nop
    }

    if(status == HAL_OK)
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d108      	bne.n	80074ea <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80074d8:	4b4b      	ldr	r3, [pc, #300]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f023 0203 	bic.w	r2, r3, #3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4948      	ldr	r1, [pc, #288]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f040 8086 	bne.w	80075fe <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80074f2:	4b45      	ldr	r3, [pc, #276]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a44      	ldr	r2, [pc, #272]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 80074f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074fe:	f7fd ffb7 	bl	8005470 <HAL_GetTick>
 8007502:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007504:	e009      	b.n	800751a <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007506:	f7fd ffb3 	bl	8005470 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	2b02      	cmp	r3, #2
 8007512:	d902      	bls.n	800751a <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	73fb      	strb	r3, [r7, #15]
        break;
 8007518:	e005      	b.n	8007526 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800751a:	4b3b      	ldr	r3, [pc, #236]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1ef      	bne.n	8007506 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d168      	bne.n	80075fe <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d113      	bne.n	800755a <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007532:	4b35      	ldr	r3, [pc, #212]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007534:	695a      	ldr	r2, [r3, #20]
 8007536:	4b35      	ldr	r3, [pc, #212]	; (800760c <RCCEx_PLLSAI2_Config+0x1d4>)
 8007538:	4013      	ands	r3, r2
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6892      	ldr	r2, [r2, #8]
 800753e:	0211      	lsls	r1, r2, #8
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	68d2      	ldr	r2, [r2, #12]
 8007544:	06d2      	lsls	r2, r2, #27
 8007546:	4311      	orrs	r1, r2
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	6852      	ldr	r2, [r2, #4]
 800754c:	3a01      	subs	r2, #1
 800754e:	0112      	lsls	r2, r2, #4
 8007550:	430a      	orrs	r2, r1
 8007552:	492d      	ldr	r1, [pc, #180]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007554:	4313      	orrs	r3, r2
 8007556:	614b      	str	r3, [r1, #20]
 8007558:	e02d      	b.n	80075b6 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d115      	bne.n	800758c <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007560:	4b29      	ldr	r3, [pc, #164]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007562:	695a      	ldr	r2, [r3, #20]
 8007564:	4b2a      	ldr	r3, [pc, #168]	; (8007610 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007566:	4013      	ands	r3, r2
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	6892      	ldr	r2, [r2, #8]
 800756c:	0211      	lsls	r1, r2, #8
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6912      	ldr	r2, [r2, #16]
 8007572:	0852      	lsrs	r2, r2, #1
 8007574:	3a01      	subs	r2, #1
 8007576:	0552      	lsls	r2, r2, #21
 8007578:	4311      	orrs	r1, r2
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6852      	ldr	r2, [r2, #4]
 800757e:	3a01      	subs	r2, #1
 8007580:	0112      	lsls	r2, r2, #4
 8007582:	430a      	orrs	r2, r1
 8007584:	4920      	ldr	r1, [pc, #128]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007586:	4313      	orrs	r3, r2
 8007588:	614b      	str	r3, [r1, #20]
 800758a:	e014      	b.n	80075b6 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800758c:	4b1e      	ldr	r3, [pc, #120]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 800758e:	695a      	ldr	r2, [r3, #20]
 8007590:	4b20      	ldr	r3, [pc, #128]	; (8007614 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007592:	4013      	ands	r3, r2
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	6892      	ldr	r2, [r2, #8]
 8007598:	0211      	lsls	r1, r2, #8
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	6952      	ldr	r2, [r2, #20]
 800759e:	0852      	lsrs	r2, r2, #1
 80075a0:	3a01      	subs	r2, #1
 80075a2:	0652      	lsls	r2, r2, #25
 80075a4:	4311      	orrs	r1, r2
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	6852      	ldr	r2, [r2, #4]
 80075aa:	3a01      	subs	r2, #1
 80075ac:	0112      	lsls	r2, r2, #4
 80075ae:	430a      	orrs	r2, r1
 80075b0:	4915      	ldr	r1, [pc, #84]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80075b6:	4b14      	ldr	r3, [pc, #80]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a13      	ldr	r2, [pc, #76]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 80075bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075c2:	f7fd ff55 	bl	8005470 <HAL_GetTick>
 80075c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80075c8:	e009      	b.n	80075de <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80075ca:	f7fd ff51 	bl	8005470 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d902      	bls.n	80075de <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	73fb      	strb	r3, [r7, #15]
          break;
 80075dc:	e005      	b.n	80075ea <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80075de:	4b0a      	ldr	r3, [pc, #40]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0ef      	beq.n	80075ca <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80075f0:	4b05      	ldr	r3, [pc, #20]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 80075f2:	695a      	ldr	r2, [r3, #20]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	4903      	ldr	r1, [pc, #12]	; (8007608 <RCCEx_PLLSAI2_Config+0x1d0>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	40021000 	.word	0x40021000
 800760c:	07ff800f 	.word	0x07ff800f
 8007610:	ff9f800f 	.word	0xff9f800f
 8007614:	f9ff800f 	.word	0xf9ff800f

08007618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e07c      	b.n	8007724 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	d106      	bne.n	800764a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7fd fcb5 	bl	8004fb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2202      	movs	r2, #2
 800764e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007660:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800766a:	d902      	bls.n	8007672 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800766c:	2300      	movs	r3, #0
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	e002      	b.n	8007678 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007676:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007680:	d007      	beq.n	8007692 <HAL_SPI_Init+0x7a>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800768a:	d002      	beq.n	8007692 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10b      	bne.n	80076b2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076a2:	d903      	bls.n	80076ac <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	631a      	str	r2, [r3, #48]	; 0x30
 80076aa:	e002      	b.n	80076b2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	431a      	orrs	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	431a      	orrs	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076d0:	431a      	orrs	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	431a      	orrs	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	ea42 0103 	orr.w	r1, r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	0c1b      	lsrs	r3, r3, #16
 80076f2:	f003 0204 	and.w	r2, r3, #4
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	431a      	orrs	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007700:	431a      	orrs	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	ea42 0103 	orr.w	r1, r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	430a      	orrs	r2, r1
 8007712:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b088      	sub	sp, #32
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007746:	2b01      	cmp	r3, #1
 8007748:	d101      	bne.n	800774e <HAL_SPI_Transmit+0x22>
 800774a:	2302      	movs	r3, #2
 800774c:	e150      	b.n	80079f0 <HAL_SPI_Transmit+0x2c4>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007756:	f7fd fe8b 	bl	8005470 <HAL_GetTick>
 800775a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800775c:	88fb      	ldrh	r3, [r7, #6]
 800775e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b01      	cmp	r3, #1
 800776a:	d002      	beq.n	8007772 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800776c:	2302      	movs	r3, #2
 800776e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007770:	e135      	b.n	80079de <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <HAL_SPI_Transmit+0x52>
 8007778:	88fb      	ldrh	r3, [r7, #6]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d102      	bne.n	8007784 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007782:	e12c      	b.n	80079de <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2203      	movs	r2, #3
 8007788:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	88fa      	ldrh	r2, [r7, #6]
 800779c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	88fa      	ldrh	r2, [r7, #6]
 80077a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ce:	d107      	bne.n	80077e0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ea:	2b40      	cmp	r3, #64	; 0x40
 80077ec:	d007      	beq.n	80077fe <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007806:	d94b      	bls.n	80078a0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <HAL_SPI_Transmit+0xea>
 8007810:	8afb      	ldrh	r3, [r7, #22]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d13e      	bne.n	8007894 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	881a      	ldrh	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007826:	1c9a      	adds	r2, r3, #2
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007830:	b29b      	uxth	r3, r3
 8007832:	3b01      	subs	r3, #1
 8007834:	b29a      	uxth	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800783a:	e02b      	b.n	8007894 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 0302 	and.w	r3, r3, #2
 8007846:	2b02      	cmp	r3, #2
 8007848:	d112      	bne.n	8007870 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784e:	881a      	ldrh	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	1c9a      	adds	r2, r3, #2
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007864:	b29b      	uxth	r3, r3
 8007866:	3b01      	subs	r3, #1
 8007868:	b29a      	uxth	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800786e:	e011      	b.n	8007894 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007870:	f7fd fdfe 	bl	8005470 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d803      	bhi.n	8007888 <HAL_SPI_Transmit+0x15c>
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007886:	d102      	bne.n	800788e <HAL_SPI_Transmit+0x162>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d102      	bne.n	8007894 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007892:	e0a4      	b.n	80079de <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007898:	b29b      	uxth	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1ce      	bne.n	800783c <HAL_SPI_Transmit+0x110>
 800789e:	e07c      	b.n	800799a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <HAL_SPI_Transmit+0x182>
 80078a8:	8afb      	ldrh	r3, [r7, #22]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d170      	bne.n	8007990 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d912      	bls.n	80078de <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078bc:	881a      	ldrh	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c8:	1c9a      	adds	r2, r3, #2
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	3b02      	subs	r3, #2
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078dc:	e058      	b.n	8007990 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	330c      	adds	r3, #12
 80078e8:	7812      	ldrb	r2, [r2, #0]
 80078ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	b29a      	uxth	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007904:	e044      	b.n	8007990 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f003 0302 	and.w	r3, r3, #2
 8007910:	2b02      	cmp	r3, #2
 8007912:	d12b      	bne.n	800796c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007918:	b29b      	uxth	r3, r3
 800791a:	2b01      	cmp	r3, #1
 800791c:	d912      	bls.n	8007944 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	881a      	ldrh	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	1c9a      	adds	r2, r3, #2
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007938:	b29b      	uxth	r3, r3
 800793a:	3b02      	subs	r3, #2
 800793c:	b29a      	uxth	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007942:	e025      	b.n	8007990 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	330c      	adds	r3, #12
 800794e:	7812      	ldrb	r2, [r2, #0]
 8007950:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007960:	b29b      	uxth	r3, r3
 8007962:	3b01      	subs	r3, #1
 8007964:	b29a      	uxth	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	87da      	strh	r2, [r3, #62]	; 0x3e
 800796a:	e011      	b.n	8007990 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800796c:	f7fd fd80 	bl	8005470 <HAL_GetTick>
 8007970:	4602      	mov	r2, r0
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	429a      	cmp	r2, r3
 800797a:	d803      	bhi.n	8007984 <HAL_SPI_Transmit+0x258>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007982:	d102      	bne.n	800798a <HAL_SPI_Transmit+0x25e>
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d102      	bne.n	8007990 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800798e:	e026      	b.n	80079de <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1b5      	bne.n	8007906 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800799a:	69ba      	ldr	r2, [r7, #24]
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 fc94 	bl	80082cc <SPI_EndRxTxTransaction>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2220      	movs	r2, #32
 80079ae:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079b8:	2300      	movs	r3, #0
 80079ba:	613b      	str	r3, [r7, #16]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	613b      	str	r3, [r7, #16]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	613b      	str	r3, [r7, #16]
 80079cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	77fb      	strb	r3, [r7, #31]
 80079da:	e000      	b.n	80079de <HAL_SPI_Transmit+0x2b2>
  }

error:
 80079dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80079ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3720      	adds	r7, #32
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	4613      	mov	r3, r2
 8007a06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a14:	d112      	bne.n	8007a3c <HAL_SPI_Receive+0x44>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10e      	bne.n	8007a3c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2204      	movs	r2, #4
 8007a22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007a26:	88fa      	ldrh	r2, [r7, #6]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	68b9      	ldr	r1, [r7, #8]
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 f908 	bl	8007c48 <HAL_SPI_TransmitReceive>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	e101      	b.n	8007c40 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d101      	bne.n	8007a4a <HAL_SPI_Receive+0x52>
 8007a46:	2302      	movs	r3, #2
 8007a48:	e0fa      	b.n	8007c40 <HAL_SPI_Receive+0x248>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a52:	f7fd fd0d 	bl	8005470 <HAL_GetTick>
 8007a56:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d002      	beq.n	8007a6a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007a64:	2302      	movs	r3, #2
 8007a66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a68:	e0e1      	b.n	8007c2e <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <HAL_SPI_Receive+0x7e>
 8007a70:	88fb      	ldrh	r3, [r7, #6]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d102      	bne.n	8007a7c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a7a:	e0d8      	b.n	8007c2e <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2204      	movs	r2, #4
 8007a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	88fa      	ldrh	r2, [r7, #6]
 8007a94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	88fa      	ldrh	r2, [r7, #6]
 8007a9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ac6:	d908      	bls.n	8007ada <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ad6:	605a      	str	r2, [r3, #4]
 8007ad8:	e007      	b.n	8007aea <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ae8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007af2:	d107      	bne.n	8007b04 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b02:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0e:	2b40      	cmp	r3, #64	; 0x40
 8007b10:	d007      	beq.n	8007b22 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b20:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b2a:	d867      	bhi.n	8007bfc <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007b2c:	e030      	b.n	8007b90 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d117      	bne.n	8007b6c <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f103 020c 	add.w	r2, r3, #12
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b48:	7812      	ldrb	r2, [r2, #0]
 8007b4a:	b2d2      	uxtb	r2, r2
 8007b4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	1c5a      	adds	r2, r3, #1
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	3b01      	subs	r3, #1
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007b6a:	e011      	b.n	8007b90 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b6c:	f7fd fc80 	bl	8005470 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d803      	bhi.n	8007b84 <HAL_SPI_Receive+0x18c>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b82:	d102      	bne.n	8007b8a <HAL_SPI_Receive+0x192>
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d102      	bne.n	8007b90 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b8e:	e04e      	b.n	8007c2e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1c8      	bne.n	8007b2e <HAL_SPI_Receive+0x136>
 8007b9c:	e034      	b.n	8007c08 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d115      	bne.n	8007bd8 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68da      	ldr	r2, [r3, #12]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb6:	b292      	uxth	r2, r2
 8007bb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbe:	1c9a      	adds	r2, r3, #2
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007bd6:	e011      	b.n	8007bfc <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bd8:	f7fd fc4a 	bl	8005470 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d803      	bhi.n	8007bf0 <HAL_SPI_Receive+0x1f8>
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bee:	d102      	bne.n	8007bf6 <HAL_SPI_Receive+0x1fe>
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d102      	bne.n	8007bfc <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007bfa:	e018      	b.n	8007c2e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1ca      	bne.n	8007b9e <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 fb05 	bl	800821c <SPI_EndRxTransaction>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d002      	beq.n	8007c2c <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	75fb      	strb	r3, [r7, #23]
 8007c2a:	e000      	b.n	8007c2e <HAL_SPI_Receive+0x236>
  }

error :
 8007c2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08a      	sub	sp, #40	; 0x28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
 8007c54:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c56:	2301      	movs	r3, #1
 8007c58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d101      	bne.n	8007c6e <HAL_SPI_TransmitReceive+0x26>
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	e1fb      	b.n	8008066 <HAL_SPI_TransmitReceive+0x41e>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c76:	f7fd fbfb 	bl	8005470 <HAL_GetTick>
 8007c7a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c82:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007c8a:	887b      	ldrh	r3, [r7, #2]
 8007c8c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007c8e:	887b      	ldrh	r3, [r7, #2]
 8007c90:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c92:	7efb      	ldrb	r3, [r7, #27]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d00e      	beq.n	8007cb6 <HAL_SPI_TransmitReceive+0x6e>
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c9e:	d106      	bne.n	8007cae <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d102      	bne.n	8007cae <HAL_SPI_TransmitReceive+0x66>
 8007ca8:	7efb      	ldrb	r3, [r7, #27]
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d003      	beq.n	8007cb6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007cae:	2302      	movs	r3, #2
 8007cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007cb4:	e1cd      	b.n	8008052 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d005      	beq.n	8007cc8 <HAL_SPI_TransmitReceive+0x80>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <HAL_SPI_TransmitReceive+0x80>
 8007cc2:	887b      	ldrh	r3, [r7, #2]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d103      	bne.n	8007cd0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007cce:	e1c0      	b.n	8008052 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d003      	beq.n	8007ce4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2205      	movs	r2, #5
 8007ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	887a      	ldrh	r2, [r7, #2]
 8007cf4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	887a      	ldrh	r2, [r7, #2]
 8007cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	887a      	ldrh	r2, [r7, #2]
 8007d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	887a      	ldrh	r2, [r7, #2]
 8007d10:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d26:	d802      	bhi.n	8007d2e <HAL_SPI_TransmitReceive+0xe6>
 8007d28:	8a3b      	ldrh	r3, [r7, #16]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d908      	bls.n	8007d40 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d3c:	605a      	str	r2, [r3, #4]
 8007d3e:	e007      	b.n	8007d50 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d4e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5a:	2b40      	cmp	r3, #64	; 0x40
 8007d5c:	d007      	beq.n	8007d6e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d76:	d97c      	bls.n	8007e72 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <HAL_SPI_TransmitReceive+0x13e>
 8007d80:	8a7b      	ldrh	r3, [r7, #18]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d169      	bne.n	8007e5a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	881a      	ldrh	r2, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d96:	1c9a      	adds	r2, r3, #2
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	3b01      	subs	r3, #1
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007daa:	e056      	b.n	8007e5a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d11b      	bne.n	8007df2 <HAL_SPI_TransmitReceive+0x1aa>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d016      	beq.n	8007df2 <HAL_SPI_TransmitReceive+0x1aa>
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d113      	bne.n	8007df2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dce:	881a      	ldrh	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dda:	1c9a      	adds	r2, r3, #2
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	3b01      	subs	r3, #1
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d11c      	bne.n	8007e3a <HAL_SPI_TransmitReceive+0x1f2>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d016      	beq.n	8007e3a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	b292      	uxth	r2, r2
 8007e18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	1c9a      	adds	r2, r3, #2
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e36:	2301      	movs	r3, #1
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e3a:	f7fd fb19 	bl	8005470 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d807      	bhi.n	8007e5a <HAL_SPI_TransmitReceive+0x212>
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e50:	d003      	beq.n	8007e5a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007e58:	e0fb      	b.n	8008052 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1a3      	bne.n	8007dac <HAL_SPI_TransmitReceive+0x164>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d19d      	bne.n	8007dac <HAL_SPI_TransmitReceive+0x164>
 8007e70:	e0df      	b.n	8008032 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <HAL_SPI_TransmitReceive+0x23a>
 8007e7a:	8a7b      	ldrh	r3, [r7, #18]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	f040 80cb 	bne.w	8008018 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d912      	bls.n	8007eb2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e90:	881a      	ldrh	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9c:	1c9a      	adds	r2, r3, #2
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	3b02      	subs	r3, #2
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007eb0:	e0b2      	b.n	8008018 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	330c      	adds	r3, #12
 8007ebc:	7812      	ldrb	r2, [r2, #0]
 8007ebe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ed8:	e09e      	b.n	8008018 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f003 0302 	and.w	r3, r3, #2
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d134      	bne.n	8007f52 <HAL_SPI_TransmitReceive+0x30a>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d02f      	beq.n	8007f52 <HAL_SPI_TransmitReceive+0x30a>
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d12c      	bne.n	8007f52 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d912      	bls.n	8007f28 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f06:	881a      	ldrh	r2, [r3, #0]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f12:	1c9a      	adds	r2, r3, #2
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	3b02      	subs	r3, #2
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007f26:	e012      	b.n	8007f4e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	330c      	adds	r3, #12
 8007f32:	7812      	ldrb	r2, [r2, #0]
 8007f34:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	3b01      	subs	r3, #1
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d148      	bne.n	8007ff2 <HAL_SPI_TransmitReceive+0x3aa>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d042      	beq.n	8007ff2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d923      	bls.n	8007fc0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f82:	b292      	uxth	r2, r2
 8007f84:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	1c9a      	adds	r2, r3, #2
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	3b02      	subs	r3, #2
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d81f      	bhi.n	8007fee <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fbc:	605a      	str	r2, [r3, #4]
 8007fbe:	e016      	b.n	8007fee <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f103 020c 	add.w	r2, r3, #12
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	7812      	ldrb	r2, [r2, #0]
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ff2:	f7fd fa3d 	bl	8005470 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d803      	bhi.n	800800a <HAL_SPI_TransmitReceive+0x3c2>
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008008:	d102      	bne.n	8008010 <HAL_SPI_TransmitReceive+0x3c8>
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	2b00      	cmp	r3, #0
 800800e:	d103      	bne.n	8008018 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008016:	e01c      	b.n	8008052 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800801c:	b29b      	uxth	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	f47f af5b 	bne.w	8007eda <HAL_SPI_TransmitReceive+0x292>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800802a:	b29b      	uxth	r3, r3
 800802c:	2b00      	cmp	r3, #0
 800802e:	f47f af54 	bne.w	8007eda <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 f948 	bl	80082cc <SPI_EndRxTxTransaction>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d006      	beq.n	8008050 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2220      	movs	r2, #32
 800804c:	661a      	str	r2, [r3, #96]	; 0x60
 800804e:	e000      	b.n	8008052 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008050:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008062:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008066:	4618      	mov	r0, r3
 8008068:	3728      	adds	r7, #40	; 0x28
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	60f8      	str	r0, [r7, #12]
 8008076:	60b9      	str	r1, [r7, #8]
 8008078:	603b      	str	r3, [r7, #0]
 800807a:	4613      	mov	r3, r2
 800807c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800807e:	e04c      	b.n	800811a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008086:	d048      	beq.n	800811a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008088:	f7fd f9f2 	bl	8005470 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	429a      	cmp	r2, r3
 8008096:	d902      	bls.n	800809e <SPI_WaitFlagStateUntilTimeout+0x30>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d13d      	bne.n	800811a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080b6:	d111      	bne.n	80080dc <SPI_WaitFlagStateUntilTimeout+0x6e>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080c0:	d004      	beq.n	80080cc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080ca:	d107      	bne.n	80080dc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080e4:	d10f      	bne.n	8008106 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008104:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e00f      	b.n	800813a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	4013      	ands	r3, r2
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	429a      	cmp	r2, r3
 8008128:	bf0c      	ite	eq
 800812a:	2301      	moveq	r3, #1
 800812c:	2300      	movne	r3, #0
 800812e:	b2db      	uxtb	r3, r3
 8008130:	461a      	mov	r2, r3
 8008132:	79fb      	ldrb	r3, [r7, #7]
 8008134:	429a      	cmp	r2, r3
 8008136:	d1a3      	bne.n	8008080 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	607a      	str	r2, [r7, #4]
 800814e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8008150:	e057      	b.n	8008202 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008158:	d106      	bne.n	8008168 <SPI_WaitFifoStateUntilTimeout+0x26>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d103      	bne.n	8008168 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	330c      	adds	r3, #12
 8008166:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816e:	d048      	beq.n	8008202 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008170:	f7fd f97e 	bl	8005470 <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	429a      	cmp	r2, r3
 800817e:	d902      	bls.n	8008186 <SPI_WaitFifoStateUntilTimeout+0x44>
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d13d      	bne.n	8008202 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008194:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800819e:	d111      	bne.n	80081c4 <SPI_WaitFifoStateUntilTimeout+0x82>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081a8:	d004      	beq.n	80081b4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081b2:	d107      	bne.n	80081c4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081cc:	d10f      	bne.n	80081ee <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e008      	b.n	8008214 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	4013      	ands	r3, r2
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	429a      	cmp	r2, r3
 8008210:	d19f      	bne.n	8008152 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af02      	add	r7, sp, #8
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008230:	d111      	bne.n	8008256 <SPI_EndRxTransaction+0x3a>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800823a:	d004      	beq.n	8008246 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008244:	d107      	bne.n	8008256 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008254:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2200      	movs	r2, #0
 800825e:	2180      	movs	r1, #128	; 0x80
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f7ff ff04 	bl	800806e <SPI_WaitFlagStateUntilTimeout>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d007      	beq.n	800827c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008270:	f043 0220 	orr.w	r2, r3, #32
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e023      	b.n	80082c4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008284:	d11d      	bne.n	80082c2 <SPI_EndRxTransaction+0xa6>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800828e:	d004      	beq.n	800829a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008298:	d113      	bne.n	80082c2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f7ff ff4b 	bl	8008142 <SPI_WaitFifoStateUntilTimeout>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d007      	beq.n	80082c2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b6:	f043 0220 	orr.w	r2, r3, #32
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e000      	b.n	80082c4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af02      	add	r7, sp, #8
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2200      	movs	r2, #0
 80082e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f7ff ff2c 	bl	8008142 <SPI_WaitFifoStateUntilTimeout>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d007      	beq.n	8008300 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082f4:	f043 0220 	orr.w	r2, r3, #32
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e027      	b.n	8008350 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2200      	movs	r2, #0
 8008308:	2180      	movs	r1, #128	; 0x80
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f7ff feaf 	bl	800806e <SPI_WaitFlagStateUntilTimeout>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d007      	beq.n	8008326 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800831a:	f043 0220 	orr.w	r2, r3, #32
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e014      	b.n	8008350 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2200      	movs	r2, #0
 800832e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f7ff ff05 	bl	8008142 <SPI_WaitFifoStateUntilTimeout>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d007      	beq.n	800834e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008342:	f043 0220 	orr.w	r2, r3, #32
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e000      	b.n	8008350 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e042      	b.n	80083f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008370:	2b00      	cmp	r3, #0
 8008372:	d106      	bne.n	8008382 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7fc fd9f 	bl	8004ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2224      	movs	r2, #36	; 0x24
 8008386:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 0201 	bic.w	r2, r2, #1
 8008398:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f8c4 	bl	8008528 <UART_SetConfig>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d101      	bne.n	80083aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e022      	b.n	80083f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d002      	beq.n	80083b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 fa78 	bl	80098a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689a      	ldr	r2, [r3, #8]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f042 0201 	orr.w	r2, r2, #1
 80083e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f001 faff 	bl	80099ec <UART_CheckIdleState>
 80083ee:	4603      	mov	r3, r0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08a      	sub	sp, #40	; 0x28
 80083fc:	af02      	add	r7, sp, #8
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	603b      	str	r3, [r7, #0]
 8008404:	4613      	mov	r3, r2
 8008406:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800840e:	2b20      	cmp	r3, #32
 8008410:	f040 8084 	bne.w	800851c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <HAL_UART_Transmit+0x28>
 800841a:	88fb      	ldrh	r3, [r7, #6]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e07c      	b.n	800851e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800842a:	2b01      	cmp	r3, #1
 800842c:	d101      	bne.n	8008432 <HAL_UART_Transmit+0x3a>
 800842e:	2302      	movs	r3, #2
 8008430:	e075      	b.n	800851e <HAL_UART_Transmit+0x126>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2221      	movs	r2, #33	; 0x21
 8008446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800844a:	f7fd f811 	bl	8005470 <HAL_GetTick>
 800844e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	88fa      	ldrh	r2, [r7, #6]
 8008454:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	88fa      	ldrh	r2, [r7, #6]
 800845c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008468:	d108      	bne.n	800847c <HAL_UART_Transmit+0x84>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d104      	bne.n	800847c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008472:	2300      	movs	r3, #0
 8008474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	61bb      	str	r3, [r7, #24]
 800847a:	e003      	b.n	8008484 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008480:	2300      	movs	r3, #0
 8008482:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008484:	e02d      	b.n	80084e2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2200      	movs	r2, #0
 800848e:	2180      	movs	r1, #128	; 0x80
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f001 faf3 	bl	8009a7c <UART_WaitOnFlagUntilTimeout>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	e03e      	b.n	800851e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10b      	bne.n	80084be <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	881a      	ldrh	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084b2:	b292      	uxth	r2, r2
 80084b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	3302      	adds	r3, #2
 80084ba:	61bb      	str	r3, [r7, #24]
 80084bc:	e008      	b.n	80084d0 <HAL_UART_Transmit+0xd8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	781a      	ldrb	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	b292      	uxth	r2, r2
 80084c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	3301      	adds	r3, #1
 80084ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	3b01      	subs	r3, #1
 80084da:	b29a      	uxth	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1cb      	bne.n	8008486 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2200      	movs	r2, #0
 80084f6:	2140      	movs	r1, #64	; 0x40
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f001 fabf 	bl	8009a7c <UART_WaitOnFlagUntilTimeout>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <HAL_UART_Transmit+0x110>
    {
      return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e00a      	b.n	800851e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2220      	movs	r2, #32
 800850c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	e000      	b.n	800851e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800851c:	2302      	movs	r3, #2
  }
}
 800851e:	4618      	mov	r0, r3
 8008520:	3720      	adds	r7, #32
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
	...

08008528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008528:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800852c:	b088      	sub	sp, #32
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008532:	2300      	movs	r3, #0
 8008534:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800853a:	2300      	movs	r3, #0
 800853c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	431a      	orrs	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	695b      	ldr	r3, [r3, #20]
 800854c:	431a      	orrs	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	4313      	orrs	r3, r2
 8008554:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800855a:	69fa      	ldr	r2, [r7, #28]
 800855c:	4313      	orrs	r3, r2
 800855e:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	4bac      	ldr	r3, [pc, #688]	; (8008818 <UART_SetConfig+0x2f0>)
 8008568:	4013      	ands	r3, r2
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	6812      	ldr	r2, [r2, #0]
 800856e:	69f9      	ldr	r1, [r7, #28]
 8008570:	430b      	orrs	r3, r1
 8008572:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68da      	ldr	r2, [r3, #12]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4aa1      	ldr	r2, [pc, #644]	; (800881c <UART_SetConfig+0x2f4>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d004      	beq.n	80085a4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	69fa      	ldr	r2, [r7, #28]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80085ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	6812      	ldr	r2, [r2, #0]
 80085b6:	69f9      	ldr	r1, [r7, #28]
 80085b8:	430b      	orrs	r3, r1
 80085ba:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c2:	f023 010f 	bic.w	r1, r3, #15
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a92      	ldr	r2, [pc, #584]	; (8008820 <UART_SetConfig+0x2f8>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d121      	bne.n	8008620 <UART_SetConfig+0xf8>
 80085dc:	4b91      	ldr	r3, [pc, #580]	; (8008824 <UART_SetConfig+0x2fc>)
 80085de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e2:	f003 0303 	and.w	r3, r3, #3
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d816      	bhi.n	8008618 <UART_SetConfig+0xf0>
 80085ea:	a201      	add	r2, pc, #4	; (adr r2, 80085f0 <UART_SetConfig+0xc8>)
 80085ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f0:	08008601 	.word	0x08008601
 80085f4:	0800860d 	.word	0x0800860d
 80085f8:	08008607 	.word	0x08008607
 80085fc:	08008613 	.word	0x08008613
 8008600:	2301      	movs	r3, #1
 8008602:	76fb      	strb	r3, [r7, #27]
 8008604:	e0e8      	b.n	80087d8 <UART_SetConfig+0x2b0>
 8008606:	2302      	movs	r3, #2
 8008608:	76fb      	strb	r3, [r7, #27]
 800860a:	e0e5      	b.n	80087d8 <UART_SetConfig+0x2b0>
 800860c:	2304      	movs	r3, #4
 800860e:	76fb      	strb	r3, [r7, #27]
 8008610:	e0e2      	b.n	80087d8 <UART_SetConfig+0x2b0>
 8008612:	2308      	movs	r3, #8
 8008614:	76fb      	strb	r3, [r7, #27]
 8008616:	e0df      	b.n	80087d8 <UART_SetConfig+0x2b0>
 8008618:	2310      	movs	r3, #16
 800861a:	76fb      	strb	r3, [r7, #27]
 800861c:	bf00      	nop
 800861e:	e0db      	b.n	80087d8 <UART_SetConfig+0x2b0>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a80      	ldr	r2, [pc, #512]	; (8008828 <UART_SetConfig+0x300>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d134      	bne.n	8008694 <UART_SetConfig+0x16c>
 800862a:	4b7e      	ldr	r3, [pc, #504]	; (8008824 <UART_SetConfig+0x2fc>)
 800862c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008630:	f003 030c 	and.w	r3, r3, #12
 8008634:	2b0c      	cmp	r3, #12
 8008636:	d829      	bhi.n	800868c <UART_SetConfig+0x164>
 8008638:	a201      	add	r2, pc, #4	; (adr r2, 8008640 <UART_SetConfig+0x118>)
 800863a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863e:	bf00      	nop
 8008640:	08008675 	.word	0x08008675
 8008644:	0800868d 	.word	0x0800868d
 8008648:	0800868d 	.word	0x0800868d
 800864c:	0800868d 	.word	0x0800868d
 8008650:	08008681 	.word	0x08008681
 8008654:	0800868d 	.word	0x0800868d
 8008658:	0800868d 	.word	0x0800868d
 800865c:	0800868d 	.word	0x0800868d
 8008660:	0800867b 	.word	0x0800867b
 8008664:	0800868d 	.word	0x0800868d
 8008668:	0800868d 	.word	0x0800868d
 800866c:	0800868d 	.word	0x0800868d
 8008670:	08008687 	.word	0x08008687
 8008674:	2300      	movs	r3, #0
 8008676:	76fb      	strb	r3, [r7, #27]
 8008678:	e0ae      	b.n	80087d8 <UART_SetConfig+0x2b0>
 800867a:	2302      	movs	r3, #2
 800867c:	76fb      	strb	r3, [r7, #27]
 800867e:	e0ab      	b.n	80087d8 <UART_SetConfig+0x2b0>
 8008680:	2304      	movs	r3, #4
 8008682:	76fb      	strb	r3, [r7, #27]
 8008684:	e0a8      	b.n	80087d8 <UART_SetConfig+0x2b0>
 8008686:	2308      	movs	r3, #8
 8008688:	76fb      	strb	r3, [r7, #27]
 800868a:	e0a5      	b.n	80087d8 <UART_SetConfig+0x2b0>
 800868c:	2310      	movs	r3, #16
 800868e:	76fb      	strb	r3, [r7, #27]
 8008690:	bf00      	nop
 8008692:	e0a1      	b.n	80087d8 <UART_SetConfig+0x2b0>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a64      	ldr	r2, [pc, #400]	; (800882c <UART_SetConfig+0x304>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d120      	bne.n	80086e0 <UART_SetConfig+0x1b8>
 800869e:	4b61      	ldr	r3, [pc, #388]	; (8008824 <UART_SetConfig+0x2fc>)
 80086a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80086a8:	2b10      	cmp	r3, #16
 80086aa:	d00f      	beq.n	80086cc <UART_SetConfig+0x1a4>
 80086ac:	2b10      	cmp	r3, #16
 80086ae:	d802      	bhi.n	80086b6 <UART_SetConfig+0x18e>
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <UART_SetConfig+0x198>
 80086b4:	e010      	b.n	80086d8 <UART_SetConfig+0x1b0>
 80086b6:	2b20      	cmp	r3, #32
 80086b8:	d005      	beq.n	80086c6 <UART_SetConfig+0x19e>
 80086ba:	2b30      	cmp	r3, #48	; 0x30
 80086bc:	d009      	beq.n	80086d2 <UART_SetConfig+0x1aa>
 80086be:	e00b      	b.n	80086d8 <UART_SetConfig+0x1b0>
 80086c0:	2300      	movs	r3, #0
 80086c2:	76fb      	strb	r3, [r7, #27]
 80086c4:	e088      	b.n	80087d8 <UART_SetConfig+0x2b0>
 80086c6:	2302      	movs	r3, #2
 80086c8:	76fb      	strb	r3, [r7, #27]
 80086ca:	e085      	b.n	80087d8 <UART_SetConfig+0x2b0>
 80086cc:	2304      	movs	r3, #4
 80086ce:	76fb      	strb	r3, [r7, #27]
 80086d0:	e082      	b.n	80087d8 <UART_SetConfig+0x2b0>
 80086d2:	2308      	movs	r3, #8
 80086d4:	76fb      	strb	r3, [r7, #27]
 80086d6:	e07f      	b.n	80087d8 <UART_SetConfig+0x2b0>
 80086d8:	2310      	movs	r3, #16
 80086da:	76fb      	strb	r3, [r7, #27]
 80086dc:	bf00      	nop
 80086de:	e07b      	b.n	80087d8 <UART_SetConfig+0x2b0>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a52      	ldr	r2, [pc, #328]	; (8008830 <UART_SetConfig+0x308>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d120      	bne.n	800872c <UART_SetConfig+0x204>
 80086ea:	4b4e      	ldr	r3, [pc, #312]	; (8008824 <UART_SetConfig+0x2fc>)
 80086ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80086f4:	2b40      	cmp	r3, #64	; 0x40
 80086f6:	d00f      	beq.n	8008718 <UART_SetConfig+0x1f0>
 80086f8:	2b40      	cmp	r3, #64	; 0x40
 80086fa:	d802      	bhi.n	8008702 <UART_SetConfig+0x1da>
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d005      	beq.n	800870c <UART_SetConfig+0x1e4>
 8008700:	e010      	b.n	8008724 <UART_SetConfig+0x1fc>
 8008702:	2b80      	cmp	r3, #128	; 0x80
 8008704:	d005      	beq.n	8008712 <UART_SetConfig+0x1ea>
 8008706:	2bc0      	cmp	r3, #192	; 0xc0
 8008708:	d009      	beq.n	800871e <UART_SetConfig+0x1f6>
 800870a:	e00b      	b.n	8008724 <UART_SetConfig+0x1fc>
 800870c:	2300      	movs	r3, #0
 800870e:	76fb      	strb	r3, [r7, #27]
 8008710:	e062      	b.n	80087d8 <UART_SetConfig+0x2b0>
 8008712:	2302      	movs	r3, #2
 8008714:	76fb      	strb	r3, [r7, #27]
 8008716:	e05f      	b.n	80087d8 <UART_SetConfig+0x2b0>
 8008718:	2304      	movs	r3, #4
 800871a:	76fb      	strb	r3, [r7, #27]
 800871c:	e05c      	b.n	80087d8 <UART_SetConfig+0x2b0>
 800871e:	2308      	movs	r3, #8
 8008720:	76fb      	strb	r3, [r7, #27]
 8008722:	e059      	b.n	80087d8 <UART_SetConfig+0x2b0>
 8008724:	2310      	movs	r3, #16
 8008726:	76fb      	strb	r3, [r7, #27]
 8008728:	bf00      	nop
 800872a:	e055      	b.n	80087d8 <UART_SetConfig+0x2b0>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a40      	ldr	r2, [pc, #256]	; (8008834 <UART_SetConfig+0x30c>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d124      	bne.n	8008780 <UART_SetConfig+0x258>
 8008736:	4b3b      	ldr	r3, [pc, #236]	; (8008824 <UART_SetConfig+0x2fc>)
 8008738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800873c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008744:	d012      	beq.n	800876c <UART_SetConfig+0x244>
 8008746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800874a:	d802      	bhi.n	8008752 <UART_SetConfig+0x22a>
 800874c:	2b00      	cmp	r3, #0
 800874e:	d007      	beq.n	8008760 <UART_SetConfig+0x238>
 8008750:	e012      	b.n	8008778 <UART_SetConfig+0x250>
 8008752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008756:	d006      	beq.n	8008766 <UART_SetConfig+0x23e>
 8008758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800875c:	d009      	beq.n	8008772 <UART_SetConfig+0x24a>
 800875e:	e00b      	b.n	8008778 <UART_SetConfig+0x250>
 8008760:	2300      	movs	r3, #0
 8008762:	76fb      	strb	r3, [r7, #27]
 8008764:	e038      	b.n	80087d8 <UART_SetConfig+0x2b0>
 8008766:	2302      	movs	r3, #2
 8008768:	76fb      	strb	r3, [r7, #27]
 800876a:	e035      	b.n	80087d8 <UART_SetConfig+0x2b0>
 800876c:	2304      	movs	r3, #4
 800876e:	76fb      	strb	r3, [r7, #27]
 8008770:	e032      	b.n	80087d8 <UART_SetConfig+0x2b0>
 8008772:	2308      	movs	r3, #8
 8008774:	76fb      	strb	r3, [r7, #27]
 8008776:	e02f      	b.n	80087d8 <UART_SetConfig+0x2b0>
 8008778:	2310      	movs	r3, #16
 800877a:	76fb      	strb	r3, [r7, #27]
 800877c:	bf00      	nop
 800877e:	e02b      	b.n	80087d8 <UART_SetConfig+0x2b0>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a25      	ldr	r2, [pc, #148]	; (800881c <UART_SetConfig+0x2f4>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d124      	bne.n	80087d4 <UART_SetConfig+0x2ac>
 800878a:	4b26      	ldr	r3, [pc, #152]	; (8008824 <UART_SetConfig+0x2fc>)
 800878c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008790:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008798:	d012      	beq.n	80087c0 <UART_SetConfig+0x298>
 800879a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800879e:	d802      	bhi.n	80087a6 <UART_SetConfig+0x27e>
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d007      	beq.n	80087b4 <UART_SetConfig+0x28c>
 80087a4:	e012      	b.n	80087cc <UART_SetConfig+0x2a4>
 80087a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087aa:	d006      	beq.n	80087ba <UART_SetConfig+0x292>
 80087ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087b0:	d009      	beq.n	80087c6 <UART_SetConfig+0x29e>
 80087b2:	e00b      	b.n	80087cc <UART_SetConfig+0x2a4>
 80087b4:	2300      	movs	r3, #0
 80087b6:	76fb      	strb	r3, [r7, #27]
 80087b8:	e00e      	b.n	80087d8 <UART_SetConfig+0x2b0>
 80087ba:	2302      	movs	r3, #2
 80087bc:	76fb      	strb	r3, [r7, #27]
 80087be:	e00b      	b.n	80087d8 <UART_SetConfig+0x2b0>
 80087c0:	2304      	movs	r3, #4
 80087c2:	76fb      	strb	r3, [r7, #27]
 80087c4:	e008      	b.n	80087d8 <UART_SetConfig+0x2b0>
 80087c6:	2308      	movs	r3, #8
 80087c8:	76fb      	strb	r3, [r7, #27]
 80087ca:	e005      	b.n	80087d8 <UART_SetConfig+0x2b0>
 80087cc:	2310      	movs	r3, #16
 80087ce:	76fb      	strb	r3, [r7, #27]
 80087d0:	bf00      	nop
 80087d2:	e001      	b.n	80087d8 <UART_SetConfig+0x2b0>
 80087d4:	2310      	movs	r3, #16
 80087d6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a0f      	ldr	r2, [pc, #60]	; (800881c <UART_SetConfig+0x2f4>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	f040 842d 	bne.w	800903e <UART_SetConfig+0xb16>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087e4:	7efb      	ldrb	r3, [r7, #27]
 80087e6:	2b08      	cmp	r3, #8
 80087e8:	f200 816b 	bhi.w	8008ac2 <UART_SetConfig+0x59a>
 80087ec:	a201      	add	r2, pc, #4	; (adr r2, 80087f4 <UART_SetConfig+0x2cc>)
 80087ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f2:	bf00      	nop
 80087f4:	08008839 	.word	0x08008839
 80087f8:	08008ac3 	.word	0x08008ac3
 80087fc:	080088db 	.word	0x080088db
 8008800:	08008ac3 	.word	0x08008ac3
 8008804:	08008973 	.word	0x08008973
 8008808:	08008ac3 	.word	0x08008ac3
 800880c:	08008ac3 	.word	0x08008ac3
 8008810:	08008ac3 	.word	0x08008ac3
 8008814:	08008a15 	.word	0x08008a15
 8008818:	cfff69f3 	.word	0xcfff69f3
 800881c:	40008000 	.word	0x40008000
 8008820:	40013800 	.word	0x40013800
 8008824:	40021000 	.word	0x40021000
 8008828:	40004400 	.word	0x40004400
 800882c:	40004800 	.word	0x40004800
 8008830:	40004c00 	.word	0x40004c00
 8008834:	40005000 	.word	0x40005000
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008838:	f7fe f8f8 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 800883c:	4602      	mov	r2, r0
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008842:	2b00      	cmp	r3, #0
 8008844:	d044      	beq.n	80088d0 <UART_SetConfig+0x3a8>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884a:	2b01      	cmp	r3, #1
 800884c:	d03e      	beq.n	80088cc <UART_SetConfig+0x3a4>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008852:	2b02      	cmp	r3, #2
 8008854:	d038      	beq.n	80088c8 <UART_SetConfig+0x3a0>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	2b03      	cmp	r3, #3
 800885c:	d032      	beq.n	80088c4 <UART_SetConfig+0x39c>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008862:	2b04      	cmp	r3, #4
 8008864:	d02c      	beq.n	80088c0 <UART_SetConfig+0x398>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	2b05      	cmp	r3, #5
 800886c:	d026      	beq.n	80088bc <UART_SetConfig+0x394>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008872:	2b06      	cmp	r3, #6
 8008874:	d020      	beq.n	80088b8 <UART_SetConfig+0x390>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	2b07      	cmp	r3, #7
 800887c:	d01a      	beq.n	80088b4 <UART_SetConfig+0x38c>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008882:	2b08      	cmp	r3, #8
 8008884:	d014      	beq.n	80088b0 <UART_SetConfig+0x388>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888a:	2b09      	cmp	r3, #9
 800888c:	d00e      	beq.n	80088ac <UART_SetConfig+0x384>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	2b0a      	cmp	r3, #10
 8008894:	d008      	beq.n	80088a8 <UART_SetConfig+0x380>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889a:	2b0b      	cmp	r3, #11
 800889c:	d102      	bne.n	80088a4 <UART_SetConfig+0x37c>
 800889e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088a2:	e016      	b.n	80088d2 <UART_SetConfig+0x3aa>
 80088a4:	2301      	movs	r3, #1
 80088a6:	e014      	b.n	80088d2 <UART_SetConfig+0x3aa>
 80088a8:	2380      	movs	r3, #128	; 0x80
 80088aa:	e012      	b.n	80088d2 <UART_SetConfig+0x3aa>
 80088ac:	2340      	movs	r3, #64	; 0x40
 80088ae:	e010      	b.n	80088d2 <UART_SetConfig+0x3aa>
 80088b0:	2320      	movs	r3, #32
 80088b2:	e00e      	b.n	80088d2 <UART_SetConfig+0x3aa>
 80088b4:	2310      	movs	r3, #16
 80088b6:	e00c      	b.n	80088d2 <UART_SetConfig+0x3aa>
 80088b8:	230c      	movs	r3, #12
 80088ba:	e00a      	b.n	80088d2 <UART_SetConfig+0x3aa>
 80088bc:	230a      	movs	r3, #10
 80088be:	e008      	b.n	80088d2 <UART_SetConfig+0x3aa>
 80088c0:	2308      	movs	r3, #8
 80088c2:	e006      	b.n	80088d2 <UART_SetConfig+0x3aa>
 80088c4:	2306      	movs	r3, #6
 80088c6:	e004      	b.n	80088d2 <UART_SetConfig+0x3aa>
 80088c8:	2304      	movs	r3, #4
 80088ca:	e002      	b.n	80088d2 <UART_SetConfig+0x3aa>
 80088cc:	2302      	movs	r3, #2
 80088ce:	e000      	b.n	80088d2 <UART_SetConfig+0x3aa>
 80088d0:	2301      	movs	r3, #1
 80088d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d6:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 80088d8:	e0f6      	b.n	8008ac8 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d044      	beq.n	800896c <UART_SetConfig+0x444>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d03e      	beq.n	8008968 <UART_SetConfig+0x440>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d038      	beq.n	8008964 <UART_SetConfig+0x43c>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	d032      	beq.n	8008960 <UART_SetConfig+0x438>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	2b04      	cmp	r3, #4
 8008900:	d02c      	beq.n	800895c <UART_SetConfig+0x434>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	2b05      	cmp	r3, #5
 8008908:	d026      	beq.n	8008958 <UART_SetConfig+0x430>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890e:	2b06      	cmp	r3, #6
 8008910:	d020      	beq.n	8008954 <UART_SetConfig+0x42c>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008916:	2b07      	cmp	r3, #7
 8008918:	d01a      	beq.n	8008950 <UART_SetConfig+0x428>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891e:	2b08      	cmp	r3, #8
 8008920:	d014      	beq.n	800894c <UART_SetConfig+0x424>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	2b09      	cmp	r3, #9
 8008928:	d00e      	beq.n	8008948 <UART_SetConfig+0x420>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	2b0a      	cmp	r3, #10
 8008930:	d008      	beq.n	8008944 <UART_SetConfig+0x41c>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	2b0b      	cmp	r3, #11
 8008938:	d102      	bne.n	8008940 <UART_SetConfig+0x418>
 800893a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800893e:	e016      	b.n	800896e <UART_SetConfig+0x446>
 8008940:	4ba1      	ldr	r3, [pc, #644]	; (8008bc8 <UART_SetConfig+0x6a0>)
 8008942:	e014      	b.n	800896e <UART_SetConfig+0x446>
 8008944:	4ba1      	ldr	r3, [pc, #644]	; (8008bcc <UART_SetConfig+0x6a4>)
 8008946:	e012      	b.n	800896e <UART_SetConfig+0x446>
 8008948:	4ba1      	ldr	r3, [pc, #644]	; (8008bd0 <UART_SetConfig+0x6a8>)
 800894a:	e010      	b.n	800896e <UART_SetConfig+0x446>
 800894c:	4ba1      	ldr	r3, [pc, #644]	; (8008bd4 <UART_SetConfig+0x6ac>)
 800894e:	e00e      	b.n	800896e <UART_SetConfig+0x446>
 8008950:	4ba1      	ldr	r3, [pc, #644]	; (8008bd8 <UART_SetConfig+0x6b0>)
 8008952:	e00c      	b.n	800896e <UART_SetConfig+0x446>
 8008954:	4ba1      	ldr	r3, [pc, #644]	; (8008bdc <UART_SetConfig+0x6b4>)
 8008956:	e00a      	b.n	800896e <UART_SetConfig+0x446>
 8008958:	4ba1      	ldr	r3, [pc, #644]	; (8008be0 <UART_SetConfig+0x6b8>)
 800895a:	e008      	b.n	800896e <UART_SetConfig+0x446>
 800895c:	4ba1      	ldr	r3, [pc, #644]	; (8008be4 <UART_SetConfig+0x6bc>)
 800895e:	e006      	b.n	800896e <UART_SetConfig+0x446>
 8008960:	4ba1      	ldr	r3, [pc, #644]	; (8008be8 <UART_SetConfig+0x6c0>)
 8008962:	e004      	b.n	800896e <UART_SetConfig+0x446>
 8008964:	4ba1      	ldr	r3, [pc, #644]	; (8008bec <UART_SetConfig+0x6c4>)
 8008966:	e002      	b.n	800896e <UART_SetConfig+0x446>
 8008968:	4ba1      	ldr	r3, [pc, #644]	; (8008bf0 <UART_SetConfig+0x6c8>)
 800896a:	e000      	b.n	800896e <UART_SetConfig+0x446>
 800896c:	4b96      	ldr	r3, [pc, #600]	; (8008bc8 <UART_SetConfig+0x6a0>)
 800896e:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8008970:	e0aa      	b.n	8008ac8 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008972:	f7fd ffc5 	bl	8006900 <HAL_RCC_GetSysClockFreq>
 8008976:	4602      	mov	r2, r0
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897c:	2b00      	cmp	r3, #0
 800897e:	d044      	beq.n	8008a0a <UART_SetConfig+0x4e2>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008984:	2b01      	cmp	r3, #1
 8008986:	d03e      	beq.n	8008a06 <UART_SetConfig+0x4de>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	2b02      	cmp	r3, #2
 800898e:	d038      	beq.n	8008a02 <UART_SetConfig+0x4da>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	2b03      	cmp	r3, #3
 8008996:	d032      	beq.n	80089fe <UART_SetConfig+0x4d6>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899c:	2b04      	cmp	r3, #4
 800899e:	d02c      	beq.n	80089fa <UART_SetConfig+0x4d2>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a4:	2b05      	cmp	r3, #5
 80089a6:	d026      	beq.n	80089f6 <UART_SetConfig+0x4ce>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ac:	2b06      	cmp	r3, #6
 80089ae:	d020      	beq.n	80089f2 <UART_SetConfig+0x4ca>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	2b07      	cmp	r3, #7
 80089b6:	d01a      	beq.n	80089ee <UART_SetConfig+0x4c6>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	2b08      	cmp	r3, #8
 80089be:	d014      	beq.n	80089ea <UART_SetConfig+0x4c2>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c4:	2b09      	cmp	r3, #9
 80089c6:	d00e      	beq.n	80089e6 <UART_SetConfig+0x4be>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	2b0a      	cmp	r3, #10
 80089ce:	d008      	beq.n	80089e2 <UART_SetConfig+0x4ba>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d4:	2b0b      	cmp	r3, #11
 80089d6:	d102      	bne.n	80089de <UART_SetConfig+0x4b6>
 80089d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089dc:	e016      	b.n	8008a0c <UART_SetConfig+0x4e4>
 80089de:	2301      	movs	r3, #1
 80089e0:	e014      	b.n	8008a0c <UART_SetConfig+0x4e4>
 80089e2:	2380      	movs	r3, #128	; 0x80
 80089e4:	e012      	b.n	8008a0c <UART_SetConfig+0x4e4>
 80089e6:	2340      	movs	r3, #64	; 0x40
 80089e8:	e010      	b.n	8008a0c <UART_SetConfig+0x4e4>
 80089ea:	2320      	movs	r3, #32
 80089ec:	e00e      	b.n	8008a0c <UART_SetConfig+0x4e4>
 80089ee:	2310      	movs	r3, #16
 80089f0:	e00c      	b.n	8008a0c <UART_SetConfig+0x4e4>
 80089f2:	230c      	movs	r3, #12
 80089f4:	e00a      	b.n	8008a0c <UART_SetConfig+0x4e4>
 80089f6:	230a      	movs	r3, #10
 80089f8:	e008      	b.n	8008a0c <UART_SetConfig+0x4e4>
 80089fa:	2308      	movs	r3, #8
 80089fc:	e006      	b.n	8008a0c <UART_SetConfig+0x4e4>
 80089fe:	2306      	movs	r3, #6
 8008a00:	e004      	b.n	8008a0c <UART_SetConfig+0x4e4>
 8008a02:	2304      	movs	r3, #4
 8008a04:	e002      	b.n	8008a0c <UART_SetConfig+0x4e4>
 8008a06:	2302      	movs	r3, #2
 8008a08:	e000      	b.n	8008a0c <UART_SetConfig+0x4e4>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a10:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8008a12:	e059      	b.n	8008ac8 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d04e      	beq.n	8008aba <UART_SetConfig+0x592>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d047      	beq.n	8008ab4 <UART_SetConfig+0x58c>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d040      	beq.n	8008aae <UART_SetConfig+0x586>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	d039      	beq.n	8008aa8 <UART_SetConfig+0x580>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	d032      	beq.n	8008aa2 <UART_SetConfig+0x57a>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	2b05      	cmp	r3, #5
 8008a42:	d02b      	beq.n	8008a9c <UART_SetConfig+0x574>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	2b06      	cmp	r3, #6
 8008a4a:	d024      	beq.n	8008a96 <UART_SetConfig+0x56e>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a50:	2b07      	cmp	r3, #7
 8008a52:	d01d      	beq.n	8008a90 <UART_SetConfig+0x568>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a58:	2b08      	cmp	r3, #8
 8008a5a:	d016      	beq.n	8008a8a <UART_SetConfig+0x562>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	2b09      	cmp	r3, #9
 8008a62:	d00f      	beq.n	8008a84 <UART_SetConfig+0x55c>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a68:	2b0a      	cmp	r3, #10
 8008a6a:	d008      	beq.n	8008a7e <UART_SetConfig+0x556>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a70:	2b0b      	cmp	r3, #11
 8008a72:	d101      	bne.n	8008a78 <UART_SetConfig+0x550>
 8008a74:	2380      	movs	r3, #128	; 0x80
 8008a76:	e022      	b.n	8008abe <UART_SetConfig+0x596>
 8008a78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a7c:	e01f      	b.n	8008abe <UART_SetConfig+0x596>
 8008a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a82:	e01c      	b.n	8008abe <UART_SetConfig+0x596>
 8008a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a88:	e019      	b.n	8008abe <UART_SetConfig+0x596>
 8008a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a8e:	e016      	b.n	8008abe <UART_SetConfig+0x596>
 8008a90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a94:	e013      	b.n	8008abe <UART_SetConfig+0x596>
 8008a96:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008a9a:	e010      	b.n	8008abe <UART_SetConfig+0x596>
 8008a9c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008aa0:	e00d      	b.n	8008abe <UART_SetConfig+0x596>
 8008aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aa6:	e00a      	b.n	8008abe <UART_SetConfig+0x596>
 8008aa8:	f241 5355 	movw	r3, #5461	; 0x1555
 8008aac:	e007      	b.n	8008abe <UART_SetConfig+0x596>
 8008aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ab2:	e004      	b.n	8008abe <UART_SetConfig+0x596>
 8008ab4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ab8:	e001      	b.n	8008abe <UART_SetConfig+0x596>
 8008aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008abe:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8008ac0:	e002      	b.n	8008ac8 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	74fb      	strb	r3, [r7, #19]
        break;
 8008ac6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 86c2 	beq.w	8009854 <UART_SetConfig+0x132c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	4413      	add	r3, r2
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d305      	bcc.n	8008aec <UART_SetConfig+0x5c4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d903      	bls.n	8008af4 <UART_SetConfig+0x5cc>
      {
        ret = HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	74fb      	strb	r3, [r7, #19]
 8008af0:	f000 beb0 	b.w	8009854 <UART_SetConfig+0x132c>
      }
      else
      {
        switch (clocksource)
 8008af4:	7efb      	ldrb	r3, [r7, #27]
 8008af6:	2b08      	cmp	r3, #8
 8008af8:	f200 828c 	bhi.w	8009014 <UART_SetConfig+0xaec>
 8008afc:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <UART_SetConfig+0x5dc>)
 8008afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b02:	bf00      	nop
 8008b04:	08008b29 	.word	0x08008b29
 8008b08:	08009015 	.word	0x08009015
 8008b0c:	08008c93 	.word	0x08008c93
 8008b10:	08009015 	.word	0x08009015
 8008b14:	08008d89 	.word	0x08008d89
 8008b18:	08009015 	.word	0x08009015
 8008b1c:	08009015 	.word	0x08009015
 8008b20:	08009015 	.word	0x08009015
 8008b24:	08008ec5 	.word	0x08008ec5
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b28:	f7fd ff80 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f04f 0100 	mov.w	r1, #0
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d07e      	beq.n	8008c3a <UART_SetConfig+0x712>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d075      	beq.n	8008c30 <UART_SetConfig+0x708>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d06c      	beq.n	8008c26 <UART_SetConfig+0x6fe>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	2b03      	cmp	r3, #3
 8008b52:	d063      	beq.n	8008c1c <UART_SetConfig+0x6f4>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	2b04      	cmp	r3, #4
 8008b5a:	d05a      	beq.n	8008c12 <UART_SetConfig+0x6ea>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	2b05      	cmp	r3, #5
 8008b62:	d051      	beq.n	8008c08 <UART_SetConfig+0x6e0>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	2b06      	cmp	r3, #6
 8008b6a:	d048      	beq.n	8008bfe <UART_SetConfig+0x6d6>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	2b07      	cmp	r3, #7
 8008b72:	d03f      	beq.n	8008bf4 <UART_SetConfig+0x6cc>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d01f      	beq.n	8008bbc <UART_SetConfig+0x694>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	2b09      	cmp	r3, #9
 8008b82:	d016      	beq.n	8008bb2 <UART_SetConfig+0x68a>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	2b0a      	cmp	r3, #10
 8008b8a:	d00d      	beq.n	8008ba8 <UART_SetConfig+0x680>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	2b0b      	cmp	r3, #11
 8008b92:	d104      	bne.n	8008b9e <UART_SetConfig+0x676>
 8008b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b98:	f04f 0400 	mov.w	r4, #0
 8008b9c:	e051      	b.n	8008c42 <UART_SetConfig+0x71a>
 8008b9e:	f04f 0301 	mov.w	r3, #1
 8008ba2:	f04f 0400 	mov.w	r4, #0
 8008ba6:	e04c      	b.n	8008c42 <UART_SetConfig+0x71a>
 8008ba8:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008bac:	f04f 0400 	mov.w	r4, #0
 8008bb0:	e047      	b.n	8008c42 <UART_SetConfig+0x71a>
 8008bb2:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008bb6:	f04f 0400 	mov.w	r4, #0
 8008bba:	e042      	b.n	8008c42 <UART_SetConfig+0x71a>
 8008bbc:	f04f 0320 	mov.w	r3, #32
 8008bc0:	f04f 0400 	mov.w	r4, #0
 8008bc4:	e03d      	b.n	8008c42 <UART_SetConfig+0x71a>
 8008bc6:	bf00      	nop
 8008bc8:	00f42400 	.word	0x00f42400
 8008bcc:	0001e848 	.word	0x0001e848
 8008bd0:	0003d090 	.word	0x0003d090
 8008bd4:	0007a120 	.word	0x0007a120
 8008bd8:	000f4240 	.word	0x000f4240
 8008bdc:	00145855 	.word	0x00145855
 8008be0:	00186a00 	.word	0x00186a00
 8008be4:	001e8480 	.word	0x001e8480
 8008be8:	0028b0aa 	.word	0x0028b0aa
 8008bec:	003d0900 	.word	0x003d0900
 8008bf0:	007a1200 	.word	0x007a1200
 8008bf4:	f04f 0310 	mov.w	r3, #16
 8008bf8:	f04f 0400 	mov.w	r4, #0
 8008bfc:	e021      	b.n	8008c42 <UART_SetConfig+0x71a>
 8008bfe:	f04f 030c 	mov.w	r3, #12
 8008c02:	f04f 0400 	mov.w	r4, #0
 8008c06:	e01c      	b.n	8008c42 <UART_SetConfig+0x71a>
 8008c08:	f04f 030a 	mov.w	r3, #10
 8008c0c:	f04f 0400 	mov.w	r4, #0
 8008c10:	e017      	b.n	8008c42 <UART_SetConfig+0x71a>
 8008c12:	f04f 0308 	mov.w	r3, #8
 8008c16:	f04f 0400 	mov.w	r4, #0
 8008c1a:	e012      	b.n	8008c42 <UART_SetConfig+0x71a>
 8008c1c:	f04f 0306 	mov.w	r3, #6
 8008c20:	f04f 0400 	mov.w	r4, #0
 8008c24:	e00d      	b.n	8008c42 <UART_SetConfig+0x71a>
 8008c26:	f04f 0304 	mov.w	r3, #4
 8008c2a:	f04f 0400 	mov.w	r4, #0
 8008c2e:	e008      	b.n	8008c42 <UART_SetConfig+0x71a>
 8008c30:	f04f 0302 	mov.w	r3, #2
 8008c34:	f04f 0400 	mov.w	r4, #0
 8008c38:	e003      	b.n	8008c42 <UART_SetConfig+0x71a>
 8008c3a:	f04f 0301 	mov.w	r3, #1
 8008c3e:	f04f 0400 	mov.w	r4, #0
 8008c42:	461a      	mov	r2, r3
 8008c44:	4623      	mov	r3, r4
 8008c46:	f7f7 fb2b 	bl	80002a0 <__aeabi_uldivmod>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	4619      	mov	r1, r3
 8008c50:	4622      	mov	r2, r4
 8008c52:	f04f 0300 	mov.w	r3, #0
 8008c56:	f04f 0400 	mov.w	r4, #0
 8008c5a:	0214      	lsls	r4, r2, #8
 8008c5c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008c60:	020b      	lsls	r3, r1, #8
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	6852      	ldr	r2, [r2, #4]
 8008c66:	0852      	lsrs	r2, r2, #1
 8008c68:	4611      	mov	r1, r2
 8008c6a:	f04f 0200 	mov.w	r2, #0
 8008c6e:	eb13 0b01 	adds.w	fp, r3, r1
 8008c72:	eb44 0c02 	adc.w	ip, r4, r2
 8008c76:	4658      	mov	r0, fp
 8008c78:	4661      	mov	r1, ip
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f04f 0400 	mov.w	r4, #0
 8008c82:	461a      	mov	r2, r3
 8008c84:	4623      	mov	r3, r4
 8008c86:	f7f7 fb0b 	bl	80002a0 <__aeabi_uldivmod>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8008c90:	e1c3      	b.n	800901a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d05b      	beq.n	8008d52 <UART_SetConfig+0x82a>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d053      	beq.n	8008d4a <UART_SetConfig+0x822>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d04b      	beq.n	8008d42 <UART_SetConfig+0x81a>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d043      	beq.n	8008d3a <UART_SetConfig+0x812>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	d03b      	beq.n	8008d32 <UART_SetConfig+0x80a>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	2b05      	cmp	r3, #5
 8008cc0:	d033      	beq.n	8008d2a <UART_SetConfig+0x802>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc6:	2b06      	cmp	r3, #6
 8008cc8:	d02b      	beq.n	8008d22 <UART_SetConfig+0x7fa>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	2b07      	cmp	r3, #7
 8008cd0:	d023      	beq.n	8008d1a <UART_SetConfig+0x7f2>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	2b08      	cmp	r3, #8
 8008cd8:	d01b      	beq.n	8008d12 <UART_SetConfig+0x7ea>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cde:	2b09      	cmp	r3, #9
 8008ce0:	d013      	beq.n	8008d0a <UART_SetConfig+0x7e2>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce6:	2b0a      	cmp	r3, #10
 8008ce8:	d00b      	beq.n	8008d02 <UART_SetConfig+0x7da>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	2b0b      	cmp	r3, #11
 8008cf0:	d103      	bne.n	8008cfa <UART_SetConfig+0x7d2>
 8008cf2:	4bad      	ldr	r3, [pc, #692]	; (8008fa8 <UART_SetConfig+0xa80>)
 8008cf4:	f04f 0400 	mov.w	r4, #0
 8008cf8:	e02e      	b.n	8008d58 <UART_SetConfig+0x830>
 8008cfa:	4bac      	ldr	r3, [pc, #688]	; (8008fac <UART_SetConfig+0xa84>)
 8008cfc:	f04f 0400 	mov.w	r4, #0
 8008d00:	e02a      	b.n	8008d58 <UART_SetConfig+0x830>
 8008d02:	4bab      	ldr	r3, [pc, #684]	; (8008fb0 <UART_SetConfig+0xa88>)
 8008d04:	f04f 0400 	mov.w	r4, #0
 8008d08:	e026      	b.n	8008d58 <UART_SetConfig+0x830>
 8008d0a:	4baa      	ldr	r3, [pc, #680]	; (8008fb4 <UART_SetConfig+0xa8c>)
 8008d0c:	f04f 0400 	mov.w	r4, #0
 8008d10:	e022      	b.n	8008d58 <UART_SetConfig+0x830>
 8008d12:	4ba9      	ldr	r3, [pc, #676]	; (8008fb8 <UART_SetConfig+0xa90>)
 8008d14:	f04f 0400 	mov.w	r4, #0
 8008d18:	e01e      	b.n	8008d58 <UART_SetConfig+0x830>
 8008d1a:	4ba8      	ldr	r3, [pc, #672]	; (8008fbc <UART_SetConfig+0xa94>)
 8008d1c:	f04f 0400 	mov.w	r4, #0
 8008d20:	e01a      	b.n	8008d58 <UART_SetConfig+0x830>
 8008d22:	a49d      	add	r4, pc, #628	; (adr r4, 8008f98 <UART_SetConfig+0xa70>)
 8008d24:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008d28:	e016      	b.n	8008d58 <UART_SetConfig+0x830>
 8008d2a:	4ba5      	ldr	r3, [pc, #660]	; (8008fc0 <UART_SetConfig+0xa98>)
 8008d2c:	f04f 0400 	mov.w	r4, #0
 8008d30:	e012      	b.n	8008d58 <UART_SetConfig+0x830>
 8008d32:	4ba4      	ldr	r3, [pc, #656]	; (8008fc4 <UART_SetConfig+0xa9c>)
 8008d34:	f04f 0400 	mov.w	r4, #0
 8008d38:	e00e      	b.n	8008d58 <UART_SetConfig+0x830>
 8008d3a:	a499      	add	r4, pc, #612	; (adr r4, 8008fa0 <UART_SetConfig+0xa78>)
 8008d3c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008d40:	e00a      	b.n	8008d58 <UART_SetConfig+0x830>
 8008d42:	4ba1      	ldr	r3, [pc, #644]	; (8008fc8 <UART_SetConfig+0xaa0>)
 8008d44:	f04f 0400 	mov.w	r4, #0
 8008d48:	e006      	b.n	8008d58 <UART_SetConfig+0x830>
 8008d4a:	4ba0      	ldr	r3, [pc, #640]	; (8008fcc <UART_SetConfig+0xaa4>)
 8008d4c:	f04f 0400 	mov.w	r4, #0
 8008d50:	e002      	b.n	8008d58 <UART_SetConfig+0x830>
 8008d52:	4b96      	ldr	r3, [pc, #600]	; (8008fac <UART_SetConfig+0xa84>)
 8008d54:	f04f 0400 	mov.w	r4, #0
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	6852      	ldr	r2, [r2, #4]
 8008d5c:	0852      	lsrs	r2, r2, #1
 8008d5e:	4611      	mov	r1, r2
 8008d60:	f04f 0200 	mov.w	r2, #0
 8008d64:	eb13 0b01 	adds.w	fp, r3, r1
 8008d68:	eb44 0c02 	adc.w	ip, r4, r2
 8008d6c:	4658      	mov	r0, fp
 8008d6e:	4661      	mov	r1, ip
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f04f 0400 	mov.w	r4, #0
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4623      	mov	r3, r4
 8008d7c:	f7f7 fa90 	bl	80002a0 <__aeabi_uldivmod>
 8008d80:	4603      	mov	r3, r0
 8008d82:	460c      	mov	r4, r1
 8008d84:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8008d86:	e148      	b.n	800901a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d88:	f7fd fdba 	bl	8006900 <HAL_RCC_GetSysClockFreq>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f04f 0100 	mov.w	r1, #0
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d067      	beq.n	8008e6c <UART_SetConfig+0x944>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d05e      	beq.n	8008e62 <UART_SetConfig+0x93a>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d055      	beq.n	8008e58 <UART_SetConfig+0x930>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db0:	2b03      	cmp	r3, #3
 8008db2:	d04c      	beq.n	8008e4e <UART_SetConfig+0x926>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	d043      	beq.n	8008e44 <UART_SetConfig+0x91c>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc0:	2b05      	cmp	r3, #5
 8008dc2:	d03a      	beq.n	8008e3a <UART_SetConfig+0x912>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc8:	2b06      	cmp	r3, #6
 8008dca:	d031      	beq.n	8008e30 <UART_SetConfig+0x908>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd0:	2b07      	cmp	r3, #7
 8008dd2:	d028      	beq.n	8008e26 <UART_SetConfig+0x8fe>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d01f      	beq.n	8008e1c <UART_SetConfig+0x8f4>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de0:	2b09      	cmp	r3, #9
 8008de2:	d016      	beq.n	8008e12 <UART_SetConfig+0x8ea>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de8:	2b0a      	cmp	r3, #10
 8008dea:	d00d      	beq.n	8008e08 <UART_SetConfig+0x8e0>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	2b0b      	cmp	r3, #11
 8008df2:	d104      	bne.n	8008dfe <UART_SetConfig+0x8d6>
 8008df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008df8:	f04f 0400 	mov.w	r4, #0
 8008dfc:	e03a      	b.n	8008e74 <UART_SetConfig+0x94c>
 8008dfe:	f04f 0301 	mov.w	r3, #1
 8008e02:	f04f 0400 	mov.w	r4, #0
 8008e06:	e035      	b.n	8008e74 <UART_SetConfig+0x94c>
 8008e08:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008e0c:	f04f 0400 	mov.w	r4, #0
 8008e10:	e030      	b.n	8008e74 <UART_SetConfig+0x94c>
 8008e12:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008e16:	f04f 0400 	mov.w	r4, #0
 8008e1a:	e02b      	b.n	8008e74 <UART_SetConfig+0x94c>
 8008e1c:	f04f 0320 	mov.w	r3, #32
 8008e20:	f04f 0400 	mov.w	r4, #0
 8008e24:	e026      	b.n	8008e74 <UART_SetConfig+0x94c>
 8008e26:	f04f 0310 	mov.w	r3, #16
 8008e2a:	f04f 0400 	mov.w	r4, #0
 8008e2e:	e021      	b.n	8008e74 <UART_SetConfig+0x94c>
 8008e30:	f04f 030c 	mov.w	r3, #12
 8008e34:	f04f 0400 	mov.w	r4, #0
 8008e38:	e01c      	b.n	8008e74 <UART_SetConfig+0x94c>
 8008e3a:	f04f 030a 	mov.w	r3, #10
 8008e3e:	f04f 0400 	mov.w	r4, #0
 8008e42:	e017      	b.n	8008e74 <UART_SetConfig+0x94c>
 8008e44:	f04f 0308 	mov.w	r3, #8
 8008e48:	f04f 0400 	mov.w	r4, #0
 8008e4c:	e012      	b.n	8008e74 <UART_SetConfig+0x94c>
 8008e4e:	f04f 0306 	mov.w	r3, #6
 8008e52:	f04f 0400 	mov.w	r4, #0
 8008e56:	e00d      	b.n	8008e74 <UART_SetConfig+0x94c>
 8008e58:	f04f 0304 	mov.w	r3, #4
 8008e5c:	f04f 0400 	mov.w	r4, #0
 8008e60:	e008      	b.n	8008e74 <UART_SetConfig+0x94c>
 8008e62:	f04f 0302 	mov.w	r3, #2
 8008e66:	f04f 0400 	mov.w	r4, #0
 8008e6a:	e003      	b.n	8008e74 <UART_SetConfig+0x94c>
 8008e6c:	f04f 0301 	mov.w	r3, #1
 8008e70:	f04f 0400 	mov.w	r4, #0
 8008e74:	461a      	mov	r2, r3
 8008e76:	4623      	mov	r3, r4
 8008e78:	f7f7 fa12 	bl	80002a0 <__aeabi_uldivmod>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	460c      	mov	r4, r1
 8008e80:	4619      	mov	r1, r3
 8008e82:	4622      	mov	r2, r4
 8008e84:	f04f 0300 	mov.w	r3, #0
 8008e88:	f04f 0400 	mov.w	r4, #0
 8008e8c:	0214      	lsls	r4, r2, #8
 8008e8e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008e92:	020b      	lsls	r3, r1, #8
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	6852      	ldr	r2, [r2, #4]
 8008e98:	0852      	lsrs	r2, r2, #1
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	f04f 0200 	mov.w	r2, #0
 8008ea0:	eb13 0b01 	adds.w	fp, r3, r1
 8008ea4:	eb44 0c02 	adc.w	ip, r4, r2
 8008ea8:	4658      	mov	r0, fp
 8008eaa:	4661      	mov	r1, ip
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	f04f 0400 	mov.w	r4, #0
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	4623      	mov	r3, r4
 8008eb8:	f7f7 f9f2 	bl	80002a0 <__aeabi_uldivmod>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8008ec2:	e0aa      	b.n	800901a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 8087 	beq.w	8008fdc <UART_SetConfig+0xab4>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d05b      	beq.n	8008f8e <UART_SetConfig+0xa66>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d052      	beq.n	8008f84 <UART_SetConfig+0xa5c>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d04a      	beq.n	8008f7c <UART_SetConfig+0xa54>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eea:	2b04      	cmp	r3, #4
 8008eec:	d041      	beq.n	8008f72 <UART_SetConfig+0xa4a>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	2b05      	cmp	r3, #5
 8008ef4:	d039      	beq.n	8008f6a <UART_SetConfig+0xa42>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	2b06      	cmp	r3, #6
 8008efc:	d031      	beq.n	8008f62 <UART_SetConfig+0xa3a>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f02:	2b07      	cmp	r3, #7
 8008f04:	d028      	beq.n	8008f58 <UART_SetConfig+0xa30>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0a:	2b08      	cmp	r3, #8
 8008f0c:	d01f      	beq.n	8008f4e <UART_SetConfig+0xa26>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	2b09      	cmp	r3, #9
 8008f14:	d016      	beq.n	8008f44 <UART_SetConfig+0xa1c>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1a:	2b0a      	cmp	r3, #10
 8008f1c:	d00d      	beq.n	8008f3a <UART_SetConfig+0xa12>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f22:	2b0b      	cmp	r3, #11
 8008f24:	d104      	bne.n	8008f30 <UART_SetConfig+0xa08>
 8008f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f2a:	f04f 0400 	mov.w	r4, #0
 8008f2e:	e059      	b.n	8008fe4 <UART_SetConfig+0xabc>
 8008f30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008f34:	f04f 0400 	mov.w	r4, #0
 8008f38:	e054      	b.n	8008fe4 <UART_SetConfig+0xabc>
 8008f3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f3e:	f04f 0400 	mov.w	r4, #0
 8008f42:	e04f      	b.n	8008fe4 <UART_SetConfig+0xabc>
 8008f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f48:	f04f 0400 	mov.w	r4, #0
 8008f4c:	e04a      	b.n	8008fe4 <UART_SetConfig+0xabc>
 8008f4e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008f52:	f04f 0400 	mov.w	r4, #0
 8008f56:	e045      	b.n	8008fe4 <UART_SetConfig+0xabc>
 8008f58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008f5c:	f04f 0400 	mov.w	r4, #0
 8008f60:	e040      	b.n	8008fe4 <UART_SetConfig+0xabc>
 8008f62:	4b1b      	ldr	r3, [pc, #108]	; (8008fd0 <UART_SetConfig+0xaa8>)
 8008f64:	f04f 0400 	mov.w	r4, #0
 8008f68:	e03c      	b.n	8008fe4 <UART_SetConfig+0xabc>
 8008f6a:	4b1a      	ldr	r3, [pc, #104]	; (8008fd4 <UART_SetConfig+0xaac>)
 8008f6c:	f04f 0400 	mov.w	r4, #0
 8008f70:	e038      	b.n	8008fe4 <UART_SetConfig+0xabc>
 8008f72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f76:	f04f 0400 	mov.w	r4, #0
 8008f7a:	e033      	b.n	8008fe4 <UART_SetConfig+0xabc>
 8008f7c:	4b16      	ldr	r3, [pc, #88]	; (8008fd8 <UART_SetConfig+0xab0>)
 8008f7e:	f04f 0400 	mov.w	r4, #0
 8008f82:	e02f      	b.n	8008fe4 <UART_SetConfig+0xabc>
 8008f84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008f88:	f04f 0400 	mov.w	r4, #0
 8008f8c:	e02a      	b.n	8008fe4 <UART_SetConfig+0xabc>
 8008f8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008f92:	f04f 0400 	mov.w	r4, #0
 8008f96:	e025      	b.n	8008fe4 <UART_SetConfig+0xabc>
 8008f98:	14585500 	.word	0x14585500
 8008f9c:	00000000 	.word	0x00000000
 8008fa0:	28b0aa00 	.word	0x28b0aa00
 8008fa4:	00000000 	.word	0x00000000
 8008fa8:	00f42400 	.word	0x00f42400
 8008fac:	f4240000 	.word	0xf4240000
 8008fb0:	01e84800 	.word	0x01e84800
 8008fb4:	03d09000 	.word	0x03d09000
 8008fb8:	07a12000 	.word	0x07a12000
 8008fbc:	0f424000 	.word	0x0f424000
 8008fc0:	186a0000 	.word	0x186a0000
 8008fc4:	1e848000 	.word	0x1e848000
 8008fc8:	3d090000 	.word	0x3d090000
 8008fcc:	7a120000 	.word	0x7a120000
 8008fd0:	000aaa00 	.word	0x000aaa00
 8008fd4:	000ccc00 	.word	0x000ccc00
 8008fd8:	00155500 	.word	0x00155500
 8008fdc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008fe0:	f04f 0400 	mov.w	r4, #0
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	6852      	ldr	r2, [r2, #4]
 8008fe8:	0852      	lsrs	r2, r2, #1
 8008fea:	4611      	mov	r1, r2
 8008fec:	f04f 0200 	mov.w	r2, #0
 8008ff0:	eb13 0b01 	adds.w	fp, r3, r1
 8008ff4:	eb44 0c02 	adc.w	ip, r4, r2
 8008ff8:	4658      	mov	r0, fp
 8008ffa:	4661      	mov	r1, ip
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f04f 0400 	mov.w	r4, #0
 8009004:	461a      	mov	r2, r3
 8009006:	4623      	mov	r3, r4
 8009008:	f7f7 f94a 	bl	80002a0 <__aeabi_uldivmod>
 800900c:	4603      	mov	r3, r0
 800900e:	460c      	mov	r4, r1
 8009010:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8009012:	e002      	b.n	800901a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	74fb      	strb	r3, [r7, #19]
            break;
 8009018:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009020:	d309      	bcc.n	8009036 <UART_SetConfig+0xb0e>
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009028:	d205      	bcs.n	8009036 <UART_SetConfig+0xb0e>
        {
          huart->Instance->BRR = usartdiv;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	60da      	str	r2, [r3, #12]
 8009032:	f000 bc0f 	b.w	8009854 <UART_SetConfig+0x132c>
        }
        else
        {
          ret = HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	74fb      	strb	r3, [r7, #19]
 800903a:	f000 bc0b 	b.w	8009854 <UART_SetConfig+0x132c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	69db      	ldr	r3, [r3, #28]
 8009042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009046:	f040 81ff 	bne.w	8009448 <UART_SetConfig+0xf20>
  {
    switch (clocksource)
 800904a:	7efb      	ldrb	r3, [r7, #27]
 800904c:	2b08      	cmp	r3, #8
 800904e:	f200 81db 	bhi.w	8009408 <UART_SetConfig+0xee0>
 8009052:	a201      	add	r2, pc, #4	; (adr r2, 8009058 <UART_SetConfig+0xb30>)
 8009054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009058:	0800907d 	.word	0x0800907d
 800905c:	08009133 	.word	0x08009133
 8009060:	080091e9 	.word	0x080091e9
 8009064:	08009409 	.word	0x08009409
 8009068:	08009291 	.word	0x08009291
 800906c:	08009409 	.word	0x08009409
 8009070:	08009409 	.word	0x08009409
 8009074:	08009409 	.word	0x08009409
 8009078:	08009347 	.word	0x08009347
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800907c:	f7fd fcd6 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 8009080:	4602      	mov	r2, r0
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009086:	2b00      	cmp	r3, #0
 8009088:	d044      	beq.n	8009114 <UART_SetConfig+0xbec>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908e:	2b01      	cmp	r3, #1
 8009090:	d03e      	beq.n	8009110 <UART_SetConfig+0xbe8>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	2b02      	cmp	r3, #2
 8009098:	d038      	beq.n	800910c <UART_SetConfig+0xbe4>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d032      	beq.n	8009108 <UART_SetConfig+0xbe0>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	d02c      	beq.n	8009104 <UART_SetConfig+0xbdc>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ae:	2b05      	cmp	r3, #5
 80090b0:	d026      	beq.n	8009100 <UART_SetConfig+0xbd8>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b6:	2b06      	cmp	r3, #6
 80090b8:	d020      	beq.n	80090fc <UART_SetConfig+0xbd4>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090be:	2b07      	cmp	r3, #7
 80090c0:	d01a      	beq.n	80090f8 <UART_SetConfig+0xbd0>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	2b08      	cmp	r3, #8
 80090c8:	d014      	beq.n	80090f4 <UART_SetConfig+0xbcc>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	2b09      	cmp	r3, #9
 80090d0:	d00e      	beq.n	80090f0 <UART_SetConfig+0xbc8>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d6:	2b0a      	cmp	r3, #10
 80090d8:	d008      	beq.n	80090ec <UART_SetConfig+0xbc4>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	2b0b      	cmp	r3, #11
 80090e0:	d102      	bne.n	80090e8 <UART_SetConfig+0xbc0>
 80090e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090e6:	e016      	b.n	8009116 <UART_SetConfig+0xbee>
 80090e8:	2301      	movs	r3, #1
 80090ea:	e014      	b.n	8009116 <UART_SetConfig+0xbee>
 80090ec:	2380      	movs	r3, #128	; 0x80
 80090ee:	e012      	b.n	8009116 <UART_SetConfig+0xbee>
 80090f0:	2340      	movs	r3, #64	; 0x40
 80090f2:	e010      	b.n	8009116 <UART_SetConfig+0xbee>
 80090f4:	2320      	movs	r3, #32
 80090f6:	e00e      	b.n	8009116 <UART_SetConfig+0xbee>
 80090f8:	2310      	movs	r3, #16
 80090fa:	e00c      	b.n	8009116 <UART_SetConfig+0xbee>
 80090fc:	230c      	movs	r3, #12
 80090fe:	e00a      	b.n	8009116 <UART_SetConfig+0xbee>
 8009100:	230a      	movs	r3, #10
 8009102:	e008      	b.n	8009116 <UART_SetConfig+0xbee>
 8009104:	2308      	movs	r3, #8
 8009106:	e006      	b.n	8009116 <UART_SetConfig+0xbee>
 8009108:	2306      	movs	r3, #6
 800910a:	e004      	b.n	8009116 <UART_SetConfig+0xbee>
 800910c:	2304      	movs	r3, #4
 800910e:	e002      	b.n	8009116 <UART_SetConfig+0xbee>
 8009110:	2302      	movs	r3, #2
 8009112:	e000      	b.n	8009116 <UART_SetConfig+0xbee>
 8009114:	2301      	movs	r3, #1
 8009116:	fbb2 f3f3 	udiv	r3, r2, r3
 800911a:	005a      	lsls	r2, r3, #1
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	085b      	lsrs	r3, r3, #1
 8009122:	441a      	add	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	fbb2 f3f3 	udiv	r3, r2, r3
 800912c:	b29b      	uxth	r3, r3
 800912e:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8009130:	e16d      	b.n	800940e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009132:	f7fd fc91 	bl	8006a58 <HAL_RCC_GetPCLK2Freq>
 8009136:	4602      	mov	r2, r0
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	2b00      	cmp	r3, #0
 800913e:	d044      	beq.n	80091ca <UART_SetConfig+0xca2>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009144:	2b01      	cmp	r3, #1
 8009146:	d03e      	beq.n	80091c6 <UART_SetConfig+0xc9e>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	2b02      	cmp	r3, #2
 800914e:	d038      	beq.n	80091c2 <UART_SetConfig+0xc9a>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	2b03      	cmp	r3, #3
 8009156:	d032      	beq.n	80091be <UART_SetConfig+0xc96>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	2b04      	cmp	r3, #4
 800915e:	d02c      	beq.n	80091ba <UART_SetConfig+0xc92>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	2b05      	cmp	r3, #5
 8009166:	d026      	beq.n	80091b6 <UART_SetConfig+0xc8e>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	2b06      	cmp	r3, #6
 800916e:	d020      	beq.n	80091b2 <UART_SetConfig+0xc8a>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009174:	2b07      	cmp	r3, #7
 8009176:	d01a      	beq.n	80091ae <UART_SetConfig+0xc86>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917c:	2b08      	cmp	r3, #8
 800917e:	d014      	beq.n	80091aa <UART_SetConfig+0xc82>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009184:	2b09      	cmp	r3, #9
 8009186:	d00e      	beq.n	80091a6 <UART_SetConfig+0xc7e>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918c:	2b0a      	cmp	r3, #10
 800918e:	d008      	beq.n	80091a2 <UART_SetConfig+0xc7a>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009194:	2b0b      	cmp	r3, #11
 8009196:	d102      	bne.n	800919e <UART_SetConfig+0xc76>
 8009198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800919c:	e016      	b.n	80091cc <UART_SetConfig+0xca4>
 800919e:	2301      	movs	r3, #1
 80091a0:	e014      	b.n	80091cc <UART_SetConfig+0xca4>
 80091a2:	2380      	movs	r3, #128	; 0x80
 80091a4:	e012      	b.n	80091cc <UART_SetConfig+0xca4>
 80091a6:	2340      	movs	r3, #64	; 0x40
 80091a8:	e010      	b.n	80091cc <UART_SetConfig+0xca4>
 80091aa:	2320      	movs	r3, #32
 80091ac:	e00e      	b.n	80091cc <UART_SetConfig+0xca4>
 80091ae:	2310      	movs	r3, #16
 80091b0:	e00c      	b.n	80091cc <UART_SetConfig+0xca4>
 80091b2:	230c      	movs	r3, #12
 80091b4:	e00a      	b.n	80091cc <UART_SetConfig+0xca4>
 80091b6:	230a      	movs	r3, #10
 80091b8:	e008      	b.n	80091cc <UART_SetConfig+0xca4>
 80091ba:	2308      	movs	r3, #8
 80091bc:	e006      	b.n	80091cc <UART_SetConfig+0xca4>
 80091be:	2306      	movs	r3, #6
 80091c0:	e004      	b.n	80091cc <UART_SetConfig+0xca4>
 80091c2:	2304      	movs	r3, #4
 80091c4:	e002      	b.n	80091cc <UART_SetConfig+0xca4>
 80091c6:	2302      	movs	r3, #2
 80091c8:	e000      	b.n	80091cc <UART_SetConfig+0xca4>
 80091ca:	2301      	movs	r3, #1
 80091cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d0:	005a      	lsls	r2, r3, #1
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	085b      	lsrs	r3, r3, #1
 80091d8:	441a      	add	r2, r3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80091e6:	e112      	b.n	800940e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d043      	beq.n	8009278 <UART_SetConfig+0xd50>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d03d      	beq.n	8009274 <UART_SetConfig+0xd4c>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d037      	beq.n	8009270 <UART_SetConfig+0xd48>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009204:	2b03      	cmp	r3, #3
 8009206:	d031      	beq.n	800926c <UART_SetConfig+0xd44>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920c:	2b04      	cmp	r3, #4
 800920e:	d02b      	beq.n	8009268 <UART_SetConfig+0xd40>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	2b05      	cmp	r3, #5
 8009216:	d025      	beq.n	8009264 <UART_SetConfig+0xd3c>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921c:	2b06      	cmp	r3, #6
 800921e:	d01f      	beq.n	8009260 <UART_SetConfig+0xd38>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009224:	2b07      	cmp	r3, #7
 8009226:	d019      	beq.n	800925c <UART_SetConfig+0xd34>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	2b08      	cmp	r3, #8
 800922e:	d013      	beq.n	8009258 <UART_SetConfig+0xd30>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009234:	2b09      	cmp	r3, #9
 8009236:	d00d      	beq.n	8009254 <UART_SetConfig+0xd2c>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923c:	2b0a      	cmp	r3, #10
 800923e:	d007      	beq.n	8009250 <UART_SetConfig+0xd28>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009244:	2b0b      	cmp	r3, #11
 8009246:	d101      	bne.n	800924c <UART_SetConfig+0xd24>
 8009248:	4b8c      	ldr	r3, [pc, #560]	; (800947c <UART_SetConfig+0xf54>)
 800924a:	e016      	b.n	800927a <UART_SetConfig+0xd52>
 800924c:	4b8c      	ldr	r3, [pc, #560]	; (8009480 <UART_SetConfig+0xf58>)
 800924e:	e014      	b.n	800927a <UART_SetConfig+0xd52>
 8009250:	4b8c      	ldr	r3, [pc, #560]	; (8009484 <UART_SetConfig+0xf5c>)
 8009252:	e012      	b.n	800927a <UART_SetConfig+0xd52>
 8009254:	4b8c      	ldr	r3, [pc, #560]	; (8009488 <UART_SetConfig+0xf60>)
 8009256:	e010      	b.n	800927a <UART_SetConfig+0xd52>
 8009258:	4b8c      	ldr	r3, [pc, #560]	; (800948c <UART_SetConfig+0xf64>)
 800925a:	e00e      	b.n	800927a <UART_SetConfig+0xd52>
 800925c:	4b8c      	ldr	r3, [pc, #560]	; (8009490 <UART_SetConfig+0xf68>)
 800925e:	e00c      	b.n	800927a <UART_SetConfig+0xd52>
 8009260:	4b8c      	ldr	r3, [pc, #560]	; (8009494 <UART_SetConfig+0xf6c>)
 8009262:	e00a      	b.n	800927a <UART_SetConfig+0xd52>
 8009264:	4b8c      	ldr	r3, [pc, #560]	; (8009498 <UART_SetConfig+0xf70>)
 8009266:	e008      	b.n	800927a <UART_SetConfig+0xd52>
 8009268:	4b8c      	ldr	r3, [pc, #560]	; (800949c <UART_SetConfig+0xf74>)
 800926a:	e006      	b.n	800927a <UART_SetConfig+0xd52>
 800926c:	4b8c      	ldr	r3, [pc, #560]	; (80094a0 <UART_SetConfig+0xf78>)
 800926e:	e004      	b.n	800927a <UART_SetConfig+0xd52>
 8009270:	4b8c      	ldr	r3, [pc, #560]	; (80094a4 <UART_SetConfig+0xf7c>)
 8009272:	e002      	b.n	800927a <UART_SetConfig+0xd52>
 8009274:	4b8c      	ldr	r3, [pc, #560]	; (80094a8 <UART_SetConfig+0xf80>)
 8009276:	e000      	b.n	800927a <UART_SetConfig+0xd52>
 8009278:	4b81      	ldr	r3, [pc, #516]	; (8009480 <UART_SetConfig+0xf58>)
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	6852      	ldr	r2, [r2, #4]
 800927e:	0852      	lsrs	r2, r2, #1
 8009280:	441a      	add	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	fbb2 f3f3 	udiv	r3, r2, r3
 800928a:	b29b      	uxth	r3, r3
 800928c:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800928e:	e0be      	b.n	800940e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009290:	f7fd fb36 	bl	8006900 <HAL_RCC_GetSysClockFreq>
 8009294:	4602      	mov	r2, r0
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929a:	2b00      	cmp	r3, #0
 800929c:	d044      	beq.n	8009328 <UART_SetConfig+0xe00>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d03e      	beq.n	8009324 <UART_SetConfig+0xdfc>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d038      	beq.n	8009320 <UART_SetConfig+0xdf8>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b2:	2b03      	cmp	r3, #3
 80092b4:	d032      	beq.n	800931c <UART_SetConfig+0xdf4>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	d02c      	beq.n	8009318 <UART_SetConfig+0xdf0>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c2:	2b05      	cmp	r3, #5
 80092c4:	d026      	beq.n	8009314 <UART_SetConfig+0xdec>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ca:	2b06      	cmp	r3, #6
 80092cc:	d020      	beq.n	8009310 <UART_SetConfig+0xde8>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	2b07      	cmp	r3, #7
 80092d4:	d01a      	beq.n	800930c <UART_SetConfig+0xde4>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092da:	2b08      	cmp	r3, #8
 80092dc:	d014      	beq.n	8009308 <UART_SetConfig+0xde0>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e2:	2b09      	cmp	r3, #9
 80092e4:	d00e      	beq.n	8009304 <UART_SetConfig+0xddc>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ea:	2b0a      	cmp	r3, #10
 80092ec:	d008      	beq.n	8009300 <UART_SetConfig+0xdd8>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f2:	2b0b      	cmp	r3, #11
 80092f4:	d102      	bne.n	80092fc <UART_SetConfig+0xdd4>
 80092f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092fa:	e016      	b.n	800932a <UART_SetConfig+0xe02>
 80092fc:	2301      	movs	r3, #1
 80092fe:	e014      	b.n	800932a <UART_SetConfig+0xe02>
 8009300:	2380      	movs	r3, #128	; 0x80
 8009302:	e012      	b.n	800932a <UART_SetConfig+0xe02>
 8009304:	2340      	movs	r3, #64	; 0x40
 8009306:	e010      	b.n	800932a <UART_SetConfig+0xe02>
 8009308:	2320      	movs	r3, #32
 800930a:	e00e      	b.n	800932a <UART_SetConfig+0xe02>
 800930c:	2310      	movs	r3, #16
 800930e:	e00c      	b.n	800932a <UART_SetConfig+0xe02>
 8009310:	230c      	movs	r3, #12
 8009312:	e00a      	b.n	800932a <UART_SetConfig+0xe02>
 8009314:	230a      	movs	r3, #10
 8009316:	e008      	b.n	800932a <UART_SetConfig+0xe02>
 8009318:	2308      	movs	r3, #8
 800931a:	e006      	b.n	800932a <UART_SetConfig+0xe02>
 800931c:	2306      	movs	r3, #6
 800931e:	e004      	b.n	800932a <UART_SetConfig+0xe02>
 8009320:	2304      	movs	r3, #4
 8009322:	e002      	b.n	800932a <UART_SetConfig+0xe02>
 8009324:	2302      	movs	r3, #2
 8009326:	e000      	b.n	800932a <UART_SetConfig+0xe02>
 8009328:	2301      	movs	r3, #1
 800932a:	fbb2 f3f3 	udiv	r3, r2, r3
 800932e:	005a      	lsls	r2, r3, #1
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	085b      	lsrs	r3, r3, #1
 8009336:	441a      	add	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009340:	b29b      	uxth	r3, r3
 8009342:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8009344:	e063      	b.n	800940e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934a:	2b00      	cmp	r3, #0
 800934c:	d04f      	beq.n	80093ee <UART_SetConfig+0xec6>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009352:	2b01      	cmp	r3, #1
 8009354:	d048      	beq.n	80093e8 <UART_SetConfig+0xec0>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935a:	2b02      	cmp	r3, #2
 800935c:	d041      	beq.n	80093e2 <UART_SetConfig+0xeba>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	2b03      	cmp	r3, #3
 8009364:	d03a      	beq.n	80093dc <UART_SetConfig+0xeb4>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	2b04      	cmp	r3, #4
 800936c:	d033      	beq.n	80093d6 <UART_SetConfig+0xeae>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009372:	2b05      	cmp	r3, #5
 8009374:	d02c      	beq.n	80093d0 <UART_SetConfig+0xea8>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937a:	2b06      	cmp	r3, #6
 800937c:	d025      	beq.n	80093ca <UART_SetConfig+0xea2>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009382:	2b07      	cmp	r3, #7
 8009384:	d01e      	beq.n	80093c4 <UART_SetConfig+0xe9c>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938a:	2b08      	cmp	r3, #8
 800938c:	d017      	beq.n	80093be <UART_SetConfig+0xe96>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	2b09      	cmp	r3, #9
 8009394:	d010      	beq.n	80093b8 <UART_SetConfig+0xe90>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939a:	2b0a      	cmp	r3, #10
 800939c:	d009      	beq.n	80093b2 <UART_SetConfig+0xe8a>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a2:	2b0b      	cmp	r3, #11
 80093a4:	d102      	bne.n	80093ac <UART_SetConfig+0xe84>
 80093a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093aa:	e022      	b.n	80093f2 <UART_SetConfig+0xeca>
 80093ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80093b0:	e01f      	b.n	80093f2 <UART_SetConfig+0xeca>
 80093b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093b6:	e01c      	b.n	80093f2 <UART_SetConfig+0xeca>
 80093b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093bc:	e019      	b.n	80093f2 <UART_SetConfig+0xeca>
 80093be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093c2:	e016      	b.n	80093f2 <UART_SetConfig+0xeca>
 80093c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093c8:	e013      	b.n	80093f2 <UART_SetConfig+0xeca>
 80093ca:	f241 5354 	movw	r3, #5460	; 0x1554
 80093ce:	e010      	b.n	80093f2 <UART_SetConfig+0xeca>
 80093d0:	f641 1398 	movw	r3, #6552	; 0x1998
 80093d4:	e00d      	b.n	80093f2 <UART_SetConfig+0xeca>
 80093d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093da:	e00a      	b.n	80093f2 <UART_SetConfig+0xeca>
 80093dc:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80093e0:	e007      	b.n	80093f2 <UART_SetConfig+0xeca>
 80093e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80093e6:	e004      	b.n	80093f2 <UART_SetConfig+0xeca>
 80093e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093ec:	e001      	b.n	80093f2 <UART_SetConfig+0xeca>
 80093ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	6852      	ldr	r2, [r2, #4]
 80093f6:	0852      	lsrs	r2, r2, #1
 80093f8:	441a      	add	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009402:	b29b      	uxth	r3, r3
 8009404:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8009406:	e002      	b.n	800940e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	74fb      	strb	r3, [r7, #19]
        break;
 800940c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	2b0f      	cmp	r3, #15
 8009412:	d916      	bls.n	8009442 <UART_SetConfig+0xf1a>
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800941a:	d212      	bcs.n	8009442 <UART_SetConfig+0xf1a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	b29b      	uxth	r3, r3
 8009420:	f023 030f 	bic.w	r3, r3, #15
 8009424:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	085b      	lsrs	r3, r3, #1
 800942a:	b29b      	uxth	r3, r3
 800942c:	f003 0307 	and.w	r3, r3, #7
 8009430:	b29a      	uxth	r2, r3
 8009432:	897b      	ldrh	r3, [r7, #10]
 8009434:	4313      	orrs	r3, r2
 8009436:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	897a      	ldrh	r2, [r7, #10]
 800943e:	60da      	str	r2, [r3, #12]
 8009440:	e208      	b.n	8009854 <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	74fb      	strb	r3, [r7, #19]
 8009446:	e205      	b.n	8009854 <UART_SetConfig+0x132c>
    }
  }
  else
  {
    switch (clocksource)
 8009448:	7efb      	ldrb	r3, [r7, #27]
 800944a:	2b08      	cmp	r3, #8
 800944c:	f200 81f1 	bhi.w	8009832 <UART_SetConfig+0x130a>
 8009450:	a201      	add	r2, pc, #4	; (adr r2, 8009458 <UART_SetConfig+0xf30>)
 8009452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009456:	bf00      	nop
 8009458:	080094ad 	.word	0x080094ad
 800945c:	08009561 	.word	0x08009561
 8009460:	08009615 	.word	0x08009615
 8009464:	08009833 	.word	0x08009833
 8009468:	080096bf 	.word	0x080096bf
 800946c:	08009833 	.word	0x08009833
 8009470:	08009833 	.word	0x08009833
 8009474:	08009833 	.word	0x08009833
 8009478:	08009773 	.word	0x08009773
 800947c:	0001e848 	.word	0x0001e848
 8009480:	01e84800 	.word	0x01e84800
 8009484:	0003d090 	.word	0x0003d090
 8009488:	0007a120 	.word	0x0007a120
 800948c:	000f4240 	.word	0x000f4240
 8009490:	001e8480 	.word	0x001e8480
 8009494:	0028b0aa 	.word	0x0028b0aa
 8009498:	0030d400 	.word	0x0030d400
 800949c:	003d0900 	.word	0x003d0900
 80094a0:	00516154 	.word	0x00516154
 80094a4:	007a1200 	.word	0x007a1200
 80094a8:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094ac:	f7fd fabe 	bl	8006a2c <HAL_RCC_GetPCLK1Freq>
 80094b0:	4602      	mov	r2, r0
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d044      	beq.n	8009544 <UART_SetConfig+0x101c>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d03e      	beq.n	8009540 <UART_SetConfig+0x1018>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d038      	beq.n	800953c <UART_SetConfig+0x1014>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d032      	beq.n	8009538 <UART_SetConfig+0x1010>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d6:	2b04      	cmp	r3, #4
 80094d8:	d02c      	beq.n	8009534 <UART_SetConfig+0x100c>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094de:	2b05      	cmp	r3, #5
 80094e0:	d026      	beq.n	8009530 <UART_SetConfig+0x1008>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e6:	2b06      	cmp	r3, #6
 80094e8:	d020      	beq.n	800952c <UART_SetConfig+0x1004>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	2b07      	cmp	r3, #7
 80094f0:	d01a      	beq.n	8009528 <UART_SetConfig+0x1000>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	2b08      	cmp	r3, #8
 80094f8:	d014      	beq.n	8009524 <UART_SetConfig+0xffc>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fe:	2b09      	cmp	r3, #9
 8009500:	d00e      	beq.n	8009520 <UART_SetConfig+0xff8>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	2b0a      	cmp	r3, #10
 8009508:	d008      	beq.n	800951c <UART_SetConfig+0xff4>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950e:	2b0b      	cmp	r3, #11
 8009510:	d102      	bne.n	8009518 <UART_SetConfig+0xff0>
 8009512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009516:	e016      	b.n	8009546 <UART_SetConfig+0x101e>
 8009518:	2301      	movs	r3, #1
 800951a:	e014      	b.n	8009546 <UART_SetConfig+0x101e>
 800951c:	2380      	movs	r3, #128	; 0x80
 800951e:	e012      	b.n	8009546 <UART_SetConfig+0x101e>
 8009520:	2340      	movs	r3, #64	; 0x40
 8009522:	e010      	b.n	8009546 <UART_SetConfig+0x101e>
 8009524:	2320      	movs	r3, #32
 8009526:	e00e      	b.n	8009546 <UART_SetConfig+0x101e>
 8009528:	2310      	movs	r3, #16
 800952a:	e00c      	b.n	8009546 <UART_SetConfig+0x101e>
 800952c:	230c      	movs	r3, #12
 800952e:	e00a      	b.n	8009546 <UART_SetConfig+0x101e>
 8009530:	230a      	movs	r3, #10
 8009532:	e008      	b.n	8009546 <UART_SetConfig+0x101e>
 8009534:	2308      	movs	r3, #8
 8009536:	e006      	b.n	8009546 <UART_SetConfig+0x101e>
 8009538:	2306      	movs	r3, #6
 800953a:	e004      	b.n	8009546 <UART_SetConfig+0x101e>
 800953c:	2304      	movs	r3, #4
 800953e:	e002      	b.n	8009546 <UART_SetConfig+0x101e>
 8009540:	2302      	movs	r3, #2
 8009542:	e000      	b.n	8009546 <UART_SetConfig+0x101e>
 8009544:	2301      	movs	r3, #1
 8009546:	fbb2 f2f3 	udiv	r2, r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	085b      	lsrs	r3, r3, #1
 8009550:	441a      	add	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	fbb2 f3f3 	udiv	r3, r2, r3
 800955a:	b29b      	uxth	r3, r3
 800955c:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800955e:	e16b      	b.n	8009838 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009560:	f7fd fa7a 	bl	8006a58 <HAL_RCC_GetPCLK2Freq>
 8009564:	4602      	mov	r2, r0
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956a:	2b00      	cmp	r3, #0
 800956c:	d044      	beq.n	80095f8 <UART_SetConfig+0x10d0>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009572:	2b01      	cmp	r3, #1
 8009574:	d03e      	beq.n	80095f4 <UART_SetConfig+0x10cc>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957a:	2b02      	cmp	r3, #2
 800957c:	d038      	beq.n	80095f0 <UART_SetConfig+0x10c8>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009582:	2b03      	cmp	r3, #3
 8009584:	d032      	beq.n	80095ec <UART_SetConfig+0x10c4>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958a:	2b04      	cmp	r3, #4
 800958c:	d02c      	beq.n	80095e8 <UART_SetConfig+0x10c0>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009592:	2b05      	cmp	r3, #5
 8009594:	d026      	beq.n	80095e4 <UART_SetConfig+0x10bc>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959a:	2b06      	cmp	r3, #6
 800959c:	d020      	beq.n	80095e0 <UART_SetConfig+0x10b8>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a2:	2b07      	cmp	r3, #7
 80095a4:	d01a      	beq.n	80095dc <UART_SetConfig+0x10b4>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095aa:	2b08      	cmp	r3, #8
 80095ac:	d014      	beq.n	80095d8 <UART_SetConfig+0x10b0>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b2:	2b09      	cmp	r3, #9
 80095b4:	d00e      	beq.n	80095d4 <UART_SetConfig+0x10ac>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ba:	2b0a      	cmp	r3, #10
 80095bc:	d008      	beq.n	80095d0 <UART_SetConfig+0x10a8>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c2:	2b0b      	cmp	r3, #11
 80095c4:	d102      	bne.n	80095cc <UART_SetConfig+0x10a4>
 80095c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095ca:	e016      	b.n	80095fa <UART_SetConfig+0x10d2>
 80095cc:	2301      	movs	r3, #1
 80095ce:	e014      	b.n	80095fa <UART_SetConfig+0x10d2>
 80095d0:	2380      	movs	r3, #128	; 0x80
 80095d2:	e012      	b.n	80095fa <UART_SetConfig+0x10d2>
 80095d4:	2340      	movs	r3, #64	; 0x40
 80095d6:	e010      	b.n	80095fa <UART_SetConfig+0x10d2>
 80095d8:	2320      	movs	r3, #32
 80095da:	e00e      	b.n	80095fa <UART_SetConfig+0x10d2>
 80095dc:	2310      	movs	r3, #16
 80095de:	e00c      	b.n	80095fa <UART_SetConfig+0x10d2>
 80095e0:	230c      	movs	r3, #12
 80095e2:	e00a      	b.n	80095fa <UART_SetConfig+0x10d2>
 80095e4:	230a      	movs	r3, #10
 80095e6:	e008      	b.n	80095fa <UART_SetConfig+0x10d2>
 80095e8:	2308      	movs	r3, #8
 80095ea:	e006      	b.n	80095fa <UART_SetConfig+0x10d2>
 80095ec:	2306      	movs	r3, #6
 80095ee:	e004      	b.n	80095fa <UART_SetConfig+0x10d2>
 80095f0:	2304      	movs	r3, #4
 80095f2:	e002      	b.n	80095fa <UART_SetConfig+0x10d2>
 80095f4:	2302      	movs	r3, #2
 80095f6:	e000      	b.n	80095fa <UART_SetConfig+0x10d2>
 80095f8:	2301      	movs	r3, #1
 80095fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	085b      	lsrs	r3, r3, #1
 8009604:	441a      	add	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	fbb2 f3f3 	udiv	r3, r2, r3
 800960e:	b29b      	uxth	r3, r3
 8009610:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8009612:	e111      	b.n	8009838 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	2b00      	cmp	r3, #0
 800961a:	d044      	beq.n	80096a6 <UART_SetConfig+0x117e>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009620:	2b01      	cmp	r3, #1
 8009622:	d03e      	beq.n	80096a2 <UART_SetConfig+0x117a>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009628:	2b02      	cmp	r3, #2
 800962a:	d038      	beq.n	800969e <UART_SetConfig+0x1176>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009630:	2b03      	cmp	r3, #3
 8009632:	d032      	beq.n	800969a <UART_SetConfig+0x1172>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009638:	2b04      	cmp	r3, #4
 800963a:	d02c      	beq.n	8009696 <UART_SetConfig+0x116e>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009640:	2b05      	cmp	r3, #5
 8009642:	d026      	beq.n	8009692 <UART_SetConfig+0x116a>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009648:	2b06      	cmp	r3, #6
 800964a:	d020      	beq.n	800968e <UART_SetConfig+0x1166>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009650:	2b07      	cmp	r3, #7
 8009652:	d01a      	beq.n	800968a <UART_SetConfig+0x1162>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009658:	2b08      	cmp	r3, #8
 800965a:	d014      	beq.n	8009686 <UART_SetConfig+0x115e>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009660:	2b09      	cmp	r3, #9
 8009662:	d00e      	beq.n	8009682 <UART_SetConfig+0x115a>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	2b0a      	cmp	r3, #10
 800966a:	d008      	beq.n	800967e <UART_SetConfig+0x1156>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009670:	2b0b      	cmp	r3, #11
 8009672:	d102      	bne.n	800967a <UART_SetConfig+0x1152>
 8009674:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009678:	e016      	b.n	80096a8 <UART_SetConfig+0x1180>
 800967a:	4b80      	ldr	r3, [pc, #512]	; (800987c <UART_SetConfig+0x1354>)
 800967c:	e014      	b.n	80096a8 <UART_SetConfig+0x1180>
 800967e:	4b80      	ldr	r3, [pc, #512]	; (8009880 <UART_SetConfig+0x1358>)
 8009680:	e012      	b.n	80096a8 <UART_SetConfig+0x1180>
 8009682:	4b80      	ldr	r3, [pc, #512]	; (8009884 <UART_SetConfig+0x135c>)
 8009684:	e010      	b.n	80096a8 <UART_SetConfig+0x1180>
 8009686:	4b80      	ldr	r3, [pc, #512]	; (8009888 <UART_SetConfig+0x1360>)
 8009688:	e00e      	b.n	80096a8 <UART_SetConfig+0x1180>
 800968a:	4b80      	ldr	r3, [pc, #512]	; (800988c <UART_SetConfig+0x1364>)
 800968c:	e00c      	b.n	80096a8 <UART_SetConfig+0x1180>
 800968e:	4b80      	ldr	r3, [pc, #512]	; (8009890 <UART_SetConfig+0x1368>)
 8009690:	e00a      	b.n	80096a8 <UART_SetConfig+0x1180>
 8009692:	4b80      	ldr	r3, [pc, #512]	; (8009894 <UART_SetConfig+0x136c>)
 8009694:	e008      	b.n	80096a8 <UART_SetConfig+0x1180>
 8009696:	4b80      	ldr	r3, [pc, #512]	; (8009898 <UART_SetConfig+0x1370>)
 8009698:	e006      	b.n	80096a8 <UART_SetConfig+0x1180>
 800969a:	4b80      	ldr	r3, [pc, #512]	; (800989c <UART_SetConfig+0x1374>)
 800969c:	e004      	b.n	80096a8 <UART_SetConfig+0x1180>
 800969e:	4b80      	ldr	r3, [pc, #512]	; (80098a0 <UART_SetConfig+0x1378>)
 80096a0:	e002      	b.n	80096a8 <UART_SetConfig+0x1180>
 80096a2:	4b80      	ldr	r3, [pc, #512]	; (80098a4 <UART_SetConfig+0x137c>)
 80096a4:	e000      	b.n	80096a8 <UART_SetConfig+0x1180>
 80096a6:	4b75      	ldr	r3, [pc, #468]	; (800987c <UART_SetConfig+0x1354>)
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	6852      	ldr	r2, [r2, #4]
 80096ac:	0852      	lsrs	r2, r2, #1
 80096ae:	441a      	add	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80096bc:	e0bc      	b.n	8009838 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096be:	f7fd f91f 	bl	8006900 <HAL_RCC_GetSysClockFreq>
 80096c2:	4602      	mov	r2, r0
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d044      	beq.n	8009756 <UART_SetConfig+0x122e>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d03e      	beq.n	8009752 <UART_SetConfig+0x122a>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d038      	beq.n	800974e <UART_SetConfig+0x1226>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e0:	2b03      	cmp	r3, #3
 80096e2:	d032      	beq.n	800974a <UART_SetConfig+0x1222>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d02c      	beq.n	8009746 <UART_SetConfig+0x121e>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f0:	2b05      	cmp	r3, #5
 80096f2:	d026      	beq.n	8009742 <UART_SetConfig+0x121a>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f8:	2b06      	cmp	r3, #6
 80096fa:	d020      	beq.n	800973e <UART_SetConfig+0x1216>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	2b07      	cmp	r3, #7
 8009702:	d01a      	beq.n	800973a <UART_SetConfig+0x1212>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009708:	2b08      	cmp	r3, #8
 800970a:	d014      	beq.n	8009736 <UART_SetConfig+0x120e>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009710:	2b09      	cmp	r3, #9
 8009712:	d00e      	beq.n	8009732 <UART_SetConfig+0x120a>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009718:	2b0a      	cmp	r3, #10
 800971a:	d008      	beq.n	800972e <UART_SetConfig+0x1206>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009720:	2b0b      	cmp	r3, #11
 8009722:	d102      	bne.n	800972a <UART_SetConfig+0x1202>
 8009724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009728:	e016      	b.n	8009758 <UART_SetConfig+0x1230>
 800972a:	2301      	movs	r3, #1
 800972c:	e014      	b.n	8009758 <UART_SetConfig+0x1230>
 800972e:	2380      	movs	r3, #128	; 0x80
 8009730:	e012      	b.n	8009758 <UART_SetConfig+0x1230>
 8009732:	2340      	movs	r3, #64	; 0x40
 8009734:	e010      	b.n	8009758 <UART_SetConfig+0x1230>
 8009736:	2320      	movs	r3, #32
 8009738:	e00e      	b.n	8009758 <UART_SetConfig+0x1230>
 800973a:	2310      	movs	r3, #16
 800973c:	e00c      	b.n	8009758 <UART_SetConfig+0x1230>
 800973e:	230c      	movs	r3, #12
 8009740:	e00a      	b.n	8009758 <UART_SetConfig+0x1230>
 8009742:	230a      	movs	r3, #10
 8009744:	e008      	b.n	8009758 <UART_SetConfig+0x1230>
 8009746:	2308      	movs	r3, #8
 8009748:	e006      	b.n	8009758 <UART_SetConfig+0x1230>
 800974a:	2306      	movs	r3, #6
 800974c:	e004      	b.n	8009758 <UART_SetConfig+0x1230>
 800974e:	2304      	movs	r3, #4
 8009750:	e002      	b.n	8009758 <UART_SetConfig+0x1230>
 8009752:	2302      	movs	r3, #2
 8009754:	e000      	b.n	8009758 <UART_SetConfig+0x1230>
 8009756:	2301      	movs	r3, #1
 8009758:	fbb2 f2f3 	udiv	r2, r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	085b      	lsrs	r3, r3, #1
 8009762:	441a      	add	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	fbb2 f3f3 	udiv	r3, r2, r3
 800976c:	b29b      	uxth	r3, r3
 800976e:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8009770:	e062      	b.n	8009838 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009776:	2b00      	cmp	r3, #0
 8009778:	d04e      	beq.n	8009818 <UART_SetConfig+0x12f0>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977e:	2b01      	cmp	r3, #1
 8009780:	d047      	beq.n	8009812 <UART_SetConfig+0x12ea>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	2b02      	cmp	r3, #2
 8009788:	d040      	beq.n	800980c <UART_SetConfig+0x12e4>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	2b03      	cmp	r3, #3
 8009790:	d039      	beq.n	8009806 <UART_SetConfig+0x12de>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009796:	2b04      	cmp	r3, #4
 8009798:	d032      	beq.n	8009800 <UART_SetConfig+0x12d8>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979e:	2b05      	cmp	r3, #5
 80097a0:	d02b      	beq.n	80097fa <UART_SetConfig+0x12d2>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	2b06      	cmp	r3, #6
 80097a8:	d024      	beq.n	80097f4 <UART_SetConfig+0x12cc>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ae:	2b07      	cmp	r3, #7
 80097b0:	d01d      	beq.n	80097ee <UART_SetConfig+0x12c6>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b6:	2b08      	cmp	r3, #8
 80097b8:	d016      	beq.n	80097e8 <UART_SetConfig+0x12c0>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097be:	2b09      	cmp	r3, #9
 80097c0:	d00f      	beq.n	80097e2 <UART_SetConfig+0x12ba>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	2b0a      	cmp	r3, #10
 80097c8:	d008      	beq.n	80097dc <UART_SetConfig+0x12b4>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ce:	2b0b      	cmp	r3, #11
 80097d0:	d101      	bne.n	80097d6 <UART_SetConfig+0x12ae>
 80097d2:	2380      	movs	r3, #128	; 0x80
 80097d4:	e022      	b.n	800981c <UART_SetConfig+0x12f4>
 80097d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097da:	e01f      	b.n	800981c <UART_SetConfig+0x12f4>
 80097dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097e0:	e01c      	b.n	800981c <UART_SetConfig+0x12f4>
 80097e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097e6:	e019      	b.n	800981c <UART_SetConfig+0x12f4>
 80097e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ec:	e016      	b.n	800981c <UART_SetConfig+0x12f4>
 80097ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097f2:	e013      	b.n	800981c <UART_SetConfig+0x12f4>
 80097f4:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80097f8:	e010      	b.n	800981c <UART_SetConfig+0x12f4>
 80097fa:	f640 43cc 	movw	r3, #3276	; 0xccc
 80097fe:	e00d      	b.n	800981c <UART_SetConfig+0x12f4>
 8009800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009804:	e00a      	b.n	800981c <UART_SetConfig+0x12f4>
 8009806:	f241 5355 	movw	r3, #5461	; 0x1555
 800980a:	e007      	b.n	800981c <UART_SetConfig+0x12f4>
 800980c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009810:	e004      	b.n	800981c <UART_SetConfig+0x12f4>
 8009812:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009816:	e001      	b.n	800981c <UART_SetConfig+0x12f4>
 8009818:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	6852      	ldr	r2, [r2, #4]
 8009820:	0852      	lsrs	r2, r2, #1
 8009822:	441a      	add	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	fbb2 f3f3 	udiv	r3, r2, r3
 800982c:	b29b      	uxth	r3, r3
 800982e:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8009830:	e002      	b.n	8009838 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	74fb      	strb	r3, [r7, #19]
        break;
 8009836:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	2b0f      	cmp	r3, #15
 800983c:	d908      	bls.n	8009850 <UART_SetConfig+0x1328>
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009844:	d204      	bcs.n	8009850 <UART_SetConfig+0x1328>
    {
      huart->Instance->BRR = usartdiv;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	60da      	str	r2, [r3, #12]
 800984e:	e001      	b.n	8009854 <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	74fb      	strb	r3, [r7, #19]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009870:	7cfb      	ldrb	r3, [r7, #19]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3720      	adds	r7, #32
 8009876:	46bd      	mov	sp, r7
 8009878:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800987c:	00f42400 	.word	0x00f42400
 8009880:	0001e848 	.word	0x0001e848
 8009884:	0003d090 	.word	0x0003d090
 8009888:	0007a120 	.word	0x0007a120
 800988c:	000f4240 	.word	0x000f4240
 8009890:	00145855 	.word	0x00145855
 8009894:	00186a00 	.word	0x00186a00
 8009898:	001e8480 	.word	0x001e8480
 800989c:	0028b0aa 	.word	0x0028b0aa
 80098a0:	003d0900 	.word	0x003d0900
 80098a4:	007a1200 	.word	0x007a1200

080098a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00a      	beq.n	80098d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	430a      	orrs	r2, r1
 80098d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d6:	f003 0302 	and.w	r3, r3, #2
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00a      	beq.n	80098f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	430a      	orrs	r2, r1
 80098f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f8:	f003 0304 	and.w	r3, r3, #4
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00a      	beq.n	8009916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	430a      	orrs	r2, r1
 8009914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991a:	f003 0308 	and.w	r3, r3, #8
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00a      	beq.n	8009938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	430a      	orrs	r2, r1
 8009936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993c:	f003 0310 	and.w	r3, r3, #16
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00a      	beq.n	800995a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	430a      	orrs	r2, r1
 8009958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995e:	f003 0320 	and.w	r3, r3, #32
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00a      	beq.n	800997c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	430a      	orrs	r2, r1
 800997a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009984:	2b00      	cmp	r3, #0
 8009986:	d01a      	beq.n	80099be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	430a      	orrs	r2, r1
 800999c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099a6:	d10a      	bne.n	80099be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	430a      	orrs	r2, r1
 80099bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00a      	beq.n	80099e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	430a      	orrs	r2, r1
 80099de:	605a      	str	r2, [r3, #4]
  }
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af02      	add	r7, sp, #8
 80099f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80099fc:	f7fb fd38 	bl	8005470 <HAL_GetTick>
 8009a00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0308 	and.w	r3, r3, #8
 8009a0c:	2b08      	cmp	r3, #8
 8009a0e:	d10e      	bne.n	8009a2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f82c 	bl	8009a7c <UART_WaitOnFlagUntilTimeout>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e022      	b.n	8009a74 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b04      	cmp	r3, #4
 8009a3a:	d10e      	bne.n	8009a5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f816 	bl	8009a7c <UART_WaitOnFlagUntilTimeout>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a56:	2303      	movs	r3, #3
 8009a58:	e00c      	b.n	8009a74 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2220      	movs	r2, #32
 8009a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	603b      	str	r3, [r7, #0]
 8009a88:	4613      	mov	r3, r2
 8009a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a8c:	e02c      	b.n	8009ae8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a94:	d028      	beq.n	8009ae8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a96:	f7fb fceb 	bl	8005470 <HAL_GetTick>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	69ba      	ldr	r2, [r7, #24]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d302      	bcc.n	8009aac <UART_WaitOnFlagUntilTimeout+0x30>
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d11d      	bne.n	8009ae8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009aba:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	689a      	ldr	r2, [r3, #8]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f022 0201 	bic.w	r2, r2, #1
 8009aca:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2220      	movs	r2, #32
 8009ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2220      	movs	r2, #32
 8009ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	e00f      	b.n	8009b08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	69da      	ldr	r2, [r3, #28]
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	4013      	ands	r3, r2
 8009af2:	68ba      	ldr	r2, [r7, #8]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	bf0c      	ite	eq
 8009af8:	2301      	moveq	r3, #1
 8009afa:	2300      	movne	r3, #0
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	461a      	mov	r2, r3
 8009b00:	79fb      	ldrb	r3, [r7, #7]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d0c3      	beq.n	8009a8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d101      	bne.n	8009b26 <HAL_UARTEx_DisableFifoMode+0x16>
 8009b22:	2302      	movs	r3, #2
 8009b24:	e027      	b.n	8009b76 <HAL_UARTEx_DisableFifoMode+0x66>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2224      	movs	r2, #36	; 0x24
 8009b32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f022 0201 	bic.w	r2, r2, #1
 8009b4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2220      	movs	r2, #32
 8009b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b084      	sub	sp, #16
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d101      	bne.n	8009b9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b96:	2302      	movs	r3, #2
 8009b98:	e02d      	b.n	8009bf6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2224      	movs	r2, #36	; 0x24
 8009ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 0201 	bic.w	r2, r2, #1
 8009bc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	683a      	ldr	r2, [r7, #0]
 8009bd2:	430a      	orrs	r2, r1
 8009bd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f850 	bl	8009c7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2220      	movs	r2, #32
 8009be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d101      	bne.n	8009c16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c12:	2302      	movs	r3, #2
 8009c14:	e02d      	b.n	8009c72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2224      	movs	r2, #36	; 0x24
 8009c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f022 0201 	bic.w	r2, r2, #1
 8009c3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	683a      	ldr	r2, [r7, #0]
 8009c4e:	430a      	orrs	r2, r1
 8009c50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f812 	bl	8009c7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2220      	movs	r2, #32
 8009c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b089      	sub	sp, #36	; 0x24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009c84:	4a2f      	ldr	r2, [pc, #188]	; (8009d44 <UARTEx_SetNbDataToProcess+0xc8>)
 8009c86:	f107 0314 	add.w	r3, r7, #20
 8009c8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c8e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009c92:	4a2d      	ldr	r2, [pc, #180]	; (8009d48 <UARTEx_SetNbDataToProcess+0xcc>)
 8009c94:	f107 030c 	add.w	r3, r7, #12
 8009c98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c9c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d108      	bne.n	8009cba <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009cb8:	e03d      	b.n	8009d36 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009cba:	2308      	movs	r3, #8
 8009cbc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009cbe:	2308      	movs	r3, #8
 8009cc0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	0e5b      	lsrs	r3, r3, #25
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	f003 0307 	and.w	r3, r3, #7
 8009cd0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	0f5b      	lsrs	r3, r3, #29
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	f003 0307 	and.w	r3, r3, #7
 8009ce0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009ce2:	7fbb      	ldrb	r3, [r7, #30]
 8009ce4:	7f3a      	ldrb	r2, [r7, #28]
 8009ce6:	f107 0120 	add.w	r1, r7, #32
 8009cea:	440a      	add	r2, r1
 8009cec:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009cf0:	fb02 f303 	mul.w	r3, r2, r3
 8009cf4:	7f3a      	ldrb	r2, [r7, #28]
 8009cf6:	f107 0120 	add.w	r1, r7, #32
 8009cfa:	440a      	add	r2, r1
 8009cfc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009d00:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009d0c:	7ffb      	ldrb	r3, [r7, #31]
 8009d0e:	7f7a      	ldrb	r2, [r7, #29]
 8009d10:	f107 0120 	add.w	r1, r7, #32
 8009d14:	440a      	add	r2, r1
 8009d16:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009d1a:	fb02 f303 	mul.w	r3, r2, r3
 8009d1e:	7f7a      	ldrb	r2, [r7, #29]
 8009d20:	f107 0120 	add.w	r1, r7, #32
 8009d24:	440a      	add	r2, r1
 8009d26:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009d2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d36:	bf00      	nop
 8009d38:	3724      	adds	r7, #36	; 0x24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	0800b5c8 	.word	0x0800b5c8
 8009d48:	0800b5d0 	.word	0x0800b5d0

08009d4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d4c:	b084      	sub	sp, #16
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	f107 001c 	add.w	r0, r7, #28
 8009d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d122      	bne.n	8009daa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d105      	bne.n	8009d9e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fa1e 	bl	800a1e0 <USB_CoreReset>
 8009da4:	4603      	mov	r3, r0
 8009da6:	73fb      	strb	r3, [r7, #15]
 8009da8:	e01a      	b.n	8009de0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fa12 	bl	800a1e0 <USB_CoreReset>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d106      	bne.n	8009dd4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	639a      	str	r2, [r3, #56]	; 0x38
 8009dd2:	e005      	b.n	8009de0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8009de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009dec:	b004      	add	sp, #16
 8009dee:	4770      	bx	lr

08009df0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	f023 0201 	bic.w	r2, r3, #1
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b082      	sub	sp, #8
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d106      	bne.n	8009e3e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	60da      	str	r2, [r3, #12]
 8009e3c:	e00b      	b.n	8009e56 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e3e:	78fb      	ldrb	r3, [r7, #3]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d106      	bne.n	8009e52 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	60da      	str	r2, [r3, #12]
 8009e50:	e001      	b.n	8009e56 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e003      	b.n	8009e5e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009e56:	2032      	movs	r0, #50	; 0x32
 8009e58:	f7fb fb16 	bl	8005488 <HAL_Delay>

  return HAL_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
	...

08009e68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e68:	b084      	sub	sp, #16
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b086      	sub	sp, #24
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009e82:	2300      	movs	r3, #0
 8009e84:	613b      	str	r3, [r7, #16]
 8009e86:	e009      	b.n	8009e9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	3340      	adds	r3, #64	; 0x40
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	2200      	movs	r2, #0
 8009e94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	613b      	str	r3, [r7, #16]
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	2b0e      	cmp	r3, #14
 8009ea0:	d9f2      	bls.n	8009e88 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d112      	bne.n	8009ece <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	601a      	str	r2, [r3, #0]
 8009ecc:	e005      	b.n	8009eda <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eec:	4619      	mov	r1, r3
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	680b      	ldr	r3, [r1, #0]
 8009ef8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009efa:	2103      	movs	r1, #3
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f93d 	bl	800a17c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f02:	2110      	movs	r1, #16
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f8f1 	bl	800a0ec <USB_FlushTxFifo>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d001      	beq.n	8009f14 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f90f 	bl	800a138 <USB_FlushRxFifo>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f36:	461a      	mov	r2, r3
 8009f38:	2300      	movs	r3, #0
 8009f3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f42:	461a      	mov	r2, r3
 8009f44:	2300      	movs	r3, #0
 8009f46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f48:	2300      	movs	r3, #0
 8009f4a:	613b      	str	r3, [r7, #16]
 8009f4c:	e043      	b.n	8009fd6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	015a      	lsls	r2, r3, #5
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	4413      	add	r3, r2
 8009f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f64:	d118      	bne.n	8009f98 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10a      	bne.n	8009f82 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f78:	461a      	mov	r2, r3
 8009f7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f7e:	6013      	str	r3, [r2, #0]
 8009f80:	e013      	b.n	8009faa <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	015a      	lsls	r2, r3, #5
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	4413      	add	r3, r2
 8009f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	e008      	b.n	8009faa <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	2300      	movs	r3, #0
 8009fba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	015a      	lsls	r2, r3, #5
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fc8:	461a      	mov	r2, r3
 8009fca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009fce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	613b      	str	r3, [r7, #16]
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d3b7      	bcc.n	8009f4e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fde:	2300      	movs	r3, #0
 8009fe0:	613b      	str	r3, [r7, #16]
 8009fe2:	e043      	b.n	800a06c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	015a      	lsls	r2, r3, #5
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ffa:	d118      	bne.n	800a02e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10a      	bne.n	800a018 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	015a      	lsls	r2, r3, #5
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	4413      	add	r3, r2
 800a00a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a00e:	461a      	mov	r2, r3
 800a010:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a014:	6013      	str	r3, [r2, #0]
 800a016:	e013      	b.n	800a040 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a024:	461a      	mov	r2, r3
 800a026:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a02a:	6013      	str	r3, [r2, #0]
 800a02c:	e008      	b.n	800a040 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	015a      	lsls	r2, r3, #5
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	4413      	add	r3, r2
 800a036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a03a:	461a      	mov	r2, r3
 800a03c:	2300      	movs	r3, #0
 800a03e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	4413      	add	r3, r2
 800a048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a04c:	461a      	mov	r2, r3
 800a04e:	2300      	movs	r3, #0
 800a050:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	015a      	lsls	r2, r3, #5
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	4413      	add	r3, r2
 800a05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a05e:	461a      	mov	r2, r3
 800a060:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a064:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	3301      	adds	r3, #1
 800a06a:	613b      	str	r3, [r7, #16]
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	429a      	cmp	r2, r3
 800a072:	d3b7      	bcc.n	8009fe4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a082:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a086:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a094:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	f043 0210 	orr.w	r2, r3, #16
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	699a      	ldr	r2, [r3, #24]
 800a0a6:	4b10      	ldr	r3, [pc, #64]	; (800a0e8 <USB_DevInit+0x280>)
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d005      	beq.n	800a0c0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	f043 0208 	orr.w	r2, r3, #8
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a0c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d107      	bne.n	800a0d6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0ce:	f043 0304 	orr.w	r3, r3, #4
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a0d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3718      	adds	r7, #24
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0e2:	b004      	add	sp, #16
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	803c3800 	.word	0x803c3800

0800a0ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	019b      	lsls	r3, r3, #6
 800a0fe:	f043 0220 	orr.w	r2, r3, #32
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3301      	adds	r3, #1
 800a10a:	60fb      	str	r3, [r7, #12]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	4a09      	ldr	r2, [pc, #36]	; (800a134 <USB_FlushTxFifo+0x48>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d901      	bls.n	800a118 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	e006      	b.n	800a126 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	f003 0320 	and.w	r3, r3, #32
 800a120:	2b20      	cmp	r3, #32
 800a122:	d0f0      	beq.n	800a106 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	00030d40 	.word	0x00030d40

0800a138 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2210      	movs	r2, #16
 800a148:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	3301      	adds	r3, #1
 800a14e:	60fb      	str	r3, [r7, #12]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	4a09      	ldr	r2, [pc, #36]	; (800a178 <USB_FlushRxFifo+0x40>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d901      	bls.n	800a15c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a158:	2303      	movs	r3, #3
 800a15a:	e006      	b.n	800a16a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	f003 0310 	and.w	r3, r3, #16
 800a164:	2b10      	cmp	r3, #16
 800a166:	d0f0      	beq.n	800a14a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3714      	adds	r7, #20
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	00030d40 	.word	0x00030d40

0800a17c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	460b      	mov	r3, r1
 800a186:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	78fb      	ldrb	r3, [r7, #3]
 800a196:	68f9      	ldr	r1, [r7, #12]
 800a198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a19c:	4313      	orrs	r3, r2
 800a19e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3714      	adds	r7, #20
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr

0800a1ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b084      	sub	sp, #16
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1c8:	f043 0302 	orr.w	r3, r3, #2
 800a1cc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800a1ce:	2003      	movs	r0, #3
 800a1d0:	f7fb f95a 	bl	8005488 <HAL_Delay>

  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
	...

0800a1e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	4a13      	ldr	r2, [pc, #76]	; (800a244 <USB_CoreReset+0x64>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d901      	bls.n	800a1fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	e01b      	b.n	800a236 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	2b00      	cmp	r3, #0
 800a204:	daf2      	bge.n	800a1ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a206:	2300      	movs	r3, #0
 800a208:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	f043 0201 	orr.w	r2, r3, #1
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	3301      	adds	r3, #1
 800a21a:	60fb      	str	r3, [r7, #12]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4a09      	ldr	r2, [pc, #36]	; (800a244 <USB_CoreReset+0x64>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d901      	bls.n	800a228 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a224:	2303      	movs	r3, #3
 800a226:	e006      	b.n	800a236 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	f003 0301 	and.w	r3, r3, #1
 800a230:	2b01      	cmp	r3, #1
 800a232:	d0f0      	beq.n	800a216 <USB_CoreReset+0x36>

  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	00030d40 	.word	0x00030d40

0800a248 <__assert_func>:
 800a248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a24a:	461c      	mov	r4, r3
 800a24c:	4b09      	ldr	r3, [pc, #36]	; (800a274 <__assert_func+0x2c>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4605      	mov	r5, r0
 800a252:	68d8      	ldr	r0, [r3, #12]
 800a254:	b152      	cbz	r2, 800a26c <__assert_func+0x24>
 800a256:	4b08      	ldr	r3, [pc, #32]	; (800a278 <__assert_func+0x30>)
 800a258:	9100      	str	r1, [sp, #0]
 800a25a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a25e:	4907      	ldr	r1, [pc, #28]	; (800a27c <__assert_func+0x34>)
 800a260:	462b      	mov	r3, r5
 800a262:	4622      	mov	r2, r4
 800a264:	f000 f814 	bl	800a290 <fiprintf>
 800a268:	f000 fc70 	bl	800ab4c <abort>
 800a26c:	4b04      	ldr	r3, [pc, #16]	; (800a280 <__assert_func+0x38>)
 800a26e:	461a      	mov	r2, r3
 800a270:	e7f2      	b.n	800a258 <__assert_func+0x10>
 800a272:	bf00      	nop
 800a274:	20000070 	.word	0x20000070
 800a278:	0800bec0 	.word	0x0800bec0
 800a27c:	0800becd 	.word	0x0800becd
 800a280:	0800befb 	.word	0x0800befb

0800a284 <__errno>:
 800a284:	4b01      	ldr	r3, [pc, #4]	; (800a28c <__errno+0x8>)
 800a286:	6818      	ldr	r0, [r3, #0]
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	20000070 	.word	0x20000070

0800a290 <fiprintf>:
 800a290:	b40e      	push	{r1, r2, r3}
 800a292:	b503      	push	{r0, r1, lr}
 800a294:	4601      	mov	r1, r0
 800a296:	ab03      	add	r3, sp, #12
 800a298:	4805      	ldr	r0, [pc, #20]	; (800a2b0 <fiprintf+0x20>)
 800a29a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a29e:	6800      	ldr	r0, [r0, #0]
 800a2a0:	9301      	str	r3, [sp, #4]
 800a2a2:	f000 f867 	bl	800a374 <_vfiprintf_r>
 800a2a6:	b002      	add	sp, #8
 800a2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2ac:	b003      	add	sp, #12
 800a2ae:	4770      	bx	lr
 800a2b0:	20000070 	.word	0x20000070

0800a2b4 <__libc_init_array>:
 800a2b4:	b570      	push	{r4, r5, r6, lr}
 800a2b6:	4e0d      	ldr	r6, [pc, #52]	; (800a2ec <__libc_init_array+0x38>)
 800a2b8:	4c0d      	ldr	r4, [pc, #52]	; (800a2f0 <__libc_init_array+0x3c>)
 800a2ba:	1ba4      	subs	r4, r4, r6
 800a2bc:	10a4      	asrs	r4, r4, #2
 800a2be:	2500      	movs	r5, #0
 800a2c0:	42a5      	cmp	r5, r4
 800a2c2:	d109      	bne.n	800a2d8 <__libc_init_array+0x24>
 800a2c4:	4e0b      	ldr	r6, [pc, #44]	; (800a2f4 <__libc_init_array+0x40>)
 800a2c6:	4c0c      	ldr	r4, [pc, #48]	; (800a2f8 <__libc_init_array+0x44>)
 800a2c8:	f000 ffd0 	bl	800b26c <_init>
 800a2cc:	1ba4      	subs	r4, r4, r6
 800a2ce:	10a4      	asrs	r4, r4, #2
 800a2d0:	2500      	movs	r5, #0
 800a2d2:	42a5      	cmp	r5, r4
 800a2d4:	d105      	bne.n	800a2e2 <__libc_init_array+0x2e>
 800a2d6:	bd70      	pop	{r4, r5, r6, pc}
 800a2d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2dc:	4798      	blx	r3
 800a2de:	3501      	adds	r5, #1
 800a2e0:	e7ee      	b.n	800a2c0 <__libc_init_array+0xc>
 800a2e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2e6:	4798      	blx	r3
 800a2e8:	3501      	adds	r5, #1
 800a2ea:	e7f2      	b.n	800a2d2 <__libc_init_array+0x1e>
 800a2ec:	0800bf9c 	.word	0x0800bf9c
 800a2f0:	0800bf9c 	.word	0x0800bf9c
 800a2f4:	0800bf9c 	.word	0x0800bf9c
 800a2f8:	0800bfa0 	.word	0x0800bfa0

0800a2fc <memcpy>:
 800a2fc:	b510      	push	{r4, lr}
 800a2fe:	1e43      	subs	r3, r0, #1
 800a300:	440a      	add	r2, r1
 800a302:	4291      	cmp	r1, r2
 800a304:	d100      	bne.n	800a308 <memcpy+0xc>
 800a306:	bd10      	pop	{r4, pc}
 800a308:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a30c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a310:	e7f7      	b.n	800a302 <memcpy+0x6>

0800a312 <memset>:
 800a312:	4402      	add	r2, r0
 800a314:	4603      	mov	r3, r0
 800a316:	4293      	cmp	r3, r2
 800a318:	d100      	bne.n	800a31c <memset+0xa>
 800a31a:	4770      	bx	lr
 800a31c:	f803 1b01 	strb.w	r1, [r3], #1
 800a320:	e7f9      	b.n	800a316 <memset+0x4>

0800a322 <__sfputc_r>:
 800a322:	6893      	ldr	r3, [r2, #8]
 800a324:	3b01      	subs	r3, #1
 800a326:	2b00      	cmp	r3, #0
 800a328:	b410      	push	{r4}
 800a32a:	6093      	str	r3, [r2, #8]
 800a32c:	da08      	bge.n	800a340 <__sfputc_r+0x1e>
 800a32e:	6994      	ldr	r4, [r2, #24]
 800a330:	42a3      	cmp	r3, r4
 800a332:	db01      	blt.n	800a338 <__sfputc_r+0x16>
 800a334:	290a      	cmp	r1, #10
 800a336:	d103      	bne.n	800a340 <__sfputc_r+0x1e>
 800a338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a33c:	f000 bb46 	b.w	800a9cc <__swbuf_r>
 800a340:	6813      	ldr	r3, [r2, #0]
 800a342:	1c58      	adds	r0, r3, #1
 800a344:	6010      	str	r0, [r2, #0]
 800a346:	7019      	strb	r1, [r3, #0]
 800a348:	4608      	mov	r0, r1
 800a34a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <__sfputs_r>:
 800a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a352:	4606      	mov	r6, r0
 800a354:	460f      	mov	r7, r1
 800a356:	4614      	mov	r4, r2
 800a358:	18d5      	adds	r5, r2, r3
 800a35a:	42ac      	cmp	r4, r5
 800a35c:	d101      	bne.n	800a362 <__sfputs_r+0x12>
 800a35e:	2000      	movs	r0, #0
 800a360:	e007      	b.n	800a372 <__sfputs_r+0x22>
 800a362:	463a      	mov	r2, r7
 800a364:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a368:	4630      	mov	r0, r6
 800a36a:	f7ff ffda 	bl	800a322 <__sfputc_r>
 800a36e:	1c43      	adds	r3, r0, #1
 800a370:	d1f3      	bne.n	800a35a <__sfputs_r+0xa>
 800a372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a374 <_vfiprintf_r>:
 800a374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a378:	460c      	mov	r4, r1
 800a37a:	b09d      	sub	sp, #116	; 0x74
 800a37c:	4617      	mov	r7, r2
 800a37e:	461d      	mov	r5, r3
 800a380:	4606      	mov	r6, r0
 800a382:	b118      	cbz	r0, 800a38c <_vfiprintf_r+0x18>
 800a384:	6983      	ldr	r3, [r0, #24]
 800a386:	b90b      	cbnz	r3, 800a38c <_vfiprintf_r+0x18>
 800a388:	f000 fcd8 	bl	800ad3c <__sinit>
 800a38c:	4b7c      	ldr	r3, [pc, #496]	; (800a580 <_vfiprintf_r+0x20c>)
 800a38e:	429c      	cmp	r4, r3
 800a390:	d158      	bne.n	800a444 <_vfiprintf_r+0xd0>
 800a392:	6874      	ldr	r4, [r6, #4]
 800a394:	89a3      	ldrh	r3, [r4, #12]
 800a396:	0718      	lsls	r0, r3, #28
 800a398:	d55e      	bpl.n	800a458 <_vfiprintf_r+0xe4>
 800a39a:	6923      	ldr	r3, [r4, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d05b      	beq.n	800a458 <_vfiprintf_r+0xe4>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a3a4:	2320      	movs	r3, #32
 800a3a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3aa:	2330      	movs	r3, #48	; 0x30
 800a3ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3b0:	9503      	str	r5, [sp, #12]
 800a3b2:	f04f 0b01 	mov.w	fp, #1
 800a3b6:	46b8      	mov	r8, r7
 800a3b8:	4645      	mov	r5, r8
 800a3ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a3be:	b10b      	cbz	r3, 800a3c4 <_vfiprintf_r+0x50>
 800a3c0:	2b25      	cmp	r3, #37	; 0x25
 800a3c2:	d154      	bne.n	800a46e <_vfiprintf_r+0xfa>
 800a3c4:	ebb8 0a07 	subs.w	sl, r8, r7
 800a3c8:	d00b      	beq.n	800a3e2 <_vfiprintf_r+0x6e>
 800a3ca:	4653      	mov	r3, sl
 800a3cc:	463a      	mov	r2, r7
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	f7ff ffbd 	bl	800a350 <__sfputs_r>
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	f000 80c2 	beq.w	800a560 <_vfiprintf_r+0x1ec>
 800a3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3de:	4453      	add	r3, sl
 800a3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3e2:	f898 3000 	ldrb.w	r3, [r8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	f000 80ba 	beq.w	800a560 <_vfiprintf_r+0x1ec>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3f6:	9304      	str	r3, [sp, #16]
 800a3f8:	9307      	str	r3, [sp, #28]
 800a3fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3fe:	931a      	str	r3, [sp, #104]	; 0x68
 800a400:	46a8      	mov	r8, r5
 800a402:	2205      	movs	r2, #5
 800a404:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a408:	485e      	ldr	r0, [pc, #376]	; (800a584 <_vfiprintf_r+0x210>)
 800a40a:	f7f5 fef9 	bl	8000200 <memchr>
 800a40e:	9b04      	ldr	r3, [sp, #16]
 800a410:	bb78      	cbnz	r0, 800a472 <_vfiprintf_r+0xfe>
 800a412:	06d9      	lsls	r1, r3, #27
 800a414:	bf44      	itt	mi
 800a416:	2220      	movmi	r2, #32
 800a418:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a41c:	071a      	lsls	r2, r3, #28
 800a41e:	bf44      	itt	mi
 800a420:	222b      	movmi	r2, #43	; 0x2b
 800a422:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a426:	782a      	ldrb	r2, [r5, #0]
 800a428:	2a2a      	cmp	r2, #42	; 0x2a
 800a42a:	d02a      	beq.n	800a482 <_vfiprintf_r+0x10e>
 800a42c:	9a07      	ldr	r2, [sp, #28]
 800a42e:	46a8      	mov	r8, r5
 800a430:	2000      	movs	r0, #0
 800a432:	250a      	movs	r5, #10
 800a434:	4641      	mov	r1, r8
 800a436:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a43a:	3b30      	subs	r3, #48	; 0x30
 800a43c:	2b09      	cmp	r3, #9
 800a43e:	d969      	bls.n	800a514 <_vfiprintf_r+0x1a0>
 800a440:	b360      	cbz	r0, 800a49c <_vfiprintf_r+0x128>
 800a442:	e024      	b.n	800a48e <_vfiprintf_r+0x11a>
 800a444:	4b50      	ldr	r3, [pc, #320]	; (800a588 <_vfiprintf_r+0x214>)
 800a446:	429c      	cmp	r4, r3
 800a448:	d101      	bne.n	800a44e <_vfiprintf_r+0xda>
 800a44a:	68b4      	ldr	r4, [r6, #8]
 800a44c:	e7a2      	b.n	800a394 <_vfiprintf_r+0x20>
 800a44e:	4b4f      	ldr	r3, [pc, #316]	; (800a58c <_vfiprintf_r+0x218>)
 800a450:	429c      	cmp	r4, r3
 800a452:	bf08      	it	eq
 800a454:	68f4      	ldreq	r4, [r6, #12]
 800a456:	e79d      	b.n	800a394 <_vfiprintf_r+0x20>
 800a458:	4621      	mov	r1, r4
 800a45a:	4630      	mov	r0, r6
 800a45c:	f000 fb08 	bl	800aa70 <__swsetup_r>
 800a460:	2800      	cmp	r0, #0
 800a462:	d09d      	beq.n	800a3a0 <_vfiprintf_r+0x2c>
 800a464:	f04f 30ff 	mov.w	r0, #4294967295
 800a468:	b01d      	add	sp, #116	; 0x74
 800a46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46e:	46a8      	mov	r8, r5
 800a470:	e7a2      	b.n	800a3b8 <_vfiprintf_r+0x44>
 800a472:	4a44      	ldr	r2, [pc, #272]	; (800a584 <_vfiprintf_r+0x210>)
 800a474:	1a80      	subs	r0, r0, r2
 800a476:	fa0b f000 	lsl.w	r0, fp, r0
 800a47a:	4318      	orrs	r0, r3
 800a47c:	9004      	str	r0, [sp, #16]
 800a47e:	4645      	mov	r5, r8
 800a480:	e7be      	b.n	800a400 <_vfiprintf_r+0x8c>
 800a482:	9a03      	ldr	r2, [sp, #12]
 800a484:	1d11      	adds	r1, r2, #4
 800a486:	6812      	ldr	r2, [r2, #0]
 800a488:	9103      	str	r1, [sp, #12]
 800a48a:	2a00      	cmp	r2, #0
 800a48c:	db01      	blt.n	800a492 <_vfiprintf_r+0x11e>
 800a48e:	9207      	str	r2, [sp, #28]
 800a490:	e004      	b.n	800a49c <_vfiprintf_r+0x128>
 800a492:	4252      	negs	r2, r2
 800a494:	f043 0302 	orr.w	r3, r3, #2
 800a498:	9207      	str	r2, [sp, #28]
 800a49a:	9304      	str	r3, [sp, #16]
 800a49c:	f898 3000 	ldrb.w	r3, [r8]
 800a4a0:	2b2e      	cmp	r3, #46	; 0x2e
 800a4a2:	d10e      	bne.n	800a4c2 <_vfiprintf_r+0x14e>
 800a4a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a4a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a4aa:	d138      	bne.n	800a51e <_vfiprintf_r+0x1aa>
 800a4ac:	9b03      	ldr	r3, [sp, #12]
 800a4ae:	1d1a      	adds	r2, r3, #4
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	9203      	str	r2, [sp, #12]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	bfb8      	it	lt
 800a4b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4bc:	f108 0802 	add.w	r8, r8, #2
 800a4c0:	9305      	str	r3, [sp, #20]
 800a4c2:	4d33      	ldr	r5, [pc, #204]	; (800a590 <_vfiprintf_r+0x21c>)
 800a4c4:	f898 1000 	ldrb.w	r1, [r8]
 800a4c8:	2203      	movs	r2, #3
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f7f5 fe98 	bl	8000200 <memchr>
 800a4d0:	b140      	cbz	r0, 800a4e4 <_vfiprintf_r+0x170>
 800a4d2:	2340      	movs	r3, #64	; 0x40
 800a4d4:	1b40      	subs	r0, r0, r5
 800a4d6:	fa03 f000 	lsl.w	r0, r3, r0
 800a4da:	9b04      	ldr	r3, [sp, #16]
 800a4dc:	4303      	orrs	r3, r0
 800a4de:	f108 0801 	add.w	r8, r8, #1
 800a4e2:	9304      	str	r3, [sp, #16]
 800a4e4:	f898 1000 	ldrb.w	r1, [r8]
 800a4e8:	482a      	ldr	r0, [pc, #168]	; (800a594 <_vfiprintf_r+0x220>)
 800a4ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4ee:	2206      	movs	r2, #6
 800a4f0:	f108 0701 	add.w	r7, r8, #1
 800a4f4:	f7f5 fe84 	bl	8000200 <memchr>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	d037      	beq.n	800a56c <_vfiprintf_r+0x1f8>
 800a4fc:	4b26      	ldr	r3, [pc, #152]	; (800a598 <_vfiprintf_r+0x224>)
 800a4fe:	bb1b      	cbnz	r3, 800a548 <_vfiprintf_r+0x1d4>
 800a500:	9b03      	ldr	r3, [sp, #12]
 800a502:	3307      	adds	r3, #7
 800a504:	f023 0307 	bic.w	r3, r3, #7
 800a508:	3308      	adds	r3, #8
 800a50a:	9303      	str	r3, [sp, #12]
 800a50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a50e:	444b      	add	r3, r9
 800a510:	9309      	str	r3, [sp, #36]	; 0x24
 800a512:	e750      	b.n	800a3b6 <_vfiprintf_r+0x42>
 800a514:	fb05 3202 	mla	r2, r5, r2, r3
 800a518:	2001      	movs	r0, #1
 800a51a:	4688      	mov	r8, r1
 800a51c:	e78a      	b.n	800a434 <_vfiprintf_r+0xc0>
 800a51e:	2300      	movs	r3, #0
 800a520:	f108 0801 	add.w	r8, r8, #1
 800a524:	9305      	str	r3, [sp, #20]
 800a526:	4619      	mov	r1, r3
 800a528:	250a      	movs	r5, #10
 800a52a:	4640      	mov	r0, r8
 800a52c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a530:	3a30      	subs	r2, #48	; 0x30
 800a532:	2a09      	cmp	r2, #9
 800a534:	d903      	bls.n	800a53e <_vfiprintf_r+0x1ca>
 800a536:	2b00      	cmp	r3, #0
 800a538:	d0c3      	beq.n	800a4c2 <_vfiprintf_r+0x14e>
 800a53a:	9105      	str	r1, [sp, #20]
 800a53c:	e7c1      	b.n	800a4c2 <_vfiprintf_r+0x14e>
 800a53e:	fb05 2101 	mla	r1, r5, r1, r2
 800a542:	2301      	movs	r3, #1
 800a544:	4680      	mov	r8, r0
 800a546:	e7f0      	b.n	800a52a <_vfiprintf_r+0x1b6>
 800a548:	ab03      	add	r3, sp, #12
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	4622      	mov	r2, r4
 800a54e:	4b13      	ldr	r3, [pc, #76]	; (800a59c <_vfiprintf_r+0x228>)
 800a550:	a904      	add	r1, sp, #16
 800a552:	4630      	mov	r0, r6
 800a554:	f3af 8000 	nop.w
 800a558:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a55c:	4681      	mov	r9, r0
 800a55e:	d1d5      	bne.n	800a50c <_vfiprintf_r+0x198>
 800a560:	89a3      	ldrh	r3, [r4, #12]
 800a562:	065b      	lsls	r3, r3, #25
 800a564:	f53f af7e 	bmi.w	800a464 <_vfiprintf_r+0xf0>
 800a568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a56a:	e77d      	b.n	800a468 <_vfiprintf_r+0xf4>
 800a56c:	ab03      	add	r3, sp, #12
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	4622      	mov	r2, r4
 800a572:	4b0a      	ldr	r3, [pc, #40]	; (800a59c <_vfiprintf_r+0x228>)
 800a574:	a904      	add	r1, sp, #16
 800a576:	4630      	mov	r0, r6
 800a578:	f000 f888 	bl	800a68c <_printf_i>
 800a57c:	e7ec      	b.n	800a558 <_vfiprintf_r+0x1e4>
 800a57e:	bf00      	nop
 800a580:	0800bf54 	.word	0x0800bf54
 800a584:	0800bf00 	.word	0x0800bf00
 800a588:	0800bf74 	.word	0x0800bf74
 800a58c:	0800bf34 	.word	0x0800bf34
 800a590:	0800bf06 	.word	0x0800bf06
 800a594:	0800bf0a 	.word	0x0800bf0a
 800a598:	00000000 	.word	0x00000000
 800a59c:	0800a351 	.word	0x0800a351

0800a5a0 <_printf_common>:
 800a5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a4:	4691      	mov	r9, r2
 800a5a6:	461f      	mov	r7, r3
 800a5a8:	688a      	ldr	r2, [r1, #8]
 800a5aa:	690b      	ldr	r3, [r1, #16]
 800a5ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	bfb8      	it	lt
 800a5b4:	4613      	movlt	r3, r2
 800a5b6:	f8c9 3000 	str.w	r3, [r9]
 800a5ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5be:	4606      	mov	r6, r0
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	b112      	cbz	r2, 800a5ca <_printf_common+0x2a>
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	f8c9 3000 	str.w	r3, [r9]
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	0699      	lsls	r1, r3, #26
 800a5ce:	bf42      	ittt	mi
 800a5d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a5d4:	3302      	addmi	r3, #2
 800a5d6:	f8c9 3000 	strmi.w	r3, [r9]
 800a5da:	6825      	ldr	r5, [r4, #0]
 800a5dc:	f015 0506 	ands.w	r5, r5, #6
 800a5e0:	d107      	bne.n	800a5f2 <_printf_common+0x52>
 800a5e2:	f104 0a19 	add.w	sl, r4, #25
 800a5e6:	68e3      	ldr	r3, [r4, #12]
 800a5e8:	f8d9 2000 	ldr.w	r2, [r9]
 800a5ec:	1a9b      	subs	r3, r3, r2
 800a5ee:	42ab      	cmp	r3, r5
 800a5f0:	dc28      	bgt.n	800a644 <_printf_common+0xa4>
 800a5f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a5f6:	6822      	ldr	r2, [r4, #0]
 800a5f8:	3300      	adds	r3, #0
 800a5fa:	bf18      	it	ne
 800a5fc:	2301      	movne	r3, #1
 800a5fe:	0692      	lsls	r2, r2, #26
 800a600:	d42d      	bmi.n	800a65e <_printf_common+0xbe>
 800a602:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a606:	4639      	mov	r1, r7
 800a608:	4630      	mov	r0, r6
 800a60a:	47c0      	blx	r8
 800a60c:	3001      	adds	r0, #1
 800a60e:	d020      	beq.n	800a652 <_printf_common+0xb2>
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	68e5      	ldr	r5, [r4, #12]
 800a614:	f8d9 2000 	ldr.w	r2, [r9]
 800a618:	f003 0306 	and.w	r3, r3, #6
 800a61c:	2b04      	cmp	r3, #4
 800a61e:	bf08      	it	eq
 800a620:	1aad      	subeq	r5, r5, r2
 800a622:	68a3      	ldr	r3, [r4, #8]
 800a624:	6922      	ldr	r2, [r4, #16]
 800a626:	bf0c      	ite	eq
 800a628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a62c:	2500      	movne	r5, #0
 800a62e:	4293      	cmp	r3, r2
 800a630:	bfc4      	itt	gt
 800a632:	1a9b      	subgt	r3, r3, r2
 800a634:	18ed      	addgt	r5, r5, r3
 800a636:	f04f 0900 	mov.w	r9, #0
 800a63a:	341a      	adds	r4, #26
 800a63c:	454d      	cmp	r5, r9
 800a63e:	d11a      	bne.n	800a676 <_printf_common+0xd6>
 800a640:	2000      	movs	r0, #0
 800a642:	e008      	b.n	800a656 <_printf_common+0xb6>
 800a644:	2301      	movs	r3, #1
 800a646:	4652      	mov	r2, sl
 800a648:	4639      	mov	r1, r7
 800a64a:	4630      	mov	r0, r6
 800a64c:	47c0      	blx	r8
 800a64e:	3001      	adds	r0, #1
 800a650:	d103      	bne.n	800a65a <_printf_common+0xba>
 800a652:	f04f 30ff 	mov.w	r0, #4294967295
 800a656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a65a:	3501      	adds	r5, #1
 800a65c:	e7c3      	b.n	800a5e6 <_printf_common+0x46>
 800a65e:	18e1      	adds	r1, r4, r3
 800a660:	1c5a      	adds	r2, r3, #1
 800a662:	2030      	movs	r0, #48	; 0x30
 800a664:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a668:	4422      	add	r2, r4
 800a66a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a66e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a672:	3302      	adds	r3, #2
 800a674:	e7c5      	b.n	800a602 <_printf_common+0x62>
 800a676:	2301      	movs	r3, #1
 800a678:	4622      	mov	r2, r4
 800a67a:	4639      	mov	r1, r7
 800a67c:	4630      	mov	r0, r6
 800a67e:	47c0      	blx	r8
 800a680:	3001      	adds	r0, #1
 800a682:	d0e6      	beq.n	800a652 <_printf_common+0xb2>
 800a684:	f109 0901 	add.w	r9, r9, #1
 800a688:	e7d8      	b.n	800a63c <_printf_common+0x9c>
	...

0800a68c <_printf_i>:
 800a68c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a690:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a694:	460c      	mov	r4, r1
 800a696:	7e09      	ldrb	r1, [r1, #24]
 800a698:	b085      	sub	sp, #20
 800a69a:	296e      	cmp	r1, #110	; 0x6e
 800a69c:	4617      	mov	r7, r2
 800a69e:	4606      	mov	r6, r0
 800a6a0:	4698      	mov	r8, r3
 800a6a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6a4:	f000 80b3 	beq.w	800a80e <_printf_i+0x182>
 800a6a8:	d822      	bhi.n	800a6f0 <_printf_i+0x64>
 800a6aa:	2963      	cmp	r1, #99	; 0x63
 800a6ac:	d036      	beq.n	800a71c <_printf_i+0x90>
 800a6ae:	d80a      	bhi.n	800a6c6 <_printf_i+0x3a>
 800a6b0:	2900      	cmp	r1, #0
 800a6b2:	f000 80b9 	beq.w	800a828 <_printf_i+0x19c>
 800a6b6:	2958      	cmp	r1, #88	; 0x58
 800a6b8:	f000 8083 	beq.w	800a7c2 <_printf_i+0x136>
 800a6bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a6c4:	e032      	b.n	800a72c <_printf_i+0xa0>
 800a6c6:	2964      	cmp	r1, #100	; 0x64
 800a6c8:	d001      	beq.n	800a6ce <_printf_i+0x42>
 800a6ca:	2969      	cmp	r1, #105	; 0x69
 800a6cc:	d1f6      	bne.n	800a6bc <_printf_i+0x30>
 800a6ce:	6820      	ldr	r0, [r4, #0]
 800a6d0:	6813      	ldr	r3, [r2, #0]
 800a6d2:	0605      	lsls	r5, r0, #24
 800a6d4:	f103 0104 	add.w	r1, r3, #4
 800a6d8:	d52a      	bpl.n	800a730 <_printf_i+0xa4>
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6011      	str	r1, [r2, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	da03      	bge.n	800a6ea <_printf_i+0x5e>
 800a6e2:	222d      	movs	r2, #45	; 0x2d
 800a6e4:	425b      	negs	r3, r3
 800a6e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a6ea:	486f      	ldr	r0, [pc, #444]	; (800a8a8 <_printf_i+0x21c>)
 800a6ec:	220a      	movs	r2, #10
 800a6ee:	e039      	b.n	800a764 <_printf_i+0xd8>
 800a6f0:	2973      	cmp	r1, #115	; 0x73
 800a6f2:	f000 809d 	beq.w	800a830 <_printf_i+0x1a4>
 800a6f6:	d808      	bhi.n	800a70a <_printf_i+0x7e>
 800a6f8:	296f      	cmp	r1, #111	; 0x6f
 800a6fa:	d020      	beq.n	800a73e <_printf_i+0xb2>
 800a6fc:	2970      	cmp	r1, #112	; 0x70
 800a6fe:	d1dd      	bne.n	800a6bc <_printf_i+0x30>
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	f043 0320 	orr.w	r3, r3, #32
 800a706:	6023      	str	r3, [r4, #0]
 800a708:	e003      	b.n	800a712 <_printf_i+0x86>
 800a70a:	2975      	cmp	r1, #117	; 0x75
 800a70c:	d017      	beq.n	800a73e <_printf_i+0xb2>
 800a70e:	2978      	cmp	r1, #120	; 0x78
 800a710:	d1d4      	bne.n	800a6bc <_printf_i+0x30>
 800a712:	2378      	movs	r3, #120	; 0x78
 800a714:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a718:	4864      	ldr	r0, [pc, #400]	; (800a8ac <_printf_i+0x220>)
 800a71a:	e055      	b.n	800a7c8 <_printf_i+0x13c>
 800a71c:	6813      	ldr	r3, [r2, #0]
 800a71e:	1d19      	adds	r1, r3, #4
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	6011      	str	r1, [r2, #0]
 800a724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a72c:	2301      	movs	r3, #1
 800a72e:	e08c      	b.n	800a84a <_printf_i+0x1be>
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	6011      	str	r1, [r2, #0]
 800a734:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a738:	bf18      	it	ne
 800a73a:	b21b      	sxthne	r3, r3
 800a73c:	e7cf      	b.n	800a6de <_printf_i+0x52>
 800a73e:	6813      	ldr	r3, [r2, #0]
 800a740:	6825      	ldr	r5, [r4, #0]
 800a742:	1d18      	adds	r0, r3, #4
 800a744:	6010      	str	r0, [r2, #0]
 800a746:	0628      	lsls	r0, r5, #24
 800a748:	d501      	bpl.n	800a74e <_printf_i+0xc2>
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	e002      	b.n	800a754 <_printf_i+0xc8>
 800a74e:	0668      	lsls	r0, r5, #25
 800a750:	d5fb      	bpl.n	800a74a <_printf_i+0xbe>
 800a752:	881b      	ldrh	r3, [r3, #0]
 800a754:	4854      	ldr	r0, [pc, #336]	; (800a8a8 <_printf_i+0x21c>)
 800a756:	296f      	cmp	r1, #111	; 0x6f
 800a758:	bf14      	ite	ne
 800a75a:	220a      	movne	r2, #10
 800a75c:	2208      	moveq	r2, #8
 800a75e:	2100      	movs	r1, #0
 800a760:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a764:	6865      	ldr	r5, [r4, #4]
 800a766:	60a5      	str	r5, [r4, #8]
 800a768:	2d00      	cmp	r5, #0
 800a76a:	f2c0 8095 	blt.w	800a898 <_printf_i+0x20c>
 800a76e:	6821      	ldr	r1, [r4, #0]
 800a770:	f021 0104 	bic.w	r1, r1, #4
 800a774:	6021      	str	r1, [r4, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d13d      	bne.n	800a7f6 <_printf_i+0x16a>
 800a77a:	2d00      	cmp	r5, #0
 800a77c:	f040 808e 	bne.w	800a89c <_printf_i+0x210>
 800a780:	4665      	mov	r5, ip
 800a782:	2a08      	cmp	r2, #8
 800a784:	d10b      	bne.n	800a79e <_printf_i+0x112>
 800a786:	6823      	ldr	r3, [r4, #0]
 800a788:	07db      	lsls	r3, r3, #31
 800a78a:	d508      	bpl.n	800a79e <_printf_i+0x112>
 800a78c:	6923      	ldr	r3, [r4, #16]
 800a78e:	6862      	ldr	r2, [r4, #4]
 800a790:	429a      	cmp	r2, r3
 800a792:	bfde      	ittt	le
 800a794:	2330      	movle	r3, #48	; 0x30
 800a796:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a79a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a79e:	ebac 0305 	sub.w	r3, ip, r5
 800a7a2:	6123      	str	r3, [r4, #16]
 800a7a4:	f8cd 8000 	str.w	r8, [sp]
 800a7a8:	463b      	mov	r3, r7
 800a7aa:	aa03      	add	r2, sp, #12
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	f7ff fef6 	bl	800a5a0 <_printf_common>
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d14d      	bne.n	800a854 <_printf_i+0x1c8>
 800a7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7bc:	b005      	add	sp, #20
 800a7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7c2:	4839      	ldr	r0, [pc, #228]	; (800a8a8 <_printf_i+0x21c>)
 800a7c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a7c8:	6813      	ldr	r3, [r2, #0]
 800a7ca:	6821      	ldr	r1, [r4, #0]
 800a7cc:	1d1d      	adds	r5, r3, #4
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6015      	str	r5, [r2, #0]
 800a7d2:	060a      	lsls	r2, r1, #24
 800a7d4:	d50b      	bpl.n	800a7ee <_printf_i+0x162>
 800a7d6:	07ca      	lsls	r2, r1, #31
 800a7d8:	bf44      	itt	mi
 800a7da:	f041 0120 	orrmi.w	r1, r1, #32
 800a7de:	6021      	strmi	r1, [r4, #0]
 800a7e0:	b91b      	cbnz	r3, 800a7ea <_printf_i+0x15e>
 800a7e2:	6822      	ldr	r2, [r4, #0]
 800a7e4:	f022 0220 	bic.w	r2, r2, #32
 800a7e8:	6022      	str	r2, [r4, #0]
 800a7ea:	2210      	movs	r2, #16
 800a7ec:	e7b7      	b.n	800a75e <_printf_i+0xd2>
 800a7ee:	064d      	lsls	r5, r1, #25
 800a7f0:	bf48      	it	mi
 800a7f2:	b29b      	uxthmi	r3, r3
 800a7f4:	e7ef      	b.n	800a7d6 <_printf_i+0x14a>
 800a7f6:	4665      	mov	r5, ip
 800a7f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7fc:	fb02 3311 	mls	r3, r2, r1, r3
 800a800:	5cc3      	ldrb	r3, [r0, r3]
 800a802:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a806:	460b      	mov	r3, r1
 800a808:	2900      	cmp	r1, #0
 800a80a:	d1f5      	bne.n	800a7f8 <_printf_i+0x16c>
 800a80c:	e7b9      	b.n	800a782 <_printf_i+0xf6>
 800a80e:	6813      	ldr	r3, [r2, #0]
 800a810:	6825      	ldr	r5, [r4, #0]
 800a812:	6961      	ldr	r1, [r4, #20]
 800a814:	1d18      	adds	r0, r3, #4
 800a816:	6010      	str	r0, [r2, #0]
 800a818:	0628      	lsls	r0, r5, #24
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	d501      	bpl.n	800a822 <_printf_i+0x196>
 800a81e:	6019      	str	r1, [r3, #0]
 800a820:	e002      	b.n	800a828 <_printf_i+0x19c>
 800a822:	066a      	lsls	r2, r5, #25
 800a824:	d5fb      	bpl.n	800a81e <_printf_i+0x192>
 800a826:	8019      	strh	r1, [r3, #0]
 800a828:	2300      	movs	r3, #0
 800a82a:	6123      	str	r3, [r4, #16]
 800a82c:	4665      	mov	r5, ip
 800a82e:	e7b9      	b.n	800a7a4 <_printf_i+0x118>
 800a830:	6813      	ldr	r3, [r2, #0]
 800a832:	1d19      	adds	r1, r3, #4
 800a834:	6011      	str	r1, [r2, #0]
 800a836:	681d      	ldr	r5, [r3, #0]
 800a838:	6862      	ldr	r2, [r4, #4]
 800a83a:	2100      	movs	r1, #0
 800a83c:	4628      	mov	r0, r5
 800a83e:	f7f5 fcdf 	bl	8000200 <memchr>
 800a842:	b108      	cbz	r0, 800a848 <_printf_i+0x1bc>
 800a844:	1b40      	subs	r0, r0, r5
 800a846:	6060      	str	r0, [r4, #4]
 800a848:	6863      	ldr	r3, [r4, #4]
 800a84a:	6123      	str	r3, [r4, #16]
 800a84c:	2300      	movs	r3, #0
 800a84e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a852:	e7a7      	b.n	800a7a4 <_printf_i+0x118>
 800a854:	6923      	ldr	r3, [r4, #16]
 800a856:	462a      	mov	r2, r5
 800a858:	4639      	mov	r1, r7
 800a85a:	4630      	mov	r0, r6
 800a85c:	47c0      	blx	r8
 800a85e:	3001      	adds	r0, #1
 800a860:	d0aa      	beq.n	800a7b8 <_printf_i+0x12c>
 800a862:	6823      	ldr	r3, [r4, #0]
 800a864:	079b      	lsls	r3, r3, #30
 800a866:	d413      	bmi.n	800a890 <_printf_i+0x204>
 800a868:	68e0      	ldr	r0, [r4, #12]
 800a86a:	9b03      	ldr	r3, [sp, #12]
 800a86c:	4298      	cmp	r0, r3
 800a86e:	bfb8      	it	lt
 800a870:	4618      	movlt	r0, r3
 800a872:	e7a3      	b.n	800a7bc <_printf_i+0x130>
 800a874:	2301      	movs	r3, #1
 800a876:	464a      	mov	r2, r9
 800a878:	4639      	mov	r1, r7
 800a87a:	4630      	mov	r0, r6
 800a87c:	47c0      	blx	r8
 800a87e:	3001      	adds	r0, #1
 800a880:	d09a      	beq.n	800a7b8 <_printf_i+0x12c>
 800a882:	3501      	adds	r5, #1
 800a884:	68e3      	ldr	r3, [r4, #12]
 800a886:	9a03      	ldr	r2, [sp, #12]
 800a888:	1a9b      	subs	r3, r3, r2
 800a88a:	42ab      	cmp	r3, r5
 800a88c:	dcf2      	bgt.n	800a874 <_printf_i+0x1e8>
 800a88e:	e7eb      	b.n	800a868 <_printf_i+0x1dc>
 800a890:	2500      	movs	r5, #0
 800a892:	f104 0919 	add.w	r9, r4, #25
 800a896:	e7f5      	b.n	800a884 <_printf_i+0x1f8>
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1ac      	bne.n	800a7f6 <_printf_i+0x16a>
 800a89c:	7803      	ldrb	r3, [r0, #0]
 800a89e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8a6:	e76c      	b.n	800a782 <_printf_i+0xf6>
 800a8a8:	0800bf11 	.word	0x0800bf11
 800a8ac:	0800bf22 	.word	0x0800bf22

0800a8b0 <iprintf>:
 800a8b0:	b40f      	push	{r0, r1, r2, r3}
 800a8b2:	4b0a      	ldr	r3, [pc, #40]	; (800a8dc <iprintf+0x2c>)
 800a8b4:	b513      	push	{r0, r1, r4, lr}
 800a8b6:	681c      	ldr	r4, [r3, #0]
 800a8b8:	b124      	cbz	r4, 800a8c4 <iprintf+0x14>
 800a8ba:	69a3      	ldr	r3, [r4, #24]
 800a8bc:	b913      	cbnz	r3, 800a8c4 <iprintf+0x14>
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f000 fa3c 	bl	800ad3c <__sinit>
 800a8c4:	ab05      	add	r3, sp, #20
 800a8c6:	9a04      	ldr	r2, [sp, #16]
 800a8c8:	68a1      	ldr	r1, [r4, #8]
 800a8ca:	9301      	str	r3, [sp, #4]
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f7ff fd51 	bl	800a374 <_vfiprintf_r>
 800a8d2:	b002      	add	sp, #8
 800a8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8d8:	b004      	add	sp, #16
 800a8da:	4770      	bx	lr
 800a8dc:	20000070 	.word	0x20000070

0800a8e0 <_puts_r>:
 800a8e0:	b570      	push	{r4, r5, r6, lr}
 800a8e2:	460e      	mov	r6, r1
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	b118      	cbz	r0, 800a8f0 <_puts_r+0x10>
 800a8e8:	6983      	ldr	r3, [r0, #24]
 800a8ea:	b90b      	cbnz	r3, 800a8f0 <_puts_r+0x10>
 800a8ec:	f000 fa26 	bl	800ad3c <__sinit>
 800a8f0:	69ab      	ldr	r3, [r5, #24]
 800a8f2:	68ac      	ldr	r4, [r5, #8]
 800a8f4:	b913      	cbnz	r3, 800a8fc <_puts_r+0x1c>
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	f000 fa20 	bl	800ad3c <__sinit>
 800a8fc:	4b23      	ldr	r3, [pc, #140]	; (800a98c <_puts_r+0xac>)
 800a8fe:	429c      	cmp	r4, r3
 800a900:	d117      	bne.n	800a932 <_puts_r+0x52>
 800a902:	686c      	ldr	r4, [r5, #4]
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	071b      	lsls	r3, r3, #28
 800a908:	d51d      	bpl.n	800a946 <_puts_r+0x66>
 800a90a:	6923      	ldr	r3, [r4, #16]
 800a90c:	b1db      	cbz	r3, 800a946 <_puts_r+0x66>
 800a90e:	3e01      	subs	r6, #1
 800a910:	68a3      	ldr	r3, [r4, #8]
 800a912:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a916:	3b01      	subs	r3, #1
 800a918:	60a3      	str	r3, [r4, #8]
 800a91a:	b9e9      	cbnz	r1, 800a958 <_puts_r+0x78>
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	da2e      	bge.n	800a97e <_puts_r+0x9e>
 800a920:	4622      	mov	r2, r4
 800a922:	210a      	movs	r1, #10
 800a924:	4628      	mov	r0, r5
 800a926:	f000 f851 	bl	800a9cc <__swbuf_r>
 800a92a:	3001      	adds	r0, #1
 800a92c:	d011      	beq.n	800a952 <_puts_r+0x72>
 800a92e:	200a      	movs	r0, #10
 800a930:	e011      	b.n	800a956 <_puts_r+0x76>
 800a932:	4b17      	ldr	r3, [pc, #92]	; (800a990 <_puts_r+0xb0>)
 800a934:	429c      	cmp	r4, r3
 800a936:	d101      	bne.n	800a93c <_puts_r+0x5c>
 800a938:	68ac      	ldr	r4, [r5, #8]
 800a93a:	e7e3      	b.n	800a904 <_puts_r+0x24>
 800a93c:	4b15      	ldr	r3, [pc, #84]	; (800a994 <_puts_r+0xb4>)
 800a93e:	429c      	cmp	r4, r3
 800a940:	bf08      	it	eq
 800a942:	68ec      	ldreq	r4, [r5, #12]
 800a944:	e7de      	b.n	800a904 <_puts_r+0x24>
 800a946:	4621      	mov	r1, r4
 800a948:	4628      	mov	r0, r5
 800a94a:	f000 f891 	bl	800aa70 <__swsetup_r>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d0dd      	beq.n	800a90e <_puts_r+0x2e>
 800a952:	f04f 30ff 	mov.w	r0, #4294967295
 800a956:	bd70      	pop	{r4, r5, r6, pc}
 800a958:	2b00      	cmp	r3, #0
 800a95a:	da04      	bge.n	800a966 <_puts_r+0x86>
 800a95c:	69a2      	ldr	r2, [r4, #24]
 800a95e:	429a      	cmp	r2, r3
 800a960:	dc06      	bgt.n	800a970 <_puts_r+0x90>
 800a962:	290a      	cmp	r1, #10
 800a964:	d004      	beq.n	800a970 <_puts_r+0x90>
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	1c5a      	adds	r2, r3, #1
 800a96a:	6022      	str	r2, [r4, #0]
 800a96c:	7019      	strb	r1, [r3, #0]
 800a96e:	e7cf      	b.n	800a910 <_puts_r+0x30>
 800a970:	4622      	mov	r2, r4
 800a972:	4628      	mov	r0, r5
 800a974:	f000 f82a 	bl	800a9cc <__swbuf_r>
 800a978:	3001      	adds	r0, #1
 800a97a:	d1c9      	bne.n	800a910 <_puts_r+0x30>
 800a97c:	e7e9      	b.n	800a952 <_puts_r+0x72>
 800a97e:	6823      	ldr	r3, [r4, #0]
 800a980:	200a      	movs	r0, #10
 800a982:	1c5a      	adds	r2, r3, #1
 800a984:	6022      	str	r2, [r4, #0]
 800a986:	7018      	strb	r0, [r3, #0]
 800a988:	e7e5      	b.n	800a956 <_puts_r+0x76>
 800a98a:	bf00      	nop
 800a98c:	0800bf54 	.word	0x0800bf54
 800a990:	0800bf74 	.word	0x0800bf74
 800a994:	0800bf34 	.word	0x0800bf34

0800a998 <puts>:
 800a998:	4b02      	ldr	r3, [pc, #8]	; (800a9a4 <puts+0xc>)
 800a99a:	4601      	mov	r1, r0
 800a99c:	6818      	ldr	r0, [r3, #0]
 800a99e:	f7ff bf9f 	b.w	800a8e0 <_puts_r>
 800a9a2:	bf00      	nop
 800a9a4:	20000070 	.word	0x20000070

0800a9a8 <strncmp>:
 800a9a8:	b510      	push	{r4, lr}
 800a9aa:	b16a      	cbz	r2, 800a9c8 <strncmp+0x20>
 800a9ac:	3901      	subs	r1, #1
 800a9ae:	1884      	adds	r4, r0, r2
 800a9b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a9b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d103      	bne.n	800a9c4 <strncmp+0x1c>
 800a9bc:	42a0      	cmp	r0, r4
 800a9be:	d001      	beq.n	800a9c4 <strncmp+0x1c>
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1f5      	bne.n	800a9b0 <strncmp+0x8>
 800a9c4:	1a98      	subs	r0, r3, r2
 800a9c6:	bd10      	pop	{r4, pc}
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	e7fc      	b.n	800a9c6 <strncmp+0x1e>

0800a9cc <__swbuf_r>:
 800a9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ce:	460e      	mov	r6, r1
 800a9d0:	4614      	mov	r4, r2
 800a9d2:	4605      	mov	r5, r0
 800a9d4:	b118      	cbz	r0, 800a9de <__swbuf_r+0x12>
 800a9d6:	6983      	ldr	r3, [r0, #24]
 800a9d8:	b90b      	cbnz	r3, 800a9de <__swbuf_r+0x12>
 800a9da:	f000 f9af 	bl	800ad3c <__sinit>
 800a9de:	4b21      	ldr	r3, [pc, #132]	; (800aa64 <__swbuf_r+0x98>)
 800a9e0:	429c      	cmp	r4, r3
 800a9e2:	d12a      	bne.n	800aa3a <__swbuf_r+0x6e>
 800a9e4:	686c      	ldr	r4, [r5, #4]
 800a9e6:	69a3      	ldr	r3, [r4, #24]
 800a9e8:	60a3      	str	r3, [r4, #8]
 800a9ea:	89a3      	ldrh	r3, [r4, #12]
 800a9ec:	071a      	lsls	r2, r3, #28
 800a9ee:	d52e      	bpl.n	800aa4e <__swbuf_r+0x82>
 800a9f0:	6923      	ldr	r3, [r4, #16]
 800a9f2:	b363      	cbz	r3, 800aa4e <__swbuf_r+0x82>
 800a9f4:	6923      	ldr	r3, [r4, #16]
 800a9f6:	6820      	ldr	r0, [r4, #0]
 800a9f8:	1ac0      	subs	r0, r0, r3
 800a9fa:	6963      	ldr	r3, [r4, #20]
 800a9fc:	b2f6      	uxtb	r6, r6
 800a9fe:	4283      	cmp	r3, r0
 800aa00:	4637      	mov	r7, r6
 800aa02:	dc04      	bgt.n	800aa0e <__swbuf_r+0x42>
 800aa04:	4621      	mov	r1, r4
 800aa06:	4628      	mov	r0, r5
 800aa08:	f000 f92e 	bl	800ac68 <_fflush_r>
 800aa0c:	bb28      	cbnz	r0, 800aa5a <__swbuf_r+0x8e>
 800aa0e:	68a3      	ldr	r3, [r4, #8]
 800aa10:	3b01      	subs	r3, #1
 800aa12:	60a3      	str	r3, [r4, #8]
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	1c5a      	adds	r2, r3, #1
 800aa18:	6022      	str	r2, [r4, #0]
 800aa1a:	701e      	strb	r6, [r3, #0]
 800aa1c:	6963      	ldr	r3, [r4, #20]
 800aa1e:	3001      	adds	r0, #1
 800aa20:	4283      	cmp	r3, r0
 800aa22:	d004      	beq.n	800aa2e <__swbuf_r+0x62>
 800aa24:	89a3      	ldrh	r3, [r4, #12]
 800aa26:	07db      	lsls	r3, r3, #31
 800aa28:	d519      	bpl.n	800aa5e <__swbuf_r+0x92>
 800aa2a:	2e0a      	cmp	r6, #10
 800aa2c:	d117      	bne.n	800aa5e <__swbuf_r+0x92>
 800aa2e:	4621      	mov	r1, r4
 800aa30:	4628      	mov	r0, r5
 800aa32:	f000 f919 	bl	800ac68 <_fflush_r>
 800aa36:	b190      	cbz	r0, 800aa5e <__swbuf_r+0x92>
 800aa38:	e00f      	b.n	800aa5a <__swbuf_r+0x8e>
 800aa3a:	4b0b      	ldr	r3, [pc, #44]	; (800aa68 <__swbuf_r+0x9c>)
 800aa3c:	429c      	cmp	r4, r3
 800aa3e:	d101      	bne.n	800aa44 <__swbuf_r+0x78>
 800aa40:	68ac      	ldr	r4, [r5, #8]
 800aa42:	e7d0      	b.n	800a9e6 <__swbuf_r+0x1a>
 800aa44:	4b09      	ldr	r3, [pc, #36]	; (800aa6c <__swbuf_r+0xa0>)
 800aa46:	429c      	cmp	r4, r3
 800aa48:	bf08      	it	eq
 800aa4a:	68ec      	ldreq	r4, [r5, #12]
 800aa4c:	e7cb      	b.n	800a9e6 <__swbuf_r+0x1a>
 800aa4e:	4621      	mov	r1, r4
 800aa50:	4628      	mov	r0, r5
 800aa52:	f000 f80d 	bl	800aa70 <__swsetup_r>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	d0cc      	beq.n	800a9f4 <__swbuf_r+0x28>
 800aa5a:	f04f 37ff 	mov.w	r7, #4294967295
 800aa5e:	4638      	mov	r0, r7
 800aa60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa62:	bf00      	nop
 800aa64:	0800bf54 	.word	0x0800bf54
 800aa68:	0800bf74 	.word	0x0800bf74
 800aa6c:	0800bf34 	.word	0x0800bf34

0800aa70 <__swsetup_r>:
 800aa70:	4b32      	ldr	r3, [pc, #200]	; (800ab3c <__swsetup_r+0xcc>)
 800aa72:	b570      	push	{r4, r5, r6, lr}
 800aa74:	681d      	ldr	r5, [r3, #0]
 800aa76:	4606      	mov	r6, r0
 800aa78:	460c      	mov	r4, r1
 800aa7a:	b125      	cbz	r5, 800aa86 <__swsetup_r+0x16>
 800aa7c:	69ab      	ldr	r3, [r5, #24]
 800aa7e:	b913      	cbnz	r3, 800aa86 <__swsetup_r+0x16>
 800aa80:	4628      	mov	r0, r5
 800aa82:	f000 f95b 	bl	800ad3c <__sinit>
 800aa86:	4b2e      	ldr	r3, [pc, #184]	; (800ab40 <__swsetup_r+0xd0>)
 800aa88:	429c      	cmp	r4, r3
 800aa8a:	d10f      	bne.n	800aaac <__swsetup_r+0x3c>
 800aa8c:	686c      	ldr	r4, [r5, #4]
 800aa8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	0715      	lsls	r5, r2, #28
 800aa96:	d42c      	bmi.n	800aaf2 <__swsetup_r+0x82>
 800aa98:	06d0      	lsls	r0, r2, #27
 800aa9a:	d411      	bmi.n	800aac0 <__swsetup_r+0x50>
 800aa9c:	2209      	movs	r2, #9
 800aa9e:	6032      	str	r2, [r6, #0]
 800aaa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaa4:	81a3      	strh	r3, [r4, #12]
 800aaa6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaaa:	e03e      	b.n	800ab2a <__swsetup_r+0xba>
 800aaac:	4b25      	ldr	r3, [pc, #148]	; (800ab44 <__swsetup_r+0xd4>)
 800aaae:	429c      	cmp	r4, r3
 800aab0:	d101      	bne.n	800aab6 <__swsetup_r+0x46>
 800aab2:	68ac      	ldr	r4, [r5, #8]
 800aab4:	e7eb      	b.n	800aa8e <__swsetup_r+0x1e>
 800aab6:	4b24      	ldr	r3, [pc, #144]	; (800ab48 <__swsetup_r+0xd8>)
 800aab8:	429c      	cmp	r4, r3
 800aaba:	bf08      	it	eq
 800aabc:	68ec      	ldreq	r4, [r5, #12]
 800aabe:	e7e6      	b.n	800aa8e <__swsetup_r+0x1e>
 800aac0:	0751      	lsls	r1, r2, #29
 800aac2:	d512      	bpl.n	800aaea <__swsetup_r+0x7a>
 800aac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aac6:	b141      	cbz	r1, 800aada <__swsetup_r+0x6a>
 800aac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aacc:	4299      	cmp	r1, r3
 800aace:	d002      	beq.n	800aad6 <__swsetup_r+0x66>
 800aad0:	4630      	mov	r0, r6
 800aad2:	f000 fa21 	bl	800af18 <_free_r>
 800aad6:	2300      	movs	r3, #0
 800aad8:	6363      	str	r3, [r4, #52]	; 0x34
 800aada:	89a3      	ldrh	r3, [r4, #12]
 800aadc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aae0:	81a3      	strh	r3, [r4, #12]
 800aae2:	2300      	movs	r3, #0
 800aae4:	6063      	str	r3, [r4, #4]
 800aae6:	6923      	ldr	r3, [r4, #16]
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	89a3      	ldrh	r3, [r4, #12]
 800aaec:	f043 0308 	orr.w	r3, r3, #8
 800aaf0:	81a3      	strh	r3, [r4, #12]
 800aaf2:	6923      	ldr	r3, [r4, #16]
 800aaf4:	b94b      	cbnz	r3, 800ab0a <__swsetup_r+0x9a>
 800aaf6:	89a3      	ldrh	r3, [r4, #12]
 800aaf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aafc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab00:	d003      	beq.n	800ab0a <__swsetup_r+0x9a>
 800ab02:	4621      	mov	r1, r4
 800ab04:	4630      	mov	r0, r6
 800ab06:	f000 f9c7 	bl	800ae98 <__smakebuf_r>
 800ab0a:	89a2      	ldrh	r2, [r4, #12]
 800ab0c:	f012 0301 	ands.w	r3, r2, #1
 800ab10:	d00c      	beq.n	800ab2c <__swsetup_r+0xbc>
 800ab12:	2300      	movs	r3, #0
 800ab14:	60a3      	str	r3, [r4, #8]
 800ab16:	6963      	ldr	r3, [r4, #20]
 800ab18:	425b      	negs	r3, r3
 800ab1a:	61a3      	str	r3, [r4, #24]
 800ab1c:	6923      	ldr	r3, [r4, #16]
 800ab1e:	b953      	cbnz	r3, 800ab36 <__swsetup_r+0xc6>
 800ab20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ab28:	d1ba      	bne.n	800aaa0 <__swsetup_r+0x30>
 800ab2a:	bd70      	pop	{r4, r5, r6, pc}
 800ab2c:	0792      	lsls	r2, r2, #30
 800ab2e:	bf58      	it	pl
 800ab30:	6963      	ldrpl	r3, [r4, #20]
 800ab32:	60a3      	str	r3, [r4, #8]
 800ab34:	e7f2      	b.n	800ab1c <__swsetup_r+0xac>
 800ab36:	2000      	movs	r0, #0
 800ab38:	e7f7      	b.n	800ab2a <__swsetup_r+0xba>
 800ab3a:	bf00      	nop
 800ab3c:	20000070 	.word	0x20000070
 800ab40:	0800bf54 	.word	0x0800bf54
 800ab44:	0800bf74 	.word	0x0800bf74
 800ab48:	0800bf34 	.word	0x0800bf34

0800ab4c <abort>:
 800ab4c:	b508      	push	{r3, lr}
 800ab4e:	2006      	movs	r0, #6
 800ab50:	f000 fac2 	bl	800b0d8 <raise>
 800ab54:	2001      	movs	r0, #1
 800ab56:	f7fa fb29 	bl	80051ac <_exit>
	...

0800ab5c <__sflush_r>:
 800ab5c:	898a      	ldrh	r2, [r1, #12]
 800ab5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab62:	4605      	mov	r5, r0
 800ab64:	0710      	lsls	r0, r2, #28
 800ab66:	460c      	mov	r4, r1
 800ab68:	d458      	bmi.n	800ac1c <__sflush_r+0xc0>
 800ab6a:	684b      	ldr	r3, [r1, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	dc05      	bgt.n	800ab7c <__sflush_r+0x20>
 800ab70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	dc02      	bgt.n	800ab7c <__sflush_r+0x20>
 800ab76:	2000      	movs	r0, #0
 800ab78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab7e:	2e00      	cmp	r6, #0
 800ab80:	d0f9      	beq.n	800ab76 <__sflush_r+0x1a>
 800ab82:	2300      	movs	r3, #0
 800ab84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab88:	682f      	ldr	r7, [r5, #0]
 800ab8a:	6a21      	ldr	r1, [r4, #32]
 800ab8c:	602b      	str	r3, [r5, #0]
 800ab8e:	d032      	beq.n	800abf6 <__sflush_r+0x9a>
 800ab90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab92:	89a3      	ldrh	r3, [r4, #12]
 800ab94:	075a      	lsls	r2, r3, #29
 800ab96:	d505      	bpl.n	800aba4 <__sflush_r+0x48>
 800ab98:	6863      	ldr	r3, [r4, #4]
 800ab9a:	1ac0      	subs	r0, r0, r3
 800ab9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab9e:	b10b      	cbz	r3, 800aba4 <__sflush_r+0x48>
 800aba0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aba2:	1ac0      	subs	r0, r0, r3
 800aba4:	2300      	movs	r3, #0
 800aba6:	4602      	mov	r2, r0
 800aba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abaa:	6a21      	ldr	r1, [r4, #32]
 800abac:	4628      	mov	r0, r5
 800abae:	47b0      	blx	r6
 800abb0:	1c43      	adds	r3, r0, #1
 800abb2:	89a3      	ldrh	r3, [r4, #12]
 800abb4:	d106      	bne.n	800abc4 <__sflush_r+0x68>
 800abb6:	6829      	ldr	r1, [r5, #0]
 800abb8:	291d      	cmp	r1, #29
 800abba:	d848      	bhi.n	800ac4e <__sflush_r+0xf2>
 800abbc:	4a29      	ldr	r2, [pc, #164]	; (800ac64 <__sflush_r+0x108>)
 800abbe:	40ca      	lsrs	r2, r1
 800abc0:	07d6      	lsls	r6, r2, #31
 800abc2:	d544      	bpl.n	800ac4e <__sflush_r+0xf2>
 800abc4:	2200      	movs	r2, #0
 800abc6:	6062      	str	r2, [r4, #4]
 800abc8:	04d9      	lsls	r1, r3, #19
 800abca:	6922      	ldr	r2, [r4, #16]
 800abcc:	6022      	str	r2, [r4, #0]
 800abce:	d504      	bpl.n	800abda <__sflush_r+0x7e>
 800abd0:	1c42      	adds	r2, r0, #1
 800abd2:	d101      	bne.n	800abd8 <__sflush_r+0x7c>
 800abd4:	682b      	ldr	r3, [r5, #0]
 800abd6:	b903      	cbnz	r3, 800abda <__sflush_r+0x7e>
 800abd8:	6560      	str	r0, [r4, #84]	; 0x54
 800abda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abdc:	602f      	str	r7, [r5, #0]
 800abde:	2900      	cmp	r1, #0
 800abe0:	d0c9      	beq.n	800ab76 <__sflush_r+0x1a>
 800abe2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abe6:	4299      	cmp	r1, r3
 800abe8:	d002      	beq.n	800abf0 <__sflush_r+0x94>
 800abea:	4628      	mov	r0, r5
 800abec:	f000 f994 	bl	800af18 <_free_r>
 800abf0:	2000      	movs	r0, #0
 800abf2:	6360      	str	r0, [r4, #52]	; 0x34
 800abf4:	e7c0      	b.n	800ab78 <__sflush_r+0x1c>
 800abf6:	2301      	movs	r3, #1
 800abf8:	4628      	mov	r0, r5
 800abfa:	47b0      	blx	r6
 800abfc:	1c41      	adds	r1, r0, #1
 800abfe:	d1c8      	bne.n	800ab92 <__sflush_r+0x36>
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d0c5      	beq.n	800ab92 <__sflush_r+0x36>
 800ac06:	2b1d      	cmp	r3, #29
 800ac08:	d001      	beq.n	800ac0e <__sflush_r+0xb2>
 800ac0a:	2b16      	cmp	r3, #22
 800ac0c:	d101      	bne.n	800ac12 <__sflush_r+0xb6>
 800ac0e:	602f      	str	r7, [r5, #0]
 800ac10:	e7b1      	b.n	800ab76 <__sflush_r+0x1a>
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac18:	81a3      	strh	r3, [r4, #12]
 800ac1a:	e7ad      	b.n	800ab78 <__sflush_r+0x1c>
 800ac1c:	690f      	ldr	r7, [r1, #16]
 800ac1e:	2f00      	cmp	r7, #0
 800ac20:	d0a9      	beq.n	800ab76 <__sflush_r+0x1a>
 800ac22:	0793      	lsls	r3, r2, #30
 800ac24:	680e      	ldr	r6, [r1, #0]
 800ac26:	bf08      	it	eq
 800ac28:	694b      	ldreq	r3, [r1, #20]
 800ac2a:	600f      	str	r7, [r1, #0]
 800ac2c:	bf18      	it	ne
 800ac2e:	2300      	movne	r3, #0
 800ac30:	eba6 0807 	sub.w	r8, r6, r7
 800ac34:	608b      	str	r3, [r1, #8]
 800ac36:	f1b8 0f00 	cmp.w	r8, #0
 800ac3a:	dd9c      	ble.n	800ab76 <__sflush_r+0x1a>
 800ac3c:	4643      	mov	r3, r8
 800ac3e:	463a      	mov	r2, r7
 800ac40:	6a21      	ldr	r1, [r4, #32]
 800ac42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac44:	4628      	mov	r0, r5
 800ac46:	47b0      	blx	r6
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	dc06      	bgt.n	800ac5a <__sflush_r+0xfe>
 800ac4c:	89a3      	ldrh	r3, [r4, #12]
 800ac4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac52:	81a3      	strh	r3, [r4, #12]
 800ac54:	f04f 30ff 	mov.w	r0, #4294967295
 800ac58:	e78e      	b.n	800ab78 <__sflush_r+0x1c>
 800ac5a:	4407      	add	r7, r0
 800ac5c:	eba8 0800 	sub.w	r8, r8, r0
 800ac60:	e7e9      	b.n	800ac36 <__sflush_r+0xda>
 800ac62:	bf00      	nop
 800ac64:	20400001 	.word	0x20400001

0800ac68 <_fflush_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	690b      	ldr	r3, [r1, #16]
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	460c      	mov	r4, r1
 800ac70:	b1db      	cbz	r3, 800acaa <_fflush_r+0x42>
 800ac72:	b118      	cbz	r0, 800ac7c <_fflush_r+0x14>
 800ac74:	6983      	ldr	r3, [r0, #24]
 800ac76:	b90b      	cbnz	r3, 800ac7c <_fflush_r+0x14>
 800ac78:	f000 f860 	bl	800ad3c <__sinit>
 800ac7c:	4b0c      	ldr	r3, [pc, #48]	; (800acb0 <_fflush_r+0x48>)
 800ac7e:	429c      	cmp	r4, r3
 800ac80:	d109      	bne.n	800ac96 <_fflush_r+0x2e>
 800ac82:	686c      	ldr	r4, [r5, #4]
 800ac84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac88:	b17b      	cbz	r3, 800acaa <_fflush_r+0x42>
 800ac8a:	4621      	mov	r1, r4
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac92:	f7ff bf63 	b.w	800ab5c <__sflush_r>
 800ac96:	4b07      	ldr	r3, [pc, #28]	; (800acb4 <_fflush_r+0x4c>)
 800ac98:	429c      	cmp	r4, r3
 800ac9a:	d101      	bne.n	800aca0 <_fflush_r+0x38>
 800ac9c:	68ac      	ldr	r4, [r5, #8]
 800ac9e:	e7f1      	b.n	800ac84 <_fflush_r+0x1c>
 800aca0:	4b05      	ldr	r3, [pc, #20]	; (800acb8 <_fflush_r+0x50>)
 800aca2:	429c      	cmp	r4, r3
 800aca4:	bf08      	it	eq
 800aca6:	68ec      	ldreq	r4, [r5, #12]
 800aca8:	e7ec      	b.n	800ac84 <_fflush_r+0x1c>
 800acaa:	2000      	movs	r0, #0
 800acac:	bd38      	pop	{r3, r4, r5, pc}
 800acae:	bf00      	nop
 800acb0:	0800bf54 	.word	0x0800bf54
 800acb4:	0800bf74 	.word	0x0800bf74
 800acb8:	0800bf34 	.word	0x0800bf34

0800acbc <std>:
 800acbc:	2300      	movs	r3, #0
 800acbe:	b510      	push	{r4, lr}
 800acc0:	4604      	mov	r4, r0
 800acc2:	e9c0 3300 	strd	r3, r3, [r0]
 800acc6:	6083      	str	r3, [r0, #8]
 800acc8:	8181      	strh	r1, [r0, #12]
 800acca:	6643      	str	r3, [r0, #100]	; 0x64
 800accc:	81c2      	strh	r2, [r0, #14]
 800acce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acd2:	6183      	str	r3, [r0, #24]
 800acd4:	4619      	mov	r1, r3
 800acd6:	2208      	movs	r2, #8
 800acd8:	305c      	adds	r0, #92	; 0x5c
 800acda:	f7ff fb1a 	bl	800a312 <memset>
 800acde:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <std+0x38>)
 800ace0:	6263      	str	r3, [r4, #36]	; 0x24
 800ace2:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <std+0x3c>)
 800ace4:	62a3      	str	r3, [r4, #40]	; 0x28
 800ace6:	4b05      	ldr	r3, [pc, #20]	; (800acfc <std+0x40>)
 800ace8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acea:	4b05      	ldr	r3, [pc, #20]	; (800ad00 <std+0x44>)
 800acec:	6224      	str	r4, [r4, #32]
 800acee:	6323      	str	r3, [r4, #48]	; 0x30
 800acf0:	bd10      	pop	{r4, pc}
 800acf2:	bf00      	nop
 800acf4:	0800b111 	.word	0x0800b111
 800acf8:	0800b133 	.word	0x0800b133
 800acfc:	0800b16b 	.word	0x0800b16b
 800ad00:	0800b18f 	.word	0x0800b18f

0800ad04 <_cleanup_r>:
 800ad04:	4901      	ldr	r1, [pc, #4]	; (800ad0c <_cleanup_r+0x8>)
 800ad06:	f000 b885 	b.w	800ae14 <_fwalk_reent>
 800ad0a:	bf00      	nop
 800ad0c:	0800ac69 	.word	0x0800ac69

0800ad10 <__sfmoreglue>:
 800ad10:	b570      	push	{r4, r5, r6, lr}
 800ad12:	1e4a      	subs	r2, r1, #1
 800ad14:	2568      	movs	r5, #104	; 0x68
 800ad16:	4355      	muls	r5, r2
 800ad18:	460e      	mov	r6, r1
 800ad1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad1e:	f000 f949 	bl	800afb4 <_malloc_r>
 800ad22:	4604      	mov	r4, r0
 800ad24:	b140      	cbz	r0, 800ad38 <__sfmoreglue+0x28>
 800ad26:	2100      	movs	r1, #0
 800ad28:	e9c0 1600 	strd	r1, r6, [r0]
 800ad2c:	300c      	adds	r0, #12
 800ad2e:	60a0      	str	r0, [r4, #8]
 800ad30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad34:	f7ff faed 	bl	800a312 <memset>
 800ad38:	4620      	mov	r0, r4
 800ad3a:	bd70      	pop	{r4, r5, r6, pc}

0800ad3c <__sinit>:
 800ad3c:	6983      	ldr	r3, [r0, #24]
 800ad3e:	b510      	push	{r4, lr}
 800ad40:	4604      	mov	r4, r0
 800ad42:	bb33      	cbnz	r3, 800ad92 <__sinit+0x56>
 800ad44:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ad48:	6503      	str	r3, [r0, #80]	; 0x50
 800ad4a:	4b12      	ldr	r3, [pc, #72]	; (800ad94 <__sinit+0x58>)
 800ad4c:	4a12      	ldr	r2, [pc, #72]	; (800ad98 <__sinit+0x5c>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6282      	str	r2, [r0, #40]	; 0x28
 800ad52:	4298      	cmp	r0, r3
 800ad54:	bf04      	itt	eq
 800ad56:	2301      	moveq	r3, #1
 800ad58:	6183      	streq	r3, [r0, #24]
 800ad5a:	f000 f81f 	bl	800ad9c <__sfp>
 800ad5e:	6060      	str	r0, [r4, #4]
 800ad60:	4620      	mov	r0, r4
 800ad62:	f000 f81b 	bl	800ad9c <__sfp>
 800ad66:	60a0      	str	r0, [r4, #8]
 800ad68:	4620      	mov	r0, r4
 800ad6a:	f000 f817 	bl	800ad9c <__sfp>
 800ad6e:	2200      	movs	r2, #0
 800ad70:	60e0      	str	r0, [r4, #12]
 800ad72:	2104      	movs	r1, #4
 800ad74:	6860      	ldr	r0, [r4, #4]
 800ad76:	f7ff ffa1 	bl	800acbc <std>
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	2109      	movs	r1, #9
 800ad7e:	68a0      	ldr	r0, [r4, #8]
 800ad80:	f7ff ff9c 	bl	800acbc <std>
 800ad84:	2202      	movs	r2, #2
 800ad86:	2112      	movs	r1, #18
 800ad88:	68e0      	ldr	r0, [r4, #12]
 800ad8a:	f7ff ff97 	bl	800acbc <std>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	61a3      	str	r3, [r4, #24]
 800ad92:	bd10      	pop	{r4, pc}
 800ad94:	0800befc 	.word	0x0800befc
 800ad98:	0800ad05 	.word	0x0800ad05

0800ad9c <__sfp>:
 800ad9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9e:	4b1b      	ldr	r3, [pc, #108]	; (800ae0c <__sfp+0x70>)
 800ada0:	681e      	ldr	r6, [r3, #0]
 800ada2:	69b3      	ldr	r3, [r6, #24]
 800ada4:	4607      	mov	r7, r0
 800ada6:	b913      	cbnz	r3, 800adae <__sfp+0x12>
 800ada8:	4630      	mov	r0, r6
 800adaa:	f7ff ffc7 	bl	800ad3c <__sinit>
 800adae:	3648      	adds	r6, #72	; 0x48
 800adb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800adb4:	3b01      	subs	r3, #1
 800adb6:	d503      	bpl.n	800adc0 <__sfp+0x24>
 800adb8:	6833      	ldr	r3, [r6, #0]
 800adba:	b133      	cbz	r3, 800adca <__sfp+0x2e>
 800adbc:	6836      	ldr	r6, [r6, #0]
 800adbe:	e7f7      	b.n	800adb0 <__sfp+0x14>
 800adc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800adc4:	b16d      	cbz	r5, 800ade2 <__sfp+0x46>
 800adc6:	3468      	adds	r4, #104	; 0x68
 800adc8:	e7f4      	b.n	800adb4 <__sfp+0x18>
 800adca:	2104      	movs	r1, #4
 800adcc:	4638      	mov	r0, r7
 800adce:	f7ff ff9f 	bl	800ad10 <__sfmoreglue>
 800add2:	6030      	str	r0, [r6, #0]
 800add4:	2800      	cmp	r0, #0
 800add6:	d1f1      	bne.n	800adbc <__sfp+0x20>
 800add8:	230c      	movs	r3, #12
 800adda:	603b      	str	r3, [r7, #0]
 800addc:	4604      	mov	r4, r0
 800adde:	4620      	mov	r0, r4
 800ade0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ade2:	4b0b      	ldr	r3, [pc, #44]	; (800ae10 <__sfp+0x74>)
 800ade4:	6665      	str	r5, [r4, #100]	; 0x64
 800ade6:	e9c4 5500 	strd	r5, r5, [r4]
 800adea:	60a5      	str	r5, [r4, #8]
 800adec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800adf0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800adf4:	2208      	movs	r2, #8
 800adf6:	4629      	mov	r1, r5
 800adf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800adfc:	f7ff fa89 	bl	800a312 <memset>
 800ae00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae08:	e7e9      	b.n	800adde <__sfp+0x42>
 800ae0a:	bf00      	nop
 800ae0c:	0800befc 	.word	0x0800befc
 800ae10:	ffff0001 	.word	0xffff0001

0800ae14 <_fwalk_reent>:
 800ae14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae18:	4680      	mov	r8, r0
 800ae1a:	4689      	mov	r9, r1
 800ae1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae20:	2600      	movs	r6, #0
 800ae22:	b914      	cbnz	r4, 800ae2a <_fwalk_reent+0x16>
 800ae24:	4630      	mov	r0, r6
 800ae26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae2a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ae2e:	3f01      	subs	r7, #1
 800ae30:	d501      	bpl.n	800ae36 <_fwalk_reent+0x22>
 800ae32:	6824      	ldr	r4, [r4, #0]
 800ae34:	e7f5      	b.n	800ae22 <_fwalk_reent+0xe>
 800ae36:	89ab      	ldrh	r3, [r5, #12]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d907      	bls.n	800ae4c <_fwalk_reent+0x38>
 800ae3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae40:	3301      	adds	r3, #1
 800ae42:	d003      	beq.n	800ae4c <_fwalk_reent+0x38>
 800ae44:	4629      	mov	r1, r5
 800ae46:	4640      	mov	r0, r8
 800ae48:	47c8      	blx	r9
 800ae4a:	4306      	orrs	r6, r0
 800ae4c:	3568      	adds	r5, #104	; 0x68
 800ae4e:	e7ee      	b.n	800ae2e <_fwalk_reent+0x1a>

0800ae50 <__swhatbuf_r>:
 800ae50:	b570      	push	{r4, r5, r6, lr}
 800ae52:	460e      	mov	r6, r1
 800ae54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae58:	2900      	cmp	r1, #0
 800ae5a:	b096      	sub	sp, #88	; 0x58
 800ae5c:	4614      	mov	r4, r2
 800ae5e:	461d      	mov	r5, r3
 800ae60:	da07      	bge.n	800ae72 <__swhatbuf_r+0x22>
 800ae62:	2300      	movs	r3, #0
 800ae64:	602b      	str	r3, [r5, #0]
 800ae66:	89b3      	ldrh	r3, [r6, #12]
 800ae68:	061a      	lsls	r2, r3, #24
 800ae6a:	d410      	bmi.n	800ae8e <__swhatbuf_r+0x3e>
 800ae6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae70:	e00e      	b.n	800ae90 <__swhatbuf_r+0x40>
 800ae72:	466a      	mov	r2, sp
 800ae74:	f000 f9b2 	bl	800b1dc <_fstat_r>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	dbf2      	blt.n	800ae62 <__swhatbuf_r+0x12>
 800ae7c:	9a01      	ldr	r2, [sp, #4]
 800ae7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae86:	425a      	negs	r2, r3
 800ae88:	415a      	adcs	r2, r3
 800ae8a:	602a      	str	r2, [r5, #0]
 800ae8c:	e7ee      	b.n	800ae6c <__swhatbuf_r+0x1c>
 800ae8e:	2340      	movs	r3, #64	; 0x40
 800ae90:	2000      	movs	r0, #0
 800ae92:	6023      	str	r3, [r4, #0]
 800ae94:	b016      	add	sp, #88	; 0x58
 800ae96:	bd70      	pop	{r4, r5, r6, pc}

0800ae98 <__smakebuf_r>:
 800ae98:	898b      	ldrh	r3, [r1, #12]
 800ae9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae9c:	079d      	lsls	r5, r3, #30
 800ae9e:	4606      	mov	r6, r0
 800aea0:	460c      	mov	r4, r1
 800aea2:	d507      	bpl.n	800aeb4 <__smakebuf_r+0x1c>
 800aea4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aea8:	6023      	str	r3, [r4, #0]
 800aeaa:	6123      	str	r3, [r4, #16]
 800aeac:	2301      	movs	r3, #1
 800aeae:	6163      	str	r3, [r4, #20]
 800aeb0:	b002      	add	sp, #8
 800aeb2:	bd70      	pop	{r4, r5, r6, pc}
 800aeb4:	ab01      	add	r3, sp, #4
 800aeb6:	466a      	mov	r2, sp
 800aeb8:	f7ff ffca 	bl	800ae50 <__swhatbuf_r>
 800aebc:	9900      	ldr	r1, [sp, #0]
 800aebe:	4605      	mov	r5, r0
 800aec0:	4630      	mov	r0, r6
 800aec2:	f000 f877 	bl	800afb4 <_malloc_r>
 800aec6:	b948      	cbnz	r0, 800aedc <__smakebuf_r+0x44>
 800aec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aecc:	059a      	lsls	r2, r3, #22
 800aece:	d4ef      	bmi.n	800aeb0 <__smakebuf_r+0x18>
 800aed0:	f023 0303 	bic.w	r3, r3, #3
 800aed4:	f043 0302 	orr.w	r3, r3, #2
 800aed8:	81a3      	strh	r3, [r4, #12]
 800aeda:	e7e3      	b.n	800aea4 <__smakebuf_r+0xc>
 800aedc:	4b0d      	ldr	r3, [pc, #52]	; (800af14 <__smakebuf_r+0x7c>)
 800aede:	62b3      	str	r3, [r6, #40]	; 0x28
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	6020      	str	r0, [r4, #0]
 800aee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee8:	81a3      	strh	r3, [r4, #12]
 800aeea:	9b00      	ldr	r3, [sp, #0]
 800aeec:	6163      	str	r3, [r4, #20]
 800aeee:	9b01      	ldr	r3, [sp, #4]
 800aef0:	6120      	str	r0, [r4, #16]
 800aef2:	b15b      	cbz	r3, 800af0c <__smakebuf_r+0x74>
 800aef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aef8:	4630      	mov	r0, r6
 800aefa:	f000 f981 	bl	800b200 <_isatty_r>
 800aefe:	b128      	cbz	r0, 800af0c <__smakebuf_r+0x74>
 800af00:	89a3      	ldrh	r3, [r4, #12]
 800af02:	f023 0303 	bic.w	r3, r3, #3
 800af06:	f043 0301 	orr.w	r3, r3, #1
 800af0a:	81a3      	strh	r3, [r4, #12]
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	431d      	orrs	r5, r3
 800af10:	81a5      	strh	r5, [r4, #12]
 800af12:	e7cd      	b.n	800aeb0 <__smakebuf_r+0x18>
 800af14:	0800ad05 	.word	0x0800ad05

0800af18 <_free_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4605      	mov	r5, r0
 800af1c:	2900      	cmp	r1, #0
 800af1e:	d045      	beq.n	800afac <_free_r+0x94>
 800af20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af24:	1f0c      	subs	r4, r1, #4
 800af26:	2b00      	cmp	r3, #0
 800af28:	bfb8      	it	lt
 800af2a:	18e4      	addlt	r4, r4, r3
 800af2c:	f000 f98a 	bl	800b244 <__malloc_lock>
 800af30:	4a1f      	ldr	r2, [pc, #124]	; (800afb0 <_free_r+0x98>)
 800af32:	6813      	ldr	r3, [r2, #0]
 800af34:	4610      	mov	r0, r2
 800af36:	b933      	cbnz	r3, 800af46 <_free_r+0x2e>
 800af38:	6063      	str	r3, [r4, #4]
 800af3a:	6014      	str	r4, [r2, #0]
 800af3c:	4628      	mov	r0, r5
 800af3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af42:	f000 b980 	b.w	800b246 <__malloc_unlock>
 800af46:	42a3      	cmp	r3, r4
 800af48:	d90c      	bls.n	800af64 <_free_r+0x4c>
 800af4a:	6821      	ldr	r1, [r4, #0]
 800af4c:	1862      	adds	r2, r4, r1
 800af4e:	4293      	cmp	r3, r2
 800af50:	bf04      	itt	eq
 800af52:	681a      	ldreq	r2, [r3, #0]
 800af54:	685b      	ldreq	r3, [r3, #4]
 800af56:	6063      	str	r3, [r4, #4]
 800af58:	bf04      	itt	eq
 800af5a:	1852      	addeq	r2, r2, r1
 800af5c:	6022      	streq	r2, [r4, #0]
 800af5e:	6004      	str	r4, [r0, #0]
 800af60:	e7ec      	b.n	800af3c <_free_r+0x24>
 800af62:	4613      	mov	r3, r2
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	b10a      	cbz	r2, 800af6c <_free_r+0x54>
 800af68:	42a2      	cmp	r2, r4
 800af6a:	d9fa      	bls.n	800af62 <_free_r+0x4a>
 800af6c:	6819      	ldr	r1, [r3, #0]
 800af6e:	1858      	adds	r0, r3, r1
 800af70:	42a0      	cmp	r0, r4
 800af72:	d10b      	bne.n	800af8c <_free_r+0x74>
 800af74:	6820      	ldr	r0, [r4, #0]
 800af76:	4401      	add	r1, r0
 800af78:	1858      	adds	r0, r3, r1
 800af7a:	4282      	cmp	r2, r0
 800af7c:	6019      	str	r1, [r3, #0]
 800af7e:	d1dd      	bne.n	800af3c <_free_r+0x24>
 800af80:	6810      	ldr	r0, [r2, #0]
 800af82:	6852      	ldr	r2, [r2, #4]
 800af84:	605a      	str	r2, [r3, #4]
 800af86:	4401      	add	r1, r0
 800af88:	6019      	str	r1, [r3, #0]
 800af8a:	e7d7      	b.n	800af3c <_free_r+0x24>
 800af8c:	d902      	bls.n	800af94 <_free_r+0x7c>
 800af8e:	230c      	movs	r3, #12
 800af90:	602b      	str	r3, [r5, #0]
 800af92:	e7d3      	b.n	800af3c <_free_r+0x24>
 800af94:	6820      	ldr	r0, [r4, #0]
 800af96:	1821      	adds	r1, r4, r0
 800af98:	428a      	cmp	r2, r1
 800af9a:	bf04      	itt	eq
 800af9c:	6811      	ldreq	r1, [r2, #0]
 800af9e:	6852      	ldreq	r2, [r2, #4]
 800afa0:	6062      	str	r2, [r4, #4]
 800afa2:	bf04      	itt	eq
 800afa4:	1809      	addeq	r1, r1, r0
 800afa6:	6021      	streq	r1, [r4, #0]
 800afa8:	605c      	str	r4, [r3, #4]
 800afaa:	e7c7      	b.n	800af3c <_free_r+0x24>
 800afac:	bd38      	pop	{r3, r4, r5, pc}
 800afae:	bf00      	nop
 800afb0:	20000178 	.word	0x20000178

0800afb4 <_malloc_r>:
 800afb4:	b570      	push	{r4, r5, r6, lr}
 800afb6:	1ccd      	adds	r5, r1, #3
 800afb8:	f025 0503 	bic.w	r5, r5, #3
 800afbc:	3508      	adds	r5, #8
 800afbe:	2d0c      	cmp	r5, #12
 800afc0:	bf38      	it	cc
 800afc2:	250c      	movcc	r5, #12
 800afc4:	2d00      	cmp	r5, #0
 800afc6:	4606      	mov	r6, r0
 800afc8:	db01      	blt.n	800afce <_malloc_r+0x1a>
 800afca:	42a9      	cmp	r1, r5
 800afcc:	d903      	bls.n	800afd6 <_malloc_r+0x22>
 800afce:	230c      	movs	r3, #12
 800afd0:	6033      	str	r3, [r6, #0]
 800afd2:	2000      	movs	r0, #0
 800afd4:	bd70      	pop	{r4, r5, r6, pc}
 800afd6:	f000 f935 	bl	800b244 <__malloc_lock>
 800afda:	4a21      	ldr	r2, [pc, #132]	; (800b060 <_malloc_r+0xac>)
 800afdc:	6814      	ldr	r4, [r2, #0]
 800afde:	4621      	mov	r1, r4
 800afe0:	b991      	cbnz	r1, 800b008 <_malloc_r+0x54>
 800afe2:	4c20      	ldr	r4, [pc, #128]	; (800b064 <_malloc_r+0xb0>)
 800afe4:	6823      	ldr	r3, [r4, #0]
 800afe6:	b91b      	cbnz	r3, 800aff0 <_malloc_r+0x3c>
 800afe8:	4630      	mov	r0, r6
 800afea:	f000 f83d 	bl	800b068 <_sbrk_r>
 800afee:	6020      	str	r0, [r4, #0]
 800aff0:	4629      	mov	r1, r5
 800aff2:	4630      	mov	r0, r6
 800aff4:	f000 f838 	bl	800b068 <_sbrk_r>
 800aff8:	1c43      	adds	r3, r0, #1
 800affa:	d124      	bne.n	800b046 <_malloc_r+0x92>
 800affc:	230c      	movs	r3, #12
 800affe:	6033      	str	r3, [r6, #0]
 800b000:	4630      	mov	r0, r6
 800b002:	f000 f920 	bl	800b246 <__malloc_unlock>
 800b006:	e7e4      	b.n	800afd2 <_malloc_r+0x1e>
 800b008:	680b      	ldr	r3, [r1, #0]
 800b00a:	1b5b      	subs	r3, r3, r5
 800b00c:	d418      	bmi.n	800b040 <_malloc_r+0x8c>
 800b00e:	2b0b      	cmp	r3, #11
 800b010:	d90f      	bls.n	800b032 <_malloc_r+0x7e>
 800b012:	600b      	str	r3, [r1, #0]
 800b014:	50cd      	str	r5, [r1, r3]
 800b016:	18cc      	adds	r4, r1, r3
 800b018:	4630      	mov	r0, r6
 800b01a:	f000 f914 	bl	800b246 <__malloc_unlock>
 800b01e:	f104 000b 	add.w	r0, r4, #11
 800b022:	1d23      	adds	r3, r4, #4
 800b024:	f020 0007 	bic.w	r0, r0, #7
 800b028:	1ac3      	subs	r3, r0, r3
 800b02a:	d0d3      	beq.n	800afd4 <_malloc_r+0x20>
 800b02c:	425a      	negs	r2, r3
 800b02e:	50e2      	str	r2, [r4, r3]
 800b030:	e7d0      	b.n	800afd4 <_malloc_r+0x20>
 800b032:	428c      	cmp	r4, r1
 800b034:	684b      	ldr	r3, [r1, #4]
 800b036:	bf16      	itet	ne
 800b038:	6063      	strne	r3, [r4, #4]
 800b03a:	6013      	streq	r3, [r2, #0]
 800b03c:	460c      	movne	r4, r1
 800b03e:	e7eb      	b.n	800b018 <_malloc_r+0x64>
 800b040:	460c      	mov	r4, r1
 800b042:	6849      	ldr	r1, [r1, #4]
 800b044:	e7cc      	b.n	800afe0 <_malloc_r+0x2c>
 800b046:	1cc4      	adds	r4, r0, #3
 800b048:	f024 0403 	bic.w	r4, r4, #3
 800b04c:	42a0      	cmp	r0, r4
 800b04e:	d005      	beq.n	800b05c <_malloc_r+0xa8>
 800b050:	1a21      	subs	r1, r4, r0
 800b052:	4630      	mov	r0, r6
 800b054:	f000 f808 	bl	800b068 <_sbrk_r>
 800b058:	3001      	adds	r0, #1
 800b05a:	d0cf      	beq.n	800affc <_malloc_r+0x48>
 800b05c:	6025      	str	r5, [r4, #0]
 800b05e:	e7db      	b.n	800b018 <_malloc_r+0x64>
 800b060:	20000178 	.word	0x20000178
 800b064:	2000017c 	.word	0x2000017c

0800b068 <_sbrk_r>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4c06      	ldr	r4, [pc, #24]	; (800b084 <_sbrk_r+0x1c>)
 800b06c:	2300      	movs	r3, #0
 800b06e:	4605      	mov	r5, r0
 800b070:	4608      	mov	r0, r1
 800b072:	6023      	str	r3, [r4, #0]
 800b074:	f7fa f90c 	bl	8005290 <_sbrk>
 800b078:	1c43      	adds	r3, r0, #1
 800b07a:	d102      	bne.n	800b082 <_sbrk_r+0x1a>
 800b07c:	6823      	ldr	r3, [r4, #0]
 800b07e:	b103      	cbz	r3, 800b082 <_sbrk_r+0x1a>
 800b080:	602b      	str	r3, [r5, #0]
 800b082:	bd38      	pop	{r3, r4, r5, pc}
 800b084:	200009cc 	.word	0x200009cc

0800b088 <_raise_r>:
 800b088:	291f      	cmp	r1, #31
 800b08a:	b538      	push	{r3, r4, r5, lr}
 800b08c:	4604      	mov	r4, r0
 800b08e:	460d      	mov	r5, r1
 800b090:	d904      	bls.n	800b09c <_raise_r+0x14>
 800b092:	2316      	movs	r3, #22
 800b094:	6003      	str	r3, [r0, #0]
 800b096:	f04f 30ff 	mov.w	r0, #4294967295
 800b09a:	bd38      	pop	{r3, r4, r5, pc}
 800b09c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b09e:	b112      	cbz	r2, 800b0a6 <_raise_r+0x1e>
 800b0a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0a4:	b94b      	cbnz	r3, 800b0ba <_raise_r+0x32>
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f000 f830 	bl	800b10c <_getpid_r>
 800b0ac:	462a      	mov	r2, r5
 800b0ae:	4601      	mov	r1, r0
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0b6:	f000 b817 	b.w	800b0e8 <_kill_r>
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d00a      	beq.n	800b0d4 <_raise_r+0x4c>
 800b0be:	1c59      	adds	r1, r3, #1
 800b0c0:	d103      	bne.n	800b0ca <_raise_r+0x42>
 800b0c2:	2316      	movs	r3, #22
 800b0c4:	6003      	str	r3, [r0, #0]
 800b0c6:	2001      	movs	r0, #1
 800b0c8:	e7e7      	b.n	800b09a <_raise_r+0x12>
 800b0ca:	2400      	movs	r4, #0
 800b0cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	4798      	blx	r3
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	e7e0      	b.n	800b09a <_raise_r+0x12>

0800b0d8 <raise>:
 800b0d8:	4b02      	ldr	r3, [pc, #8]	; (800b0e4 <raise+0xc>)
 800b0da:	4601      	mov	r1, r0
 800b0dc:	6818      	ldr	r0, [r3, #0]
 800b0de:	f7ff bfd3 	b.w	800b088 <_raise_r>
 800b0e2:	bf00      	nop
 800b0e4:	20000070 	.word	0x20000070

0800b0e8 <_kill_r>:
 800b0e8:	b538      	push	{r3, r4, r5, lr}
 800b0ea:	4c07      	ldr	r4, [pc, #28]	; (800b108 <_kill_r+0x20>)
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	4605      	mov	r5, r0
 800b0f0:	4608      	mov	r0, r1
 800b0f2:	4611      	mov	r1, r2
 800b0f4:	6023      	str	r3, [r4, #0]
 800b0f6:	f7fa f849 	bl	800518c <_kill>
 800b0fa:	1c43      	adds	r3, r0, #1
 800b0fc:	d102      	bne.n	800b104 <_kill_r+0x1c>
 800b0fe:	6823      	ldr	r3, [r4, #0]
 800b100:	b103      	cbz	r3, 800b104 <_kill_r+0x1c>
 800b102:	602b      	str	r3, [r5, #0]
 800b104:	bd38      	pop	{r3, r4, r5, pc}
 800b106:	bf00      	nop
 800b108:	200009cc 	.word	0x200009cc

0800b10c <_getpid_r>:
 800b10c:	f7fa b836 	b.w	800517c <_getpid>

0800b110 <__sread>:
 800b110:	b510      	push	{r4, lr}
 800b112:	460c      	mov	r4, r1
 800b114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b118:	f000 f896 	bl	800b248 <_read_r>
 800b11c:	2800      	cmp	r0, #0
 800b11e:	bfab      	itete	ge
 800b120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b122:	89a3      	ldrhlt	r3, [r4, #12]
 800b124:	181b      	addge	r3, r3, r0
 800b126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b12a:	bfac      	ite	ge
 800b12c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b12e:	81a3      	strhlt	r3, [r4, #12]
 800b130:	bd10      	pop	{r4, pc}

0800b132 <__swrite>:
 800b132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b136:	461f      	mov	r7, r3
 800b138:	898b      	ldrh	r3, [r1, #12]
 800b13a:	05db      	lsls	r3, r3, #23
 800b13c:	4605      	mov	r5, r0
 800b13e:	460c      	mov	r4, r1
 800b140:	4616      	mov	r6, r2
 800b142:	d505      	bpl.n	800b150 <__swrite+0x1e>
 800b144:	2302      	movs	r3, #2
 800b146:	2200      	movs	r2, #0
 800b148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b14c:	f000 f868 	bl	800b220 <_lseek_r>
 800b150:	89a3      	ldrh	r3, [r4, #12]
 800b152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b15a:	81a3      	strh	r3, [r4, #12]
 800b15c:	4632      	mov	r2, r6
 800b15e:	463b      	mov	r3, r7
 800b160:	4628      	mov	r0, r5
 800b162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b166:	f000 b817 	b.w	800b198 <_write_r>

0800b16a <__sseek>:
 800b16a:	b510      	push	{r4, lr}
 800b16c:	460c      	mov	r4, r1
 800b16e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b172:	f000 f855 	bl	800b220 <_lseek_r>
 800b176:	1c43      	adds	r3, r0, #1
 800b178:	89a3      	ldrh	r3, [r4, #12]
 800b17a:	bf15      	itete	ne
 800b17c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b17e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b186:	81a3      	strheq	r3, [r4, #12]
 800b188:	bf18      	it	ne
 800b18a:	81a3      	strhne	r3, [r4, #12]
 800b18c:	bd10      	pop	{r4, pc}

0800b18e <__sclose>:
 800b18e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b192:	f000 b813 	b.w	800b1bc <_close_r>
	...

0800b198 <_write_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4c07      	ldr	r4, [pc, #28]	; (800b1b8 <_write_r+0x20>)
 800b19c:	4605      	mov	r5, r0
 800b19e:	4608      	mov	r0, r1
 800b1a0:	4611      	mov	r1, r2
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	6022      	str	r2, [r4, #0]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	f7fa f828 	bl	80051fc <_write>
 800b1ac:	1c43      	adds	r3, r0, #1
 800b1ae:	d102      	bne.n	800b1b6 <_write_r+0x1e>
 800b1b0:	6823      	ldr	r3, [r4, #0]
 800b1b2:	b103      	cbz	r3, 800b1b6 <_write_r+0x1e>
 800b1b4:	602b      	str	r3, [r5, #0]
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	200009cc 	.word	0x200009cc

0800b1bc <_close_r>:
 800b1bc:	b538      	push	{r3, r4, r5, lr}
 800b1be:	4c06      	ldr	r4, [pc, #24]	; (800b1d8 <_close_r+0x1c>)
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	4608      	mov	r0, r1
 800b1c6:	6023      	str	r3, [r4, #0]
 800b1c8:	f7fa f82e 	bl	8005228 <_close>
 800b1cc:	1c43      	adds	r3, r0, #1
 800b1ce:	d102      	bne.n	800b1d6 <_close_r+0x1a>
 800b1d0:	6823      	ldr	r3, [r4, #0]
 800b1d2:	b103      	cbz	r3, 800b1d6 <_close_r+0x1a>
 800b1d4:	602b      	str	r3, [r5, #0]
 800b1d6:	bd38      	pop	{r3, r4, r5, pc}
 800b1d8:	200009cc 	.word	0x200009cc

0800b1dc <_fstat_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	4c07      	ldr	r4, [pc, #28]	; (800b1fc <_fstat_r+0x20>)
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	4605      	mov	r5, r0
 800b1e4:	4608      	mov	r0, r1
 800b1e6:	4611      	mov	r1, r2
 800b1e8:	6023      	str	r3, [r4, #0]
 800b1ea:	f7fa f829 	bl	8005240 <_fstat>
 800b1ee:	1c43      	adds	r3, r0, #1
 800b1f0:	d102      	bne.n	800b1f8 <_fstat_r+0x1c>
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	b103      	cbz	r3, 800b1f8 <_fstat_r+0x1c>
 800b1f6:	602b      	str	r3, [r5, #0]
 800b1f8:	bd38      	pop	{r3, r4, r5, pc}
 800b1fa:	bf00      	nop
 800b1fc:	200009cc 	.word	0x200009cc

0800b200 <_isatty_r>:
 800b200:	b538      	push	{r3, r4, r5, lr}
 800b202:	4c06      	ldr	r4, [pc, #24]	; (800b21c <_isatty_r+0x1c>)
 800b204:	2300      	movs	r3, #0
 800b206:	4605      	mov	r5, r0
 800b208:	4608      	mov	r0, r1
 800b20a:	6023      	str	r3, [r4, #0]
 800b20c:	f7fa f828 	bl	8005260 <_isatty>
 800b210:	1c43      	adds	r3, r0, #1
 800b212:	d102      	bne.n	800b21a <_isatty_r+0x1a>
 800b214:	6823      	ldr	r3, [r4, #0]
 800b216:	b103      	cbz	r3, 800b21a <_isatty_r+0x1a>
 800b218:	602b      	str	r3, [r5, #0]
 800b21a:	bd38      	pop	{r3, r4, r5, pc}
 800b21c:	200009cc 	.word	0x200009cc

0800b220 <_lseek_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4c07      	ldr	r4, [pc, #28]	; (800b240 <_lseek_r+0x20>)
 800b224:	4605      	mov	r5, r0
 800b226:	4608      	mov	r0, r1
 800b228:	4611      	mov	r1, r2
 800b22a:	2200      	movs	r2, #0
 800b22c:	6022      	str	r2, [r4, #0]
 800b22e:	461a      	mov	r2, r3
 800b230:	f7fa f821 	bl	8005276 <_lseek>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d102      	bne.n	800b23e <_lseek_r+0x1e>
 800b238:	6823      	ldr	r3, [r4, #0]
 800b23a:	b103      	cbz	r3, 800b23e <_lseek_r+0x1e>
 800b23c:	602b      	str	r3, [r5, #0]
 800b23e:	bd38      	pop	{r3, r4, r5, pc}
 800b240:	200009cc 	.word	0x200009cc

0800b244 <__malloc_lock>:
 800b244:	4770      	bx	lr

0800b246 <__malloc_unlock>:
 800b246:	4770      	bx	lr

0800b248 <_read_r>:
 800b248:	b538      	push	{r3, r4, r5, lr}
 800b24a:	4c07      	ldr	r4, [pc, #28]	; (800b268 <_read_r+0x20>)
 800b24c:	4605      	mov	r5, r0
 800b24e:	4608      	mov	r0, r1
 800b250:	4611      	mov	r1, r2
 800b252:	2200      	movs	r2, #0
 800b254:	6022      	str	r2, [r4, #0]
 800b256:	461a      	mov	r2, r3
 800b258:	f7f9 ffb2 	bl	80051c0 <_read>
 800b25c:	1c43      	adds	r3, r0, #1
 800b25e:	d102      	bne.n	800b266 <_read_r+0x1e>
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	b103      	cbz	r3, 800b266 <_read_r+0x1e>
 800b264:	602b      	str	r3, [r5, #0]
 800b266:	bd38      	pop	{r3, r4, r5, pc}
 800b268:	200009cc 	.word	0x200009cc

0800b26c <_init>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	bf00      	nop
 800b270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b272:	bc08      	pop	{r3}
 800b274:	469e      	mov	lr, r3
 800b276:	4770      	bx	lr

0800b278 <_fini>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	bf00      	nop
 800b27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b27e:	bc08      	pop	{r3}
 800b280:	469e      	mov	lr, r3
 800b282:	4770      	bx	lr
