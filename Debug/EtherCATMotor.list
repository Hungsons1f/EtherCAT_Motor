
EtherCATMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3c0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c50  0800c580  0800c580  0001c580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1d0  0800d1d0  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1d0  0800d1d0  0001d1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1d8  0800d1d8  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1d8  0800d1d8  0001d1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1dc  0800d1dc  0001d1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0800d1e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000092c  200000d8  0800d2b4  000200d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a04  0800d2b4  00020a04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef41  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a24  00000000  00000000  0003f045  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001828  00000000  00000000  00042a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017b8  00000000  00000000  00044298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e2d9  00000000  00000000  00045a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014152  00000000  00000000  00073d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010fd32  00000000  00000000  00087e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00197bad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fb8  00000000  00000000  00197c28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000d8 	.word	0x200000d8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c568 	.word	0x0800c568

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000dc 	.word	0x200000dc
 80001fc:	0800c568 	.word	0x0800c568

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b972 	b.w	8000d88 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14b      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4615      	mov	r5, r2
 8000ace:	d967      	bls.n	8000ba0 <__udivmoddi4+0xe4>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0720 	rsb	r7, r2, #32
 8000ada:	fa01 f302 	lsl.w	r3, r1, r2
 8000ade:	fa20 f707 	lsr.w	r7, r0, r7
 8000ae2:	4095      	lsls	r5, r2
 8000ae4:	ea47 0803 	orr.w	r8, r7, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aee:	0c23      	lsrs	r3, r4, #16
 8000af0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000af4:	fa1f fc85 	uxth.w	ip, r5
 8000af8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000afc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b00:	fb07 f10c 	mul.w	r1, r7, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x60>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b0e:	f080 811b 	bcs.w	8000d48 <__udivmoddi4+0x28c>
 8000b12:	4299      	cmp	r1, r3
 8000b14:	f240 8118 	bls.w	8000d48 <__udivmoddi4+0x28c>
 8000b18:	3f02      	subs	r7, #2
 8000b1a:	442b      	add	r3, r5
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x8c>
 8000b34:	192c      	adds	r4, r5, r4
 8000b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3a:	f080 8107 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	f240 8104 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b44:	3802      	subs	r0, #2
 8000b46:	442c      	add	r4, r5
 8000b48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4c:	eba4 040c 	sub.w	r4, r4, ip
 8000b50:	2700      	movs	r7, #0
 8000b52:	b11e      	cbz	r6, 8000b5c <__udivmoddi4+0xa0>
 8000b54:	40d4      	lsrs	r4, r2
 8000b56:	2300      	movs	r3, #0
 8000b58:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d909      	bls.n	8000b7a <__udivmoddi4+0xbe>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80eb 	beq.w	8000d42 <__udivmoddi4+0x286>
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b72:	4638      	mov	r0, r7
 8000b74:	4639      	mov	r1, r7
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f783 	clz	r7, r3
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d147      	bne.n	8000c12 <__udivmoddi4+0x156>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd0>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fa 	bhi.w	8000d80 <__udivmoddi4+0x2c4>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e0      	beq.n	8000b5c <__udivmoddi4+0xa0>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7dd      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xe8>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 808f 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bae:	1b49      	subs	r1, r1, r5
 8000bb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb4:	fa1f f885 	uxth.w	r8, r5
 8000bb8:	2701      	movs	r7, #1
 8000bba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bd0:	18eb      	adds	r3, r5, r3
 8000bd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2bc>
 8000bde:	4684      	mov	ip, r0
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	b2a3      	uxth	r3, r4
 8000be4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf0:	fb08 f800 	mul.w	r8, r8, r0
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x14c>
 8000bf8:	192c      	adds	r4, r5, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14a>
 8000c00:	45a0      	cmp	r8, r4
 8000c02:	f200 80b6 	bhi.w	8000d72 <__udivmoddi4+0x2b6>
 8000c06:	4618      	mov	r0, r3
 8000c08:	eba4 0408 	sub.w	r4, r4, r8
 8000c0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c10:	e79f      	b.n	8000b52 <__udivmoddi4+0x96>
 8000c12:	f1c7 0c20 	rsb	ip, r7, #32
 8000c16:	40bb      	lsls	r3, r7
 8000c18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c20:	fa01 f407 	lsl.w	r4, r1, r7
 8000c24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c30:	4325      	orrs	r5, r4
 8000c32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c36:	0c2c      	lsrs	r4, r5, #16
 8000c38:	fb08 3319 	mls	r3, r8, r9, r3
 8000c3c:	fa1f fa8e 	uxth.w	sl, lr
 8000c40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c44:	fb09 f40a 	mul.w	r4, r9, sl
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1e 0303 	adds.w	r3, lr, r3
 8000c58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c5c:	f080 8087 	bcs.w	8000d6e <__udivmoddi4+0x2b2>
 8000c60:	429c      	cmp	r4, r3
 8000c62:	f240 8084 	bls.w	8000d6e <__udivmoddi4+0x2b2>
 8000c66:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6a:	4473      	add	r3, lr
 8000c6c:	1b1b      	subs	r3, r3, r4
 8000c6e:	b2ad      	uxth	r5, r5
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c80:	45a2      	cmp	sl, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1e 0404 	adds.w	r4, lr, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	d26b      	bcs.n	8000d66 <__udivmoddi4+0x2aa>
 8000c8e:	45a2      	cmp	sl, r4
 8000c90:	d969      	bls.n	8000d66 <__udivmoddi4+0x2aa>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4474      	add	r4, lr
 8000c96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9e:	eba4 040a 	sub.w	r4, r4, sl
 8000ca2:	454c      	cmp	r4, r9
 8000ca4:	46c2      	mov	sl, r8
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	d354      	bcc.n	8000d54 <__udivmoddi4+0x298>
 8000caa:	d051      	beq.n	8000d50 <__udivmoddi4+0x294>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d069      	beq.n	8000d84 <__udivmoddi4+0x2c8>
 8000cb0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cb4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cbc:	40fd      	lsrs	r5, r7
 8000cbe:	40fc      	lsrs	r4, r7
 8000cc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e747      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cd4:	4095      	lsls	r5, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	fa21 f303 	lsr.w	r3, r1, r3
 8000cde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce2:	4338      	orrs	r0, r7
 8000ce4:	0c01      	lsrs	r1, r0, #16
 8000ce6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cea:	fa1f f885 	uxth.w	r8, r5
 8000cee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb07 f308 	mul.w	r3, r7, r8
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x256>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d08:	d22f      	bcs.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d92d      	bls.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0e:	3f02      	subs	r7, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	b281      	uxth	r1, r0
 8000d16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d22:	fb00 f308 	mul.w	r3, r0, r8
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d907      	bls.n	8000d3a <__udivmoddi4+0x27e>
 8000d2a:	1869      	adds	r1, r5, r1
 8000d2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d30:	d217      	bcs.n	8000d62 <__udivmoddi4+0x2a6>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d915      	bls.n	8000d62 <__udivmoddi4+0x2a6>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4429      	add	r1, r5
 8000d3a:	1ac9      	subs	r1, r1, r3
 8000d3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d40:	e73b      	b.n	8000bba <__udivmoddi4+0xfe>
 8000d42:	4637      	mov	r7, r6
 8000d44:	4630      	mov	r0, r6
 8000d46:	e709      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000d48:	4607      	mov	r7, r0
 8000d4a:	e6e7      	b.n	8000b1c <__udivmoddi4+0x60>
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	e6fb      	b.n	8000b48 <__udivmoddi4+0x8c>
 8000d50:	4541      	cmp	r1, r8
 8000d52:	d2ab      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d58:	eb69 020e 	sbc.w	r2, r9, lr
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	4613      	mov	r3, r2
 8000d60:	e7a4      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d62:	4660      	mov	r0, ip
 8000d64:	e7e9      	b.n	8000d3a <__udivmoddi4+0x27e>
 8000d66:	4618      	mov	r0, r3
 8000d68:	e795      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6a:	4667      	mov	r7, ip
 8000d6c:	e7d1      	b.n	8000d12 <__udivmoddi4+0x256>
 8000d6e:	4681      	mov	r9, r0
 8000d70:	e77c      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	442c      	add	r4, r5
 8000d76:	e747      	b.n	8000c08 <__udivmoddi4+0x14c>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	442b      	add	r3, r5
 8000d7e:	e72f      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d80:	4638      	mov	r0, r7
 8000d82:	e708      	b.n	8000b96 <__udivmoddi4+0xda>
 8000d84:	4637      	mov	r7, r6
 8000d86:	e6e9      	b.n	8000b5c <__udivmoddi4+0xa0>

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <ESC_pre_objecthandler>:
uint32_t ESC_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t size,
      uint16_t flags)
{
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af02      	add	r7, sp, #8
 8000d92:	60ba      	str	r2, [r7, #8]
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4603      	mov	r3, r0
 8000d98:	81fb      	strh	r3, [r7, #14]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	737b      	strb	r3, [r7, #13]
   uint32_t abort = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]

   if (IS_RXPDO (index) ||
 8000da2:	89fb      	ldrh	r3, [r7, #14]
 8000da4:	f5b3 5fb0 	cmp.w	r3, #5632	; 0x1600
 8000da8:	d303      	bcc.n	8000db2 <ESC_pre_objecthandler+0x26>
 8000daa:	89fb      	ldrh	r3, [r7, #14]
 8000dac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8000db0:	d311      	bcc.n	8000dd6 <ESC_pre_objecthandler+0x4a>
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8000db8:	d303      	bcc.n	8000dc2 <ESC_pre_objecthandler+0x36>
       IS_TXPDO (index) ||
 8000dba:	89fb      	ldrh	r3, [r7, #14]
 8000dbc:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8000dc0:	d309      	bcc.n	8000dd6 <ESC_pre_objecthandler+0x4a>
 8000dc2:	89fb      	ldrh	r3, [r7, #14]
 8000dc4:	f641 4212 	movw	r2, #7186	; 0x1c12
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d004      	beq.n	8000dd6 <ESC_pre_objecthandler+0x4a>
       index == RX_PDO_OBJIDX ||
 8000dcc:	89fb      	ldrh	r3, [r7, #14]
 8000dce:	f641 4213 	movw	r2, #7187	; 0x1c13
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10b      	bne.n	8000dee <ESC_pre_objecthandler+0x62>
       index == TX_PDO_OBJIDX)
   {
      if (subindex > 0 && COE_maxSub (index) != 0)
 8000dd6:	7b7b      	ldrb	r3, [r7, #13]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d008      	beq.n	8000dee <ESC_pre_objecthandler+0x62>
 8000ddc:	89fb      	ldrh	r3, [r7, #14]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f003 fa3a 	bl	8004258 <COE_maxSub>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <ESC_pre_objecthandler+0x62>
      {
         abort = ABORT_SUBINDEX0_NOT_ZERO;
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <ESC_pre_objecthandler+0x88>)
 8000dec:	617b      	str	r3, [r7, #20]
      }
   }

   if (ESCvar.pre_object_download_hook)
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <ESC_pre_objecthandler+0x8c>)
 8000df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d009      	beq.n	8000e0a <ESC_pre_objecthandler+0x7e>
   {
      abort = (ESCvar.pre_object_download_hook) (index,
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <ESC_pre_objecthandler+0x8c>)
 8000df8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000dfa:	7b79      	ldrb	r1, [r7, #13]
 8000dfc:	89f8      	ldrh	r0, [r7, #14]
 8000dfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	47a0      	blx	r4
 8000e08:	6178      	str	r0, [r7, #20]
            data,
            size,
            flags);
   }

   return abort;
 8000e0a:	697b      	ldr	r3, [r7, #20]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	371c      	adds	r7, #28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}
 8000e14:	06010003 	.word	0x06010003
 8000e18:	20000164 	.word	0x20000164

08000e1c <ESC_objecthandler>:
 *
 * @param[in] index      = index of SDO download request to handle
 * @param[in] sub-index  = sub-index of SDO download request to handle
 */
void ESC_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	80fb      	strh	r3, [r7, #6]
 8000e26:	460b      	mov	r3, r1
 8000e28:	717b      	strb	r3, [r7, #5]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	807b      	strh	r3, [r7, #2]
   if (ESCvar.post_object_download_hook != NULL)
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <ESC_objecthandler+0x30>)
 8000e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d005      	beq.n	8000e42 <ESC_objecthandler+0x26>
   {
      (ESCvar.post_object_download_hook)(index, subindex, flags);
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <ESC_objecthandler+0x30>)
 8000e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3a:	887a      	ldrh	r2, [r7, #2]
 8000e3c:	7979      	ldrb	r1, [r7, #5]
 8000e3e:	88f8      	ldrh	r0, [r7, #6]
 8000e40:	4798      	blx	r3
   }
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000164 	.word	0x20000164

08000e50 <APP_safeoutput>:

/** Hook called from the slave stack ESC_stopoutputs to act on state changes
 * forcing us to stop outputs. Here we can set them to a safe state.
 */
void APP_safeoutput (void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
   DPRINT ("APP_safeoutput\n");
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <APP_safeoutput+0x1c>)
 8000e56:	f00a ff2f 	bl	800bcb8 <puts>

   if(ESCvar.safeoutput_override != NULL)
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <APP_safeoutput+0x20>)
 8000e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <APP_safeoutput+0x18>
   {
      (ESCvar.safeoutput_override)();
 8000e62:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <APP_safeoutput+0x20>)
 8000e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e66:	4798      	blx	r3
   }
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	0800c580 	.word	0x0800c580
 8000e70:	20000164 	.word	0x20000164

08000e74 <TXPDO_update>:

/** Write local process data to Sync Manager 3, Master Inputs.
 */
void TXPDO_update (void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
   if(ESCvar.txpdo_override != NULL)
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <TXPDO_update+0x3c>)
 8000e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <TXPDO_update+0x14>
   {
      (ESCvar.txpdo_override)();
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <TXPDO_update+0x3c>)
 8000e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e84:	4798      	blx	r3
      {
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
      }
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
   }
}
 8000e86:	e010      	b.n	8000eaa <TXPDO_update+0x36>
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <TXPDO_update+0x3c>)
 8000e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <TXPDO_update+0x40>)
 8000e90:	4619      	mov	r1, r3
 8000e92:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <TXPDO_update+0x44>)
 8000e94:	f003 f92a 	bl	80040ec <COE_pdoPack>
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <TXPDO_update+0x3c>)
 8000e9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4905      	ldr	r1, [pc, #20]	; (8000eb8 <TXPDO_update+0x44>)
 8000ea2:	f44f 508c 	mov.w	r0, #4480	; 0x1180
 8000ea6:	f003 fcb5 	bl	8004814 <ESC_write>
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000164 	.word	0x20000164
 8000eb4:	200003e8 	.word	0x200003e8
 8000eb8:	20000128 	.word	0x20000128

08000ebc <RXPDO_update>:

/** Read Sync Manager 2 to local process data, Master Outputs.
 */
void RXPDO_update (void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
   if(ESCvar.rxpdo_override != NULL)
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <RXPDO_update+0x3c>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <RXPDO_update+0x14>
   {
      (ESCvar.rxpdo_override)();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <RXPDO_update+0x3c>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	4798      	blx	r3
      if (MAX_MAPPINGS_SM2 > 0)
      {
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
      }
   }
}
 8000ece:	e010      	b.n	8000ef2 <RXPDO_update+0x36>
      ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <RXPDO_update+0x3c>)
 8000ed2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4908      	ldr	r1, [pc, #32]	; (8000efc <RXPDO_update+0x40>)
 8000eda:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8000ede:	f003 fc37 	bl	8004750 <ESC_read>
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <RXPDO_update+0x3c>)
 8000ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ee8:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <RXPDO_update+0x44>)
 8000eea:	4619      	mov	r1, r3
 8000eec:	4803      	ldr	r0, [pc, #12]	; (8000efc <RXPDO_update+0x40>)
 8000eee:	f003 f959 	bl	80041a4 <COE_pdoUnpack>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000164 	.word	0x20000164
 8000efc:	200000f8 	.word	0x200000f8
 8000f00:	200003b0 	.word	0x200003b0

08000f04 <DIG_process>:
/* Function to update local I/O, call read ethercat outputs, call
 * write ethercat inputs. Implement watch-dog counter to count-out if we have
 * made state change affecting the App.state.
 */
void DIG_process (uint8_t flags)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
   /* Handle watchdog */
   if((flags & DIG_PROCESS_WD_FLAG) > 0)
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	dd44      	ble.n	8000fa2 <DIG_process+0x9e>
   {
      if (CC_ATOMIC_GET(watchdog) > 0)
 8000f18:	4b4b      	ldr	r3, [pc, #300]	; (8001048 <DIG_process+0x144>)
 8000f1a:	f3bf 8f5b 	dmb	ish
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f3bf 8f5b 	dmb	ish
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	dd0c      	ble.n	8000f42 <DIG_process+0x3e>
      {
         CC_ATOMIC_SUB(watchdog, 1);
 8000f28:	4b47      	ldr	r3, [pc, #284]	; (8001048 <DIG_process+0x144>)
 8000f2a:	f3bf 8f5b 	dmb	ish
 8000f2e:	e853 2f00 	ldrex	r2, [r3]
 8000f32:	f102 32ff 	add.w	r2, r2, #4294967295
 8000f36:	e843 2100 	strex	r1, r2, [r3]
 8000f3a:	2900      	cmp	r1, #0
 8000f3c:	d1f7      	bne.n	8000f2e <DIG_process+0x2a>
 8000f3e:	f3bf 8f5b 	dmb	ish
      }

      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 8000f42:	4b41      	ldr	r3, [pc, #260]	; (8001048 <DIG_process+0x144>)
 8000f44:	f3bf 8f5b 	dmb	ish
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f3bf 8f5b 	dmb	ish
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	dc12      	bgt.n	8000f78 <DIG_process+0x74>
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0))
 8000f52:	4b3e      	ldr	r3, [pc, #248]	; (800104c <DIG_process+0x148>)
 8000f54:	f3bf 8f5b 	dmb	ish
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	f3bf 8f5b 	dmb	ish
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f003 0302 	and.w	r3, r3, #2
      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	dd07      	ble.n	8000f78 <DIG_process+0x74>
      {
         DPRINT("DIG_process watchdog expired\n");
 8000f68:	4839      	ldr	r0, [pc, #228]	; (8001050 <DIG_process+0x14c>)
 8000f6a:	f00a fea5 	bl	800bcb8 <puts>
         ESC_ALstatusgotoerror((ESCsafeop | ESCerror), ALERR_WATCHDOG);
 8000f6e:	211b      	movs	r1, #27
 8000f70:	2014      	movs	r0, #20
 8000f72:	f000 f917 	bl	80011a4 <ESC_ALstatusgotoerror>
      {
 8000f76:	e014      	b.n	8000fa2 <DIG_process+0x9e>
      }
      else if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) == 0))
 8000f78:	4b34      	ldr	r3, [pc, #208]	; (800104c <DIG_process+0x148>)
 8000f7a:	f3bf 8f5b 	dmb	ish
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	f3bf 8f5b 	dmb	ish
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d109      	bne.n	8000fa2 <DIG_process+0x9e>
      {
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 8000f8e:	4b31      	ldr	r3, [pc, #196]	; (8001054 <DIG_process+0x150>)
 8000f90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <DIG_process+0x144>)
 8000f98:	f3bf 8f5b 	dmb	ish
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	f3bf 8f5b 	dmb	ish
      }
   }

   /* Handle Outputs */
   if ((flags & DIG_PROCESS_OUTPUTS_FLAG) > 0)
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	dd2b      	ble.n	8001004 <DIG_process+0x100>
   {
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <DIG_process+0x148>)
 8000fae:	f3bf 8f5b 	dmb	ish
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	f3bf 8f5b 	dmb	ish
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	dd16      	ble.n	8000ff0 <DIG_process+0xec>
         (ESCvar.ALevent & ESCREG_ALEVENT_SM2))
 8000fc2:	4b24      	ldr	r3, [pc, #144]	; (8001054 <DIG_process+0x150>)
 8000fc4:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00e      	beq.n	8000ff0 <DIG_process+0xec>
      {
         RXPDO_update();
 8000fd2:	f7ff ff73 	bl	8000ebc <RXPDO_update>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <DIG_process+0x150>)
 8000fd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <DIG_process+0x144>)
 8000fe0:	f3bf 8f5b 	dmb	ish
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	f3bf 8f5b 	dmb	ish
         /* Set outputs */
         cb_set_outputs();
 8000fea:	f003 fdd1 	bl	8004b90 <cb_set_outputs>
 8000fee:	e009      	b.n	8001004 <DIG_process+0x100>
      }
      else if (ESCvar.ALevent & ESCREG_ALEVENT_SM2)
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <DIG_process+0x150>)
 8000ff2:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <DIG_process+0x100>
      {
         RXPDO_update();
 8001000:	f7ff ff5c 	bl	8000ebc <RXPDO_update>
      }
   }

   /* Call application */
   if ((flags & DIG_PROCESS_APP_HOOK_FLAG) > 0)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	2b00      	cmp	r3, #0
 800100c:	dd06      	ble.n	800101c <DIG_process+0x118>
   {
      /* Call application callback if set */
      if (ESCvar.application_hook != NULL)
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <DIG_process+0x150>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <DIG_process+0x118>
      {
         (ESCvar.application_hook)();
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <DIG_process+0x150>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4798      	blx	r3
      }
   }

   /* Handle Inputs */
   if ((flags & DIG_PROCESS_INPUTS_FLAG) > 0)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	dd0c      	ble.n	8001040 <DIG_process+0x13c>
   {
      if(CC_ATOMIC_GET(ESCvar.App.state) > 0)
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <DIG_process+0x148>)
 8001028:	f3bf 8f5b 	dmb	ish
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	f3bf 8f5b 	dmb	ish
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <DIG_process+0x13c>
      {
         /* Update inputs */
         cb_get_inputs();
 8001038:	f003 fd3e 	bl	8004ab8 <cb_get_inputs>
         TXPDO_update();
 800103c:	f7ff ff1a 	bl	8000e74 <TXPDO_update>
      }
   }
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200000f4 	.word	0x200000f4
 800104c:	2000022f 	.word	0x2000022f
 8001050:	0800c598 	.word	0x0800c598
 8001054:	20000164 	.word	0x20000164

08001058 <ecat_slv_poll>:
 * Polling function. It should be called periodically for an application 
 * when only SM2/DC interrupt is active.
 * Read and handle events for the EtherCAT state, status, mailbox and eeprom.
 */
void ecat_slv_poll (void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
   /* Read local time from ESC*/
   ESC_read (ESCREG_LOCALTIME, (void *) &ESCvar.Time, sizeof (ESCvar.Time));
 800105c:	2204      	movs	r2, #4
 800105e:	4910      	ldr	r1, [pc, #64]	; (80010a0 <ecat_slv_poll+0x48>)
 8001060:	f44f 6011 	mov.w	r0, #2320	; 0x910
 8001064:	f003 fb74 	bl	8004750 <ESC_read>
   ESCvar.Time = etohl (ESCvar.Time);
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <ecat_slv_poll+0x4c>)
 800106a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800106e:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <ecat_slv_poll+0x4c>)
 8001070:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

   /* Check the state machine */
   ESC_state();
 8001074:	f000 ffcc 	bl	8002010 <ESC_state>
   /* Check the SM activation event */
   ESC_sm_act_event();
 8001078:	f000 ff16 	bl	8001ea8 <ESC_sm_act_event>

   /* Check mailboxes */
   if (ESC_mbxprocess())
 800107c:	f000 fc74 	bl	8001968 <ESC_mbxprocess>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <ecat_slv_poll+0x36>
   {
      ESC_coeprocess();
 8001086:	f002 fbe1 	bl	800384c <ESC_coeprocess>
      ESC_foeprocess();
#endif
#if USE_EOE
      ESC_eoeprocess();
#endif
      ESC_xoeprocess();
 800108a:	f000 fda7 	bl	8001bdc <ESC_xoeprocess>
#if USE_EOE
   ESC_eoeprocess_tx();
#endif

   /* Call emulated eeprom handler if set */
   if (ESCvar.esc_hw_eep_handler != NULL)
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <ecat_slv_poll+0x4c>)
 8001090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <ecat_slv_poll+0x44>
   {
      (ESCvar.esc_hw_eep_handler)();
 8001096:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <ecat_slv_poll+0x4c>)
 8001098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800109a:	4798      	blx	r3
   }
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000228 	.word	0x20000228
 80010a4:	20000164 	.word	0x20000164

080010a8 <ecat_slv>:

/*
 * Poll all events in a free-run application
 */
void ecat_slv (void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
   ecat_slv_poll();
 80010ac:	f7ff ffd4 	bl	8001058 <ecat_slv_poll>
   DIG_process(DIG_PROCESS_WD_FLAG | DIG_PROCESS_OUTPUTS_FLAG |
 80010b0:	200f      	movs	r0, #15
 80010b2:	f7ff ff27 	bl	8000f04 <DIG_process>
         DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <ecat_slv_init>:

/*
 * Initialize the slave stack.
 */
void ecat_slv_init (esc_cfg_t * config)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
   DPRINT ("Slave stack init started\n");
 80010c4:	4818      	ldr	r0, [pc, #96]	; (8001128 <ecat_slv_init+0x6c>)
 80010c6:	f00a fdf7 	bl	800bcb8 <puts>

   /* Init watchdog */
   watchdog = config->watchdog_cnt;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	4a17      	ldr	r2, [pc, #92]	; (800112c <ecat_slv_init+0x70>)
 80010d0:	6013      	str	r3, [r2, #0]

   /* Call stack configuration */
   ESC_config (config);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f001 f9e2 	bl	800249c <ESC_config>
   /* Call HW init */
   ESC_init (config);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f003 fbfd 	bl	80048d8 <ESC_init>

   /*  wait until ESC is started up */
   while ((ESCvar.DLstatus & 0x0001) == 0)
 80010de:	e00b      	b.n	80010f8 <ecat_slv_init+0x3c>
   {
      ESC_read (ESCREG_DLSTATUS, (void *) &ESCvar.DLstatus,
 80010e0:	2202      	movs	r2, #2
 80010e2:	4913      	ldr	r1, [pc, #76]	; (8001130 <ecat_slv_init+0x74>)
 80010e4:	f44f 7088 	mov.w	r0, #272	; 0x110
 80010e8:	f003 fb32 	bl	8004750 <ESC_read>
                sizeof (ESCvar.DLstatus));
      ESCvar.DLstatus = etohs (ESCvar.DLstatus);
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <ecat_slv_init+0x78>)
 80010ee:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <ecat_slv_init+0x78>)
 80010f4:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
   while ((ESCvar.DLstatus & 0x0001) == 0)
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <ecat_slv_init+0x78>)
 80010fa:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0ec      	beq.n	80010e0 <ecat_slv_init+0x24>
   /* Init EoE */
   EOE_init();
#endif

   /* reset ESC to init state */
   ESC_ALstatus (ESCinit);
 8001106:	2001      	movs	r0, #1
 8001108:	f000 f830 	bl	800116c <ESC_ALstatus>
   ESC_ALerror (ALERR_NONE);
 800110c:	2000      	movs	r0, #0
 800110e:	f000 f813 	bl	8001138 <ESC_ALerror>
   ESC_stopmbx();
 8001112:	f000 fa7d 	bl	8001610 <ESC_stopmbx>
   ESC_stopinput();
 8001116:	f000 fe71 	bl	8001dfc <ESC_stopinput>
   ESC_stopoutput();
 800111a:	f000 fead 	bl	8001e78 <ESC_stopoutput>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	0800c5bc 	.word	0x0800c5bc
 800112c:	200000f4 	.word	0x200000f4
 8001130:	200001da 	.word	0x200001da
 8001134:	20000164 	.word	0x20000164

08001138 <ESC_ALerror>:
/** Write AL Status Code to the ESC.
 *
 * @param[in] errornumber   = Write an by EtherCAT specified Error number register 0x134 AL Status Code
 */
void ESC_ALerror (uint16_t errornumber)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
   uint16_t dummy;
   ESCvar.ALerror = errornumber;
 8001142:	4a09      	ldr	r2, [pc, #36]	; (8001168 <ESC_ALerror+0x30>)
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	f8a2 3074 	strh.w	r3, [r2, #116]	; 0x74
   dummy = htoes (errornumber);
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALERROR, &dummy, sizeof (dummy));
 800114e:	f107 030e 	add.w	r3, r7, #14
 8001152:	2202      	movs	r2, #2
 8001154:	4619      	mov	r1, r3
 8001156:	f44f 709a 	mov.w	r0, #308	; 0x134
 800115a:	f003 fb5b 	bl	8004814 <ESC_write>
}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000164 	.word	0x20000164

0800116c <ESC_ALstatus>:
 *
 * @param[in] status   = Write current slave status to register 0x130 AL Status
 * reflecting actual state and error indication if present
 */
void ESC_ALstatus (uint8_t status)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
   uint16_t dummy;
   ESCvar.ALstatus = status;
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	b29a      	uxth	r2, r3
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <ESC_ALstatus+0x34>)
 800117c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
   dummy = htoes ((uint16_t) status);
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	b29b      	uxth	r3, r3
 8001184:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALSTATUS, &dummy, sizeof (dummy));
 8001186:	f107 030e 	add.w	r3, r7, #14
 800118a:	2202      	movs	r2, #2
 800118c:	4619      	mov	r1, r3
 800118e:	f44f 7098 	mov.w	r0, #304	; 0x130
 8001192:	f003 fb3f 	bl	8004814 <ESC_write>
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000164 	.word	0x20000164

080011a4 <ESC_ALstatusgotoerror>:
 * reflecting actual state and error indication if present
 * @param[in] errornumber   = Write an by EtherCAT specified Error number
 * register 0x134 AL Status Code
 */
void ESC_ALstatusgotoerror (uint8_t status, uint16_t errornumber)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	460a      	mov	r2, r1
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	4613      	mov	r3, r2
 80011b2:	80bb      	strh	r3, [r7, #4]
   uint8_t an, as;

   if(status & ESCop)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d145      	bne.n	800124a <ESC_ALstatusgotoerror+0xa6>
   {
      /* Erroneous input, ignore */
      return;
   }
   /* Mask error ack of current state */
   as = ESCvar.ALstatus & ESCREG_AL_ERRACKMASK;
 80011be:	4b25      	ldr	r3, [pc, #148]	; (8001254 <ESC_ALstatusgotoerror+0xb0>)
 80011c0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	73bb      	strb	r3, [r7, #14]
   an = as;
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	73fb      	strb	r3, [r7, #15]
   /* Set the state transition, new state in high bits and old in bits  */
   as = ((status & ESCREG_AL_ERRACKMASK) << 4) | (as & 0x0f);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	b25a      	sxtb	r2, r3
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	f003 030f 	and.w	r3, r3, #15
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	73bb      	strb	r3, [r7, #14]
   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <ESC_ALstatusgotoerror+0xb0>)
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d007      	beq.n	8001202 <ESC_ALstatusgotoerror+0x5e>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <ESC_ALstatusgotoerror+0xb0>)
 80011f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f6:	f107 010f 	add.w	r1, r7, #15
 80011fa:	f107 020e 	add.w	r2, r7, #14
 80011fe:	4610      	mov	r0, r2
 8001200:	4798      	blx	r3
   }
   /* Stop outputs if active */
   if ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0)
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <ESC_ALstatusgotoerror+0xb4>)
 8001204:	f3bf 8f5b 	dmb	ish
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	f3bf 8f5b 	dmb	ish
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	dd01      	ble.n	800121c <ESC_ALstatusgotoerror+0x78>
   {
      ESC_stopoutput();
 8001218:	f000 fe2e 	bl	8001e78 <ESC_stopoutput>
   }
   ESC_ALerror(errornumber);
 800121c:	88bb      	ldrh	r3, [r7, #4]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff8a 	bl	8001138 <ESC_ALerror>
   ESC_ALstatus(status);
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ffa0 	bl	800116c <ESC_ALstatus>
   an = status;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	73fb      	strb	r3, [r7, #15]
   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <ESC_ALstatusgotoerror+0xb0>)
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	2b00      	cmp	r3, #0
 8001236:	d009      	beq.n	800124c <ESC_ALstatusgotoerror+0xa8>
   {
      ESCvar.post_state_change_hook (&as, &an);
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <ESC_ALstatusgotoerror+0xb0>)
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123c:	f107 010f 	add.w	r1, r7, #15
 8001240:	f107 020e 	add.w	r2, r7, #14
 8001244:	4610      	mov	r0, r2
 8001246:	4798      	blx	r3
 8001248:	e000      	b.n	800124c <ESC_ALstatusgotoerror+0xa8>
      return;
 800124a:	bf00      	nop
   }
}
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000164 	.word	0x20000164
 8001258:	2000022f 	.word	0x2000022f

0800125c <ESC_SMack>:
 * Sync Manager event Bit 3 in ALevent. The result is not used.
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMack (uint8_t n)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
   uint8_t dummy;
   ESC_read (ESCREG_SM0ACTIVATE + (n << 3), &dummy, 1);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	b29b      	uxth	r3, r3
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	b29b      	uxth	r3, r3
 800126e:	f603 0306 	addw	r3, r3, #2054	; 0x806
 8001272:	b29b      	uxth	r3, r3
 8001274:	f107 010f 	add.w	r1, r7, #15
 8001278:	2201      	movs	r2, #1
 800127a:	4618      	mov	r0, r3
 800127c:	f003 fa68 	bl	8004750 <ESC_read>
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <ESC_SMstatus>:
 * result in global variable ESCvar.SM[n].
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMstatus (uint8_t n)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	3314      	adds	r3, #20
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <ESC_SMstatus+0x38>)
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
   ESC_read (ESCREG_SM0STATUS + (n << 3), &(sm->Status), 1);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	f603 0305 	addw	r3, r3, #2053	; 0x805
 80012aa:	b298      	uxth	r0, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3305      	adds	r3, #5
 80012b0:	2201      	movs	r2, #1
 80012b2:	4619      	mov	r1, r3
 80012b4:	f003 fa4c 	bl	8004750 <ESC_read>
}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000164 	.word	0x20000164

080012c4 <ESC_SMwritepdi>:
/** Write ESCvar.SM[n] data to ESC PDI control register 0x807(+ offset to SyncManager n).
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMwritepdi (uint8_t n)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	3314      	adds	r3, #20
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4a09      	ldr	r2, [pc, #36]	; (80012fc <ESC_SMwritepdi+0x38>)
 80012d6:	4413      	add	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
   ESC_write (ESCREG_SM0PDI + (n << 3), &(sm->ActPDI), 1);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	f603 0307 	addw	r3, r3, #2055	; 0x807
 80012e6:	b298      	uxth	r0, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3307      	adds	r3, #7
 80012ec:	2201      	movs	r2, #1
 80012ee:	4619      	mov	r1, r3
 80012f0:	f003 fa90 	bl	8004814 <ESC_write>
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000164 	.word	0x20000164

08001300 <ESC_SMenable>:
/** Write 0 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to Activate the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMenable (uint8_t n)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	3314      	adds	r3, #20
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4a08      	ldr	r2, [pc, #32]	; (8001334 <ESC_SMenable+0x34>)
 8001312:	4413      	add	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
   sm->ActPDI &= ~ESCREG_SMENABLE_BIT;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	79db      	ldrb	r3, [r3, #7]
 800131a:	f023 0301 	bic.w	r3, r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ffcc 	bl	80012c4 <ESC_SMwritepdi>
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000164 	.word	0x20000164

08001338 <ESC_SMdisable>:
/** Write 1 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to De-activte the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMdisable (uint8_t n)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	3314      	adds	r3, #20
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4a08      	ldr	r2, [pc, #32]	; (800136c <ESC_SMdisable+0x34>)
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
   sm->ActPDI |= ESCREG_SMENABLE_BIT;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	79db      	ldrb	r3, [r3, #7]
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	b2da      	uxtb	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ffb0 	bl	80012c4 <ESC_SMwritepdi>
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000164 	.word	0x20000164

08001370 <ESC_address>:
/** Read Configured Station Address register 0x010 assigned by the Master.
 *
 */
void ESC_address (void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
   ESC_read (ESCREG_ADDRESS, (void *) &ESCvar.address, sizeof (ESCvar.address));
 8001374:	2202      	movs	r2, #2
 8001376:	4906      	ldr	r1, [pc, #24]	; (8001390 <ESC_address+0x20>)
 8001378:	2010      	movs	r0, #16
 800137a:	f003 f9e9 	bl	8004750 <ESC_read>
   ESCvar.address = etohs (ESCvar.address);
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <ESC_address+0x24>)
 8001380:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <ESC_address+0x24>)
 8001386:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200001dc 	.word	0x200001dc
 8001394:	20000164 	.word	0x20000164

08001398 <ESC_SYNCactivation>:
/** Read SYNC Out Unit activation registers 0x981
 *
 * @return value of register Activation.
 */
uint8_t ESC_SYNCactivation (void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
   uint8_t activation;
   ESC_read (ESCREG_SYNC_ACT, &activation, sizeof(activation));
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	2201      	movs	r2, #1
 80013a2:	4619      	mov	r1, r3
 80013a4:	f640 1081 	movw	r0, #2433	; 0x981
 80013a8:	f003 f9d2 	bl	8004750 <ESC_read>
   return activation;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <ESC_checkDC>:
/** Validate the DC values if the SYNC unit is activated.
 *
 * @return = 0 if OK, else ERROR code to be set by caller.
 */
uint16_t ESC_checkDC (void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
   uint16_t ret = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	80fb      	strh	r3, [r7, #6]

   uint8_t sync_act = ESC_SYNCactivation();
 80013c2:	f7ff ffe9 	bl	8001398 <ESC_SYNCactivation>
 80013c6:	4603      	mov	r3, r0
 80013c8:	717b      	strb	r3, [r7, #5]
   /* Do we need to check sync settings? */
   if((sync_act & (ESCREG_SYNC_ACT_ACTIVATED | ESCREG_SYNC_AUTO_ACTIVATED)) > 0)
 80013ca:	797b      	ldrb	r3, [r7, #5]
 80013cc:	f003 0309 	and.w	r3, r3, #9
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	dd0b      	ble.n	80013ec <ESC_checkDC+0x34>
   {
      /* Trigger a by the application given DC check handler, return error if
       *  non is given
       */
      ret = ALERR_DCINVALIDSYNCCFG;
 80013d4:	2330      	movs	r3, #48	; 0x30
 80013d6:	80fb      	strh	r3, [r7, #6]
      if(ESCvar.esc_check_dc_handler != NULL)
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <ESC_checkDC+0x50>)
 80013da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00d      	beq.n	80013fc <ESC_checkDC+0x44>
      {
         ret = (ESCvar.esc_check_dc_handler)();
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <ESC_checkDC+0x50>)
 80013e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e4:	4798      	blx	r3
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
 80013ea:	e007      	b.n	80013fc <ESC_checkDC+0x44>
      }
   }
   else
   {
      ESCvar.dcsync = 0;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <ESC_checkDC+0x50>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      ESCvar.synccounter = 0;
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <ESC_checkDC+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   }

   return ret;
 80013fc:	88fb      	ldrh	r3, [r7, #6]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000164 	.word	0x20000164

0800140c <ESC_checkmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state request, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_checkmbx (uint8_t state)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM0, (void *) &ESCvar.SM[0], sizeof (ESCvar.SM[0]));
 8001416:	2208      	movs	r2, #8
 8001418:	4934      	ldr	r1, [pc, #208]	; (80014ec <ESC_checkmbx+0xe0>)
 800141a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800141e:	f003 f997 	bl	8004750 <ESC_read>
   ESC_read (ESCREG_SM1, (void *) &ESCvar.SM[1], sizeof (ESCvar.SM[1]));
 8001422:	2208      	movs	r2, #8
 8001424:	4932      	ldr	r1, [pc, #200]	; (80014f0 <ESC_checkmbx+0xe4>)
 8001426:	f640 0008 	movw	r0, #2056	; 0x808
 800142a:	f003 f991 	bl	8004750 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[0];
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <ESC_checkmbx+0xe0>)
 8001430:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX0_sma) || (etohs (SM->Length) != ESC_MBX0_sml)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	b29a      	uxth	r2, r3
 8001438:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <ESC_checkmbx+0xe8>)
 800143a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d116      	bne.n	8001470 <ESC_checkmbx+0x64>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	885b      	ldrh	r3, [r3, #2]
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <ESC_checkmbx+0xe8>)
 800144a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144c:	885b      	ldrh	r3, [r3, #2]
 800144e:	429a      	cmp	r2, r3
 8001450:	d10e      	bne.n	8001470 <ESC_checkmbx+0x64>
       || (SM->Command != ESC_MBX0_smc) || (ESCvar.SM[0].ECsm == 0))
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	791a      	ldrb	r2, [r3, #4]
 8001456:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <ESC_checkmbx+0xe8>)
 8001458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145a:	799b      	ldrb	r3, [r3, #6]
 800145c:	429a      	cmp	r2, r3
 800145e:	d107      	bne.n	8001470 <ESC_checkmbx+0x64>
 8001460:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <ESC_checkmbx+0xe8>)
 8001462:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10b      	bne.n	8001488 <ESC_checkmbx+0x7c>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM0;
 8001470:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <ESC_checkmbx+0xe8>)
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      ESC_SMdisable (0);
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff ff5d 	bl	8001338 <ESC_SMdisable>
      ESC_SMdisable (1);
 800147e:	2001      	movs	r0, #1
 8001480:	f7ff ff5a 	bl	8001338 <ESC_SMdisable>
      return (uint8_t) (ESCinit | ESCerror);      //fail state change
 8001484:	2311      	movs	r3, #17
 8001486:	e02d      	b.n	80014e4 <ESC_checkmbx+0xd8>
   }
   SM = (_ESCsm2 *) & ESCvar.SM[1];
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <ESC_checkmbx+0xe4>)
 800148a:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX1_sma) || (etohs (SM->Length) != ESC_MBX1_sml)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <ESC_checkmbx+0xe8>)
 8001494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d116      	bne.n	80014ca <ESC_checkmbx+0xbe>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	885b      	ldrh	r3, [r3, #2]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <ESC_checkmbx+0xe8>)
 80014a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80014a6:	885b      	ldrh	r3, [r3, #2]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d10e      	bne.n	80014ca <ESC_checkmbx+0xbe>
       || (SM->Command != ESC_MBX1_smc) || (ESCvar.SM[1].ECsm == 0))
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	791a      	ldrb	r2, [r3, #4]
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <ESC_checkmbx+0xe8>)
 80014b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80014b4:	799b      	ldrb	r3, [r3, #6]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d107      	bne.n	80014ca <ESC_checkmbx+0xbe>
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <ESC_checkmbx+0xe8>)
 80014bc:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10b      	bne.n	80014e2 <ESC_checkmbx+0xd6>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM1;
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <ESC_checkmbx+0xe8>)
 80014cc:	2202      	movs	r2, #2
 80014ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      ESC_SMdisable (0);
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff ff30 	bl	8001338 <ESC_SMdisable>
      ESC_SMdisable (1);
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff ff2d 	bl	8001338 <ESC_SMdisable>
      return ESCinit | ESCerror;        //fail state change
 80014de:	2311      	movs	r3, #17
 80014e0:	e000      	b.n	80014e4 <ESC_checkmbx+0xd8>
   }
   return state;
 80014e2:	79fb      	ldrb	r3, [r7, #7]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000204 	.word	0x20000204
 80014f0:	2000020c 	.word	0x2000020c
 80014f4:	20000164 	.word	0x20000164

080014f8 <ESC_startmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbx (uint8_t state)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = MBXSIZE;
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <ESC_startmbx+0x80>)
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	65da      	str	r2, [r3, #92]	; 0x5c
   ESCvar.activemb0 = &ESCvar.mb[0];
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <ESC_startmbx+0x80>)
 800150a:	4a1c      	ldr	r2, [pc, #112]	; (800157c <ESC_startmbx+0x84>)
 800150c:	661a      	str	r2, [r3, #96]	; 0x60
   ESCvar.activemb1 = &ESCvar.mb[1];
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <ESC_startmbx+0x80>)
 8001510:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <ESC_startmbx+0x88>)
 8001512:	665a      	str	r2, [r3, #100]	; 0x64


   ESC_SMenable (0);
 8001514:	2000      	movs	r0, #0
 8001516:	f7ff fef3 	bl	8001300 <ESC_SMenable>
   ESC_SMenable (1);
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff fef0 	bl	8001300 <ESC_SMenable>
   ESC_SMstatus (0);
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff feb1 	bl	8001288 <ESC_SMstatus>
   ESC_SMstatus (1);
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff feae 	bl	8001288 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff6c 	bl	800140c <ESC_checkmbx>
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	2b00      	cmp	r3, #0
 8001540:	d007      	beq.n	8001552 <ESC_startmbx+0x5a>
   {
      ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 8001542:	2016      	movs	r0, #22
 8001544:	f7ff fdf8 	bl	8001138 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <ESC_startmbx+0x80>)
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001550:	e00d      	b.n	800156e <ESC_startmbx+0x76>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <ESC_startmbx+0x80>)
 8001554:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8001558:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <ESC_startmbx+0x80>)
 8001562:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      ESCvar.MBXrun = 1;
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <ESC_startmbx+0x80>)
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
   }
   return state;
 800156e:	79fb      	ldrb	r3, [r7, #7]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000164 	.word	0x20000164
 800157c:	20000168 	.word	0x20000168
 8001580:	20000170 	.word	0x20000170

08001584 <ESC_startmbxboot>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbxboot (uint8_t state)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = MBXSIZEBOOT;
 800158e:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <ESC_startmbxboot+0x80>)
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	65da      	str	r2, [r3, #92]	; 0x5c
   ESCvar.activemb0 = &ESCvar.mbboot[0];
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <ESC_startmbxboot+0x80>)
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <ESC_startmbxboot+0x84>)
 8001598:	661a      	str	r2, [r3, #96]	; 0x60
   ESCvar.activemb1 = &ESCvar.mbboot[1];
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <ESC_startmbxboot+0x80>)
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <ESC_startmbxboot+0x88>)
 800159e:	665a      	str	r2, [r3, #100]	; 0x64

   ESC_SMenable (0);
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff fead 	bl	8001300 <ESC_SMenable>
   ESC_SMenable (1);
 80015a6:	2001      	movs	r0, #1
 80015a8:	f7ff feaa 	bl	8001300 <ESC_SMenable>
   ESC_SMstatus (0);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff fe6b 	bl	8001288 <ESC_SMstatus>
   ESC_SMstatus (1);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f7ff fe68 	bl	8001288 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff26 	bl	800140c <ESC_checkmbx>
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <ESC_startmbxboot+0x5a>
   {
      ESC_ALerror (ALERR_INVALIDBOOTMBXCONFIG);
 80015ce:	2015      	movs	r0, #21
 80015d0:	f7ff fdb2 	bl	8001138 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <ESC_startmbxboot+0x80>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80015dc:	e00d      	b.n	80015fa <ESC_startmbxboot+0x76>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <ESC_startmbxboot+0x80>)
 80015e0:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 80015e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <ESC_startmbxboot+0x80>)
 80015ee:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      ESCvar.MBXrun = 1;
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <ESC_startmbxboot+0x80>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
   }
   return state;
 80015fa:	79fb      	ldrb	r3, [r7, #7]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000164 	.word	0x20000164
 8001608:	20000178 	.word	0x20000178
 800160c:	20000180 	.word	0x20000180

08001610 <ESC_stopmbx>:

/** Stop mailboxes by disabling SyncManager 0 and 1. Clear local mailbox variables
 * stored in ESCvar.
 */
void ESC_stopmbx (void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
   uint8_t n;
   ESCvar.MBXrun = 0;
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <ESC_stopmbx+0x8c>)
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
   ESC_SMdisable (0);
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff fe8a 	bl	8001338 <ESC_SMdisable>
   ESC_SMdisable (1);
 8001624:	2001      	movs	r0, #1
 8001626:	f7ff fe87 	bl	8001338 <ESC_SMdisable>
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 800162a:	2300      	movs	r3, #0
 800162c:	71fb      	strb	r3, [r7, #7]
 800162e:	e006      	b.n	800163e <ESC_stopmbx+0x2e>
   {
      MBXcontrol[n].state = MBXstate_idle;
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	4a1b      	ldr	r2, [pc, #108]	; (80016a0 <ESC_stopmbx+0x90>)
 8001634:	2100      	movs	r1, #0
 8001636:	54d1      	strb	r1, [r2, r3]
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	3301      	adds	r3, #1
 800163c:	71fb      	strb	r3, [r7, #7]
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d9f5      	bls.n	8001630 <ESC_stopmbx+0x20>
   }
   ESCvar.mbxoutpost = 0;
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <ESC_stopmbx+0x8c>)
 8001646:	2200      	movs	r2, #0
 8001648:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
   ESCvar.mbxbackup = 0;
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <ESC_stopmbx+0x8c>)
 800164e:	2200      	movs	r2, #0
 8001650:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
   ESCvar.xoe = 0;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <ESC_stopmbx+0x8c>)
 8001656:	2200      	movs	r2, #0
 8001658:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
   ESCvar.mbxfree = 1;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <ESC_stopmbx+0x8c>)
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
   ESCvar.toggle = 0;
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <ESC_stopmbx+0x8c>)
 8001666:	2200      	movs	r2, #0
 8001668:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
   ESCvar.mbxincnt = 0;
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <ESC_stopmbx+0x8c>)
 800166e:	2200      	movs	r2, #0
 8001670:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
   ESCvar.segmented = 0;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <ESC_stopmbx+0x8c>)
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
   ESCvar.frags = 0;
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <ESC_stopmbx+0x8c>)
 800167e:	2200      	movs	r2, #0
 8001680:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
   ESCvar.fragsleft = 0;
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <ESC_stopmbx+0x8c>)
 8001686:	2200      	movs	r2, #0
 8001688:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
   ESCvar.txcue = 0;
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <ESC_stopmbx+0x8c>)
 800168e:	2200      	movs	r2, #0
 8001690:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000164 	.word	0x20000164
 80016a0:	20000420 	.word	0x20000420

080016a4 <ESC_readmbx>:
/** Read Receive mailbox and store data in local ESCvar.MBX variable.
 * Combined function for bootstrap and other states. State check decides
 * which one to read.
 */
void ESC_readmbx (void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
   _MBX *MB = (_MBX *)&MBX[0];
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <ESC_readmbx+0x80>)
 80016ac:	607b      	str	r3, [r7, #4]
   uint16_t length;

   ESC_read (ESC_MBX0_sma, MB, ESC_MBXHSIZE);
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <ESC_readmbx+0x84>)
 80016b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	2206      	movs	r2, #6
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f003 f849 	bl	8004750 <ESC_read>
   length = etohs (MB->header.length);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	807b      	strh	r3, [r7, #2]

   if (length > (ESC_MBX0_sml - ESC_MBXHSIZE))
 80016c6:	887b      	ldrh	r3, [r7, #2]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <ESC_readmbx+0x84>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ce:	885b      	ldrh	r3, [r3, #2]
 80016d0:	3b06      	subs	r3, #6
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d905      	bls.n	80016e2 <ESC_readmbx+0x3e>
   {
      length = ESC_MBX0_sml - ESC_MBXHSIZE;
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <ESC_readmbx+0x84>)
 80016d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016da:	885b      	ldrh	r3, [r3, #2]
 80016dc:	3b06      	subs	r3, #6
 80016de:	b29b      	uxth	r3, r3
 80016e0:	807b      	strh	r3, [r7, #2]
   }
   ESC_read (ESC_MBX0_sma + ESC_MBXHSIZE, MB->b, length);
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <ESC_readmbx+0x84>)
 80016e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	3306      	adds	r3, #6
 80016ea:	b298      	uxth	r0, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3306      	adds	r3, #6
 80016f0:	887a      	ldrh	r2, [r7, #2]
 80016f2:	4619      	mov	r1, r3
 80016f4:	f003 f82c 	bl	8004750 <ESC_read>
   if (length + ESC_MBXHSIZE < ESC_MBX0_sml)
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	3306      	adds	r3, #6
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <ESC_readmbx+0x84>)
 80016fe:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001700:	8852      	ldrh	r2, [r2, #2]
 8001702:	4293      	cmp	r3, r2
 8001704:	d207      	bcs.n	8001716 <ESC_readmbx+0x72>
   {
      ESC_read (ESC_MBX0_sme, &length, 1);
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <ESC_readmbx+0x84>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	889b      	ldrh	r3, [r3, #4]
 800170c:	1cb9      	adds	r1, r7, #2
 800170e:	2201      	movs	r2, #1
 8001710:	4618      	mov	r0, r3
 8001712:	f003 f81d 	bl	8004750 <ESC_read>
   }

   MBXcontrol[0].state = MBXstate_inclaim;
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <ESC_readmbx+0x88>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000230 	.word	0x20000230
 8001728:	20000164 	.word	0x20000164
 800172c:	20000420 	.word	0x20000420

08001730 <ESC_writembx>:
 * which one to write.
 *
 * @param[in] n   = Which local mailbox buffer n to send.
 */
void ESC_writembx (uint8_t n)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	4a1e      	ldr	r2, [pc, #120]	; (80017b8 <ESC_writembx+0x88>)
 800173e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001740:	fb02 f303 	mul.w	r3, r2, r3
 8001744:	4a1d      	ldr	r2, [pc, #116]	; (80017bc <ESC_writembx+0x8c>)
 8001746:	4413      	add	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
   uint8_t dummy = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]
   uint16_t length;
   length = etohs (MBh->length);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	785b      	ldrb	r3, [r3, #1]
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	4313      	orrs	r3, r2
 8001758:	82fb      	strh	r3, [r7, #22]

   if (length > (ESC_MBX1_sml - ESC_MBXHSIZE))
 800175a:	8afa      	ldrh	r2, [r7, #22]
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <ESC_writembx+0x88>)
 800175e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001760:	885b      	ldrh	r3, [r3, #2]
 8001762:	3b06      	subs	r3, #6
 8001764:	429a      	cmp	r2, r3
 8001766:	d904      	bls.n	8001772 <ESC_writembx+0x42>
   {
      length = ESC_MBX1_sml - ESC_MBXHSIZE;
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <ESC_writembx+0x88>)
 800176a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800176c:	885b      	ldrh	r3, [r3, #2]
 800176e:	3b06      	subs	r3, #6
 8001770:	82fb      	strh	r3, [r7, #22]
   }
   ESC_write (ESC_MBX1_sma, MBh, ESC_MBXHSIZE + length);
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <ESC_writembx+0x88>)
 8001774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001776:	8818      	ldrh	r0, [r3, #0]
 8001778:	8afb      	ldrh	r3, [r7, #22]
 800177a:	3306      	adds	r3, #6
 800177c:	b29b      	uxth	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	6939      	ldr	r1, [r7, #16]
 8001782:	f003 f847 	bl	8004814 <ESC_write>
   if (length + ESC_MBXHSIZE < ESC_MBX1_sml)
 8001786:	8afb      	ldrh	r3, [r7, #22]
 8001788:	3306      	adds	r3, #6
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <ESC_writembx+0x88>)
 800178c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800178e:	8852      	ldrh	r2, [r2, #2]
 8001790:	4293      	cmp	r3, r2
 8001792:	d208      	bcs.n	80017a6 <ESC_writembx+0x76>
   {
      ESC_write (ESC_MBX1_sme, &dummy, 1);
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <ESC_writembx+0x88>)
 8001796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001798:	889b      	ldrh	r3, [r3, #4]
 800179a:	f107 010f 	add.w	r1, r7, #15
 800179e:	2201      	movs	r2, #1
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 f837 	bl	8004814 <ESC_write>
   }

   ESCvar.mbxfree = 0;
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <ESC_writembx+0x88>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000164 	.word	0x20000164
 80017bc:	20000230 	.word	0x20000230

080017c0 <ESC_ackmbxread>:

/** TBD
 */
void ESC_ackmbxread (void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
   uint8_t dummy = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	71fb      	strb	r3, [r7, #7]

   ESC_write (ESC_MBX1_sma, &dummy, 1);
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <ESC_ackmbxread+0x2c>)
 80017cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	1df9      	adds	r1, r7, #7
 80017d2:	2201      	movs	r2, #1
 80017d4:	4618      	mov	r0, r3
 80017d6:	f003 f81d 	bl	8004814 <ESC_write>
   ESCvar.mbxfree = 1;
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <ESC_ackmbxread+0x2c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000164 	.word	0x20000164

080017f0 <ESC_claimbuffer>:
 * address master and mailbox next CNT value between 1-7.
 *
 * @return The index of Mailbox buffer prepared for outbox. IF no buffer is available return 0.
 */
uint8_t ESC_claimbuffer (void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
   _MBXh *MBh;
   uint8_t n = ESC_MBXBUFFERS - 1;
 80017f6:	2302      	movs	r3, #2
 80017f8:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 80017fa:	e002      	b.n	8001802 <ESC_claimbuffer+0x12>
   {
      n--;
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	3b01      	subs	r3, #1
 8001800:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <ESC_claimbuffer+0x22>
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4a2b      	ldr	r2, [pc, #172]	; (80018b8 <ESC_claimbuffer+0xc8>)
 800180c:	5cd3      	ldrb	r3, [r2, r3]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f4      	bne.n	80017fc <ESC_claimbuffer+0xc>
   }
   if (n)
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d047      	beq.n	80018a8 <ESC_claimbuffer+0xb8>
   {
      MBXcontrol[n].state = MBXstate_outclaim;
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	4a27      	ldr	r2, [pc, #156]	; (80018b8 <ESC_claimbuffer+0xc8>)
 800181c:	2102      	movs	r1, #2
 800181e:	54d1      	strb	r1, [r2, r3]
      MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	4a26      	ldr	r2, [pc, #152]	; (80018bc <ESC_claimbuffer+0xcc>)
 8001824:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a25      	ldr	r2, [pc, #148]	; (80018c0 <ESC_claimbuffer+0xd0>)
 800182c:	4413      	add	r3, r2
 800182e:	603b      	str	r3, [r7, #0]
      ESCvar.mbxcnt++;
 8001830:	4b22      	ldr	r3, [pc, #136]	; (80018bc <ESC_claimbuffer+0xcc>)
 8001832:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001836:	3301      	adds	r3, #1
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <ESC_claimbuffer+0xcc>)
 800183c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
      ESCvar.mbxcnt = (ESCvar.mbxcnt & 0x07);
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <ESC_claimbuffer+0xcc>)
 8001842:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	b2da      	uxtb	r2, r3
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <ESC_claimbuffer+0xcc>)
 800184e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
      if (ESCvar.mbxcnt == 0)
 8001852:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <ESC_claimbuffer+0xcc>)
 8001854:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001858:	2b00      	cmp	r3, #0
 800185a:	d103      	bne.n	8001864 <ESC_claimbuffer+0x74>
      {
         ESCvar.mbxcnt = 1;
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <ESC_claimbuffer+0xcc>)
 800185e:	2201      	movs	r2, #1
 8001860:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
      }
      MBh->address = htoes (0x0000);      // destination is master
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2200      	movs	r2, #0
 8001868:	709a      	strb	r2, [r3, #2]
 800186a:	2200      	movs	r2, #0
 800186c:	70da      	strb	r2, [r3, #3]
      MBh->channel = 0;
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	7913      	ldrb	r3, [r2, #4]
 8001872:	f36f 0305 	bfc	r3, #0, #6
 8001876:	7113      	strb	r3, [r2, #4]
      MBh->priority = 0;
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	7913      	ldrb	r3, [r2, #4]
 800187c:	f36f 1387 	bfc	r3, #6, #2
 8001880:	7113      	strb	r3, [r2, #4]
      MBh->mbxcnt = ESCvar.mbxcnt;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <ESC_claimbuffer+0xcc>)
 8001884:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	b2d9      	uxtb	r1, r3
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	7953      	ldrb	r3, [r2, #5]
 8001892:	f361 1307 	bfi	r3, r1, #4, #4
 8001896:	7153      	strb	r3, [r2, #5]
      ESCvar.txcue++;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <ESC_claimbuffer+0xcc>)
 800189a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800189e:	3301      	adds	r3, #1
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <ESC_claimbuffer+0xcc>)
 80018a4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
   }
   return n;
 80018a8:	79fb      	ldrb	r3, [r7, #7]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000420 	.word	0x20000420
 80018bc:	20000164 	.word	0x20000164
 80018c0:	20000230 	.word	0x20000230

080018c4 <ESC_outreqbuffer>:
/** Look for any present requests for posting to the outbox.
 *
 * @return the index of Mailbox buffer ready to be posted.
 */
uint8_t ESC_outreqbuffer (void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
   uint8_t n = ESC_MBXBUFFERS - 1;
 80018ca:	2302      	movs	r3, #2
 80018cc:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 80018ce:	e002      	b.n	80018d6 <ESC_outreqbuffer+0x12>
   {
      n--;
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <ESC_outreqbuffer+0x22>
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <ESC_outreqbuffer+0x30>)
 80018e0:	5cd3      	ldrb	r3, [r2, r3]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d1f4      	bne.n	80018d0 <ESC_outreqbuffer+0xc>
   }
   return n;
 80018e6:	79fb      	ldrb	r3, [r7, #7]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	20000420 	.word	0x20000420

080018f8 <MBX_error>:
 * buffer with error information.
 *
 * @param[in] n   = Error number to be sent in mailbox error message.
 */
void MBX_error (uint16_t error)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	80fb      	strh	r3, [r7, #6]
   uint8_t MBXout;
   _MBXerr *mbxerr;
   MBXout = ESC_claimbuffer ();
 8001902:	f7ff ff75 	bl	80017f0 <ESC_claimbuffer>
 8001906:	4603      	mov	r3, r0
 8001908:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d021      	beq.n	8001954 <MBX_error+0x5c>
   {
      mbxerr = (_MBXerr *) &MBX[MBXout * ESC_MBXSIZE];
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	4a12      	ldr	r2, [pc, #72]	; (800195c <MBX_error+0x64>)
 8001914:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001916:	fb02 f303 	mul.w	r3, r2, r3
 800191a:	4a11      	ldr	r2, [pc, #68]	; (8001960 <MBX_error+0x68>)
 800191c:	4413      	add	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
      mbxerr->mbxheader.length = htoes ((uint16_t) 0x04);
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2200      	movs	r2, #0
 8001924:	f042 0204 	orr.w	r2, r2, #4
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	2200      	movs	r2, #0
 800192c:	705a      	strb	r2, [r3, #1]
      mbxerr->mbxheader.mbxtype = MBXERR;
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	7953      	ldrb	r3, [r2, #5]
 8001932:	f36f 0303 	bfc	r3, #0, #4
 8001936:	7153      	strb	r3, [r2, #5]
      mbxerr->type = htoes ((uint16_t) 0x01);
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2200      	movs	r2, #0
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	719a      	strb	r2, [r3, #6]
 8001942:	2200      	movs	r2, #0
 8001944:	71da      	strb	r2, [r3, #7]
      mbxerr->detail = htoes (error);
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	88fa      	ldrh	r2, [r7, #6]
 800194a:	811a      	strh	r2, [r3, #8]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <MBX_error+0x6c>)
 8001950:	2103      	movs	r1, #3
 8001952:	54d1      	strb	r1, [r2, r3]
   }
}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000164 	.word	0x20000164
 8001960:	20000230 	.word	0x20000230
 8001964:	20000420 	.word	0x20000420

08001968 <ESC_mbxprocess>:
 * a mailbox, re-sending a mailbox, reading a mailbox and handles a mailbox full event.
 *
 * @return =0 if nothing to do. =1 if something to be handled by mailbox protocols.
 */
uint8_t ESC_mbxprocess (void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
   uint8_t mbxhandle = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[0];
 8001972:	4b97      	ldr	r3, [pc, #604]	; (8001bd0 <ESC_mbxprocess+0x268>)
 8001974:	603b      	str	r3, [r7, #0]

   if (ESCvar.MBXrun == 0)
 8001976:	4b97      	ldr	r3, [pc, #604]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001978:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <ESC_mbxprocess+0x1c>
   {
      /* nothing to do */
      return 0;
 8001980:	2300      	movs	r3, #0
 8001982:	e121      	b.n	8001bc8 <ESC_mbxprocess+0x260>
   }

   /* SM0/1 access */
   if (ESCvar.ALevent & (ESCREG_ALEVENT_SM0 | ESCREG_ALEVENT_SM1))
 8001984:	4b93      	ldr	r3, [pc, #588]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001986:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800198a:	b29b      	uxth	r3, r3
 800198c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <ESC_mbxprocess+0x38>
   {
      ESC_SMstatus (0);
 8001994:	2000      	movs	r0, #0
 8001996:	f7ff fc77 	bl	8001288 <ESC_SMstatus>
      ESC_SMstatus (1);
 800199a:	2001      	movs	r0, #1
 800199c:	f7ff fc74 	bl	8001288 <ESC_SMstatus>
   }

   /* outmbx read by master */
   if (ESCvar.mbxoutpost && (ESCvar.ALevent & ESCREG_ALEVENT_SM1))
 80019a0:	4b8c      	ldr	r3, [pc, #560]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 80019a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d03d      	beq.n	8001a26 <ESC_mbxprocess+0xbe>
 80019aa:	4b8a      	ldr	r3, [pc, #552]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 80019ac:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d035      	beq.n	8001a26 <ESC_mbxprocess+0xbe>
   {
      ESC_ackmbxread ();
 80019ba:	f7ff ff01 	bl	80017c0 <ESC_ackmbxread>
      /* dispose old backup */
      if (ESCvar.mbxbackup)
 80019be:	4b85      	ldr	r3, [pc, #532]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 80019c0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <ESC_mbxprocess+0x6e>
      {
         MBXcontrol[ESCvar.mbxbackup].state = MBXstate_idle;
 80019c8:	4b82      	ldr	r3, [pc, #520]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 80019ca:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b81      	ldr	r3, [pc, #516]	; (8001bd8 <ESC_mbxprocess+0x270>)
 80019d2:	2100      	movs	r1, #0
 80019d4:	5499      	strb	r1, [r3, r2]
      }
      /* if still to do */
      if (MBXcontrol[ESCvar.mbxoutpost].state == MBXstate_again)
 80019d6:	4b7f      	ldr	r3, [pc, #508]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 80019d8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80019dc:	461a      	mov	r2, r3
 80019de:	4b7e      	ldr	r3, [pc, #504]	; (8001bd8 <ESC_mbxprocess+0x270>)
 80019e0:	5c9b      	ldrb	r3, [r3, r2]
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d105      	bne.n	80019f2 <ESC_mbxprocess+0x8a>
      {
         ESC_writembx (ESCvar.mbxoutpost);
 80019e6:	4b7b      	ldr	r3, [pc, #492]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 80019e8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fe9f 	bl	8001730 <ESC_writembx>
      }
      /* create new backup */
      MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_backup;
 80019f2:	4b78      	ldr	r3, [pc, #480]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 80019f4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b77      	ldr	r3, [pc, #476]	; (8001bd8 <ESC_mbxprocess+0x270>)
 80019fc:	2105      	movs	r1, #5
 80019fe:	5499      	strb	r1, [r3, r2]
      ESCvar.mbxbackup = ESCvar.mbxoutpost;
 8001a00:	4b74      	ldr	r3, [pc, #464]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001a02:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8001a06:	4b73      	ldr	r3, [pc, #460]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001a08:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
      ESCvar.mbxoutpost = 0;
 8001a0c:	4b71      	ldr	r3, [pc, #452]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      /* Do we have any ongoing protocol transfers, return 1 */
      if(ESCvar.xoe > 0)
 8001a14:	4b6f      	ldr	r3, [pc, #444]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001a16:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <ESC_mbxprocess+0xba>
      {
         return 1;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0d2      	b.n	8001bc8 <ESC_mbxprocess+0x260>
      }
      return 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e0d0      	b.n	8001bc8 <ESC_mbxprocess+0x260>
   }

   /* repeat request */
   if (ESCvar.SM[1].ECrep != ESCvar.toggle)
 8001a26:	4b6b      	ldr	r3, [pc, #428]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001a28:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8001a2c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b67      	ldr	r3, [pc, #412]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001a36:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d044      	beq.n	8001ac8 <ESC_mbxprocess+0x160>
   {
      if (ESCvar.mbxoutpost || ESCvar.mbxbackup)
 8001a3e:	4b65      	ldr	r3, [pc, #404]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001a40:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d104      	bne.n	8001a52 <ESC_mbxprocess+0xea>
 8001a48:	4b62      	ldr	r3, [pc, #392]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001a4a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d038      	beq.n	8001ac4 <ESC_mbxprocess+0x15c>
      {
         /* if outmbx empty */
         if (ESCvar.mbxoutpost == 0)
 8001a52:	4b60      	ldr	r3, [pc, #384]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001a54:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d106      	bne.n	8001a6a <ESC_mbxprocess+0x102>
         {
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 8001a5c:	4b5d      	ldr	r3, [pc, #372]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001a5e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fe64 	bl	8001730 <ESC_writembx>
 8001a68:	e012      	b.n	8001a90 <ESC_mbxprocess+0x128>
         }
         else
         {
            /* reset mailbox */
            ESC_SMdisable (1);
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f7ff fc64 	bl	8001338 <ESC_SMdisable>
            /* have to resend later */
            MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_again;
 8001a70:	4b58      	ldr	r3, [pc, #352]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001a72:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b57      	ldr	r3, [pc, #348]	; (8001bd8 <ESC_mbxprocess+0x270>)
 8001a7a:	2106      	movs	r1, #6
 8001a7c:	5499      	strb	r1, [r3, r2]
            /* activate mailbox */
            ESC_SMenable (1);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f7ff fc3e 	bl	8001300 <ESC_SMenable>
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 8001a84:	4b53      	ldr	r3, [pc, #332]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001a86:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fe50 	bl	8001730 <ESC_writembx>
         }
         ESCvar.toggle = ESCvar.SM[1].ECrep;
 8001a90:	4b50      	ldr	r3, [pc, #320]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001a92:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8001a96:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b4d      	ldr	r3, [pc, #308]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001aa0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
         ESCvar.SM[1].PDIrep = ESCvar.toggle;
 8001aa4:	4b4b      	ldr	r3, [pc, #300]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001aa6:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	b2d9      	uxtb	r1, r3
 8001ab0:	4a48      	ldr	r2, [pc, #288]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001ab2:	f892 30af 	ldrb.w	r3, [r2, #175]	; 0xaf
 8001ab6:	f361 0341 	bfi	r3, r1, #1, #1
 8001aba:	f882 30af 	strb.w	r3, [r2, #175]	; 0xaf
         ESC_SMwritepdi (1);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f7ff fc00 	bl	80012c4 <ESC_SMwritepdi>
      }
      return 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e07f      	b.n	8001bc8 <ESC_mbxprocess+0x260>
   }

   /* if the outmailbox is free check if we have something to send */
   if (ESCvar.txcue && (ESCvar.mbxfree || !ESCvar.SM[1].MBXstat))
 8001ac8:	4b42      	ldr	r3, [pc, #264]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001aca:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d02f      	beq.n	8001b32 <ESC_mbxprocess+0x1ca>
 8001ad2:	4b40      	ldr	r3, [pc, #256]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001ad4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d107      	bne.n	8001aec <ESC_mbxprocess+0x184>
 8001adc:	4b3d      	ldr	r3, [pc, #244]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001ade:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d122      	bne.n	8001b32 <ESC_mbxprocess+0x1ca>
   {
      /* check out request mbx */
      mbxhandle = ESC_outreqbuffer ();
 8001aec:	f7ff feea 	bl	80018c4 <ESC_outreqbuffer>
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
      /* outmbx empty and outreq mbx available */
      if (mbxhandle)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01b      	beq.n	8001b32 <ESC_mbxprocess+0x1ca>
      {
         ESC_writembx (mbxhandle);
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fe17 	bl	8001730 <ESC_writembx>
         /* Refresh SM status */
         ESC_SMstatus (1);
 8001b02:	2001      	movs	r0, #1
 8001b04:	f7ff fbc0 	bl	8001288 <ESC_SMstatus>
         /* change state */
         MBXcontrol[mbxhandle].state = MBXstate_outpost;
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	4a33      	ldr	r2, [pc, #204]	; (8001bd8 <ESC_mbxprocess+0x270>)
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	54d1      	strb	r1, [r2, r3]
         ESCvar.mbxoutpost = mbxhandle;
 8001b10:	4a30      	ldr	r2, [pc, #192]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f882 307c 	strb.w	r3, [r2, #124]	; 0x7c
         if (ESCvar.txcue)
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001b1a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <ESC_mbxprocess+0x1ca>
         {
            ESCvar.txcue--;
 8001b22:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001b24:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001b2e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
         }
      }
   }

   /* read mailbox if full and no xoe in progress */
   if ((ESCvar.SM[0].MBXstat != 0) && (MBXcontrol[0].state == 0)
 8001b32:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001b34:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d041      	beq.n	8001bc6 <ESC_mbxprocess+0x25e>
 8001b42:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <ESC_mbxprocess+0x270>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d13d      	bne.n	8001bc6 <ESC_mbxprocess+0x25e>
         && (ESCvar.mbxoutpost == 0) && (ESCvar.xoe == 0))
 8001b4a:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001b4c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d138      	bne.n	8001bc6 <ESC_mbxprocess+0x25e>
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001b56:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d133      	bne.n	8001bc6 <ESC_mbxprocess+0x25e>
   {
      ESC_readmbx ();
 8001b5e:	f7ff fda1 	bl	80016a4 <ESC_readmbx>
      ESCvar.SM[0].MBXstat = 0;
 8001b62:	4a1c      	ldr	r2, [pc, #112]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001b64:	f892 30a5 	ldrb.w	r3, [r2, #165]	; 0xa5
 8001b68:	f36f 03c3 	bfc	r3, #3, #1
 8001b6c:	f882 30a5 	strb.w	r3, [r2, #165]	; 0xa5
      if (etohs (MBh->length) == 0)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d105      	bne.n	8001b86 <ESC_mbxprocess+0x21e>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 8001b7a:	2005      	movs	r0, #5
 8001b7c:	f7ff febc 	bl	80018f8 <MBX_error>
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <ESC_mbxprocess+0x270>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
      }
      if ((MBh->mbxcnt != 0) && (MBh->mbxcnt == ESCvar.mbxincnt))
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	795b      	ldrb	r3, [r3, #5]
 8001b8a:	f023 030f 	bic.w	r3, r3, #15
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00d      	beq.n	8001bb0 <ESC_mbxprocess+0x248>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	795b      	ldrb	r3, [r3, #5]
 8001b98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001ba2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d102      	bne.n	8001bb0 <ESC_mbxprocess+0x248>
      {
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <ESC_mbxprocess+0x270>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
      }
      ESCvar.mbxincnt = MBh->mbxcnt;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	795b      	ldrb	r3, [r3, #5]
 8001bb4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <ESC_mbxprocess+0x26c>)
 8001bbe:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
      return 1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <ESC_mbxprocess+0x260>
   }

   return 0;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000230 	.word	0x20000230
 8001bd4:	20000164 	.word	0x20000164
 8001bd8:	20000420 	.word	0x20000420

08001bdc <ESC_xoeprocess>:
/** Handler for incorrect or unsupported mailbox data. Write error response
 * in Mailbox.
 */
void ESC_xoeprocess (void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   if (ESCvar.MBXrun == 0)
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <ESC_xoeprocess+0x5c>)
 8001be4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d021      	beq.n	8001c30 <ESC_xoeprocess+0x54>
   {
      return;
   }
   if ((ESCvar.xoe == 0) && (MBXcontrol[0].state == MBXstate_inclaim))
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <ESC_xoeprocess+0x5c>)
 8001bee:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d11d      	bne.n	8001c32 <ESC_xoeprocess+0x56>
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <ESC_xoeprocess+0x60>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d119      	bne.n	8001c32 <ESC_xoeprocess+0x56>
   {
      mbh = (_MBXh *) &MBX[0];
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <ESC_xoeprocess+0x64>)
 8001c00:	607b      	str	r3, [r7, #4]
      if ((mbh->mbxtype == 0) || (etohs (mbh->length) == 0))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	795b      	ldrb	r3, [r3, #5]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d004      	beq.n	8001c1a <ESC_xoeprocess+0x3e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <ESC_xoeprocess+0x46>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 8001c1a:	2005      	movs	r0, #5
 8001c1c:	f7ff fe6c 	bl	80018f8 <MBX_error>
 8001c20:	e002      	b.n	8001c28 <ESC_xoeprocess+0x4c>
      }
      else
      {
         MBX_error (MBXERR_UNSUPPORTEDPROTOCOL);
 8001c22:	2002      	movs	r0, #2
 8001c24:	f7ff fe68 	bl	80018f8 <MBX_error>
      }
      /* mailbox type not supported, drop mailbox */
      MBXcontrol[0].state = MBXstate_idle;
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <ESC_xoeprocess+0x60>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	e000      	b.n	8001c32 <ESC_xoeprocess+0x56>
      return;
 8001c30:	bf00      	nop
   }
}
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000164 	.word	0x20000164
 8001c3c:	20000420 	.word	0x20000420
 8001c40:	20000230 	.word	0x20000230

08001c44 <ESC_checkSM23>:
 *
 * @param[in] state   = Requested state.
 * @return = incoming state request if every thing checks out OK. = state (PREOP | ERROR)  if something isn't correct.
 */
uint8_t ESC_checkSM23 (uint8_t state)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM2, (void *) &ESCvar.SM[2], sizeof (ESCvar.SM[2]));
 8001c4e:	2208      	movs	r2, #8
 8001c50:	4930      	ldr	r1, [pc, #192]	; (8001d14 <ESC_checkSM23+0xd0>)
 8001c52:	f44f 6001 	mov.w	r0, #2064	; 0x810
 8001c56:	f002 fd7b 	bl	8004750 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[2];
 8001c5a:	4b2e      	ldr	r3, [pc, #184]	; (8001d14 <ESC_checkSM23+0xd0>)
 8001c5c:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_SM2_sma) || (etohs (SM->Length) != ESCvar.ESC_SM2_sml)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 8001c68:	d111      	bne.n	8001c8e <ESC_checkSM23+0x4a>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	885b      	ldrh	r3, [r3, #2]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <ESC_checkSM23+0xd4>)
 8001c72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d109      	bne.n	8001c8e <ESC_checkSM23+0x4a>
       || (SM->Command != ESC_SM2_smc) || !(SM->ActESC & ESC_SM2_act))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	791b      	ldrb	r3, [r3, #4]
 8001c7e:	2b24      	cmp	r3, #36	; 0x24
 8001c80:	d105      	bne.n	8001c8e <ESC_checkSM23+0x4a>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	799b      	ldrb	r3, [r3, #6]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d105      	bne.n	8001c9a <ESC_checkSM23+0x56>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 8001c8e:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <ESC_checkSM23+0xd4>)
 8001c90:	2204      	movs	r2, #4
 8001c92:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      /* fail state change */
      return (ESCpreop | ESCerror);
 8001c96:	2312      	movs	r3, #18
 8001c98:	e038      	b.n	8001d0c <ESC_checkSM23+0xc8>
   }
   if ((ESC_SM2_sma + (etohs (SM->Length) * 3)) > ESC_SM3_sma)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	885b      	ldrh	r3, [r3, #2]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001cac:	f5b3 5f8c 	cmp.w	r3, #4480	; 0x1180
 8001cb0:	dd05      	ble.n	8001cbe <ESC_checkSM23+0x7a>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <ESC_checkSM23+0xd4>)
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      /* SM2 overlaps SM3, fail state change */
      return (ESCpreop | ESCerror);
 8001cba:	2312      	movs	r3, #18
 8001cbc:	e026      	b.n	8001d0c <ESC_checkSM23+0xc8>
   }
   ESC_read (ESCREG_SM3, (void *) &ESCvar.SM[3], sizeof (ESCvar.SM[3]));
 8001cbe:	2208      	movs	r2, #8
 8001cc0:	4916      	ldr	r1, [pc, #88]	; (8001d1c <ESC_checkSM23+0xd8>)
 8001cc2:	f640 0018 	movw	r0, #2072	; 0x818
 8001cc6:	f002 fd43 	bl	8004750 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[3];
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <ESC_checkSM23+0xd8>)
 8001ccc:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_SM3_sma) || (etohs (SM->Length) != ESCvar.ESC_SM3_sml)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	f5b3 5f8c 	cmp.w	r3, #4480	; 0x1180
 8001cd8:	d111      	bne.n	8001cfe <ESC_checkSM23+0xba>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	885b      	ldrh	r3, [r3, #2]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <ESC_checkSM23+0xd4>)
 8001ce2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d109      	bne.n	8001cfe <ESC_checkSM23+0xba>
       || (SM->Command != ESC_SM3_smc) || !(SM->ActESC & ESC_SM3_act))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	791b      	ldrb	r3, [r3, #4]
 8001cee:	2b20      	cmp	r3, #32
 8001cf0:	d105      	bne.n	8001cfe <ESC_checkSM23+0xba>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	799b      	ldrb	r3, [r3, #6]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d105      	bne.n	8001d0a <ESC_checkSM23+0xc6>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <ESC_checkSM23+0xd4>)
 8001d00:	2208      	movs	r2, #8
 8001d02:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      /* fail state change */
      return (ESCpreop | ESCerror);
 8001d06:	2312      	movs	r3, #18
 8001d08:	e000      	b.n	8001d0c <ESC_checkSM23+0xc8>
   }
   return state;
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000214 	.word	0x20000214
 8001d18:	20000164 	.word	0x20000164
 8001d1c:	2000021c 	.word	0x2000021c

08001d20 <ESC_startinput>:
 *
 * @param[in] state   = Requested state.
 * @return = state, incoming state request if every thing checks out OK. =state (PREOP | ERROR) if something isn't correct.
 */
uint8_t ESC_startinput (uint8_t state)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]

   state = ESC_checkSM23 (state);
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff89 	bl	8001c44 <ESC_checkSM23>
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]

   if (state != (ESCpreop | ESCerror))
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	2b12      	cmp	r3, #18
 8001d3a:	d00a      	beq.n	8001d52 <ESC_startinput+0x32>
   {
      ESC_SMenable (3);
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f7ff fadf 	bl	8001300 <ESC_SMenable>
      CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_INPUT);
 8001d42:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <ESC_startinput+0xd4>)
 8001d44:	f3bf 8f5b 	dmb	ish
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	f3bf 8f5b 	dmb	ish
 8001d50:	e013      	b.n	8001d7a <ESC_startinput+0x5a>
   }
   else
   {
      ESC_SMdisable (2);
 8001d52:	2002      	movs	r0, #2
 8001d54:	f7ff faf0 	bl	8001338 <ESC_SMdisable>
      ESC_SMdisable (3);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f7ff faed 	bl	8001338 <ESC_SMdisable>
      if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 8001d5e:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <ESC_startinput+0xd8>)
 8001d60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <ESC_startinput+0x54>
      {
         ESC_ALerror (ALERR_INVALIDINPUTSM);
 8001d6c:	201e      	movs	r0, #30
 8001d6e:	f7ff f9e3 	bl	8001138 <ESC_ALerror>
 8001d72:	e002      	b.n	8001d7a <ESC_startinput+0x5a>
      }
      else
      {
         ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 8001d74:	201d      	movs	r0, #29
 8001d76:	f7ff f9df 	bl	8001138 <ESC_ALerror>
      }
   }

   /* Exit here if polling */
   if (ESCvar.use_interrupt == 0)
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <ESC_startinput+0xd8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <ESC_startinput+0x66>
   {
      return state;
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	e032      	b.n	8001dec <ESC_startinput+0xcc>
   }

   if (state != (ESCpreop | ESCerror))
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	2b12      	cmp	r3, #18
 8001d8a:	d02e      	beq.n	8001dea <ESC_startinput+0xca>
   {
      uint16_t dc_check_result;
      dc_check_result = ESC_checkDC();
 8001d8c:	f7ff fb14 	bl	80013b8 <ESC_checkDC>
 8001d90:	4603      	mov	r3, r0
 8001d92:	81fb      	strh	r3, [r7, #14]
      if(dc_check_result > 0)
 8001d94:	89fb      	ldrh	r3, [r7, #14]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d013      	beq.n	8001dc2 <ESC_startinput+0xa2>
      {
         ESC_ALerror (dc_check_result);
 8001d9a:	89fb      	ldrh	r3, [r7, #14]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f9cb 	bl	8001138 <ESC_ALerror>
         state = (ESCpreop | ESCerror);
 8001da2:	2312      	movs	r3, #18
 8001da4:	71fb      	strb	r3, [r7, #7]

         ESC_SMdisable (2);
 8001da6:	2002      	movs	r0, #2
 8001da8:	f7ff fac6 	bl	8001338 <ESC_SMdisable>
         ESC_SMdisable (3);
 8001dac:	2003      	movs	r0, #3
 8001dae:	f7ff fac3 	bl	8001338 <ESC_SMdisable>
         CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <ESC_startinput+0xd4>)
 8001db4:	f3bf 8f5b 	dmb	ish
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	f3bf 8f5b 	dmb	ish
 8001dc0:	e013      	b.n	8001dea <ESC_startinput+0xca>
      }
      else
      {
         if (ESCvar.esc_hw_interrupt_enable != NULL)
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <ESC_startinput+0xd8>)
 8001dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00f      	beq.n	8001dea <ESC_startinput+0xca>
         {
            if(ESCvar.dcsync > 0)
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <ESC_startinput+0xd8>)
 8001dcc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <ESC_startinput+0xc0>
            {
               ESCvar.esc_hw_interrupt_enable(ESCREG_ALEVENT_DC_SYNC0 |
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <ESC_startinput+0xd8>)
 8001dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd8:	f240 4004 	movw	r0, #1028	; 0x404
 8001ddc:	4798      	blx	r3
 8001dde:	e004      	b.n	8001dea <ESC_startinput+0xca>
                     ESCREG_ALEVENT_SM2);
            }
            else
            {
               ESCvar.esc_hw_interrupt_enable(ESCREG_ALEVENT_SM2);
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <ESC_startinput+0xd8>)
 8001de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001de8:	4798      	blx	r3
            }
         }
      }
   }

   return state;
 8001dea:	79fb      	ldrb	r3, [r7, #7]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000022f 	.word	0x2000022f
 8001df8:	20000164 	.word	0x20000164

08001dfc <ESC_stopinput>:
/** Unconditional stop of updating inputs by disabling Sync Manager 2 & 3.
 * Set the App.state to APPSTATE_IDLE.
 *
 */
void ESC_stopinput (void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
   CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <ESC_stopinput+0x3c>)
 8001e02:	f3bf 8f5b 	dmb	ish
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (3);
 8001e0e:	2003      	movs	r0, #3
 8001e10:	f7ff fa92 	bl	8001338 <ESC_SMdisable>
   ESC_SMdisable (2);
 8001e14:	2002      	movs	r0, #2
 8001e16:	f7ff fa8f 	bl	8001338 <ESC_SMdisable>

   /* Call interrupt disable hook case it have been configured  */
   if ((ESCvar.use_interrupt != 0) &&
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <ESC_stopinput+0x40>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <ESC_stopinput+0x38>
         (ESCvar.esc_hw_interrupt_disable != NULL))
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <ESC_stopinput+0x40>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   if ((ESCvar.use_interrupt != 0) &&
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <ESC_stopinput+0x38>
   {
      ESCvar.esc_hw_interrupt_disable (ESCREG_ALEVENT_DC_SYNC0 |
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <ESC_stopinput+0x40>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	f240 4004 	movw	r0, #1028	; 0x404
 8001e32:	4798      	blx	r3
            ESCREG_ALEVENT_SM2);
   }
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	2000022f 	.word	0x2000022f
 8001e3c:	20000164 	.word	0x20000164

08001e40 <ESC_startoutput>:
 * @param[in] state   = Not used.
 * @return = state unchanged.
 *
 */
uint8_t ESC_startoutput (uint8_t state)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]

   ESC_SMenable (2);
 8001e4a:	2002      	movs	r0, #2
 8001e4c:	f7ff fa58 	bl	8001300 <ESC_SMenable>
   CC_ATOMIC_OR(ESCvar.App.state, APPSTATE_OUTPUT);
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <ESC_startoutput+0x34>)
 8001e52:	f3bf 8f5b 	dmb	ish
 8001e56:	e8d3 2f4f 	ldrexb	r2, [r3]
 8001e5a:	f042 0202 	orr.w	r2, r2, #2
 8001e5e:	e8c3 2f41 	strexb	r1, r2, [r3]
 8001e62:	2900      	cmp	r1, #0
 8001e64:	d1f7      	bne.n	8001e56 <ESC_startoutput+0x16>
 8001e66:	f3bf 8f5b 	dmb	ish
   return state;
 8001e6a:	79fb      	ldrb	r3, [r7, #7]

}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	2000022f 	.word	0x2000022f

08001e78 <ESC_stopoutput>:
 * Set the App.state to APPSTATE_INPUT. Call application hook APP_safeoutput
 * letting the user to set safe state values on outputs.
 *
 */
void ESC_stopoutput (void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
   CC_ATOMIC_AND(ESCvar.App.state, APPSTATE_INPUT);
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <ESC_stopoutput+0x2c>)
 8001e7e:	f3bf 8f5b 	dmb	ish
 8001e82:	e8d3 2f4f 	ldrexb	r2, [r3]
 8001e86:	f002 0201 	and.w	r2, r2, #1
 8001e8a:	e8c3 2f41 	strexb	r1, r2, [r3]
 8001e8e:	2900      	cmp	r1, #0
 8001e90:	d1f7      	bne.n	8001e82 <ESC_stopoutput+0xa>
 8001e92:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (2);
 8001e96:	2002      	movs	r0, #2
 8001e98:	f7ff fa4e 	bl	8001338 <ESC_SMdisable>
   APP_safeoutput ();
 8001e9c:	f7fe ffd8 	bl	8000e50 <APP_safeoutput>
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000022f 	.word	0x2000022f

08001ea8 <ESC_sm_act_event>:
/** The state handler acting on SyncManager Activation BIT(4)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_sm_act_event (void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
   uint8_t ac, an, as, ax, ax23;

   /* Have at least on Sync Manager  changed */
   if ((ESCvar.ALevent & ESCREG_ALEVENT_SMCHANGE) == 0)
 8001eae:	4b56      	ldr	r3, [pc, #344]	; (8002008 <ESC_sm_act_event+0x160>)
 8001eb0:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 809e 	beq.w	8001ffc <ESC_sm_act_event+0x154>
      /* nothing to do */
      return;
   }

   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 8001ec0:	4b51      	ldr	r3, [pc, #324]	; (8002008 <ESC_sm_act_event+0x160>)
 8001ec2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 8001ece:	4b4e      	ldr	r3, [pc, #312]	; (8002008 <ESC_sm_act_event+0x160>)
 8001ed0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f003 031f 	and.w	r3, r3, #31
 8001eda:	717b      	strb	r3, [r7, #5]
   an = as;
 8001edc:	797b      	ldrb	r3, [r7, #5]
 8001ede:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d102      	bne.n	8001ef0 <ESC_sm_act_event+0x48>
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d107      	bne.n	8001f00 <ESC_sm_act_event+0x58>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 8001ef8:	79bb      	ldrb	r3, [r7, #6]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	71bb      	strb	r3, [r7, #6]
   }
   /* Enter SM changed handling for all steps but Init and Boot when Mailboxes
    * is up and running
    */
   if ((as & ESCREG_AL_ALLBUTINITMASK) &&
 8001f00:	797b      	ldrb	r3, [r7, #5]
 8001f02:	f003 030e 	and.w	r3, r3, #14
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d05f      	beq.n	8001fca <ESC_sm_act_event+0x122>
 8001f0a:	797b      	ldrb	r3, [r7, #5]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d05c      	beq.n	8001fca <ESC_sm_act_event+0x122>
       ((as == ESCboot) == 0) && ESCvar.MBXrun)
 8001f10:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <ESC_sm_act_event+0x160>)
 8001f12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d057      	beq.n	8001fca <ESC_sm_act_event+0x122>
   {
      /* Validate Sync Managers, reading the Activation register will
       * acknowledge the SyncManager Activation event making us enter
       * this execution path.
       */
      ax = ESC_checkmbx (as);
 8001f1a:	797b      	ldrb	r3, [r7, #5]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fa75 	bl	800140c <ESC_checkmbx>
 8001f22:	4603      	mov	r3, r0
 8001f24:	713b      	strb	r3, [r7, #4]
      ax23 = ESC_checkSM23 (as);
 8001f26:	797b      	ldrb	r3, [r7, #5]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fe8b 	bl	8001c44 <ESC_checkSM23>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	70fb      	strb	r3, [r7, #3]
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 8001f32:	79bb      	ldrb	r3, [r7, #6]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <ESC_sm_act_event+0x9e>
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d040      	beq.n	8001fc8 <ESC_sm_act_event+0x120>
         /* if in error then stay there */
      }
      /* Have we been forced to step down to INIT we will stop mailboxes,
       * update AL Status Code and exit ESC_state
       */
      else if (ax == (ESCinit | ESCerror))
 8001f46:	793b      	ldrb	r3, [r7, #4]
 8001f48:	2b11      	cmp	r3, #17
 8001f4a:	d11a      	bne.n	8001f82 <ESC_sm_act_event+0xda>
      {
         /* If we have activated Inputs and Outputs we need to disable them */
         if (CC_ATOMIC_GET(ESCvar.App.state))
 8001f4c:	4b2f      	ldr	r3, [pc, #188]	; (800200c <ESC_sm_act_event+0x164>)
 8001f4e:	f3bf 8f5b 	dmb	ish
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	f3bf 8f5b 	dmb	ish
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <ESC_sm_act_event+0xbe>
         {
            ESC_stopoutput ();
 8001f5e:	f7ff ff8b 	bl	8001e78 <ESC_stopoutput>
            ESC_stopinput ();
 8001f62:	f7ff ff4b 	bl	8001dfc <ESC_stopinput>
         }
         /* Stop mailboxes and update ALStatus code */
         ESC_stopmbx ();
 8001f66:	f7ff fb53 	bl	8001610 <ESC_stopmbx>
         ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 8001f6a:	2016      	movs	r0, #22
 8001f6c:	f7ff f8e4 	bl	8001138 <ESC_ALerror>
         ESCvar.MBXrun = 0;
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <ESC_sm_act_event+0x160>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
         ESC_ALstatus (ax);
 8001f78:	793b      	ldrb	r3, [r7, #4]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff f8f6 	bl	800116c <ESC_ALstatus>
         return;
 8001f80:	e03f      	b.n	8002002 <ESC_sm_act_event+0x15a>
      }
      /* Have we been forced to step down to PREOP we will stop inputs
       * and outputs, update AL Status Code and exit ESC_state
       */
      else if (CC_ATOMIC_GET(ESCvar.App.state) && (ax23 == (ESCpreop | ESCerror)))
 8001f82:	4b22      	ldr	r3, [pc, #136]	; (800200c <ESC_sm_act_event+0x164>)
 8001f84:	f3bf 8f5b 	dmb	ish
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	f3bf 8f5b 	dmb	ish
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d035      	beq.n	8002000 <ESC_sm_act_event+0x158>
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	2b12      	cmp	r3, #18
 8001f98:	d132      	bne.n	8002000 <ESC_sm_act_event+0x158>
      {
         ESC_stopoutput ();
 8001f9a:	f7ff ff6d 	bl	8001e78 <ESC_stopoutput>
         ESC_stopinput ();
 8001f9e:	f7ff ff2d 	bl	8001dfc <ESC_stopinput>
         if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <ESC_sm_act_event+0x160>)
 8001fa4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <ESC_sm_act_event+0x110>
         {
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 8001fb0:	201e      	movs	r0, #30
 8001fb2:	f7ff f8c1 	bl	8001138 <ESC_ALerror>
 8001fb6:	e002      	b.n	8001fbe <ESC_sm_act_event+0x116>
         }
         else
         {
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 8001fb8:	201d      	movs	r0, #29
 8001fba:	f7ff f8bd 	bl	8001138 <ESC_ALerror>
         }
         ESC_ALstatus (ax23);
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff f8d3 	bl	800116c <ESC_ALstatus>
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 8001fc6:	e01b      	b.n	8002000 <ESC_sm_act_event+0x158>
 8001fc8:	e01a      	b.n	8002000 <ESC_sm_act_event+0x158>
      }
   }
   else
   {
      ESC_SMack (0);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7ff f946 	bl	800125c <ESC_SMack>
      ESC_SMack (1);
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f7ff f943 	bl	800125c <ESC_SMack>
      ESC_SMack (2);
 8001fd6:	2002      	movs	r0, #2
 8001fd8:	f7ff f940 	bl	800125c <ESC_SMack>
      ESC_SMack (3);
 8001fdc:	2003      	movs	r0, #3
 8001fde:	f7ff f93d 	bl	800125c <ESC_SMack>
      ESC_SMack (4);
 8001fe2:	2004      	movs	r0, #4
 8001fe4:	f7ff f93a 	bl	800125c <ESC_SMack>
      ESC_SMack (5);
 8001fe8:	2005      	movs	r0, #5
 8001fea:	f7ff f937 	bl	800125c <ESC_SMack>
      ESC_SMack (6);
 8001fee:	2006      	movs	r0, #6
 8001ff0:	f7ff f934 	bl	800125c <ESC_SMack>
      ESC_SMack (7);
 8001ff4:	2007      	movs	r0, #7
 8001ff6:	f7ff f931 	bl	800125c <ESC_SMack>
 8001ffa:	e002      	b.n	8002002 <ESC_sm_act_event+0x15a>
      return;
 8001ffc:	bf00      	nop
 8001ffe:	e000      	b.n	8002002 <ESC_sm_act_event+0x15a>
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 8002000:	bf00      	nop
   }
}
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000164 	.word	0x20000164
 800200c:	2000022f 	.word	0x2000022f

08002010 <ESC_state>:
/** The state handler acting on ALControl Bit(0)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_state (void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
   uint8_t ac, an, as;

   /* Do we have a state change request pending */
   if (ESCvar.ALevent & ESCREG_ALEVENT_CONTROL)
 8002016:	4bdc      	ldr	r3, [pc, #880]	; (8002388 <ESC_state+0x378>)
 8002018:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800201c:	b29b      	uxth	r3, r3
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 822f 	beq.w	8002486 <ESC_state+0x476>
   {
      ESC_read (ESCREG_ALCONTROL, (void *) &ESCvar.ALcontrol,
 8002028:	2202      	movs	r2, #2
 800202a:	49d8      	ldr	r1, [pc, #864]	; (800238c <ESC_state+0x37c>)
 800202c:	f44f 7090 	mov.w	r0, #288	; 0x120
 8002030:	f002 fb8e 	bl	8004750 <ESC_read>
                sizeof (ESCvar.ALcontrol));
      ESCvar.ALcontrol = etohs (ESCvar.ALcontrol);
 8002034:	4bd4      	ldr	r3, [pc, #848]	; (8002388 <ESC_state+0x378>)
 8002036:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 800203a:	4bd3      	ldr	r3, [pc, #844]	; (8002388 <ESC_state+0x378>)
 800203c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
   {
      /* nothing to do */
      return;
   }
   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 8002040:	4bd1      	ldr	r3, [pc, #836]	; (8002388 <ESC_state+0x378>)
 8002042:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 800204e:	4bce      	ldr	r3, [pc, #824]	; (8002388 <ESC_state+0x378>)
 8002050:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	b2db      	uxtb	r3, r3
 800205c:	717b      	strb	r3, [r7, #5]
   an = as;
 800205e:	797b      	ldrb	r3, [r7, #5]
 8002060:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <ESC_state+0x62>
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d108      	bne.n	8002084 <ESC_state+0x74>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 800207a:	79bb      	ldrb	r3, [r7, #6]
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	b2db      	uxtb	r3, r3
 8002082:	71bb      	strb	r3, [r7, #6]
   }

   /* Error state not acked, leave original */
   if ((an & ESCerror) && ((ac & ESCerror) == 0))
 8002084:	79bb      	ldrb	r3, [r7, #6]
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <ESC_state+0x8a>
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 81f8 	beq.w	800248a <ESC_state+0x47a>
   {
      return;
   }

   /* Mask high bits ALcommand, low bits ALstatus */
   as = (ac << 4) | (as & 0x0f);
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	b25a      	sxtb	r2, r3
 80020a0:	797b      	ldrb	r3, [r7, #5]
 80020a2:	b25b      	sxtb	r3, r3
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	b25b      	sxtb	r3, r3
 80020aa:	4313      	orrs	r3, r2
 80020ac:	b25b      	sxtb	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	717b      	strb	r3, [r7, #5]

   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 80020b2:	4bb5      	ldr	r3, [pc, #724]	; (8002388 <ESC_state+0x378>)
 80020b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <ESC_state+0xb6>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 80020ba:	4bb3      	ldr	r3, [pc, #716]	; (8002388 <ESC_state+0x378>)
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	1db9      	adds	r1, r7, #6
 80020c0:	1d7a      	adds	r2, r7, #5
 80020c2:	4610      	mov	r0, r2
 80020c4:	4798      	blx	r3
   }

   /* Switch through the state change requested via AlControl from
    * current state read in AL status
    */
   switch (as)
 80020c6:	797b      	ldrb	r3, [r7, #5]
 80020c8:	3b11      	subs	r3, #17
 80020ca:	2b77      	cmp	r3, #119	; 0x77
 80020cc:	f200 81a2 	bhi.w	8002414 <ESC_state+0x404>
 80020d0:	a201      	add	r2, pc, #4	; (adr r2, 80020d8 <ESC_state+0xc8>)
 80020d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d6:	bf00      	nop
 80020d8:	0800243f 	.word	0x0800243f
 80020dc:	0800230d 	.word	0x0800230d
 80020e0:	08002317 	.word	0x08002317
 80020e4:	080022ff 	.word	0x080022ff
 80020e8:	08002415 	.word	0x08002415
 80020ec:	08002415 	.word	0x08002415
 80020f0:	08002415 	.word	0x08002415
 80020f4:	080022ed 	.word	0x080022ed
 80020f8:	08002415 	.word	0x08002415
 80020fc:	08002415 	.word	0x08002415
 8002100:	08002415 	.word	0x08002415
 8002104:	08002415 	.word	0x08002415
 8002108:	08002415 	.word	0x08002415
 800210c:	08002415 	.word	0x08002415
 8002110:	08002415 	.word	0x08002415
 8002114:	08002415 	.word	0x08002415
 8002118:	080022b9 	.word	0x080022b9
 800211c:	0800243f 	.word	0x0800243f
 8002120:	08002321 	.word	0x08002321
 8002124:	080023d7 	.word	0x080023d7
 8002128:	08002415 	.word	0x08002415
 800212c:	08002415 	.word	0x08002415
 8002130:	08002415 	.word	0x08002415
 8002134:	080023c9 	.word	0x080023c9
 8002138:	08002415 	.word	0x08002415
 800213c:	08002415 	.word	0x08002415
 8002140:	08002415 	.word	0x08002415
 8002144:	08002415 	.word	0x08002415
 8002148:	08002415 	.word	0x08002415
 800214c:	08002415 	.word	0x08002415
 8002150:	08002415 	.word	0x08002415
 8002154:	08002415 	.word	0x08002415
 8002158:	080022cf 	.word	0x080022cf
 800215c:	08002321 	.word	0x08002321
 8002160:	080022cf 	.word	0x080022cf
 8002164:	080023e1 	.word	0x080023e1
 8002168:	08002415 	.word	0x08002415
 800216c:	08002415 	.word	0x08002415
 8002170:	08002415 	.word	0x08002415
 8002174:	080023fb 	.word	0x080023fb
 8002178:	08002415 	.word	0x08002415
 800217c:	08002415 	.word	0x08002415
 8002180:	08002415 	.word	0x08002415
 8002184:	08002415 	.word	0x08002415
 8002188:	08002415 	.word	0x08002415
 800218c:	08002415 	.word	0x08002415
 8002190:	08002415 	.word	0x08002415
 8002194:	08002415 	.word	0x08002415
 8002198:	080022e1 	.word	0x080022e1
 800219c:	0800232d 	.word	0x0800232d
 80021a0:	08002321 	.word	0x08002321
 80021a4:	0800232d 	.word	0x0800232d
 80021a8:	08002415 	.word	0x08002415
 80021ac:	08002415 	.word	0x08002415
 80021b0:	08002415 	.word	0x08002415
 80021b4:	0800240b 	.word	0x0800240b
 80021b8:	08002415 	.word	0x08002415
 80021bc:	08002415 	.word	0x08002415
 80021c0:	08002415 	.word	0x08002415
 80021c4:	08002415 	.word	0x08002415
 80021c8:	08002415 	.word	0x08002415
 80021cc:	08002415 	.word	0x08002415
 80021d0:	08002415 	.word	0x08002415
 80021d4:	08002415 	.word	0x08002415
 80021d8:	08002415 	.word	0x08002415
 80021dc:	08002415 	.word	0x08002415
 80021e0:	08002415 	.word	0x08002415
 80021e4:	08002415 	.word	0x08002415
 80021e8:	08002415 	.word	0x08002415
 80021ec:	08002415 	.word	0x08002415
 80021f0:	08002415 	.word	0x08002415
 80021f4:	08002415 	.word	0x08002415
 80021f8:	08002415 	.word	0x08002415
 80021fc:	08002415 	.word	0x08002415
 8002200:	08002415 	.word	0x08002415
 8002204:	08002415 	.word	0x08002415
 8002208:	08002415 	.word	0x08002415
 800220c:	08002415 	.word	0x08002415
 8002210:	08002415 	.word	0x08002415
 8002214:	08002415 	.word	0x08002415
 8002218:	08002415 	.word	0x08002415
 800221c:	08002415 	.word	0x08002415
 8002220:	08002415 	.word	0x08002415
 8002224:	08002415 	.word	0x08002415
 8002228:	08002415 	.word	0x08002415
 800222c:	08002415 	.word	0x08002415
 8002230:	08002415 	.word	0x08002415
 8002234:	08002415 	.word	0x08002415
 8002238:	08002415 	.word	0x08002415
 800223c:	08002415 	.word	0x08002415
 8002240:	08002415 	.word	0x08002415
 8002244:	08002415 	.word	0x08002415
 8002248:	08002415 	.word	0x08002415
 800224c:	08002415 	.word	0x08002415
 8002250:	08002415 	.word	0x08002415
 8002254:	08002415 	.word	0x08002415
 8002258:	08002415 	.word	0x08002415
 800225c:	08002415 	.word	0x08002415
 8002260:	08002415 	.word	0x08002415
 8002264:	08002415 	.word	0x08002415
 8002268:	08002415 	.word	0x08002415
 800226c:	08002415 	.word	0x08002415
 8002270:	08002415 	.word	0x08002415
 8002274:	08002415 	.word	0x08002415
 8002278:	08002415 	.word	0x08002415
 800227c:	08002415 	.word	0x08002415
 8002280:	08002415 	.word	0x08002415
 8002284:	08002415 	.word	0x08002415
 8002288:	08002415 	.word	0x08002415
 800228c:	08002415 	.word	0x08002415
 8002290:	08002415 	.word	0x08002415
 8002294:	08002415 	.word	0x08002415
 8002298:	080022e1 	.word	0x080022e1
 800229c:	080023bd 	.word	0x080023bd
 80022a0:	08002321 	.word	0x08002321
 80022a4:	080023ed 	.word	0x080023ed
 80022a8:	08002415 	.word	0x08002415
 80022ac:	08002415 	.word	0x08002415
 80022b0:	08002415 	.word	0x08002415
 80022b4:	0800243f 	.word	0x0800243f
         break;
      }
      case INIT_TO_PREOP:
      {
         /* get station address */
         ESC_address ();
 80022b8:	f7ff f85a 	bl	8001370 <ESC_address>
         COE_initDefaultValues ();
 80022bc:	f001 fe82 	bl	8003fc4 <COE_initDefaultValues>
         an = ESC_startmbx (ac);
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff f918 	bl	80014f8 <ESC_startmbx>
 80022c8:	4603      	mov	r3, r0
 80022ca:	71bb      	strb	r3, [r7, #6]
         break;
 80022cc:	e0ba      	b.n	8002444 <ESC_state+0x434>
      }
      case INIT_TO_BOOT:
      case BOOT_TO_BOOT:
      {
         /* get station address */
         ESC_address ();
 80022ce:	f7ff f84f 	bl	8001370 <ESC_address>
         an = ESC_startmbxboot (ac);
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff f955 	bl	8001584 <ESC_startmbxboot>
 80022da:	4603      	mov	r3, r0
 80022dc:	71bb      	strb	r3, [r7, #6]
         break;
 80022de:	e0b1      	b.n	8002444 <ESC_state+0x434>
      }
      case INIT_TO_SAFEOP:
      case INIT_TO_OP:
      {
         an = ESCinit | ESCerror;
 80022e0:	2311      	movs	r3, #17
 80022e2:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 80022e4:	2011      	movs	r0, #17
 80022e6:	f7fe ff27 	bl	8001138 <ESC_ALerror>
         break;
 80022ea:	e0ab      	b.n	8002444 <ESC_state+0x434>
      }
      case OP_TO_INIT:
      {
         ESC_stopoutput ();
 80022ec:	f7ff fdc4 	bl	8001e78 <ESC_stopoutput>
         ESC_stopinput ();
 80022f0:	f7ff fd84 	bl	8001dfc <ESC_stopinput>
         ESC_stopmbx ();
 80022f4:	f7ff f98c 	bl	8001610 <ESC_stopmbx>
         an = ESCinit;
 80022f8:	2301      	movs	r3, #1
 80022fa:	71bb      	strb	r3, [r7, #6]
         break;
 80022fc:	e0a2      	b.n	8002444 <ESC_state+0x434>
      }
      case SAFEOP_TO_INIT:
      {
         ESC_stopinput ();
 80022fe:	f7ff fd7d 	bl	8001dfc <ESC_stopinput>
         ESC_stopmbx ();
 8002302:	f7ff f985 	bl	8001610 <ESC_stopmbx>
         an = ESCinit;
 8002306:	2301      	movs	r3, #1
 8002308:	71bb      	strb	r3, [r7, #6]
         break;
 800230a:	e09b      	b.n	8002444 <ESC_state+0x434>
      }
      case PREOP_TO_INIT:
      {
         ESC_stopmbx ();
 800230c:	f7ff f980 	bl	8001610 <ESC_stopmbx>
         an = ESCinit;
 8002310:	2301      	movs	r3, #1
 8002312:	71bb      	strb	r3, [r7, #6]
         break;
 8002314:	e096      	b.n	8002444 <ESC_state+0x434>
      }
      case BOOT_TO_INIT:
      {
         ESC_stopmbx ();
 8002316:	f7ff f97b 	bl	8001610 <ESC_stopmbx>
         an = ESCinit;
 800231a:	2301      	movs	r3, #1
 800231c:	71bb      	strb	r3, [r7, #6]
         break;
 800231e:	e091      	b.n	8002444 <ESC_state+0x434>
      case PREOP_TO_BOOT:
      case BOOT_TO_PREOP:
      case BOOT_TO_SAFEOP:
      case BOOT_TO_OP:
      {
         an = ESCpreop | ESCerror;
 8002320:	2312      	movs	r3, #18
 8002322:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 8002324:	2011      	movs	r0, #17
 8002326:	f7fe ff07 	bl	8001138 <ESC_ALerror>
         break;
 800232a:	e08b      	b.n	8002444 <ESC_state+0x434>
      }
      case PREOP_TO_SAFEOP:
      case SAFEOP_TO_SAFEOP:
      {
         ESCvar.ESC_SM2_sml = sizeOfPDO (RX_PDO_OBJIDX, &ESCvar.sm2mappings,
 800232c:	2307      	movs	r3, #7
 800232e:	4a18      	ldr	r2, [pc, #96]	; (8002390 <ESC_state+0x380>)
 8002330:	4918      	ldr	r1, [pc, #96]	; (8002394 <ESC_state+0x384>)
 8002332:	f641 4012 	movw	r0, #7186	; 0x1c12
 8002336:	f000 f9a7 	bl	8002688 <sizeOfPDO>
 800233a:	4603      	mov	r3, r0
 800233c:	461a      	mov	r2, r3
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <ESC_state+0x378>)
 8002340:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
                                         SMmap2, MAX_MAPPINGS_SM2);
         if (ESCvar.sm2mappings < 0)
 8002344:	4b10      	ldr	r3, [pc, #64]	; (8002388 <ESC_state+0x378>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234a:	2b00      	cmp	r3, #0
 800234c:	da05      	bge.n	800235a <ESC_state+0x34a>
         {
            an = ESCpreop | ESCerror;
 800234e:	2312      	movs	r3, #18
 8002350:	71bb      	strb	r3, [r7, #6]
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 8002352:	201d      	movs	r0, #29
 8002354:	f7fe fef0 	bl	8001138 <ESC_ALerror>
            break;
 8002358:	e074      	b.n	8002444 <ESC_state+0x434>
         }

         ESCvar.ESC_SM3_sml = sizeOfPDO (TX_PDO_OBJIDX, &ESCvar.sm3mappings,
 800235a:	2307      	movs	r3, #7
 800235c:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <ESC_state+0x388>)
 800235e:	490f      	ldr	r1, [pc, #60]	; (800239c <ESC_state+0x38c>)
 8002360:	f641 4013 	movw	r0, #7187	; 0x1c13
 8002364:	f000 f990 	bl	8002688 <sizeOfPDO>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <ESC_state+0x378>)
 800236e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
                                         SMmap3, MAX_MAPPINGS_SM3);
         if (ESCvar.sm3mappings < 0)
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <ESC_state+0x378>)
 8002374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002378:	2b00      	cmp	r3, #0
 800237a:	da11      	bge.n	80023a0 <ESC_state+0x390>
         {
            an = ESCpreop | ESCerror;
 800237c:	2312      	movs	r3, #18
 800237e:	71bb      	strb	r3, [r7, #6]
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 8002380:	201e      	movs	r0, #30
 8002382:	f7fe fed9 	bl	8001138 <ESC_ALerror>
            break;
 8002386:	e05d      	b.n	8002444 <ESC_state+0x434>
 8002388:	20000164 	.word	0x20000164
 800238c:	200001d6 	.word	0x200001d6
 8002390:	200003b0 	.word	0x200003b0
 8002394:	200001f4 	.word	0x200001f4
 8002398:	200003e8 	.word	0x200003e8
 800239c:	200001f8 	.word	0x200001f8
         }

         an = ESC_startinput (ac);
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fcbc 	bl	8001d20 <ESC_startinput>
 80023a8:	4603      	mov	r3, r0
 80023aa:	71bb      	strb	r3, [r7, #6]
         if (an == ac)
 80023ac:	79bb      	ldrb	r3, [r7, #6]
 80023ae:	79fa      	ldrb	r2, [r7, #7]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d146      	bne.n	8002442 <ESC_state+0x432>
         {
            ESC_SMenable (2);
 80023b4:	2002      	movs	r0, #2
 80023b6:	f7fe ffa3 	bl	8001300 <ESC_SMenable>
         }
         break;
 80023ba:	e042      	b.n	8002442 <ESC_state+0x432>
      }
      case PREOP_TO_OP:
      {
         an = ESCpreop | ESCerror;
 80023bc:	2312      	movs	r3, #18
 80023be:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 80023c0:	2011      	movs	r0, #17
 80023c2:	f7fe feb9 	bl	8001138 <ESC_ALerror>
         break;
 80023c6:	e03d      	b.n	8002444 <ESC_state+0x434>
      }
      case OP_TO_PREOP:
      {
         ESC_stopoutput ();
 80023c8:	f7ff fd56 	bl	8001e78 <ESC_stopoutput>
         ESC_stopinput ();
 80023cc:	f7ff fd16 	bl	8001dfc <ESC_stopinput>
         an = ESCpreop;
 80023d0:	2302      	movs	r3, #2
 80023d2:	71bb      	strb	r3, [r7, #6]
         break;
 80023d4:	e036      	b.n	8002444 <ESC_state+0x434>
      }
      case SAFEOP_TO_PREOP:
      {
         ESC_stopinput ();
 80023d6:	f7ff fd11 	bl	8001dfc <ESC_stopinput>
         an = ESCpreop;
 80023da:	2302      	movs	r3, #2
 80023dc:	71bb      	strb	r3, [r7, #6]
         break;
 80023de:	e031      	b.n	8002444 <ESC_state+0x434>
      }
      case SAFEOP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 80023e0:	2314      	movs	r3, #20
 80023e2:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 80023e4:	2011      	movs	r0, #17
 80023e6:	f7fe fea7 	bl	8001138 <ESC_ALerror>
         break;
 80023ea:	e02b      	b.n	8002444 <ESC_state+0x434>
      }
      case SAFEOP_TO_OP:
      {
         an = ESC_startoutput (ac);
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fd26 	bl	8001e40 <ESC_startoutput>
 80023f4:	4603      	mov	r3, r0
 80023f6:	71bb      	strb	r3, [r7, #6]
         break;
 80023f8:	e024      	b.n	8002444 <ESC_state+0x434>
      }
      case OP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 80023fa:	2314      	movs	r3, #20
 80023fc:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 80023fe:	2011      	movs	r0, #17
 8002400:	f7fe fe9a 	bl	8001138 <ESC_ALerror>
         ESC_stopoutput ();
 8002404:	f7ff fd38 	bl	8001e78 <ESC_stopoutput>
         break;
 8002408:	e01c      	b.n	8002444 <ESC_state+0x434>
      }
      case OP_TO_SAFEOP:
      {
         an = ESCsafeop;
 800240a:	2304      	movs	r3, #4
 800240c:	71bb      	strb	r3, [r7, #6]
         ESC_stopoutput ();
 800240e:	f7ff fd33 	bl	8001e78 <ESC_stopoutput>
         break;
 8002412:	e017      	b.n	8002444 <ESC_state+0x434>
      }
      default:
      {
         if (an == ESCop)
 8002414:	79bb      	ldrb	r3, [r7, #6]
 8002416:	2b08      	cmp	r3, #8
 8002418:	d103      	bne.n	8002422 <ESC_state+0x412>
         {
            ESC_stopoutput ();
 800241a:	f7ff fd2d 	bl	8001e78 <ESC_stopoutput>
            an = ESCsafeop;
 800241e:	2304      	movs	r3, #4
 8002420:	71bb      	strb	r3, [r7, #6]
         }
         if (as == ESCsafeop)
 8002422:	797b      	ldrb	r3, [r7, #5]
 8002424:	2b04      	cmp	r3, #4
 8002426:	d101      	bne.n	800242c <ESC_state+0x41c>
         {
            ESC_stopinput ();
 8002428:	f7ff fce8 	bl	8001dfc <ESC_stopinput>
         }
         an |= ESCerror;
 800242c:	79bb      	ldrb	r3, [r7, #6]
 800242e:	f043 0310 	orr.w	r3, r3, #16
 8002432:	b2db      	uxtb	r3, r3
 8002434:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_UNKNOWNSTATE);
 8002436:	2012      	movs	r0, #18
 8002438:	f7fe fe7e 	bl	8001138 <ESC_ALerror>
         break;
 800243c:	e002      	b.n	8002444 <ESC_state+0x434>
         break;
 800243e:	bf00      	nop
 8002440:	e000      	b.n	8002444 <ESC_state+0x434>
         break;
 8002442:	bf00      	nop
      }
   }

   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 8002444:	4b13      	ldr	r3, [pc, #76]	; (8002494 <ESC_state+0x484>)
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <ESC_state+0x448>
   {
      ESCvar.post_state_change_hook (&as, &an);
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <ESC_state+0x484>)
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	1db9      	adds	r1, r7, #6
 8002452:	1d7a      	adds	r2, r7, #5
 8002454:	4610      	mov	r0, r2
 8002456:	4798      	blx	r3
   }

   if (!(an & ESCerror) && (ESCvar.ALerror))
 8002458:	79bb      	ldrb	r3, [r7, #6]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	d107      	bne.n	8002472 <ESC_state+0x462>
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <ESC_state+0x484>)
 8002464:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <ESC_state+0x462>
   {
      /* clear error */
      ESC_ALerror (ALERR_NONE);
 800246c:	2000      	movs	r0, #0
 800246e:	f7fe fe63 	bl	8001138 <ESC_ALerror>
   }

   ESC_ALstatus (an);
 8002472:	79bb      	ldrb	r3, [r7, #6]
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe fe79 	bl	800116c <ESC_ALstatus>
   DPRINT ("state %x\n", an);
 800247a:	79bb      	ldrb	r3, [r7, #6]
 800247c:	4619      	mov	r1, r3
 800247e:	4806      	ldr	r0, [pc, #24]	; (8002498 <ESC_state+0x488>)
 8002480:	f009 fba6 	bl	800bbd0 <iprintf>
 8002484:	e002      	b.n	800248c <ESC_state+0x47c>
      return;
 8002486:	bf00      	nop
 8002488:	e000      	b.n	800248c <ESC_state+0x47c>
      return;
 800248a:	bf00      	nop
}
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000164 	.word	0x20000164
 8002498:	0800c5dc 	.word	0x0800c5dc

0800249c <ESC_config>:
 *
 * @param[in] cfg   = Pointer to the Application configuration variable
 * holding application specific details. Data is copied.
 */
void ESC_config (esc_cfg_t * cfg)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
   static sm_cfg_t mb1 = {MBX1_sma, MBX1_sml, MBX1_sme, MBX1_smc, 0};
   static sm_cfg_t mbboot0 = {MBX0_sma_b, MBX0_sml_b, MBX0_sme_b, MBX0_smc_b, 0};
   static sm_cfg_t mbboot1 = {MBX1_sma_b, MBX1_sml_b, MBX1_sme_b, MBX1_smc_b, 0};

   /* Configure stack */
   ESCvar.use_interrupt = cfg->use_interrupt;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4a2e      	ldr	r2, [pc, #184]	; (8002564 <ESC_config+0xc8>)
 80024aa:	6013      	str	r3, [r2, #0]
   ESCvar.watchdogcnt = cfg->watchdog_cnt;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a2c      	ldr	r2, [pc, #176]	; (8002564 <ESC_config+0xc8>)
 80024b2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

   ESCvar.mb[0] = mb0;
 80024b6:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <ESC_config+0xc8>)
 80024b8:	4a2b      	ldr	r2, [pc, #172]	; (8002568 <ESC_config+0xcc>)
 80024ba:	3304      	adds	r3, #4
 80024bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024c0:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mb[1] = mb1;
 80024c4:	4b27      	ldr	r3, [pc, #156]	; (8002564 <ESC_config+0xc8>)
 80024c6:	4a29      	ldr	r2, [pc, #164]	; (800256c <ESC_config+0xd0>)
 80024c8:	330c      	adds	r3, #12
 80024ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024ce:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mbboot[0] = mbboot0;
 80024d2:	4b24      	ldr	r3, [pc, #144]	; (8002564 <ESC_config+0xc8>)
 80024d4:	4a26      	ldr	r2, [pc, #152]	; (8002570 <ESC_config+0xd4>)
 80024d6:	3314      	adds	r3, #20
 80024d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024dc:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mbboot[1] = mbboot1;
 80024e0:	4b20      	ldr	r3, [pc, #128]	; (8002564 <ESC_config+0xc8>)
 80024e2:	4a24      	ldr	r2, [pc, #144]	; (8002574 <ESC_config+0xd8>)
 80024e4:	331c      	adds	r3, #28
 80024e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024ea:	e883 0003 	stmia.w	r3, {r0, r1}

   ESCvar.set_defaults_hook = cfg->set_defaults_hook;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	4a1c      	ldr	r2, [pc, #112]	; (8002564 <ESC_config+0xc8>)
 80024f4:	6253      	str	r3, [r2, #36]	; 0x24
   ESCvar.pre_state_change_hook = cfg->pre_state_change_hook;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	4a1a      	ldr	r2, [pc, #104]	; (8002564 <ESC_config+0xc8>)
 80024fc:	6293      	str	r3, [r2, #40]	; 0x28
   ESCvar.post_state_change_hook = cfg->post_state_change_hook;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	4a18      	ldr	r2, [pc, #96]	; (8002564 <ESC_config+0xc8>)
 8002504:	62d3      	str	r3, [r2, #44]	; 0x2c
   ESCvar.application_hook = cfg->application_hook;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	4a16      	ldr	r2, [pc, #88]	; (8002564 <ESC_config+0xc8>)
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
   ESCvar.safeoutput_override = cfg->safeoutput_override;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4a14      	ldr	r2, [pc, #80]	; (8002564 <ESC_config+0xc8>)
 8002514:	6353      	str	r3, [r2, #52]	; 0x34
   ESCvar.pre_object_download_hook = cfg->pre_object_download_hook;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a12      	ldr	r2, [pc, #72]	; (8002564 <ESC_config+0xc8>)
 800251c:	6393      	str	r3, [r2, #56]	; 0x38
   ESCvar.post_object_download_hook = cfg->post_object_download_hook;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	4a10      	ldr	r2, [pc, #64]	; (8002564 <ESC_config+0xc8>)
 8002524:	63d3      	str	r3, [r2, #60]	; 0x3c
   ESCvar.rxpdo_override = cfg->rxpdo_override;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	4a0e      	ldr	r2, [pc, #56]	; (8002564 <ESC_config+0xc8>)
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
   ESCvar.txpdo_override = cfg->txpdo_override;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <ESC_config+0xc8>)
 8002534:	6453      	str	r3, [r2, #68]	; 0x44
   ESCvar.esc_hw_interrupt_enable = cfg->esc_hw_interrupt_enable;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <ESC_config+0xc8>)
 800253c:	6493      	str	r3, [r2, #72]	; 0x48
   ESCvar.esc_hw_interrupt_disable = cfg->esc_hw_interrupt_disable;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	4a08      	ldr	r2, [pc, #32]	; (8002564 <ESC_config+0xc8>)
 8002544:	64d3      	str	r3, [r2, #76]	; 0x4c
   ESCvar.esc_hw_eep_handler = cfg->esc_hw_eep_handler;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	4a06      	ldr	r2, [pc, #24]	; (8002564 <ESC_config+0xc8>)
 800254c:	6513      	str	r3, [r2, #80]	; 0x50
   ESCvar.esc_check_dc_handler = cfg->esc_check_dc_handler;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	4a04      	ldr	r2, [pc, #16]	; (8002564 <ESC_config+0xc8>)
 8002554:	6553      	str	r3, [r2, #84]	; 0x54
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000164 	.word	0x20000164
 8002568:	20000000 	.word	0x20000000
 800256c:	20000008 	.word	0x20000008
 8002570:	20000010 	.word	0x20000010
 8002574:	20000018 	.word	0x20000018

08002578 <SDO_findsubindex>:
 * @param[in] nidx   = local array index of object we want to find sub-index to
 * @param[in] subindex   = value on sub-index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int16_t SDO_findsubindex (int16_t nidx, uint8_t subindex)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	460a      	mov	r2, r1
 8002582:	80fb      	strh	r3, [r7, #6]
 8002584:	4613      	mov	r3, r2
 8002586:	717b      	strb	r3, [r7, #5]
   const _objd *objd;
   int16_t n = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	82fb      	strh	r3, [r7, #22]
   uint8_t maxsub;
   objd = SDOobjects[nidx].objdesc;
 800258c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002590:	4924      	ldr	r1, [pc, #144]	; (8002624 <SDO_findsubindex+0xac>)
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	440b      	add	r3, r1
 800259c:	3308      	adds	r3, #8
 800259e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80025a2:	613b      	str	r3, [r7, #16]
   maxsub = SDOobjects[nidx].maxsub;
 80025a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80025a8:	491e      	ldr	r1, [pc, #120]	; (8002624 <SDO_findsubindex+0xac>)
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	440b      	add	r3, r1
 80025b4:	3304      	adds	r3, #4
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	73fb      	strb	r3, [r7, #15]
   while (((objd + n)->subindex < subindex) && (n < maxsub))
 80025ba:	e005      	b.n	80025c8 <SDO_findsubindex+0x50>
   {
      n++;
 80025bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	82fb      	strh	r3, [r7, #22]
   while (((objd + n)->subindex < subindex) && (n < maxsub))
 80025c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	461a      	mov	r2, r3
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4413      	add	r3, r2
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	797b      	ldrb	r3, [r7, #5]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d204      	bcs.n	80025f0 <SDO_findsubindex+0x78>
 80025e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	dbe5      	blt.n	80025bc <SDO_findsubindex+0x44>
   }
   if ((objd + n)->subindex != subindex)
 80025f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	461a      	mov	r2, r3
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4413      	add	r3, r2
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	b29a      	uxth	r2, r3
 8002606:	797b      	ldrb	r3, [r7, #5]
 8002608:	b29b      	uxth	r3, r3
 800260a:	429a      	cmp	r2, r3
 800260c:	d002      	beq.n	8002614 <SDO_findsubindex+0x9c>
   {
      return -1;
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
 8002612:	e001      	b.n	8002618 <SDO_findsubindex+0xa0>
   }
   return n;
 8002614:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002618:	4618      	mov	r0, r3
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	0800cf64 	.word	0x0800cf64

08002628 <SDO_findobject>:
 *
 * @param[in] index   = value on index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int32_t SDO_findobject (uint16_t index)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	80fb      	strh	r3, [r7, #6]
   int32_t n = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 8002636:	e002      	b.n	800263e <SDO_findobject+0x16>
   {
      n++;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3301      	adds	r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 800263e:	4911      	ldr	r1, [pc, #68]	; (8002684 <SDO_findobject+0x5c>)
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	440b      	add	r3, r1
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	88fa      	ldrh	r2, [r7, #6]
 8002652:	429a      	cmp	r2, r3
 8002654:	d8f0      	bhi.n	8002638 <SDO_findobject+0x10>
   }
   if (SDOobjects[n].index != index)
 8002656:	490b      	ldr	r1, [pc, #44]	; (8002684 <SDO_findobject+0x5c>)
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	440b      	add	r3, r1
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	88fa      	ldrh	r2, [r7, #6]
 800266a:	429a      	cmp	r2, r3
 800266c:	d002      	beq.n	8002674 <SDO_findobject+0x4c>
   {
      return -1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	e000      	b.n	8002676 <SDO_findobject+0x4e>
   }
   return n;
 8002674:	68fb      	ldr	r3, [r7, #12]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	0800cf64 	.word	0x0800cf64

08002688 <sizeOfPDO>:
 * @param[out] max_mappings = max number of mapped objects in SM
 * @return size of RxPDO or TxPDOs in Bytes.
 */
uint16_t sizeOfPDO (uint16_t index, int * nmappings, _SMmap * mappings,
                    int max_mappings)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b090      	sub	sp, #64	; 0x40
 800268c:	af00      	add	r7, sp, #0
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	4603      	mov	r3, r0
 8002696:	81fb      	strh	r3, [r7, #14]
   uint16_t offset = 0, hobj;
 8002698:	2300      	movs	r3, #0
 800269a:	87fb      	strh	r3, [r7, #62]	; 0x3e
   uint8_t si, sic, c;
   int16_t nidx;
   const _objd *objd;
   const _objd *objd1c1x;
   int mapIx = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	63bb      	str	r3, [r7, #56]	; 0x38

   if ((index != RX_PDO_OBJIDX) && (index != TX_PDO_OBJIDX))
 80026a0:	89fb      	ldrh	r3, [r7, #14]
 80026a2:	f641 4212 	movw	r2, #7186	; 0x1c12
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d006      	beq.n	80026b8 <sizeOfPDO+0x30>
 80026aa:	89fb      	ldrh	r3, [r7, #14]
 80026ac:	f641 4213 	movw	r2, #7187	; 0x1c13
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d001      	beq.n	80026b8 <sizeOfPDO+0x30>
   {
      return 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e130      	b.n	800291a <sizeOfPDO+0x292>
   }

   nidx = SDO_findobject (index);
 80026b8:	89fb      	ldrh	r3, [r7, #14]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ffb4 	bl	8002628 <SDO_findobject>
 80026c0:	4603      	mov	r3, r0
 80026c2:	867b      	strh	r3, [r7, #50]	; 0x32
   if(nidx < 0)
 80026c4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	da01      	bge.n	80026d0 <sizeOfPDO+0x48>
   {
      return 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e124      	b.n	800291a <sizeOfPDO+0x292>
   }

   objd1c1x = SDOobjects[nidx].objdesc;
 80026d0:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80026d4:	4993      	ldr	r1, [pc, #588]	; (8002924 <sizeOfPDO+0x29c>)
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	1a9b      	subs	r3, r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	440b      	add	r3, r1
 80026e0:	3308      	adds	r3, #8
 80026e2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c

   si = OBJ_VALUE_FETCH (si, objd1c1x[0]);
 80026e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <sizeOfPDO+0x70>
 80026f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	e002      	b.n	80026fe <sizeOfPDO+0x76>
 80026f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   if (si)
 8002702:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 80f9 	beq.w	80028fe <sizeOfPDO+0x276>
   {
      for (sic = 1; sic <= si; sic++)
 800270c:	2301      	movs	r3, #1
 800270e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002712:	e0ed      	b.n	80028f0 <sizeOfPDO+0x268>
      {
         hobj = OBJ_VALUE_FETCH (hobj, objd1c1x[sic]);
 8002714:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	461a      	mov	r2, r3
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	4413      	add	r3, r2
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00b      	beq.n	8002744 <sizeOfPDO+0xbc>
 800272c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	461a      	mov	r2, r3
 800273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273c:	4413      	add	r3, r2
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	e00a      	b.n	800275a <sizeOfPDO+0xd2>
 8002744:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	461a      	mov	r2, r3
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	4413      	add	r3, r2
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	b29b      	uxth	r3, r3
 800275a:	853b      	strh	r3, [r7, #40]	; 0x28
         nidx = SDO_findobject (hobj);
 800275c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff ff62 	bl	8002628 <SDO_findobject>
 8002764:	4603      	mov	r3, r0
 8002766:	867b      	strh	r3, [r7, #50]	; 0x32
         if (nidx >= 0)
 8002768:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800276c:	2b00      	cmp	r3, #0
 800276e:	f2c0 80ba 	blt.w	80028e6 <sizeOfPDO+0x25e>
         {
            uint8_t maxsub;

            objd = SDOobjects[nidx].objdesc;
 8002772:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002776:	496b      	ldr	r1, [pc, #428]	; (8002924 <sizeOfPDO+0x29c>)
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	440b      	add	r3, r1
 8002782:	3308      	adds	r3, #8
 8002784:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
            maxsub = OBJ_VALUE_FETCH (maxsub, objd[0]);
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <sizeOfPDO+0x112>
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	e002      	b.n	80027a0 <sizeOfPDO+0x118>
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            for (c = 1; c <= maxsub; c++)
 80027a4:	2301      	movs	r3, #1
 80027a6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80027aa:	e095      	b.n	80028d8 <sizeOfPDO+0x250>
            {
               uint32_t value = OBJ_VALUE_FETCH (value, objd[c]);
 80027ac:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	461a      	mov	r2, r3
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	4413      	add	r3, r2
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00b      	beq.n	80027dc <sizeOfPDO+0x154>
 80027c4:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	461a      	mov	r2, r3
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	4413      	add	r3, r2
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	e009      	b.n	80027f0 <sizeOfPDO+0x168>
 80027dc:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	461a      	mov	r2, r3
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	4413      	add	r3, r2
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	61fb      	str	r3, [r7, #28]
               uint8_t bitlength = value & 0xFF;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	76fb      	strb	r3, [r7, #27]

               if (max_mappings > 0)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	dd63      	ble.n	80028c4 <sizeOfPDO+0x23c>
               {
                  uint16_t index = value >> 16;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	0c1b      	lsrs	r3, r3, #16
 8002800:	833b      	strh	r3, [r7, #24]
                  uint8_t subindex = (value >> 8) & 0xFF;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	75fb      	strb	r3, [r7, #23]
                  const _objd * mapping;

                  if (mapIx == max_mappings)
 8002808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d105      	bne.n	800281c <sizeOfPDO+0x194>
                  {
                     /* Too many mapped objects */
                     *nmappings = -1;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f04f 32ff 	mov.w	r2, #4294967295
 8002816:	601a      	str	r2, [r3, #0]
                     return 0;
 8002818:	2300      	movs	r3, #0
 800281a:	e07e      	b.n	800291a <sizeOfPDO+0x292>
                  }

                  DPRINT ("%04x:%02x @ %d\n", index, subindex, offset);
 800281c:	8b39      	ldrh	r1, [r7, #24]
 800281e:	7dfa      	ldrb	r2, [r7, #23]
 8002820:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002822:	4841      	ldr	r0, [pc, #260]	; (8002928 <sizeOfPDO+0x2a0>)
 8002824:	f009 f9d4 	bl	800bbd0 <iprintf>

                  if (index == 0 && subindex == 0)
 8002828:	8b3b      	ldrh	r3, [r7, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d105      	bne.n	800283a <sizeOfPDO+0x1b2>
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <sizeOfPDO+0x1b2>
                  {
                     /* Padding element */
                     mapping = NULL;
 8002834:	2300      	movs	r3, #0
 8002836:	637b      	str	r3, [r7, #52]	; 0x34
 8002838:	e036      	b.n	80028a8 <sizeOfPDO+0x220>
                  }
                  else
                  {
                     nidx = SDO_findobject (index);
 800283a:	8b3b      	ldrh	r3, [r7, #24]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fef3 	bl	8002628 <SDO_findobject>
 8002842:	4603      	mov	r3, r0
 8002844:	867b      	strh	r3, [r7, #50]	; 0x32
                     if (nidx >= 0)
 8002846:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800284a:	2b00      	cmp	r3, #0
 800284c:	db26      	blt.n	800289c <sizeOfPDO+0x214>
                     {
                        int16_t nsub;

                        nsub = SDO_findsubindex (nidx, subindex);
 800284e:	7dfa      	ldrb	r2, [r7, #23]
 8002850:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fe8e 	bl	8002578 <SDO_findsubindex>
 800285c:	4603      	mov	r3, r0
 800285e:	82bb      	strh	r3, [r7, #20]
                        if (nsub < 0)
 8002860:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	da05      	bge.n	8002874 <sizeOfPDO+0x1ec>
                        {
                           /* Mapped subindex does not exist */
                           *nmappings = -1;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f04f 32ff 	mov.w	r2, #4294967295
 800286e:	601a      	str	r2, [r3, #0]
                           return 0;
 8002870:	2300      	movs	r3, #0
 8002872:	e052      	b.n	800291a <sizeOfPDO+0x292>
                        }

                        mapping = &SDOobjects[nidx].objdesc[nsub];
 8002874:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002878:	492a      	ldr	r1, [pc, #168]	; (8002924 <sizeOfPDO+0x29c>)
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	440b      	add	r3, r1
 8002884:	3308      	adds	r3, #8
 8002886:	f8d3 1002 	ldr.w	r1, [r3, #2]
 800288a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	637b      	str	r3, [r7, #52]	; 0x34
 800289a:	e005      	b.n	80028a8 <sizeOfPDO+0x220>
                     }
                     else
                     {
                        /* Mapped index does not exist */
                        *nmappings = -1;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f04f 32ff 	mov.w	r2, #4294967295
 80028a2:	601a      	str	r2, [r3, #0]
                        return 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e038      	b.n	800291a <sizeOfPDO+0x292>
                     }
                  }

                  mappings[mapIx].obj = mapping;
 80028a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	4413      	add	r3, r2
 80028b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028b2:	601a      	str	r2, [r3, #0]
                  mappings[mapIx++].offset = offset;
 80028b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	4413      	add	r3, r2
 80028c0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80028c2:	809a      	strh	r2, [r3, #4]
               }

               offset += bitlength;
 80028c4:	7efb      	ldrb	r3, [r7, #27]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80028ca:	4413      	add	r3, r2
 80028cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
            for (c = 1; c <= maxsub; c++)
 80028ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80028d2:	3301      	adds	r3, #1
 80028d4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80028d8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80028dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028e0:	429a      	cmp	r2, r3
 80028e2:	f67f af63 	bls.w	80027ac <sizeOfPDO+0x124>
      for (sic = 1; sic <= si; sic++)
 80028e6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80028ea:	3301      	adds	r3, #1
 80028ec:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80028f0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80028f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80028f8:	429a      	cmp	r2, r3
 80028fa:	f67f af0b 	bls.w	8002714 <sizeOfPDO+0x8c>
            }
         }
      }
   }

   if (max_mappings > 0)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	dd03      	ble.n	800290c <sizeOfPDO+0x284>
   {
      *nmappings = mapIx;
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	e002      	b.n	8002912 <sizeOfPDO+0x28a>
   }
   else
   {
      *nmappings = 0;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
   }

   return BITS2BYTES (offset);
 8002912:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002914:	3307      	adds	r3, #7
 8002916:	10db      	asrs	r3, r3, #3
 8002918:	b29b      	uxth	r3, r3
}
 800291a:	4618      	mov	r0, r3
 800291c:	3740      	adds	r7, #64	; 0x40
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	0800cf64 	.word	0x0800cf64
 8002928:	0800c5ec 	.word	0x0800c5ec

0800292c <copy2mbx>:
 * @param[in] source = pointer to source
 * @param[in] dest   = pointer to destination
 * @param[in] size   = Size to copy
 */
void copy2mbx (void *source, void *dest, uint16_t size)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	80fb      	strh	r3, [r7, #6]
   memcpy (dest, source, size);
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	461a      	mov	r2, r3
 800293e:	68f9      	ldr	r1, [r7, #12]
 8002940:	68b8      	ldr	r0, [r7, #8]
 8002942:	f008 fe6b 	bl	800b61c <memcpy>
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <SDO_abort>:
 * @param[in] index      = index of object causing abort reply
 * @param[in] sub-index  = sub-index of object causing abort reply
 * @param[in] abortcode  = abort code to send in reply
 */
void SDO_abort (uint16_t index, uint8_t subindex, uint32_t abortcode)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	603a      	str	r2, [r7, #0]
 800295a:	80fb      	strh	r3, [r7, #6]
 800295c:	460b      	mov	r3, r1
 800295e:	717b      	strb	r3, [r7, #5]
   uint8_t MBXout;
   _COEsdo *coeres;
   MBXout = ESC_claimbuffer ();
 8002960:	f7fe ff46 	bl	80017f0 <ESC_claimbuffer>
 8002964:	4603      	mov	r3, r0
 8002966:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d02c      	beq.n	80029c8 <SDO_abort+0x78>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <SDO_abort+0x80>)
 8002972:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002974:	fb02 f303 	mul.w	r3, r2, r3
 8002978:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <SDO_abort+0x84>)
 800297a:	4413      	add	r3, r2
 800297c:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2200      	movs	r2, #0
 8002982:	f042 020a 	orr.w	r2, r2, #10
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	2200      	movs	r2, #0
 800298a:	705a      	strb	r2, [r3, #1]
      coeres->mbxheader.mbxtype = MBXCOE;
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	7953      	ldrb	r3, [r2, #5]
 8002990:	2103      	movs	r1, #3
 8002992:	f361 0303 	bfi	r3, r1, #0, #4
 8002996:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	719a      	strb	r2, [r3, #6]
 800299e:	2200      	movs	r2, #0
 80029a0:	f042 0220 	orr.w	r2, r2, #32
 80029a4:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDOREQUEST << 12));
      coeres->index = htoes (index);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	88fa      	ldrh	r2, [r7, #6]
 80029aa:	f8a3 2009 	strh.w	r2, [r3, #9]
      coeres->subindex = subindex;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	797a      	ldrb	r2, [r7, #5]
 80029b2:	72da      	strb	r2, [r3, #11]
      coeres->command = COE_COMMAND_SDOABORT;
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	721a      	strb	r2, [r3, #8]
      coeres->size = htoel (abortcode);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	60da      	str	r2, [r3, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <SDO_abort+0x88>)
 80029c4:	2103      	movs	r1, #3
 80029c6:	54d1      	strb	r1, [r2, r3]
   }
}
 80029c8:	bf00      	nop
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000164 	.word	0x20000164
 80029d4:	20000230 	.word	0x20000230
 80029d8:	20000420 	.word	0x20000420

080029dc <SDO_upload>:
/** Function for responding on requested SDO Upload, sending the content
 *  requested in a free Mailbox buffer. Depending of size of data expedited,
 *  normal or segmented transfer is used. On error an SDO Abort will be sent.
 */
void SDO_upload (void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
   int16_t nidx, nsub;
   uint8_t MBXout;
   uint32_t size;
   uint8_t dss;
   const _objd *objd;
   coesdo = (_COEsdo *) &MBX[0];
 80029e2:	4b8d      	ldr	r3, [pc, #564]	; (8002c18 <SDO_upload+0x23c>)
 80029e4:	617b      	str	r3, [r7, #20]
   index = etohs (coesdo->index);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	7a5a      	ldrb	r2, [r3, #9]
 80029ea:	7a9b      	ldrb	r3, [r3, #10]
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	4313      	orrs	r3, r2
 80029f0:	827b      	strh	r3, [r7, #18]
   subindex = coesdo->subindex;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	7adb      	ldrb	r3, [r3, #11]
 80029f6:	747b      	strb	r3, [r7, #17]
   nidx = SDO_findobject (index);
 80029f8:	8a7b      	ldrh	r3, [r7, #18]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fe14 	bl	8002628 <SDO_findobject>
 8002a00:	4603      	mov	r3, r0
 8002a02:	81fb      	strh	r3, [r7, #14]
   if (nidx >= 0)
 8002a04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f2c0 80f3 	blt.w	8002bf4 <SDO_upload+0x218>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 8002a0e:	7c7a      	ldrb	r2, [r7, #17]
 8002a10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fdae 	bl	8002578 <SDO_findsubindex>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	81bb      	strh	r3, [r7, #12]
      if (nsub >= 0)
 8002a20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f2c0 80de 	blt.w	8002be6 <SDO_upload+0x20a>
      {
         objd = SDOobjects[nidx].objdesc;
 8002a2a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002a2e:	497b      	ldr	r1, [pc, #492]	; (8002c1c <SDO_upload+0x240>)
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	440b      	add	r3, r1
 8002a3a:	3308      	adds	r3, #8
 8002a3c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002a40:	60bb      	str	r3, [r7, #8]
         MBXout = ESC_claimbuffer ();
 8002a42:	f7fe fed5 	bl	80017f0 <ESC_claimbuffer>
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
         if (MBXout)
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80d7 	beq.w	8002c00 <SDO_upload+0x224>
         {
            coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	4a72      	ldr	r2, [pc, #456]	; (8002c20 <SDO_upload+0x244>)
 8002a56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a58:	fb02 f303 	mul.w	r3, r2, r3
 8002a5c:	4a6e      	ldr	r2, [pc, #440]	; (8002c18 <SDO_upload+0x23c>)
 8002a5e:	4413      	add	r3, r2
 8002a60:	603b      	str	r3, [r7, #0]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f042 020a 	orr.w	r2, r2, #10
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	705a      	strb	r2, [r3, #1]
            coeres->mbxheader.mbxtype = MBXCOE;
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	7953      	ldrb	r3, [r2, #5]
 8002a74:	2103      	movs	r1, #3
 8002a76:	f361 0303 	bfi	r3, r1, #0, #4
 8002a7a:	7153      	strb	r3, [r2, #5]
            coeres->coeheader.numberservice =
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	719a      	strb	r2, [r3, #6]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8002a88:	71da      	strb	r2, [r3, #7]
               htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
            size = (objd + nsub)->bitlength;
 8002a8a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	461a      	mov	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	889b      	ldrh	r3, [r3, #4]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	61fb      	str	r3, [r7, #28]
            /* expedited bits used calculation */
            dss = 0x0c;
 8002aa2:	230c      	movs	r3, #12
 8002aa4:	76fb      	strb	r3, [r7, #27]
            if (size > 8)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d901      	bls.n	8002ab0 <SDO_upload+0xd4>
            {
               dss = 0x08;
 8002aac:	2308      	movs	r3, #8
 8002aae:	76fb      	strb	r3, [r7, #27]
            }
            if (size > 16)
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	2b10      	cmp	r3, #16
 8002ab4:	d901      	bls.n	8002aba <SDO_upload+0xde>
            {
               dss = 0x04;
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	76fb      	strb	r3, [r7, #27]
            }
            if (size > 24)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	2b18      	cmp	r3, #24
 8002abe:	d901      	bls.n	8002ac4 <SDO_upload+0xe8>
            {
               dss = 0x00;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	76fb      	strb	r3, [r7, #27]
            }
            coeres->index = htoes (index);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	8a7a      	ldrh	r2, [r7, #18]
 8002ac8:	f8a3 2009 	strh.w	r2, [r3, #9]
            coeres->subindex = subindex;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	7c7a      	ldrb	r2, [r7, #17]
 8002ad0:	72da      	strb	r2, [r3, #11]
            if (size <= 32)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d833      	bhi.n	8002b40 <SDO_upload+0x164>
            {
               /* expedited response i.e. length<=4 bytes */
               coeres->command = COE_COMMAND_UPLOADRESPONSE +
                  COE_SIZE_INDICATOR + COE_EXPEDITED_INDICATOR + dss;
 8002ad8:	7efb      	ldrb	r3, [r7, #27]
 8002ada:	3343      	adds	r3, #67	; 0x43
 8002adc:	b2da      	uxtb	r2, r3
               coeres->command = COE_COMMAND_UPLOADRESPONSE +
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	721a      	strb	r2, [r3, #8]
               if ((objd + nsub)->data == NULL)
 8002ae2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4413      	add	r3, r2
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10c      	bne.n	8002b14 <SDO_upload+0x138>
               {
                  /* use constant value */
                  coeres->size = htoel ((objd + nsub)->value);
 8002afa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	461a      	mov	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	e063      	b.n	8002bdc <SDO_upload+0x200>
               }
               else
               {
                  /* convert bits to bytes */
                  size = (size + 7) >> 3;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	3307      	adds	r3, #7
 8002b18:	08db      	lsrs	r3, r3, #3
 8002b1a:	61fb      	str	r3, [r7, #28]
                  /* use dynamic data */
                  copy2mbx ((objd + nsub)->data, &(coeres->size), size);
 8002b1c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	6918      	ldr	r0, [r3, #16]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	330c      	adds	r3, #12
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	b292      	uxth	r2, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f7ff fef7 	bl	800292c <copy2mbx>
 8002b3e:	e04d      	b.n	8002bdc <SDO_upload+0x200>
               }
            }
            else
            {
               /* normal response i.e. length>4 bytes */
               coeres->command = COE_COMMAND_UPLOADRESPONSE +
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2241      	movs	r2, #65	; 0x41
 8002b44:	721a      	strb	r2, [r3, #8]
                  COE_SIZE_INDICATOR;
               /* convert bits to bytes */
               size = (size + 7) >> 3;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3307      	adds	r3, #7
 8002b4a:	08db      	lsrs	r3, r3, #3
 8002b4c:	61fb      	str	r3, [r7, #28]
               coeres->size = htoel (size);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	60da      	str	r2, [r3, #12]
               if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f103 020a 	add.w	r2, r3, #10
 8002b5a:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <SDO_upload+0x244>)
 8002b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5e:	3b06      	subs	r3, #6
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d91f      	bls.n	8002ba4 <SDO_upload+0x1c8>
               {
                  /* segmented transfer needed */
                  /* set total size in bytes */
                  ESCvar.frags = size;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <SDO_upload+0x244>)
 8002b6a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
                  /* limit to mailbox size */
                  size = ESC_MBXDSIZE - COE_HEADERSIZE;
 8002b6e:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <SDO_upload+0x244>)
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	3b10      	subs	r3, #16
 8002b74:	61fb      	str	r3, [r7, #28]
                  /* number of bytes done */
                  ESCvar.fragsleft = size;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	4b29      	ldr	r3, [pc, #164]	; (8002c20 <SDO_upload+0x244>)
 8002b7c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
                  /* signal segmented transfer */
                  ESCvar.segmented = MBXSEU;
 8002b80:	4b27      	ldr	r3, [pc, #156]	; (8002c20 <SDO_upload+0x244>)
 8002b82:	2240      	movs	r2, #64	; 0x40
 8002b84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                  ESCvar.data = (objd + nsub)->data;
 8002b88:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	461a      	mov	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	4413      	add	r3, r2
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	4a20      	ldr	r2, [pc, #128]	; (8002c20 <SDO_upload+0x244>)
 8002b9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002ba2:	e003      	b.n	8002bac <SDO_upload+0x1d0>
               }
               else
               {
                  ESCvar.segmented = 0;
 8002ba4:	4b1e      	ldr	r3, [pc, #120]	; (8002c20 <SDO_upload+0x244>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
               }
               coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	330a      	adds	r3, #10
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	801a      	strh	r2, [r3, #0]
               /* use dynamic data */
               copy2mbx ((objd + nsub)->data, (&(coeres->size)) + 1, size);
 8002bb8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4413      	add	r3, r2
 8002bca:	6918      	ldr	r0, [r3, #16]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	b292      	uxth	r2, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f7ff fea8 	bl	800292c <copy2mbx>
            }
            MBXcontrol[MBXout].state = MBXstate_outreq;
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	4a11      	ldr	r2, [pc, #68]	; (8002c24 <SDO_upload+0x248>)
 8002be0:	2103      	movs	r1, #3
 8002be2:	54d1      	strb	r1, [r2, r3]
 8002be4:	e00c      	b.n	8002c00 <SDO_upload+0x224>
         }
      }
      else
      {
         SDO_abort (index, subindex, ABORT_NOSUBINDEX);
 8002be6:	7c79      	ldrb	r1, [r7, #17]
 8002be8:	8a7b      	ldrh	r3, [r7, #18]
 8002bea:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <SDO_upload+0x24c>)
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff feaf 	bl	8002950 <SDO_abort>
 8002bf2:	e005      	b.n	8002c00 <SDO_upload+0x224>
      }
   }
   else
   {
      SDO_abort (index, subindex, ABORT_NOOBJECT);
 8002bf4:	7c79      	ldrb	r1, [r7, #17]
 8002bf6:	8a7b      	ldrh	r3, [r7, #18]
 8002bf8:	4a0c      	ldr	r2, [pc, #48]	; (8002c2c <SDO_upload+0x250>)
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fea8 	bl	8002950 <SDO_abort>
   }
   MBXcontrol[0].state = MBXstate_idle;
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <SDO_upload+0x248>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <SDO_upload+0x244>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
}
 8002c0e:	bf00      	nop
 8002c10:	3720      	adds	r7, #32
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000230 	.word	0x20000230
 8002c1c:	0800cf64 	.word	0x0800cf64
 8002c20:	20000164 	.word	0x20000164
 8002c24:	20000420 	.word	0x20000420
 8002c28:	06090011 	.word	0x06090011
 8002c2c:	06020000 	.word	0x06020000

08002c30 <SDO_uploadsegment>:
/** Function for handling the following SDO Upload if previous SDOUpload
 * response was flagged it needed to be segmented.
 *
 */
void SDO_uploadsegment (void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
   _COEsdo *coesdo, *coeres;
   uint8_t MBXout;
   uint32_t size, offset;
   coesdo = (_COEsdo *) &MBX[0];
 8002c36:	4b4d      	ldr	r3, [pc, #308]	; (8002d6c <SDO_uploadsegment+0x13c>)
 8002c38:	613b      	str	r3, [r7, #16]
   MBXout = ESC_claimbuffer ();
 8002c3a:	f7fe fdd9 	bl	80017f0 <ESC_claimbuffer>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 8086 	beq.w	8002d56 <SDO_uploadsegment+0x126>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	4a48      	ldr	r2, [pc, #288]	; (8002d70 <SDO_uploadsegment+0x140>)
 8002c4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c50:	fb02 f303 	mul.w	r3, r2, r3
 8002c54:	4a45      	ldr	r2, [pc, #276]	; (8002d6c <SDO_uploadsegment+0x13c>)
 8002c56:	4413      	add	r3, r2
 8002c58:	60bb      	str	r3, [r7, #8]
      offset = ESCvar.fragsleft;
 8002c5a:	4b45      	ldr	r3, [pc, #276]	; (8002d70 <SDO_uploadsegment+0x140>)
 8002c5c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002c60:	607b      	str	r3, [r7, #4]
      size = ESCvar.frags - ESCvar.fragsleft;
 8002c62:	4b43      	ldr	r3, [pc, #268]	; (8002d70 <SDO_uploadsegment+0x140>)
 8002c64:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <SDO_uploadsegment+0x140>)
 8002c6c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
      coeres->mbxheader.mbxtype = MBXCOE;
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	7953      	ldrb	r3, [r2, #5]
 8002c78:	2103      	movs	r1, #3
 8002c7a:	f361 0303 	bfi	r3, r1, #0, #4
 8002c7e:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2200      	movs	r2, #0
 8002c84:	719a      	strb	r2, [r3, #6]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8002c8c:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
      coeres->command = COE_COMMAND_UPLOADSEGMENT + (coesdo->command & COE_TOGGLEBIT);  // copy toggle bit
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	7a1b      	ldrb	r3, [r3, #8]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	721a      	strb	r2, [r3, #8]
      if ((size + COE_SEGMENTHEADERSIZE) > ESC_MBXDSIZE)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	1cda      	adds	r2, r3, #3
 8002ca0:	4b33      	ldr	r3, [pc, #204]	; (8002d70 <SDO_uploadsegment+0x140>)
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	3b06      	subs	r3, #6
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d914      	bls.n	8002cd4 <SDO_uploadsegment+0xa4>
      {
         /* more segmented transfer needed */
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_SEGMENTHEADERSIZE;
 8002caa:	4b31      	ldr	r3, [pc, #196]	; (8002d70 <SDO_uploadsegment+0x140>)
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	3b09      	subs	r3, #9
 8002cb0:	617b      	str	r3, [r7, #20]
         /* number of bytes done */
         ESCvar.fragsleft += size;
 8002cb2:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <SDO_uploadsegment+0x140>)
 8002cb4:	f8b3 208c 	ldrh.w	r2, [r3, #140]	; 0x8c
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <SDO_uploadsegment+0x140>)
 8002cc2:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
         coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3303      	adds	r3, #3
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	801a      	strh	r2, [r3, #0]
 8002cd2:	e02f      	b.n	8002d34 <SDO_uploadsegment+0x104>
      }
      else
      {
         /* last segment */
         ESCvar.segmented = 0;
 8002cd4:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <SDO_uploadsegment+0x140>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
         ESCvar.frags = 0;
 8002cdc:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <SDO_uploadsegment+0x140>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
         ESCvar.fragsleft = 0;
 8002ce4:	4b22      	ldr	r3, [pc, #136]	; (8002d70 <SDO_uploadsegment+0x140>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
         coeres->command += COE_COMMAND_LASTSEGMENTBIT;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	7a1b      	ldrb	r3, [r3, #8]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	721a      	strb	r2, [r3, #8]
         if (size >= 7)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2b06      	cmp	r3, #6
 8002cfc:	d906      	bls.n	8002d0c <SDO_uploadsegment+0xdc>
         {
            coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3303      	adds	r3, #3
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	801a      	strh	r2, [r3, #0]
 8002d0a:	e013      	b.n	8002d34 <SDO_uploadsegment+0x104>
         }
         else
         {
            coeres->command += (7 - size) << 1;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	7a1a      	ldrb	r2, [r3, #8]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f1c3 0307 	rsb	r3, r3, #7
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	721a      	strb	r2, [r3, #8]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f042 020a 	orr.w	r2, r2, #10
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	2200      	movs	r2, #0
 8002d32:	705a      	strb	r2, [r3, #1]
         }
      }
      copy2mbx ((uint8_t *) ESCvar.data + offset, (&(coeres->command)) + 1, size);        //copy to mailbox
 8002d34:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <SDO_uploadsegment+0x140>)
 8002d36:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	18d0      	adds	r0, r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	3308      	adds	r3, #8
 8002d42:	3301      	adds	r3, #1
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	b292      	uxth	r2, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f7ff fdef 	bl	800292c <copy2mbx>

      MBXcontrol[MBXout].state = MBXstate_outreq;
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	4a08      	ldr	r2, [pc, #32]	; (8002d74 <SDO_uploadsegment+0x144>)
 8002d52:	2103      	movs	r1, #3
 8002d54:	54d1      	strb	r1, [r2, r3]
   }
   MBXcontrol[0].state = MBXstate_idle;
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <SDO_uploadsegment+0x144>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8002d5c:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <SDO_uploadsegment+0x140>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
}
 8002d64:	bf00      	nop
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000230 	.word	0x20000230
 8002d70:	20000164 	.word	0x20000164
 8002d74:	20000420 	.word	0x20000420

08002d78 <SDO_download>:

/** Function for handling incoming requested SDO Download, validating the
 * request and sending an response. On error an SDO Abort will be sent.
 */
void SDO_download (void)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b08d      	sub	sp, #52	; 0x34
 8002d7c:	af02      	add	r7, sp, #8
   uint16_t size, actsize;
   const _objd *objd;
   uint32_t *mbxdata;
   uint32_t abort;

   coesdo = (_COEsdo *) &MBX[0];
 8002d7e:	4b93      	ldr	r3, [pc, #588]	; (8002fcc <SDO_download+0x254>)
 8002d80:	61fb      	str	r3, [r7, #28]
   index = etohs (coesdo->index);
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	7a5a      	ldrb	r2, [r3, #9]
 8002d86:	7a9b      	ldrb	r3, [r3, #10]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	837b      	strh	r3, [r7, #26]
   subindex = coesdo->subindex;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	7adb      	ldrb	r3, [r3, #11]
 8002d92:	767b      	strb	r3, [r7, #25]
   nidx = SDO_findobject (index);
 8002d94:	8b7b      	ldrh	r3, [r7, #26]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fc46 	bl	8002628 <SDO_findobject>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	82fb      	strh	r3, [r7, #22]
   if (nidx >= 0)
 8002da0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f2c0 80ff 	blt.w	8002fa8 <SDO_download+0x230>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 8002daa:	7e7a      	ldrb	r2, [r7, #25]
 8002dac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002db0:	4611      	mov	r1, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fbe0 	bl	8002578 <SDO_findsubindex>
 8002db8:	4603      	mov	r3, r0
 8002dba:	82bb      	strh	r3, [r7, #20]
      if (nsub >= 0)
 8002dbc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f2c0 80ea 	blt.w	8002f9a <SDO_download+0x222>
      {
         objd = SDOobjects[nidx].objdesc;
 8002dc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002dca:	4981      	ldr	r1, [pc, #516]	; (8002fd0 <SDO_download+0x258>)
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002ddc:	613b      	str	r3, [r7, #16]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 8002dde:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	461a      	mov	r2, r3
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	88db      	ldrh	r3, [r3, #6]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dfa:	73fb      	strb	r3, [r7, #15]
         uint8_t state = ESCvar.ALstatus & 0x0f;
 8002dfc:	4b75      	ldr	r3, [pc, #468]	; (8002fd4 <SDO_download+0x25c>)
 8002dfe:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	73bb      	strb	r3, [r7, #14]
         if (access == ATYPE_RW ||
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	2b3f      	cmp	r3, #63	; 0x3f
 8002e0e:	d007      	beq.n	8002e20 <SDO_download+0xa8>
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b0f      	cmp	r3, #15
 8002e14:	f040 80b0 	bne.w	8002f78 <SDO_download+0x200>
             (access == ATYPE_RWpre && state == ESCpreop))
 8002e18:	7bbb      	ldrb	r3, [r7, #14]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	f040 80ac 	bne.w	8002f78 <SDO_download+0x200>
         {
            /* expedited? */
            if (coesdo->command & COE_EXPEDITED_INDICATOR)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	7a1b      	ldrb	r3, [r3, #8]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <SDO_download+0xd0>
            {
               size = 4 - ((coesdo->command & 0x0c) >> 2);
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	7a1b      	ldrb	r3, [r3, #8]
 8002e30:	109b      	asrs	r3, r3, #2
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	f1c3 0304 	rsb	r3, r3, #4
 8002e3e:	84fb      	strh	r3, [r7, #38]	; 0x26
               mbxdata = &(coesdo->size);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	330c      	adds	r3, #12
 8002e44:	623b      	str	r3, [r7, #32]
 8002e46:	e006      	b.n	8002e56 <SDO_download+0xde>
            }
            else
            {
               /* normal download */
               size = (etohl (coesdo->size) & 0xffff);
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	84fb      	strh	r3, [r7, #38]	; 0x26
               mbxdata = (&(coesdo->size)) + 1;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	330c      	adds	r3, #12
 8002e52:	3304      	adds	r3, #4
 8002e54:	623b      	str	r3, [r7, #32]
            }
            actsize = ((objd + nsub)->bitlength + 7) >> 3;
 8002e56:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	461a      	mov	r2, r3
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	889b      	ldrh	r3, [r3, #4]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3307      	adds	r3, #7
 8002e6e:	10db      	asrs	r3, r3, #3
 8002e70:	81bb      	strh	r3, [r7, #12]
            if (actsize == size)
 8002e72:	89ba      	ldrh	r2, [r7, #12]
 8002e74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d177      	bne.n	8002f6a <SDO_download+0x1f2>
            {
               abort = ESC_pre_objecthandler (
 8002e7a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
                  index,
                  subindex,
                  mbxdata,
                  size,
                  (objd + nsub)->flags
 8002e7c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4413      	add	r3, r2
               abort = ESC_pre_objecthandler (
 8002e8e:	88db      	ldrh	r3, [r3, #6]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	7e79      	ldrb	r1, [r7, #25]
 8002e94:	8b78      	ldrh	r0, [r7, #26]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	4623      	mov	r3, r4
 8002e9a:	6a3a      	ldr	r2, [r7, #32]
 8002e9c:	f7fd ff76 	bl	8000d8c <ESC_pre_objecthandler>
 8002ea0:	60b8      	str	r0, [r7, #8]
               );
               if (abort == 0)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d159      	bne.n	8002f5c <SDO_download+0x1e4>
               {
                  copy2mbx (mbxdata, (objd + nsub)->data, size);
 8002ea8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	6a38      	ldr	r0, [r7, #32]
 8002ec2:	f7ff fd33 	bl	800292c <copy2mbx>
                  MBXout = ESC_claimbuffer ();
 8002ec6:	f7fe fc93 	bl	80017f0 <ESC_claimbuffer>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
                  if (MBXout)
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d032      	beq.n	8002f3a <SDO_download+0x1c2>
                  {
                     coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	4a3f      	ldr	r2, [pc, #252]	; (8002fd4 <SDO_download+0x25c>)
 8002ed8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	4a3b      	ldr	r2, [pc, #236]	; (8002fcc <SDO_download+0x254>)
 8002ee0:	4413      	add	r3, r2
 8002ee2:	603b      	str	r3, [r7, #0]
                     coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f042 020a 	orr.w	r2, r2, #10
 8002eec:	701a      	strb	r2, [r3, #0]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	705a      	strb	r2, [r3, #1]
                     coeres->mbxheader.mbxtype = MBXCOE;
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	7953      	ldrb	r3, [r2, #5]
 8002ef6:	2103      	movs	r1, #3
 8002ef8:	f361 0303 	bfi	r3, r1, #0, #4
 8002efc:	7153      	strb	r3, [r2, #5]
                     coeres->coeheader.numberservice =
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2200      	movs	r2, #0
 8002f02:	719a      	strb	r2, [r3, #6]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8002f0a:	71da      	strb	r2, [r3, #7]
                        htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
                     coeres->index = htoes (index);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	8b7a      	ldrh	r2, [r7, #26]
 8002f10:	f8a3 2009 	strh.w	r2, [r3, #9]
                     coeres->subindex = subindex;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	7e7a      	ldrb	r2, [r7, #25]
 8002f18:	72da      	strb	r2, [r3, #11]
                     coeres->command = COE_COMMAND_DOWNLOADRESPONSE;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2260      	movs	r2, #96	; 0x60
 8002f1e:	721a      	strb	r2, [r3, #8]
                     coeres->size = htoel (0);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2200      	movs	r2, #0
 8002f24:	731a      	strb	r2, [r3, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	735a      	strb	r2, [r3, #13]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	739a      	strb	r2, [r3, #14]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	73da      	strb	r2, [r3, #15]
                     MBXcontrol[MBXout].state = MBXstate_outreq;
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	4a28      	ldr	r2, [pc, #160]	; (8002fd8 <SDO_download+0x260>)
 8002f36:	2103      	movs	r1, #3
 8002f38:	54d1      	strb	r1, [r2, r3]
                  }
                  /* external object write handler */
                  ESC_objecthandler (index, subindex, (objd + nsub)->flags);
 8002f3a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	461a      	mov	r2, r3
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	88db      	ldrh	r3, [r3, #6]
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	7e79      	ldrb	r1, [r7, #25]
 8002f52:	8b7b      	ldrh	r3, [r7, #26]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd ff61 	bl	8000e1c <ESC_objecthandler>
            if (actsize == size)
 8002f5a:	e02b      	b.n	8002fb4 <SDO_download+0x23c>
               }
               else
               {
                  SDO_abort (index, subindex, abort);
 8002f5c:	7e79      	ldrb	r1, [r7, #25]
 8002f5e:	8b7b      	ldrh	r3, [r7, #26]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fcf4 	bl	8002950 <SDO_abort>
            if (actsize == size)
 8002f68:	e024      	b.n	8002fb4 <SDO_download+0x23c>
               }
            }
            else
            {
               SDO_abort (index, subindex, ABORT_TYPEMISMATCH);
 8002f6a:	7e79      	ldrb	r1, [r7, #25]
 8002f6c:	8b7b      	ldrh	r3, [r7, #26]
 8002f6e:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <SDO_download+0x264>)
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fced 	bl	8002950 <SDO_abort>
            if (actsize == size)
 8002f76:	e01d      	b.n	8002fb4 <SDO_download+0x23c>
            }
         }
         else
         {
            if (access == ATYPE_RWpre)
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	2b0f      	cmp	r3, #15
 8002f7c:	d106      	bne.n	8002f8c <SDO_download+0x214>
            {
               SDO_abort (index, subindex, ABORT_NOTINTHISSTATE);
 8002f7e:	7e79      	ldrb	r1, [r7, #25]
 8002f80:	8b7b      	ldrh	r3, [r7, #26]
 8002f82:	4a17      	ldr	r2, [pc, #92]	; (8002fe0 <SDO_download+0x268>)
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fce3 	bl	8002950 <SDO_abort>
 8002f8a:	e013      	b.n	8002fb4 <SDO_download+0x23c>
            }
            else
            {
               SDO_abort (index, subindex, ABORT_READONLY);
 8002f8c:	7e79      	ldrb	r1, [r7, #25]
 8002f8e:	8b7b      	ldrh	r3, [r7, #26]
 8002f90:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <SDO_download+0x26c>)
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fcdc 	bl	8002950 <SDO_abort>
 8002f98:	e00c      	b.n	8002fb4 <SDO_download+0x23c>
            }
         }
      }
      else
      {
         SDO_abort (index, subindex, ABORT_NOSUBINDEX);
 8002f9a:	7e79      	ldrb	r1, [r7, #25]
 8002f9c:	8b7b      	ldrh	r3, [r7, #26]
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <SDO_download+0x270>)
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fcd5 	bl	8002950 <SDO_abort>
 8002fa6:	e005      	b.n	8002fb4 <SDO_download+0x23c>
      }
   }
   else
   {
      SDO_abort (index, subindex, ABORT_NOOBJECT);
 8002fa8:	7e79      	ldrb	r1, [r7, #25]
 8002faa:	8b7b      	ldrh	r3, [r7, #26]
 8002fac:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <SDO_download+0x274>)
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fcce 	bl	8002950 <SDO_abort>
   }
   MBXcontrol[0].state = MBXstate_idle;
 8002fb4:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <SDO_download+0x260>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <SDO_download+0x25c>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
}
 8002fc2:	bf00      	nop
 8002fc4:	372c      	adds	r7, #44	; 0x2c
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd90      	pop	{r4, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000230 	.word	0x20000230
 8002fd0:	0800cf64 	.word	0x0800cf64
 8002fd4:	20000164 	.word	0x20000164
 8002fd8:	20000420 	.word	0x20000420
 8002fdc:	06070010 	.word	0x06070010
 8002fe0:	08000022 	.word	0x08000022
 8002fe4:	06010002 	.word	0x06010002
 8002fe8:	06090011 	.word	0x06090011
 8002fec:	06020000 	.word	0x06020000

08002ff0 <SDO_infoerror>:
/** Function for sending an SDO Info Error reply.
 *
 * @param[in] abortcode  = = abort code to send in reply
 */
void SDO_infoerror (uint32_t abortcode)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
   uint8_t MBXout;
   _COEobjdesc *coeres;
   MBXout = ESC_claimbuffer ();
 8002ff8:	f7fe fbfa 	bl	80017f0 <ESC_claimbuffer>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d042      	beq.n	800308c <SDO_infoerror+0x9c>
   {
      coeres = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	4a22      	ldr	r2, [pc, #136]	; (8003094 <SDO_infoerror+0xa4>)
 800300a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800300c:	fb02 f303 	mul.w	r3, r2, r3
 8003010:	4a21      	ldr	r2, [pc, #132]	; (8003098 <SDO_infoerror+0xa8>)
 8003012:	4413      	add	r3, r2
 8003014:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes ((uint16_t) 0x0a);
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2200      	movs	r2, #0
 800301a:	f042 020a 	orr.w	r2, r2, #10
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	2200      	movs	r2, #0
 8003022:	705a      	strb	r2, [r3, #1]
      coeres->mbxheader.mbxtype = MBXCOE;
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	7953      	ldrb	r3, [r2, #5]
 8003028:	2103      	movs	r1, #3
 800302a:	f361 0303 	bfi	r3, r1, #0, #4
 800302e:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2200      	movs	r2, #0
 8003034:	719a      	strb	r2, [r3, #6]
 8003036:	2200      	movs	r2, #0
 8003038:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800303c:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      /* SDO info error request */
      coeres->infoheader.opcode = COE_INFOERROR;
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	7a13      	ldrb	r3, [r2, #8]
 8003042:	2107      	movs	r1, #7
 8003044:	f361 0306 	bfi	r3, r1, #0, #7
 8003048:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.incomplete = 0;
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	7a13      	ldrb	r3, [r2, #8]
 800304e:	f36f 13c7 	bfc	r3, #7, #1
 8003052:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.reserved = 0x00;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2200      	movs	r2, #0
 8003058:	725a      	strb	r2, [r3, #9]
      coeres->infoheader.fragmentsleft = 0;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2200      	movs	r2, #0
 800305e:	729a      	strb	r2, [r3, #10]
 8003060:	2200      	movs	r2, #0
 8003062:	72da      	strb	r2, [r3, #11]
      coeres->index = (uint16_t)htoel (abortcode);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	b29a      	uxth	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	819a      	strh	r2, [r3, #12]
      coeres->datatype = (uint16_t)(htoel (abortcode) >> 16);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	0c1b      	lsrs	r3, r3, #16
 8003070:	b29a      	uxth	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	81da      	strh	r2, [r3, #14]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	4a08      	ldr	r2, [pc, #32]	; (800309c <SDO_infoerror+0xac>)
 800307a:	2103      	movs	r1, #3
 800307c:	54d1      	strb	r1, [r2, r3]
      MBXcontrol[0].state = MBXstate_idle;
 800307e:	4b07      	ldr	r3, [pc, #28]	; (800309c <SDO_infoerror+0xac>)
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
      ESCvar.xoe = 0;
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <SDO_infoerror+0xa4>)
 8003086:	2200      	movs	r2, #0
 8003088:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
   }
}
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000164 	.word	0x20000164
 8003098:	20000230 	.word	0x20000230
 800309c:	20000420 	.word	0x20000420

080030a0 <SDO_getodlist>:

/** Function for handling incoming requested SDO Get OD List, validating the
 * request and sending an response. On error an SDO Info Error will be sent.
 */
void SDO_getodlist (void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
   uint16_t frags;
   uint8_t MBXout = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	75fb      	strb	r3, [r7, #23]
   uint16_t entries = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	82bb      	strh	r3, [r7, #20]
   uint16_t i, n;
   uint16_t *p;
   _COEobjdesc *coel, *coer;

   while (SDOobjects[entries].index != 0xffff)
 80030ae:	e002      	b.n	80030b6 <SDO_getodlist+0x16>
   {
      entries++;
 80030b0:	8abb      	ldrh	r3, [r7, #20]
 80030b2:	3301      	adds	r3, #1
 80030b4:	82bb      	strh	r3, [r7, #20]
   while (SDOobjects[entries].index != 0xffff)
 80030b6:	8aba      	ldrh	r2, [r7, #20]
 80030b8:	4988      	ldr	r1, [pc, #544]	; (80032dc <SDO_getodlist+0x23c>)
 80030ba:	4613      	mov	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	440b      	add	r3, r1
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d1ef      	bne.n	80030b0 <SDO_getodlist+0x10>
   }
   ESCvar.entries = entries;
 80030d0:	4a83      	ldr	r2, [pc, #524]	; (80032e0 <SDO_getodlist+0x240>)
 80030d2:	8abb      	ldrh	r3, [r7, #20]
 80030d4:	f8a2 3088 	strh.w	r3, [r2, #136]	; 0x88
   frags = ((entries << 1) + ODLISTSIZE - 1);
 80030d8:	8abb      	ldrh	r3, [r7, #20]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	4b80      	ldr	r3, [pc, #512]	; (80032e0 <SDO_getodlist+0x240>)
 80030e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030e2:	885b      	ldrh	r3, [r3, #2]
 80030e4:	3b0e      	subs	r3, #14
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	817b      	strh	r3, [r7, #10]
   frags /= ODLISTSIZE;
 80030f6:	897a      	ldrh	r2, [r7, #10]
 80030f8:	4b79      	ldr	r3, [pc, #484]	; (80032e0 <SDO_getodlist+0x240>)
 80030fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030fc:	885b      	ldrh	r3, [r3, #2]
 80030fe:	f1a3 010e 	sub.w	r1, r3, #14
 8003102:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003106:	400b      	ands	r3, r1
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	817b      	strh	r3, [r7, #10]
   coer = (_COEobjdesc *) &MBX[0];
 800310e:	4b75      	ldr	r3, [pc, #468]	; (80032e4 <SDO_getodlist+0x244>)
 8003110:	607b      	str	r3, [r7, #4]
   /* check for unsupported opcodes */
   if (etohs (coer->index) > 0x01)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	899b      	ldrh	r3, [r3, #12]
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d903      	bls.n	8003124 <SDO_getodlist+0x84>
   {
      SDO_infoerror (ABORT_UNSUPPORTED);
 800311c:	4872      	ldr	r0, [pc, #456]	; (80032e8 <SDO_getodlist+0x248>)
 800311e:	f7ff ff67 	bl	8002ff0 <SDO_infoerror>
 8003122:	e003      	b.n	800312c <SDO_getodlist+0x8c>
   }
   else
   {
      MBXout = ESC_claimbuffer ();
 8003124:	f7fe fb64 	bl	80017f0 <ESC_claimbuffer>
 8003128:	4603      	mov	r3, r0
 800312a:	75fb      	strb	r3, [r7, #23]
   }
   if (MBXout)
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 80d0 	beq.w	80032d4 <SDO_getodlist+0x234>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8003134:	7dfb      	ldrb	r3, [r7, #23]
 8003136:	4a6a      	ldr	r2, [pc, #424]	; (80032e0 <SDO_getodlist+0x240>)
 8003138:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	4a69      	ldr	r2, [pc, #420]	; (80032e4 <SDO_getodlist+0x244>)
 8003140:	4413      	add	r3, r2
 8003142:	603b      	str	r3, [r7, #0]
      coel->mbxheader.mbxtype = MBXCOE;
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	7953      	ldrb	r3, [r2, #5]
 8003148:	2103      	movs	r1, #3
 800314a:	f361 0303 	bfi	r3, r1, #0, #4
 800314e:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2200      	movs	r2, #0
 8003154:	719a      	strb	r2, [r3, #6]
 8003156:	2200      	movs	r2, #0
 8003158:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800315c:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	7a13      	ldrb	r3, [r2, #8]
 8003162:	2102      	movs	r1, #2
 8003164:	f361 0306 	bfi	r3, r1, #0, #7
 8003168:	7213      	strb	r3, [r2, #8]
      /* number of objects request */
      if (etohs (coer->index) == 0x00)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	899b      	ldrh	r3, [r3, #12]
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d147      	bne.n	8003204 <SDO_getodlist+0x164>
      {
         coel->index = htoes ((uint16_t) 0x00);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	731a      	strb	r2, [r3, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	735a      	strb	r2, [r3, #13]
         coel->infoheader.incomplete = 0;
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	7a13      	ldrb	r3, [r2, #8]
 8003182:	f36f 13c7 	bfc	r3, #7, #1
 8003186:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2200      	movs	r2, #0
 800318c:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes ((uint16_t) 0);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2200      	movs	r2, #0
 8003192:	729a      	strb	r2, [r3, #10]
 8003194:	2200      	movs	r2, #0
 8003196:	72da      	strb	r2, [r3, #11]
         MBXcontrol[0].state = MBXstate_idle;
 8003198:	4b54      	ldr	r3, [pc, #336]	; (80032ec <SDO_getodlist+0x24c>)
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 800319e:	4b50      	ldr	r3, [pc, #320]	; (80032e0 <SDO_getodlist+0x240>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
         ESCvar.frags = frags;
 80031a6:	4a4e      	ldr	r2, [pc, #312]	; (80032e0 <SDO_getodlist+0x240>)
 80031a8:	897b      	ldrh	r3, [r7, #10]
 80031aa:	f8a2 308a 	strh.w	r3, [r2, #138]	; 0x8a
         ESCvar.fragsleft = frags - 1;
 80031ae:	897b      	ldrh	r3, [r7, #10]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	4b4a      	ldr	r3, [pc, #296]	; (80032e0 <SDO_getodlist+0x240>)
 80031b6:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
         p = &(coel->datatype);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	330e      	adds	r3, #14
 80031be:	60fb      	str	r3, [r7, #12]
         *p = htoes (entries);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8aba      	ldrh	r2, [r7, #20]
 80031c4:	801a      	strh	r2, [r3, #0]
         p++;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3302      	adds	r3, #2
 80031ca:	60fb      	str	r3, [r7, #12]
         *p = 0;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	801a      	strh	r2, [r3, #0]
         p++;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3302      	adds	r3, #2
 80031d6:	60fb      	str	r3, [r7, #12]
         *p = 0;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	801a      	strh	r2, [r3, #0]
         p++;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3302      	adds	r3, #2
 80031e2:	60fb      	str	r3, [r7, #12]
         *p = 0;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	801a      	strh	r2, [r3, #0]
         p++;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3302      	adds	r3, #2
 80031ee:	60fb      	str	r3, [r7, #12]
         *p = 0;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	801a      	strh	r2, [r3, #0]
         coel->mbxheader.length = htoes (0x08 + (5 << 1));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f042 0212 	orr.w	r2, r2, #18
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	2200      	movs	r2, #0
 8003202:	705a      	strb	r2, [r3, #1]
      }
      /* only return all objects */
      if (etohs (coer->index) == 0x01)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	899b      	ldrh	r3, [r3, #12]
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d15e      	bne.n	80032cc <SDO_getodlist+0x22c>
      {
         if (frags > 1)
 800320e:	897b      	ldrh	r3, [r7, #10]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d912      	bls.n	800323a <SDO_getodlist+0x19a>
         {
            coel->infoheader.incomplete = 1;
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	7a13      	ldrb	r3, [r2, #8]
 8003218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321c:	7213      	strb	r3, [r2, #8]
            ESCvar.xoe = MBXCOE + MBXODL;
 800321e:	4b30      	ldr	r3, [pc, #192]	; (80032e0 <SDO_getodlist+0x240>)
 8003220:	2213      	movs	r2, #19
 8003222:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
            n = ODLISTSIZE >> 1;
 8003226:	4b2e      	ldr	r3, [pc, #184]	; (80032e0 <SDO_getodlist+0x240>)
 8003228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800322a:	885b      	ldrh	r3, [r3, #2]
 800322c:	3b0e      	subs	r3, #14
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003236:	823b      	strh	r3, [r7, #16]
 8003238:	e00d      	b.n	8003256 <SDO_getodlist+0x1b6>
         }
         else
         {
            coel->infoheader.incomplete = 0;
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	7a13      	ldrb	r3, [r2, #8]
 800323e:	f36f 13c7 	bfc	r3, #7, #1
 8003242:	7213      	strb	r3, [r2, #8]
            MBXcontrol[0].state = MBXstate_idle;
 8003244:	4b29      	ldr	r3, [pc, #164]	; (80032ec <SDO_getodlist+0x24c>)
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 800324a:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <SDO_getodlist+0x240>)
 800324c:	2200      	movs	r2, #0
 800324e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
            n = entries;
 8003252:	8abb      	ldrh	r3, [r7, #20]
 8003254:	823b      	strh	r3, [r7, #16]
         }
         coel->infoheader.reserved = 0x00;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2200      	movs	r2, #0
 800325a:	725a      	strb	r2, [r3, #9]
         ESCvar.frags = frags;
 800325c:	4a20      	ldr	r2, [pc, #128]	; (80032e0 <SDO_getodlist+0x240>)
 800325e:	897b      	ldrh	r3, [r7, #10]
 8003260:	f8a2 308a 	strh.w	r3, [r2, #138]	; 0x8a
         ESCvar.fragsleft = frags - 1;
 8003264:	897b      	ldrh	r3, [r7, #10]
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <SDO_getodlist+0x240>)
 800326c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
         coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
 8003270:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <SDO_getodlist+0x240>)
 8003272:	f8b3 208c 	ldrh.w	r2, [r3, #140]	; 0x8c
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	815a      	strh	r2, [r3, #10]
         coel->index = htoes ((uint16_t) 0x01);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2200      	movs	r2, #0
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	731a      	strb	r2, [r3, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	735a      	strb	r2, [r3, #13]

         p = &(coel->datatype);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	330e      	adds	r3, #14
 800328c:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 800328e:	2300      	movs	r3, #0
 8003290:	827b      	strh	r3, [r7, #18]
 8003292:	e010      	b.n	80032b6 <SDO_getodlist+0x216>
         {
            *p = htoes (SDOobjects[i].index);
 8003294:	8a7a      	ldrh	r2, [r7, #18]
 8003296:	4911      	ldr	r1, [pc, #68]	; (80032dc <SDO_getodlist+0x23c>)
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	440b      	add	r3, r1
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	801a      	strh	r2, [r3, #0]
            p++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3302      	adds	r3, #2
 80032ae:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 80032b0:	8a7b      	ldrh	r3, [r7, #18]
 80032b2:	3301      	adds	r3, #1
 80032b4:	827b      	strh	r3, [r7, #18]
 80032b6:	8a7a      	ldrh	r2, [r7, #18]
 80032b8:	8a3b      	ldrh	r3, [r7, #16]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d3ea      	bcc.n	8003294 <SDO_getodlist+0x1f4>
         }

         coel->mbxheader.length = htoes (0x08 + (n << 1));
 80032be:	8a3b      	ldrh	r3, [r7, #16]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3308      	adds	r3, #8
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	801a      	strh	r2, [r3, #0]
      }
      MBXcontrol[MBXout].state = MBXstate_outreq;
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	4a07      	ldr	r2, [pc, #28]	; (80032ec <SDO_getodlist+0x24c>)
 80032d0:	2103      	movs	r1, #3
 80032d2:	54d1      	strb	r1, [r2, r3]
   }
}
 80032d4:	bf00      	nop
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	0800cf64 	.word	0x0800cf64
 80032e0:	20000164 	.word	0x20000164
 80032e4:	20000230 	.word	0x20000230
 80032e8:	06010000 	.word	0x06010000
 80032ec:	20000420 	.word	0x20000420

080032f0 <SDO_getodlistcont>:
/** Function for continuing sending left overs from previous requested
 * SDO Get OD List, validating the request and sending an response.
 *
 */
void SDO_getodlistcont (void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t i, n, s;
   uint16_t *p;
   _COEobjdesc *coel;

   MBXout = ESC_claimbuffer ();
 80032f6:	f7fe fa7b 	bl	80017f0 <ESC_claimbuffer>
 80032fa:	4603      	mov	r3, r0
 80032fc:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 808f 	beq.w	8003424 <SDO_getodlistcont+0x134>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	4a48      	ldr	r2, [pc, #288]	; (800342c <SDO_getodlistcont+0x13c>)
 800330a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800330c:	fb02 f303 	mul.w	r3, r2, r3
 8003310:	4a47      	ldr	r2, [pc, #284]	; (8003430 <SDO_getodlistcont+0x140>)
 8003312:	4413      	add	r3, r2
 8003314:	60bb      	str	r3, [r7, #8]
      coel->mbxheader.mbxtype = MBXCOE;
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	7953      	ldrb	r3, [r2, #5]
 800331a:	2103      	movs	r1, #3
 800331c:	f361 0303 	bfi	r3, r1, #0, #4
 8003320:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2200      	movs	r2, #0
 8003326:	719a      	strb	r2, [r3, #6]
 8003328:	2200      	movs	r2, #0
 800332a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800332e:	71da      	strb	r2, [r3, #7]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	7a13      	ldrb	r3, [r2, #8]
 8003334:	2102      	movs	r1, #2
 8003336:	f361 0306 	bfi	r3, r1, #0, #7
 800333a:	7213      	strb	r3, [r2, #8]
      s = (ESCvar.frags - ESCvar.fragsleft) * (ODLISTSIZE >> 1);
 800333c:	4b3b      	ldr	r3, [pc, #236]	; (800342c <SDO_getodlistcont+0x13c>)
 800333e:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8003342:	4b3a      	ldr	r3, [pc, #232]	; (800342c <SDO_getodlistcont+0x13c>)
 8003344:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	b29a      	uxth	r2, r3
 800334c:	4b37      	ldr	r3, [pc, #220]	; (800342c <SDO_getodlistcont+0x13c>)
 800334e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003350:	885b      	ldrh	r3, [r3, #2]
 8003352:	3b0e      	subs	r3, #14
 8003354:	085b      	lsrs	r3, r3, #1
 8003356:	b29b      	uxth	r3, r3
 8003358:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800335c:	b29b      	uxth	r3, r3
 800335e:	fb12 f303 	smulbb	r3, r2, r3
 8003362:	80fb      	strh	r3, [r7, #6]
      if (ESCvar.fragsleft > 1)
 8003364:	4b31      	ldr	r3, [pc, #196]	; (800342c <SDO_getodlistcont+0x13c>)
 8003366:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800336a:	2b01      	cmp	r3, #1
 800336c:	d911      	bls.n	8003392 <SDO_getodlistcont+0xa2>
      {
         coel->infoheader.incomplete = 1;
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	7a13      	ldrb	r3, [r2, #8]
 8003372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003376:	7213      	strb	r3, [r2, #8]
         n = s + (ODLISTSIZE >> 1);
 8003378:	4b2c      	ldr	r3, [pc, #176]	; (800342c <SDO_getodlistcont+0x13c>)
 800337a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800337c:	885b      	ldrh	r3, [r3, #2]
 800337e:	3b0e      	subs	r3, #14
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	b29b      	uxth	r3, r3
 8003384:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003388:	b29a      	uxth	r2, r3
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	4413      	add	r3, r2
 800338e:	82bb      	strh	r3, [r7, #20]
 8003390:	e00f      	b.n	80033b2 <SDO_getodlistcont+0xc2>
      }
      else
      {
         coel->infoheader.incomplete = 0;
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	7a13      	ldrb	r3, [r2, #8]
 8003396:	f36f 13c7 	bfc	r3, #7, #1
 800339a:	7213      	strb	r3, [r2, #8]
         MBXcontrol[0].state = MBXstate_idle;
 800339c:	4b25      	ldr	r3, [pc, #148]	; (8003434 <SDO_getodlistcont+0x144>)
 800339e:	2200      	movs	r2, #0
 80033a0:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 80033a2:	4b22      	ldr	r3, [pc, #136]	; (800342c <SDO_getodlistcont+0x13c>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
         n = ESCvar.entries;
 80033aa:	4b20      	ldr	r3, [pc, #128]	; (800342c <SDO_getodlistcont+0x13c>)
 80033ac:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80033b0:	82bb      	strh	r3, [r7, #20]
      }
      coel->infoheader.reserved = 0x00;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2200      	movs	r2, #0
 80033b6:	725a      	strb	r2, [r3, #9]
      ESCvar.fragsleft--;
 80033b8:	4b1c      	ldr	r3, [pc, #112]	; (800342c <SDO_getodlistcont+0x13c>)
 80033ba:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	4b1a      	ldr	r3, [pc, #104]	; (800342c <SDO_getodlistcont+0x13c>)
 80033c4:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
      coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
 80033c8:	4b18      	ldr	r3, [pc, #96]	; (800342c <SDO_getodlistcont+0x13c>)
 80033ca:	f8b3 208c 	ldrh.w	r2, [r3, #140]	; 0x8c
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	815a      	strh	r2, [r3, #10]
      /* pointer 2 bytes back to exclude index */
      p = &(coel->index);
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	330c      	adds	r3, #12
 80033d6:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 80033d8:	88fb      	ldrh	r3, [r7, #6]
 80033da:	82fb      	strh	r3, [r7, #22]
 80033dc:	e010      	b.n	8003400 <SDO_getodlistcont+0x110>
      {
         *p = htoes (SDOobjects[i].index);
 80033de:	8afa      	ldrh	r2, [r7, #22]
 80033e0:	4915      	ldr	r1, [pc, #84]	; (8003438 <SDO_getodlistcont+0x148>)
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	440b      	add	r3, r1
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	801a      	strh	r2, [r3, #0]
         p++;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	3302      	adds	r3, #2
 80033f8:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 80033fa:	8afb      	ldrh	r3, [r7, #22]
 80033fc:	3301      	adds	r3, #1
 80033fe:	82fb      	strh	r3, [r7, #22]
 8003400:	8afa      	ldrh	r2, [r7, #22]
 8003402:	8abb      	ldrh	r3, [r7, #20]
 8003404:	429a      	cmp	r2, r3
 8003406:	d3ea      	bcc.n	80033de <SDO_getodlistcont+0xee>
      }
      coel->mbxheader.length = htoes (0x06 + ((n - s) << 1));
 8003408:	8aba      	ldrh	r2, [r7, #20]
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	b29b      	uxth	r3, r3
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	b29b      	uxth	r3, r3
 8003414:	3306      	adds	r3, #6
 8003416:	b29a      	uxth	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	801a      	strh	r2, [r3, #0]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	4a05      	ldr	r2, [pc, #20]	; (8003434 <SDO_getodlistcont+0x144>)
 8003420:	2103      	movs	r1, #3
 8003422:	54d1      	strb	r1, [r2, r3]
   }
}
 8003424:	bf00      	nop
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20000164 	.word	0x20000164
 8003430:	20000230 	.word	0x20000230
 8003434:	20000420 	.word	0x20000420
 8003438:	0800cf64 	.word	0x0800cf64

0800343c <SDO_getod>:
/** Function for handling incoming requested SDO Get Object Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
void SDO_getod (void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08c      	sub	sp, #48	; 0x30
 8003440:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t index;
   int32_t nidx;
   uint8_t *d;
   const uint8_t *s;
   uint8_t n = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   _COEobjdesc *coer, *coel;
   coer = (_COEobjdesc *) &MBX[0];
 8003448:	4b8b      	ldr	r3, [pc, #556]	; (8003678 <SDO_getod+0x23c>)
 800344a:	623b      	str	r3, [r7, #32]
   index = etohs (coer->index);
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	7b1a      	ldrb	r2, [r3, #12]
 8003450:	7b5b      	ldrb	r3, [r3, #13]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	4313      	orrs	r3, r2
 8003456:	83fb      	strh	r3, [r7, #30]
   nidx = SDO_findobject (index);
 8003458:	8bfb      	ldrh	r3, [r7, #30]
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff f8e4 	bl	8002628 <SDO_findobject>
 8003460:	61b8      	str	r0, [r7, #24]
   if (nidx >= 0)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f2c0 8100 	blt.w	800366a <SDO_getod+0x22e>
   {
      MBXout = ESC_claimbuffer ();
 800346a:	f7fe f9c1 	bl	80017f0 <ESC_claimbuffer>
 800346e:	4603      	mov	r3, r0
 8003470:	75fb      	strb	r3, [r7, #23]
      if (MBXout)
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80fb 	beq.w	8003670 <SDO_getod+0x234>
      {
         coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800347a:	7dfb      	ldrb	r3, [r7, #23]
 800347c:	4a7f      	ldr	r2, [pc, #508]	; (800367c <SDO_getod+0x240>)
 800347e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003480:	fb02 f303 	mul.w	r3, r2, r3
 8003484:	4a7c      	ldr	r2, [pc, #496]	; (8003678 <SDO_getod+0x23c>)
 8003486:	4413      	add	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
         coel->mbxheader.mbxtype = MBXCOE;
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	7953      	ldrb	r3, [r2, #5]
 800348e:	2103      	movs	r1, #3
 8003490:	f361 0303 	bfi	r3, r1, #0, #4
 8003494:	7153      	strb	r3, [r2, #5]
         coel->coeheader.numberservice =
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	2200      	movs	r2, #0
 800349a:	719a      	strb	r2, [r3, #6]
 800349c:	2200      	movs	r2, #0
 800349e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034a2:	71da      	strb	r2, [r3, #7]
            htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
         coel->infoheader.opcode = COE_GETODRESPONSE;
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	7a13      	ldrb	r3, [r2, #8]
 80034a8:	2104      	movs	r1, #4
 80034aa:	f361 0306 	bfi	r3, r1, #0, #7
 80034ae:	7213      	strb	r3, [r2, #8]
         coel->infoheader.incomplete = 0;
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	7a13      	ldrb	r3, [r2, #8]
 80034b4:	f36f 13c7 	bfc	r3, #7, #1
 80034b8:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2200      	movs	r2, #0
 80034be:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2200      	movs	r2, #0
 80034c4:	729a      	strb	r2, [r3, #10]
 80034c6:	2200      	movs	r2, #0
 80034c8:	72da      	strb	r2, [r3, #11]
         coel->index = htoes (index);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	8bfa      	ldrh	r2, [r7, #30]
 80034ce:	819a      	strh	r2, [r3, #12]
         if (SDOobjects[nidx].objtype == OTYPE_VAR)
 80034d0:	496b      	ldr	r1, [pc, #428]	; (8003680 <SDO_getod+0x244>)
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	440b      	add	r3, r1
 80034de:	885b      	ldrh	r3, [r3, #2]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b07      	cmp	r3, #7
 80034e4:	d12a      	bne.n	800353c <SDO_getod+0x100>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	b21b      	sxth	r3, r3
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff f843 	bl	8002578 <SDO_findsubindex>
 80034f2:	4603      	mov	r3, r0
 80034f4:	607b      	str	r3, [r7, #4]
            const _objd *objd = SDOobjects[nidx].objdesc;
 80034f6:	4962      	ldr	r1, [pc, #392]	; (8003680 <SDO_getod+0x244>)
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	440b      	add	r3, r1
 8003504:	3308      	adds	r3, #8
 8003506:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800350a:	603b      	str	r3, [r7, #0]
            coel->datatype = htoes ((objd + nsub)->datatype);
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	461a      	mov	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	4413      	add	r3, r2
 800351c:	885b      	ldrh	r3, [r3, #2]
 800351e:	b29a      	uxth	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	81da      	strh	r2, [r3, #14]
            coel->maxsub = SDOobjects[nidx].maxsub;
 8003524:	4956      	ldr	r1, [pc, #344]	; (8003680 <SDO_getod+0x244>)
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	440b      	add	r3, r1
 8003532:	3304      	adds	r3, #4
 8003534:	781a      	ldrb	r2, [r3, #0]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	741a      	strb	r2, [r3, #16]
 800353a:	e04b      	b.n	80035d4 <SDO_getod+0x198>
         }
         else if (SDOobjects[nidx].objtype == OTYPE_ARRAY)
 800353c:	4950      	ldr	r1, [pc, #320]	; (8003680 <SDO_getod+0x244>)
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	440b      	add	r3, r1
 800354a:	885b      	ldrh	r3, [r3, #2]
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b08      	cmp	r3, #8
 8003550:	d12d      	bne.n	80035ae <SDO_getod+0x172>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	b21b      	sxth	r3, r3
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff f80d 	bl	8002578 <SDO_findsubindex>
 800355e:	4603      	mov	r3, r0
 8003560:	60fb      	str	r3, [r7, #12]
            const _objd *objd = SDOobjects[nidx].objdesc;
 8003562:	4947      	ldr	r1, [pc, #284]	; (8003680 <SDO_getod+0x244>)
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	440b      	add	r3, r1
 8003570:	3308      	adds	r3, #8
 8003572:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003576:	60bb      	str	r3, [r7, #8]
            coel->datatype = htoes ((objd + nsub)->datatype);
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	461a      	mov	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4413      	add	r3, r2
 8003588:	885b      	ldrh	r3, [r3, #2]
 800358a:	b29a      	uxth	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	81da      	strh	r2, [r3, #14]
            coel->maxsub = SDOobjects[nidx].objdesc->value;
 8003590:	493b      	ldr	r1, [pc, #236]	; (8003680 <SDO_getod+0x244>)
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	440b      	add	r3, r1
 800359e:	3308      	adds	r3, #8
 80035a0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	741a      	strb	r2, [r3, #16]
 80035ac:	e012      	b.n	80035d4 <SDO_getod+0x198>
         }
         else
         {
            coel->datatype = htoes (0);
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2200      	movs	r2, #0
 80035b2:	739a      	strb	r2, [r3, #14]
 80035b4:	2200      	movs	r2, #0
 80035b6:	73da      	strb	r2, [r3, #15]
            coel->maxsub = SDOobjects[nidx].objdesc->value;
 80035b8:	4931      	ldr	r1, [pc, #196]	; (8003680 <SDO_getod+0x244>)
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	440b      	add	r3, r1
 80035c6:	3308      	adds	r3, #8
 80035c8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	741a      	strb	r2, [r3, #16]
         }
         coel->objectcode = SDOobjects[nidx].objtype;
 80035d4:	492a      	ldr	r1, [pc, #168]	; (8003680 <SDO_getod+0x244>)
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	440b      	add	r3, r1
 80035e2:	885b      	ldrh	r3, [r3, #2]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	745a      	strb	r2, [r3, #17]
         s = (uint8_t *) SDOobjects[nidx].name;
 80035ec:	4924      	ldr	r1, [pc, #144]	; (8003680 <SDO_getod+0x244>)
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	440b      	add	r3, r1
 80035fa:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28
         d = (uint8_t *) &(coel->name);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	3312      	adds	r3, #18
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 8003606:	e00e      	b.n	8003626 <SDO_getod+0x1ea>
         {
            *d = *s;
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360e:	701a      	strb	r2, [r3, #0]
            n++;
 8003610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003614:	3301      	adds	r3, #1
 8003616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            s++;
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	3301      	adds	r3, #1
 800361e:	62bb      	str	r3, [r7, #40]	; 0x28
            d++;
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	3301      	adds	r3, #1
 8003624:	62fb      	str	r3, [r7, #44]	; 0x2c
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d006      	beq.n	800363c <SDO_getod+0x200>
 800362e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <SDO_getod+0x240>)
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	3b12      	subs	r3, #18
 8003638:	429a      	cmp	r2, r3
 800363a:	d3e5      	bcc.n	8003608 <SDO_getod+0x1cc>
         }
         *d = *s;
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363e:	781a      	ldrb	r2, [r3, #0]
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003642:	701a      	strb	r2, [r3, #0]
         coel->mbxheader.length = htoes ((uint16_t) 0x0c + n);
 8003644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003648:	b29b      	uxth	r3, r3
 800364a:	330c      	adds	r3, #12
 800364c:	b29a      	uxth	r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	801a      	strh	r2, [r3, #0]
         MBXcontrol[MBXout].state = MBXstate_outreq;
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	4a0b      	ldr	r2, [pc, #44]	; (8003684 <SDO_getod+0x248>)
 8003656:	2103      	movs	r1, #3
 8003658:	54d1      	strb	r1, [r2, r3]
         MBXcontrol[0].state = MBXstate_idle;
 800365a:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <SDO_getod+0x248>)
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 8003660:	4b06      	ldr	r3, [pc, #24]	; (800367c <SDO_getod+0x240>)
 8003662:	2200      	movs	r2, #0
 8003664:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
   }
}
 8003668:	e002      	b.n	8003670 <SDO_getod+0x234>
      SDO_infoerror (ABORT_NOOBJECT);
 800366a:	4807      	ldr	r0, [pc, #28]	; (8003688 <SDO_getod+0x24c>)
 800366c:	f7ff fcc0 	bl	8002ff0 <SDO_infoerror>
}
 8003670:	bf00      	nop
 8003672:	3730      	adds	r7, #48	; 0x30
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000230 	.word	0x20000230
 800367c:	20000164 	.word	0x20000164
 8003680:	0800cf64 	.word	0x0800cf64
 8003684:	20000420 	.word	0x20000420
 8003688:	06020000 	.word	0x06020000

0800368c <SDO_geted>:
/** Function for handling incoming requested SDO Get Entry Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
void SDO_geted (void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af00      	add	r7, sp, #0
   int32_t nidx, nsub;
   uint8_t subindex;
   uint8_t *d;
   const uint8_t *s;
   const _objd *objd;
   uint8_t n = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	77fb      	strb	r3, [r7, #31]
   _COEentdesc *coer, *coel;
   coer = (_COEentdesc *) &MBX[0];
 8003696:	4b67      	ldr	r3, [pc, #412]	; (8003834 <SDO_geted+0x1a8>)
 8003698:	61bb      	str	r3, [r7, #24]
   index = etohs (coer->index);
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	7b1a      	ldrb	r2, [r3, #12]
 800369e:	7b5b      	ldrb	r3, [r3, #13]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	4313      	orrs	r3, r2
 80036a4:	82fb      	strh	r3, [r7, #22]
   subindex = coer->subindex;
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	7b9b      	ldrb	r3, [r3, #14]
 80036aa:	757b      	strb	r3, [r7, #21]
   nidx = SDO_findobject (index);
 80036ac:	8afb      	ldrh	r3, [r7, #22]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe ffba 	bl	8002628 <SDO_findobject>
 80036b4:	6138      	str	r0, [r7, #16]
   if (nidx >= 0)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f2c0 80b4 	blt.w	8003826 <SDO_geted+0x19a>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	b21b      	sxth	r3, r3
 80036c2:	7d7a      	ldrb	r2, [r7, #21]
 80036c4:	4611      	mov	r1, r2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe ff56 	bl	8002578 <SDO_findsubindex>
 80036cc:	4603      	mov	r3, r0
 80036ce:	60fb      	str	r3, [r7, #12]
      if (nsub >= 0)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f2c0 80a3 	blt.w	800381e <SDO_geted+0x192>
      {
         objd = SDOobjects[nidx].objdesc;
 80036d8:	4957      	ldr	r1, [pc, #348]	; (8003838 <SDO_geted+0x1ac>)
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	440b      	add	r3, r1
 80036e6:	3308      	adds	r3, #8
 80036e8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80036ec:	60bb      	str	r3, [r7, #8]
         MBXout = ESC_claimbuffer ();
 80036ee:	f7fe f87f 	bl	80017f0 <ESC_claimbuffer>
 80036f2:	4603      	mov	r3, r0
 80036f4:	71fb      	strb	r3, [r7, #7]
         if (MBXout)
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8097 	beq.w	800382c <SDO_geted+0x1a0>
         {
            coel = (_COEentdesc *) &MBX[MBXout * ESC_MBXSIZE];
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	4a4e      	ldr	r2, [pc, #312]	; (800383c <SDO_geted+0x1b0>)
 8003702:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003704:	fb02 f303 	mul.w	r3, r2, r3
 8003708:	4a4a      	ldr	r2, [pc, #296]	; (8003834 <SDO_geted+0x1a8>)
 800370a:	4413      	add	r3, r2
 800370c:	603b      	str	r3, [r7, #0]
            coel->mbxheader.mbxtype = MBXCOE;
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	7953      	ldrb	r3, [r2, #5]
 8003712:	2103      	movs	r1, #3
 8003714:	f361 0303 	bfi	r3, r1, #0, #4
 8003718:	7153      	strb	r3, [r2, #5]
            coel->coeheader.numberservice =
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2200      	movs	r2, #0
 800371e:	719a      	strb	r2, [r3, #6]
 8003720:	2200      	movs	r2, #0
 8003722:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003726:	71da      	strb	r2, [r3, #7]
               htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
            coel->infoheader.opcode = COE_ENTRYDESCRIPTIONRESPONSE;
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	7a13      	ldrb	r3, [r2, #8]
 800372c:	2106      	movs	r1, #6
 800372e:	f361 0306 	bfi	r3, r1, #0, #7
 8003732:	7213      	strb	r3, [r2, #8]
            coel->infoheader.incomplete = 0;
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	7a13      	ldrb	r3, [r2, #8]
 8003738:	f36f 13c7 	bfc	r3, #7, #1
 800373c:	7213      	strb	r3, [r2, #8]
            coel->infoheader.reserved = 0x00;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2200      	movs	r2, #0
 8003742:	725a      	strb	r2, [r3, #9]
            coel->infoheader.fragmentsleft = htoes ((uint16_t) 0);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2200      	movs	r2, #0
 8003748:	729a      	strb	r2, [r3, #10]
 800374a:	2200      	movs	r2, #0
 800374c:	72da      	strb	r2, [r3, #11]
            coel->index = htoes (index);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	8afa      	ldrh	r2, [r7, #22]
 8003752:	819a      	strh	r2, [r3, #12]
            coel->subindex = subindex;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	7d7a      	ldrb	r2, [r7, #21]
 8003758:	739a      	strb	r2, [r3, #14]
            coel->valueinfo = COE_VALUEINFO_ACCESS +
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2207      	movs	r2, #7
 800375e:	73da      	strb	r2, [r3, #15]
               COE_VALUEINFO_OBJECT + COE_VALUEINFO_MAPPABLE;
            coel->datatype = htoes ((objd + nsub)->datatype);
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	461a      	mov	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4413      	add	r3, r2
 8003770:	885b      	ldrh	r3, [r3, #2]
 8003772:	b29a      	uxth	r2, r3
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	821a      	strh	r2, [r3, #16]
            coel->bitlength = htoes ((objd + nsub)->bitlength);
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	461a      	mov	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4413      	add	r3, r2
 8003788:	889b      	ldrh	r3, [r3, #4]
 800378a:	b29a      	uxth	r2, r3
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	825a      	strh	r2, [r3, #18]
            coel->access = htoes ((objd + nsub)->flags);
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	461a      	mov	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4413      	add	r3, r2
 80037a0:	88db      	ldrh	r3, [r3, #6]
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	829a      	strh	r2, [r3, #20]
            s = (uint8_t *) (objd + nsub)->name;
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	461a      	mov	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4413      	add	r3, r2
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	623b      	str	r3, [r7, #32]
            d = (uint8_t *) &(coel->name);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	3316      	adds	r3, #22
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 80037c2:	e00c      	b.n	80037de <SDO_geted+0x152>
            {
               *d = *s;
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	781a      	ldrb	r2, [r3, #0]
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	701a      	strb	r2, [r3, #0]
               n++;
 80037cc:	7ffb      	ldrb	r3, [r7, #31]
 80037ce:	3301      	adds	r3, #1
 80037d0:	77fb      	strb	r3, [r7, #31]
               s++;
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	3301      	adds	r3, #1
 80037d6:	623b      	str	r3, [r7, #32]
               d++;
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	3301      	adds	r3, #1
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d005      	beq.n	80037f2 <SDO_geted+0x166>
 80037e6:	7ffa      	ldrb	r2, [r7, #31]
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <SDO_geted+0x1b0>)
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	3b16      	subs	r3, #22
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d3e8      	bcc.n	80037c4 <SDO_geted+0x138>
            }
            *d = *s;
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	701a      	strb	r2, [r3, #0]
            coel->mbxheader.length = htoes ((uint16_t) 0x10 + n);
 80037fa:	7ffb      	ldrb	r3, [r7, #31]
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3310      	adds	r3, #16
 8003800:	b29a      	uxth	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	801a      	strh	r2, [r3, #0]
            MBXcontrol[MBXout].state = MBXstate_outreq;
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	4a0d      	ldr	r2, [pc, #52]	; (8003840 <SDO_geted+0x1b4>)
 800380a:	2103      	movs	r1, #3
 800380c:	54d1      	strb	r1, [r2, r3]
            MBXcontrol[0].state = MBXstate_idle;
 800380e:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <SDO_geted+0x1b4>)
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 8003814:	4b09      	ldr	r3, [pc, #36]	; (800383c <SDO_geted+0x1b0>)
 8003816:	2200      	movs	r2, #0
 8003818:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
   }
}
 800381c:	e006      	b.n	800382c <SDO_geted+0x1a0>
         SDO_infoerror (ABORT_NOSUBINDEX);
 800381e:	4809      	ldr	r0, [pc, #36]	; (8003844 <SDO_geted+0x1b8>)
 8003820:	f7ff fbe6 	bl	8002ff0 <SDO_infoerror>
}
 8003824:	e002      	b.n	800382c <SDO_geted+0x1a0>
      SDO_infoerror (ABORT_NOOBJECT);
 8003826:	4808      	ldr	r0, [pc, #32]	; (8003848 <SDO_geted+0x1bc>)
 8003828:	f7ff fbe2 	bl	8002ff0 <SDO_infoerror>
}
 800382c:	bf00      	nop
 800382e:	3728      	adds	r7, #40	; 0x28
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20000230 	.word	0x20000230
 8003838:	0800cf64 	.word	0x0800cf64
 800383c:	20000164 	.word	0x20000164
 8003840:	20000420 	.word	0x20000420
 8003844:	06090011 	.word	0x06090011
 8003848:	06020000 	.word	0x06020000

0800384c <ESC_coeprocess>:
/** Main CoE function checking the status on current mailbox buffers carrying
 * data, distributing the mailboxes to appropriate CoE functions.
 * On Error an MBX_error or SDO Abort will be sent depending on error cause.
 */
void ESC_coeprocess (void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   _COEsdo *coesdo;
   _COEobjdesc *coeobjdesc;
   uint8_t service;
   if (ESCvar.MBXrun == 0)
 8003852:	4b5c      	ldr	r3, [pc, #368]	; (80039c4 <ESC_coeprocess+0x178>)
 8003854:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80af 	beq.w	80039bc <ESC_coeprocess+0x170>
   {
      return;
   }
   if (!ESCvar.xoe && (MBXcontrol[0].state == MBXstate_inclaim))
 800385e:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <ESC_coeprocess+0x178>)
 8003860:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003864:	2b00      	cmp	r3, #0
 8003866:	d119      	bne.n	800389c <ESC_coeprocess+0x50>
 8003868:	4b57      	ldr	r3, [pc, #348]	; (80039c8 <ESC_coeprocess+0x17c>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d115      	bne.n	800389c <ESC_coeprocess+0x50>
   {
      mbh = (_MBXh *) &MBX[0];
 8003870:	4b56      	ldr	r3, [pc, #344]	; (80039cc <ESC_coeprocess+0x180>)
 8003872:	60fb      	str	r3, [r7, #12]
      if (mbh->mbxtype == MBXCOE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	795b      	ldrb	r3, [r3, #5]
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b03      	cmp	r3, #3
 8003880:	d10c      	bne.n	800389c <ESC_coeprocess+0x50>
      {
         if (etohs (mbh->length) < COE_MINIMUM_LENGTH)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b07      	cmp	r3, #7
 800388a:	d803      	bhi.n	8003894 <ESC_coeprocess+0x48>
         {
            MBX_error (MBXERR_INVALIDSIZE);
 800388c:	2008      	movs	r0, #8
 800388e:	f7fe f833 	bl	80018f8 <MBX_error>
 8003892:	e003      	b.n	800389c <ESC_coeprocess+0x50>
         }
         else
         {
            ESCvar.xoe = MBXCOE;
 8003894:	4b4b      	ldr	r3, [pc, #300]	; (80039c4 <ESC_coeprocess+0x178>)
 8003896:	2203      	movs	r2, #3
 8003898:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
         }
      }
   }
   if ((ESCvar.xoe == (MBXCOE + MBXODL)) && (!ESCvar.mbxoutpost))
 800389c:	4b49      	ldr	r3, [pc, #292]	; (80039c4 <ESC_coeprocess+0x178>)
 800389e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80038a2:	2b13      	cmp	r3, #19
 80038a4:	d106      	bne.n	80038b4 <ESC_coeprocess+0x68>
 80038a6:	4b47      	ldr	r3, [pc, #284]	; (80039c4 <ESC_coeprocess+0x178>)
 80038a8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <ESC_coeprocess+0x68>
   {
      /* continue get OD list */
      SDO_getodlistcont ();
 80038b0:	f7ff fd1e 	bl	80032f0 <SDO_getodlistcont>
   }
   if (ESCvar.xoe == MBXCOE)
 80038b4:	4b43      	ldr	r3, [pc, #268]	; (80039c4 <ESC_coeprocess+0x178>)
 80038b6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d17f      	bne.n	80039be <ESC_coeprocess+0x172>
   {
      coesdo = (_COEsdo *) &MBX[0];
 80038be:	4b43      	ldr	r3, [pc, #268]	; (80039cc <ESC_coeprocess+0x180>)
 80038c0:	60bb      	str	r3, [r7, #8]
      coeobjdesc = (_COEobjdesc *) &MBX[0];
 80038c2:	4b42      	ldr	r3, [pc, #264]	; (80039cc <ESC_coeprocess+0x180>)
 80038c4:	607b      	str	r3, [r7, #4]
      service = etohs (coesdo->coeheader.numberservice) >> 12;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	88db      	ldrh	r3, [r3, #6]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	0b1b      	lsrs	r3, r3, #12
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	70fb      	strb	r3, [r7, #3]
      /* initiate SDO upload request */
      if ((service == COE_SDOREQUEST)
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d10a      	bne.n	80038ee <ESC_coeprocess+0xa2>
          && (coesdo->command == COE_COMMAND_UPLOADREQUEST)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	7a1b      	ldrb	r3, [r3, #8]
 80038dc:	2b40      	cmp	r3, #64	; 0x40
 80038de:	d106      	bne.n	80038ee <ESC_coeprocess+0xa2>
          && (etohs (coesdo->mbxheader.length) == 0x0a))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b0a      	cmp	r3, #10
 80038e8:	d101      	bne.n	80038ee <ESC_coeprocess+0xa2>
      {
         SDO_upload ();
 80038ea:	f7ff f877 	bl	80029dc <SDO_upload>
      }
      /* SDO upload segment request */
      if ((service == COE_SDOREQUEST)
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d112      	bne.n	800391a <ESC_coeprocess+0xce>
          && ((coesdo->command & 0xef) == COE_COMMAND_UPLOADSEGREQ)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	7a1b      	ldrb	r3, [r3, #8]
 80038f8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80038fc:	2b60      	cmp	r3, #96	; 0x60
 80038fe:	d10c      	bne.n	800391a <ESC_coeprocess+0xce>
          && (etohs (coesdo->mbxheader.length) == 0x0a)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b0a      	cmp	r3, #10
 8003908:	d107      	bne.n	800391a <ESC_coeprocess+0xce>
          && (ESCvar.segmented == MBXSEU))
 800390a:	4b2e      	ldr	r3, [pc, #184]	; (80039c4 <ESC_coeprocess+0x178>)
 800390c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003910:	2b40      	cmp	r3, #64	; 0x40
 8003912:	d102      	bne.n	800391a <ESC_coeprocess+0xce>
      {
         SDO_uploadsegment ();
 8003914:	f7ff f98c 	bl	8002c30 <SDO_uploadsegment>
 8003918:	e051      	b.n	80039be <ESC_coeprocess+0x172>
      }
      /* initiate SDO download request */
      else
      {
         if ((service == COE_SDOREQUEST) && ((coesdo->command & 0xf1) == 0x21))
 800391a:	78fb      	ldrb	r3, [r7, #3]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d108      	bne.n	8003932 <ESC_coeprocess+0xe6>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	7a1b      	ldrb	r3, [r3, #8]
 8003924:	f003 03f1 	and.w	r3, r3, #241	; 0xf1
 8003928:	2b21      	cmp	r3, #33	; 0x21
 800392a:	d102      	bne.n	8003932 <ESC_coeprocess+0xe6>
         {
            SDO_download ();
 800392c:	f7ff fa24 	bl	8002d78 <SDO_download>
 8003930:	e045      	b.n	80039be <ESC_coeprocess+0x172>
         }
         /* initiate SDO get OD list */
         else
         {
            if ((service == COE_SDOINFORMATION)
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d109      	bne.n	800394c <ESC_coeprocess+0x100>
                && (coeobjdesc->infoheader.opcode == 0x01))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	7a1b      	ldrb	r3, [r3, #8]
 800393c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b01      	cmp	r3, #1
 8003944:	d102      	bne.n	800394c <ESC_coeprocess+0x100>
            {
               SDO_getodlist ();
 8003946:	f7ff fbab 	bl	80030a0 <SDO_getodlist>
 800394a:	e038      	b.n	80039be <ESC_coeprocess+0x172>
            }
            /* initiate SDO get OD */
            else
            {
               if ((service == COE_SDOINFORMATION)
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	2b08      	cmp	r3, #8
 8003950:	d109      	bne.n	8003966 <ESC_coeprocess+0x11a>
                   && (coeobjdesc->infoheader.opcode == 0x03))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	7a1b      	ldrb	r3, [r3, #8]
 8003956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b03      	cmp	r3, #3
 800395e:	d102      	bne.n	8003966 <ESC_coeprocess+0x11a>
               {
                  SDO_getod ();
 8003960:	f7ff fd6c 	bl	800343c <SDO_getod>
 8003964:	e02b      	b.n	80039be <ESC_coeprocess+0x172>
               }
               /* initiate SDO get ED */
               else
               {
                  if ((service == COE_SDOINFORMATION)
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	2b08      	cmp	r3, #8
 800396a:	d109      	bne.n	8003980 <ESC_coeprocess+0x134>
                      && (coeobjdesc->infoheader.opcode == 0x05))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	7a1b      	ldrb	r3, [r3, #8]
 8003970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b05      	cmp	r3, #5
 8003978:	d102      	bne.n	8003980 <ESC_coeprocess+0x134>
                  {
                     SDO_geted ();
 800397a:	f7ff fe87 	bl	800368c <SDO_geted>
 800397e:	e01e      	b.n	80039be <ESC_coeprocess+0x172>
                  }
                  else
                  {
                     /* COE not recognised above */
                     if (ESCvar.xoe == MBXCOE)
 8003980:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <ESC_coeprocess+0x178>)
 8003982:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003986:	2b03      	cmp	r3, #3
 8003988:	d119      	bne.n	80039be <ESC_coeprocess+0x172>
                     {
                        if (service == 0)
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d103      	bne.n	8003998 <ESC_coeprocess+0x14c>
                        {
                           MBX_error (MBXERR_INVALIDHEADER);
 8003990:	2005      	movs	r0, #5
 8003992:	f7fd ffb1 	bl	80018f8 <MBX_error>
 8003996:	e009      	b.n	80039ac <ESC_coeprocess+0x160>
                        }
                        else
                        {
                           SDO_abort (etohs (coesdo->index), coesdo->subindex, ABORT_UNSUPPORTED);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800399e:	b298      	uxth	r0, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	7adb      	ldrb	r3, [r3, #11]
 80039a4:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <ESC_coeprocess+0x184>)
 80039a6:	4619      	mov	r1, r3
 80039a8:	f7fe ffd2 	bl	8002950 <SDO_abort>
                        }
                        MBXcontrol[0].state = MBXstate_idle;
 80039ac:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <ESC_coeprocess+0x17c>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]
                        ESCvar.xoe = 0;
 80039b2:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <ESC_coeprocess+0x178>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80039ba:	e000      	b.n	80039be <ESC_coeprocess+0x172>
      return;
 80039bc:	bf00      	nop
               }
            }
         }
      }
   }
}
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20000164 	.word	0x20000164
 80039c8:	20000420 	.word	0x20000420
 80039cc:	20000230 	.word	0x20000230
 80039d0:	06010000 	.word	0x06010000

080039d4 <COE_bitsliceGet>:
 * @param[in] offset = start offset
 * @param[in] length = number of bits to get
 * @return bitslice value
 */
static uint64_t COE_bitsliceGet (uint64_t * bitmap, int offset, int length)
{
 80039d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039d8:	b08d      	sub	sp, #52	; 0x34
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
   const int word_offset = offset / 64;
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	2a00      	cmp	r2, #0
 80039e6:	da00      	bge.n	80039ea <COE_bitsliceGet+0x16>
 80039e8:	323f      	adds	r2, #63	; 0x3f
 80039ea:	1192      	asrs	r2, r2, #6
 80039ec:	627a      	str	r2, [r7, #36]	; 0x24
   const int bit_offset = offset % 64;
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	4251      	negs	r1, r2
 80039f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80039f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80039fa:	bf58      	it	pl
 80039fc:	424a      	negpl	r2, r1
 80039fe:	623a      	str	r2, [r7, #32]
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	2a40      	cmp	r2, #64	; 0x40
 8003a04:	d019      	beq.n	8003a3a <COE_bitsliceGet+0x66>
 8003a06:	f04f 0101 	mov.w	r1, #1
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f1a0 0e20 	sub.w	lr, r0, #32
 8003a14:	f1c0 0c20 	rsb	ip, r0, #32
 8003a18:	fa02 f900 	lsl.w	r9, r2, r0
 8003a1c:	fa01 fe0e 	lsl.w	lr, r1, lr
 8003a20:	ea49 090e 	orr.w	r9, r9, lr
 8003a24:	fa21 fc0c 	lsr.w	ip, r1, ip
 8003a28:	ea49 090c 	orr.w	r9, r9, ip
 8003a2c:	fa01 f800 	lsl.w	r8, r1, r0
 8003a30:	f118 31ff 	adds.w	r1, r8, #4294967295
 8003a34:	f149 32ff 	adc.w	r2, r9, #4294967295
 8003a38:	e003      	b.n	8003a42 <COE_bitsliceGet+0x6e>
 8003a3a:	f04f 31ff 	mov.w	r1, #4294967295
 8003a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a42:	e9c7 1206 	strd	r1, r2, [r7, #24]
   uint64_t w0;
   uint64_t w1 = 0;
 8003a46:	f04f 0100 	mov.w	r1, #0
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28

   /* Get the least significant word */
   w0 = bitmap[word_offset];
 8003a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a54:	00d2      	lsls	r2, r2, #3
 8003a56:	68f9      	ldr	r1, [r7, #12]
 8003a58:	440a      	add	r2, r1
 8003a5a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8003a5e:	e9c7 1204 	strd	r1, r2, [r7, #16]
   w0 = w0 >> bit_offset;
 8003a62:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003a66:	6a38      	ldr	r0, [r7, #32]
 8003a68:	f1c0 0e20 	rsb	lr, r0, #32
 8003a6c:	f1a0 0c20 	sub.w	ip, r0, #32
 8003a70:	fa21 f500 	lsr.w	r5, r1, r0
 8003a74:	fa02 fe0e 	lsl.w	lr, r2, lr
 8003a78:	ea45 050e 	orr.w	r5, r5, lr
 8003a7c:	fa22 fc0c 	lsr.w	ip, r2, ip
 8003a80:	ea45 050c 	orr.w	r5, r5, ip
 8003a84:	fa22 f600 	lsr.w	r6, r2, r0
 8003a88:	e9c7 5604 	strd	r5, r6, [r7, #16]

   /* Get the most significant word, if required */
   if (length + bit_offset > 64)
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	6a3a      	ldr	r2, [r7, #32]
 8003a90:	440a      	add	r2, r1
 8003a92:	2a40      	cmp	r2, #64	; 0x40
 8003a94:	dd1d      	ble.n	8003ad2 <COE_bitsliceGet+0xfe>
   {
      w1 = bitmap[word_offset + 1];
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	3201      	adds	r2, #1
 8003a9a:	00d2      	lsls	r2, r2, #3
 8003a9c:	68f9      	ldr	r1, [r7, #12]
 8003a9e:	440a      	add	r2, r1
 8003aa0:	e9d2 1200 	ldrd	r1, r2, [r2]
 8003aa4:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
      w1 = w1 << (64 - bit_offset);
 8003aa8:	6a3a      	ldr	r2, [r7, #32]
 8003aaa:	f1c2 0040 	rsb	r0, r2, #64	; 0x40
 8003aae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003ab2:	f1a0 0620 	sub.w	r6, r0, #32
 8003ab6:	f1c0 0520 	rsb	r5, r0, #32
 8003aba:	fa02 f400 	lsl.w	r4, r2, r0
 8003abe:	fa01 f606 	lsl.w	r6, r1, r6
 8003ac2:	4334      	orrs	r4, r6
 8003ac4:	fa21 f505 	lsr.w	r5, r1, r5
 8003ac8:	432c      	orrs	r4, r5
 8003aca:	fa01 f300 	lsl.w	r3, r1, r0
 8003ace:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
   }

   w0 = (w1 | w0);
 8003ad2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ad6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003ada:	ea43 0501 	orr.w	r5, r3, r1
 8003ade:	ea44 0602 	orr.w	r6, r4, r2
 8003ae2:	e9c7 5604 	strd	r5, r6, [r7, #16]
   return (w0 & mask);
 8003ae6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003aea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003aee:	ea03 0501 	and.w	r5, r3, r1
 8003af2:	ea04 0602 	and.w	r6, r4, r2
 8003af6:	462b      	mov	r3, r5
 8003af8:	4634      	mov	r4, r6
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	4621      	mov	r1, r4
 8003afe:	3734      	adds	r7, #52	; 0x34
 8003b00:	46bd      	mov	sp, r7
 8003b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003b06 <COE_bitsliceSet>:
 * @param[in] length = number of bits to set
 * @param[in] value  = value to set
 */
static void COE_bitsliceSet (uint64_t * bitmap, int offset, int length,
                             uint64_t value)
{
 8003b06:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b0a:	b09a      	sub	sp, #104	; 0x68
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6278      	str	r0, [r7, #36]	; 0x24
 8003b10:	6239      	str	r1, [r7, #32]
 8003b12:	61fa      	str	r2, [r7, #28]
   const int word_offset = offset / 64;
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	da00      	bge.n	8003b1c <COE_bitsliceSet+0x16>
 8003b1a:	333f      	adds	r3, #63	; 0x3f
 8003b1c:	119b      	asrs	r3, r3, #6
 8003b1e:	667b      	str	r3, [r7, #100]	; 0x64
   const int bit_offset = offset % 64;
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	425a      	negs	r2, r3
 8003b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b28:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003b2c:	bf58      	it	pl
 8003b2e:	4253      	negpl	r3, r2
 8003b30:	663b      	str	r3, [r7, #96]	; 0x60
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b40      	cmp	r3, #64	; 0x40
 8003b36:	d01e      	beq.n	8003b76 <COE_bitsliceSet+0x70>
 8003b38:	f04f 0301 	mov.w	r3, #1
 8003b3c:	f04f 0400 	mov.w	r4, #0
 8003b40:	69f9      	ldr	r1, [r7, #28]
 8003b42:	f1a1 0020 	sub.w	r0, r1, #32
 8003b46:	f1c1 0220 	rsb	r2, r1, #32
 8003b4a:	fa04 f501 	lsl.w	r5, r4, r1
 8003b4e:	617d      	str	r5, [r7, #20]
 8003b50:	fa03 f000 	lsl.w	r0, r3, r0
 8003b54:	697d      	ldr	r5, [r7, #20]
 8003b56:	4305      	orrs	r5, r0
 8003b58:	617d      	str	r5, [r7, #20]
 8003b5a:	fa23 f202 	lsr.w	r2, r3, r2
 8003b5e:	6978      	ldr	r0, [r7, #20]
 8003b60:	4310      	orrs	r0, r2
 8003b62:	6178      	str	r0, [r7, #20]
 8003b64:	408b      	lsls	r3, r1
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003b6c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003b70:	f144 34ff 	adc.w	r4, r4, #4294967295
 8003b74:	e003      	b.n	8003b7e <COE_bitsliceSet+0x78>
 8003b76:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7a:	f04f 34ff 	mov.w	r4, #4294967295
 8003b7e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
   const uint64_t mask0 = mask << bit_offset;
 8003b82:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003b86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b88:	f1a2 0020 	sub.w	r0, r2, #32
 8003b8c:	f1c2 0120 	rsb	r1, r2, #32
 8003b90:	fa04 f502 	lsl.w	r5, r4, r2
 8003b94:	60fd      	str	r5, [r7, #12]
 8003b96:	fa03 f000 	lsl.w	r0, r3, r0
 8003b9a:	68fd      	ldr	r5, [r7, #12]
 8003b9c:	4305      	orrs	r5, r0
 8003b9e:	60fd      	str	r5, [r7, #12]
 8003ba0:	fa23 f101 	lsr.w	r1, r3, r1
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	4308      	orrs	r0, r1
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	4093      	lsls	r3, r2
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003bb2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
   uint64_t v0 = value << bit_offset;
 8003bb6:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003bba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bbc:	f1a2 0020 	sub.w	r0, r2, #32
 8003bc0:	f1c2 0120 	rsb	r1, r2, #32
 8003bc4:	fa04 f502 	lsl.w	r5, r4, r2
 8003bc8:	607d      	str	r5, [r7, #4]
 8003bca:	fa03 f000 	lsl.w	r0, r3, r0
 8003bce:	687d      	ldr	r5, [r7, #4]
 8003bd0:	4305      	orrs	r5, r0
 8003bd2:	607d      	str	r5, [r7, #4]
 8003bd4:	fa23 f101 	lsr.w	r1, r3, r1
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4308      	orrs	r0, r1
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	4093      	lsls	r3, r2
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003be6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
   uint64_t w0 = bitmap[word_offset];
 8003bea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	4413      	add	r3, r2
 8003bf2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003bf6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

   /* Set the least significant word */
   w0 = (w0 & ~mask0) | (v0 & mask0);
 8003bfa:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8003bfe:	ea6f 0503 	mvn.w	r5, r3
 8003c02:	ea6f 0604 	mvn.w	r6, r4
 8003c06:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003c0a:	ea05 0103 	and.w	r1, r5, r3
 8003c0e:	ea06 0204 	and.w	r2, r6, r4
 8003c12:	e9c7 1204 	strd	r1, r2, [r7, #16]
 8003c16:	e9d7 5612 	ldrd	r5, r6, [r7, #72]	; 0x48
 8003c1a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8003c1e:	ea03 0105 	and.w	r1, r3, r5
 8003c22:	ea04 0206 	and.w	r2, r4, r6
 8003c26:	460b      	mov	r3, r1
 8003c28:	4614      	mov	r4, r2
 8003c2a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c2e:	ea41 0103 	orr.w	r1, r1, r3
 8003c32:	ea42 0204 	orr.w	r2, r2, r4
 8003c36:	460b      	mov	r3, r1
 8003c38:	4614      	mov	r4, r2
 8003c3a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
   bitmap[word_offset] = w0;
 8003c3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c44:	441a      	add	r2, r3
 8003c46:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003c4a:	e9c2 3400 	strd	r3, r4, [r2]

   /* Set the most significant word, if required */
   if (length + bit_offset > 64)
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c52:	4413      	add	r3, r2
 8003c54:	2b40      	cmp	r3, #64	; 0x40
 8003c56:	dd59      	ble.n	8003d0c <COE_bitsliceSet+0x206>
   {
      const uint64_t mask1 = mask >> (64 - bit_offset);
 8003c58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c5a:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8003c5e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003c62:	f1c2 0020 	rsb	r0, r2, #32
 8003c66:	f1a2 0120 	sub.w	r1, r2, #32
 8003c6a:	fa23 fa02 	lsr.w	sl, r3, r2
 8003c6e:	fa04 f000 	lsl.w	r0, r4, r0
 8003c72:	ea4a 0a00 	orr.w	sl, sl, r0
 8003c76:	fa24 f101 	lsr.w	r1, r4, r1
 8003c7a:	ea4a 0a01 	orr.w	sl, sl, r1
 8003c7e:	fa24 fb02 	lsr.w	fp, r4, r2
 8003c82:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
      uint64_t v1 = value >> (64 - bit_offset);
 8003c86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c88:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8003c8c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003c90:	f1c2 0020 	rsb	r0, r2, #32
 8003c94:	f1a2 0120 	sub.w	r1, r2, #32
 8003c98:	fa23 f802 	lsr.w	r8, r3, r2
 8003c9c:	fa04 f000 	lsl.w	r0, r4, r0
 8003ca0:	ea48 0800 	orr.w	r8, r8, r0
 8003ca4:	fa24 f101 	lsr.w	r1, r4, r1
 8003ca8:	ea48 0801 	orr.w	r8, r8, r1
 8003cac:	fa24 f902 	lsr.w	r9, r4, r2
 8003cb0:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
      uint64_t w1 = bitmap[word_offset + 1];
 8003cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbc:	4413      	add	r3, r2
 8003cbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003cc2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

      w1 = (w1 & ~mask1) | (v1 & mask1);
 8003cc6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003cca:	ea6f 0503 	mvn.w	r5, r3
 8003cce:	ea6f 0604 	mvn.w	r6, r4
 8003cd2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003cd6:	ea05 0103 	and.w	r1, r5, r3
 8003cda:	ea06 0204 	and.w	r2, r6, r4
 8003cde:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 8003ce2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003ce6:	ea03 0805 	and.w	r8, r3, r5
 8003cea:	ea04 0906 	and.w	r9, r4, r6
 8003cee:	ea48 0301 	orr.w	r3, r8, r1
 8003cf2:	ea49 0402 	orr.w	r4, r9, r2
 8003cf6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
      bitmap[word_offset + 1] = w1;
 8003cfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d02:	441a      	add	r2, r3
 8003d04:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003d08:	e9c2 3400 	strd	r3, r4, [r2]
   }
}
 8003d0c:	bf00      	nop
 8003d0e:	3768      	adds	r7, #104	; 0x68
 8003d10:	46bd      	mov	sp, r7
 8003d12:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d16:	4770      	bx	lr

08003d18 <COE_getValue>:
 *
 * @param[in] obj   = object description
 * @return object value
 */
static uint64_t COE_getValue (const _objd * obj)
{
 8003d18:	b590      	push	{r4, r7, lr}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
   uint64_t value = 0;
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	f04f 0400 	mov.w	r4, #0
 8003d28:	e9c7 3402 	strd	r3, r4, [r7, #8]

   /* TODO: const data */

   switch(obj->datatype)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	885b      	ldrh	r3, [r3, #2]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	2b36      	cmp	r3, #54	; 0x36
 8003d36:	f200 8092 	bhi.w	8003e5e <COE_getValue+0x146>
 8003d3a:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <COE_getValue+0x28>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003e1d 	.word	0x08003e1d
 8003d44:	08003e1d 	.word	0x08003e1d
 8003d48:	08003e2f 	.word	0x08003e2f
 8003d4c:	08003e41 	.word	0x08003e41
 8003d50:	08003e1d 	.word	0x08003e1d
 8003d54:	08003e2f 	.word	0x08003e2f
 8003d58:	08003e41 	.word	0x08003e41
 8003d5c:	08003e41 	.word	0x08003e41
 8003d60:	08003e5f 	.word	0x08003e5f
 8003d64:	08003e5f 	.word	0x08003e5f
 8003d68:	08003e5f 	.word	0x08003e5f
 8003d6c:	08003e5f 	.word	0x08003e5f
 8003d70:	08003e5f 	.word	0x08003e5f
 8003d74:	08003e5f 	.word	0x08003e5f
 8003d78:	08003e5f 	.word	0x08003e5f
 8003d7c:	08003e5f 	.word	0x08003e5f
 8003d80:	08003e51 	.word	0x08003e51
 8003d84:	08003e5f 	.word	0x08003e5f
 8003d88:	08003e5f 	.word	0x08003e5f
 8003d8c:	08003e5f 	.word	0x08003e5f
 8003d90:	08003e51 	.word	0x08003e51
 8003d94:	08003e5f 	.word	0x08003e5f
 8003d98:	08003e5f 	.word	0x08003e5f
 8003d9c:	08003e5f 	.word	0x08003e5f
 8003da0:	08003e5f 	.word	0x08003e5f
 8003da4:	08003e5f 	.word	0x08003e5f
 8003da8:	08003e51 	.word	0x08003e51
 8003dac:	08003e5f 	.word	0x08003e5f
 8003db0:	08003e5f 	.word	0x08003e5f
 8003db4:	08003e5f 	.word	0x08003e5f
 8003db8:	08003e5f 	.word	0x08003e5f
 8003dbc:	08003e5f 	.word	0x08003e5f
 8003dc0:	08003e5f 	.word	0x08003e5f
 8003dc4:	08003e5f 	.word	0x08003e5f
 8003dc8:	08003e5f 	.word	0x08003e5f
 8003dcc:	08003e5f 	.word	0x08003e5f
 8003dd0:	08003e5f 	.word	0x08003e5f
 8003dd4:	08003e5f 	.word	0x08003e5f
 8003dd8:	08003e5f 	.word	0x08003e5f
 8003ddc:	08003e5f 	.word	0x08003e5f
 8003de0:	08003e5f 	.word	0x08003e5f
 8003de4:	08003e5f 	.word	0x08003e5f
 8003de8:	08003e5f 	.word	0x08003e5f
 8003dec:	08003e5f 	.word	0x08003e5f
 8003df0:	08003e5f 	.word	0x08003e5f
 8003df4:	08003e5f 	.word	0x08003e5f
 8003df8:	08003e5f 	.word	0x08003e5f
 8003dfc:	08003e1d 	.word	0x08003e1d
 8003e00:	08003e1d 	.word	0x08003e1d
 8003e04:	08003e1d 	.word	0x08003e1d
 8003e08:	08003e1d 	.word	0x08003e1d
 8003e0c:	08003e1d 	.word	0x08003e1d
 8003e10:	08003e1d 	.word	0x08003e1d
 8003e14:	08003e1d 	.word	0x08003e1d
 8003e18:	08003e1d 	.word	0x08003e1d
   case DTYPE_BIT7:
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
      value = *(uint8_t *)obj->data;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f04f 0400 	mov.w	r4, #0
 8003e28:	e9c7 3402 	strd	r3, r4, [r7, #8]
      break;
 8003e2c:	e01e      	b.n	8003e6c <COE_getValue+0x154>

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
      value = *(uint16_t *)obj->data;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	f04f 0400 	mov.w	r4, #0
 8003e3a:	e9c7 3402 	strd	r3, r4, [r7, #8]
      break;
 8003e3e:	e015      	b.n	8003e6c <COE_getValue+0x154>

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
      value = *(uint32_t *)obj->data;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f04f 0400 	mov.w	r4, #0
 8003e4a:	e9c7 3402 	strd	r3, r4, [r7, #8]
      break;
 8003e4e:	e00d      	b.n	8003e6c <COE_getValue+0x154>

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      value = *(uint64_t *)obj->data;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e58:	e9c7 3402 	strd	r3, r4, [r7, #8]
      break;
 8003e5c:	e006      	b.n	8003e6c <COE_getValue+0x154>

   default:
      CC_ASSERT (0);
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <COE_getValue+0x164>)
 8003e60:	4a07      	ldr	r2, [pc, #28]	; (8003e80 <COE_getValue+0x168>)
 8003e62:	f240 4119 	movw	r1, #1049	; 0x419
 8003e66:	4807      	ldr	r0, [pc, #28]	; (8003e84 <COE_getValue+0x16c>)
 8003e68:	f007 fb7e 	bl	800b568 <__assert_func>
   }

   return value;
 8003e6c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	4621      	mov	r1, r4
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd90      	pop	{r4, r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	0800c604 	.word	0x0800c604
 8003e80:	0800c6b4 	.word	0x0800c6b4
 8003e84:	0800c608 	.word	0x0800c608

08003e88 <COE_setValue>:
 *
 * @param[in] obj   = object description
 * @param[in] value = new value
 */
static void COE_setValue (const _objd * obj, uint64_t value)
{
 8003e88:	b590      	push	{r4, r7, lr}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	e9c7 2300 	strd	r2, r3, [r7]
   switch(obj->datatype)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	885b      	ldrh	r3, [r3, #2]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	2b36      	cmp	r3, #54	; 0x36
 8003e9e:	f200 8087 	bhi.w	8003fb0 <COE_setValue+0x128>
 8003ea2:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <COE_setValue+0x20>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003f85 	.word	0x08003f85
 8003eac:	08003f85 	.word	0x08003f85
 8003eb0:	08003f8f 	.word	0x08003f8f
 8003eb4:	08003f99 	.word	0x08003f99
 8003eb8:	08003f85 	.word	0x08003f85
 8003ebc:	08003f8f 	.word	0x08003f8f
 8003ec0:	08003f99 	.word	0x08003f99
 8003ec4:	08003f99 	.word	0x08003f99
 8003ec8:	08003fb1 	.word	0x08003fb1
 8003ecc:	08003fb1 	.word	0x08003fb1
 8003ed0:	08003fb1 	.word	0x08003fb1
 8003ed4:	08003fb1 	.word	0x08003fb1
 8003ed8:	08003fb1 	.word	0x08003fb1
 8003edc:	08003fb1 	.word	0x08003fb1
 8003ee0:	08003fb1 	.word	0x08003fb1
 8003ee4:	08003fb1 	.word	0x08003fb1
 8003ee8:	08003fa3 	.word	0x08003fa3
 8003eec:	08003fb1 	.word	0x08003fb1
 8003ef0:	08003fb1 	.word	0x08003fb1
 8003ef4:	08003fb1 	.word	0x08003fb1
 8003ef8:	08003fa3 	.word	0x08003fa3
 8003efc:	08003fb1 	.word	0x08003fb1
 8003f00:	08003fb1 	.word	0x08003fb1
 8003f04:	08003fb1 	.word	0x08003fb1
 8003f08:	08003fb1 	.word	0x08003fb1
 8003f0c:	08003fb1 	.word	0x08003fb1
 8003f10:	08003fa3 	.word	0x08003fa3
 8003f14:	08003fb1 	.word	0x08003fb1
 8003f18:	08003fb1 	.word	0x08003fb1
 8003f1c:	08003fb1 	.word	0x08003fb1
 8003f20:	08003fb1 	.word	0x08003fb1
 8003f24:	08003fb1 	.word	0x08003fb1
 8003f28:	08003fb1 	.word	0x08003fb1
 8003f2c:	08003fb1 	.word	0x08003fb1
 8003f30:	08003fb1 	.word	0x08003fb1
 8003f34:	08003fb1 	.word	0x08003fb1
 8003f38:	08003fb1 	.word	0x08003fb1
 8003f3c:	08003fb1 	.word	0x08003fb1
 8003f40:	08003fb1 	.word	0x08003fb1
 8003f44:	08003fb1 	.word	0x08003fb1
 8003f48:	08003fb1 	.word	0x08003fb1
 8003f4c:	08003fb1 	.word	0x08003fb1
 8003f50:	08003fb1 	.word	0x08003fb1
 8003f54:	08003fb1 	.word	0x08003fb1
 8003f58:	08003fb1 	.word	0x08003fb1
 8003f5c:	08003fb1 	.word	0x08003fb1
 8003f60:	08003fb1 	.word	0x08003fb1
 8003f64:	08003f85 	.word	0x08003f85
 8003f68:	08003f85 	.word	0x08003f85
 8003f6c:	08003f85 	.word	0x08003f85
 8003f70:	08003f85 	.word	0x08003f85
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	08003f85 	.word	0x08003f85
 8003f7c:	08003f85 	.word	0x08003f85
 8003f80:	08003f85 	.word	0x08003f85
   case DTYPE_BIT7:
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
      *(uint8_t *)obj->data = value & UINT8_MAX;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	783a      	ldrb	r2, [r7, #0]
 8003f8a:	701a      	strb	r2, [r3, #0]
      break;
 8003f8c:	e014      	b.n	8003fb8 <COE_setValue+0x130>

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
      *(uint16_t *)obj->data = value & UINT16_MAX;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	883a      	ldrh	r2, [r7, #0]
 8003f94:	801a      	strh	r2, [r3, #0]
      break;
 8003f96:	e00f      	b.n	8003fb8 <COE_setValue+0x130>

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
      *(uint32_t *)obj->data = value & UINT32_MAX;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	601a      	str	r2, [r3, #0]
      break;
 8003fa0:	e00a      	b.n	8003fb8 <COE_setValue+0x130>

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      *(uint64_t *)obj->data = value;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003faa:	e9c2 3400 	strd	r3, r4, [r2]
      break;
 8003fae:	e003      	b.n	8003fb8 <COE_setValue+0x130>

   default:
      DPRINT ("ignored\n");
 8003fb0:	4803      	ldr	r0, [pc, #12]	; (8003fc0 <COE_setValue+0x138>)
 8003fb2:	f007 fe81 	bl	800bcb8 <puts>
      break;
 8003fb6:	bf00      	nop
   }
}
 8003fb8:	bf00      	nop
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd90      	pop	{r4, r7, pc}
 8003fc0:	0800c624 	.word	0x0800c624

08003fc4 <COE_initDefaultValues>:

/**
 * Init default values for SDO objects
 */
void COE_initDefaultValues (void)
{
 8003fc4:	b590      	push	{r4, r7, lr}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
   const _objd *objd;
   int n;
   uint8_t maxsub;

   /* Set default values from object descriptor */
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	e06f      	b.n	80040b0 <COE_initDefaultValues+0xec>
   {
      objd = SDOobjects[n].objdesc;
 8003fd0:	4943      	ldr	r1, [pc, #268]	; (80040e0 <COE_initDefaultValues+0x11c>)
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	440b      	add	r3, r1
 8003fde:	3308      	adds	r3, #8
 8003fe0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003fe4:	607b      	str	r3, [r7, #4]
      maxsub = SDOobjects[n].maxsub;
 8003fe6:	493e      	ldr	r1, [pc, #248]	; (80040e0 <COE_initDefaultValues+0x11c>)
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	4613      	mov	r3, r2
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	440b      	add	r3, r1
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	70fb      	strb	r3, [r7, #3]

      i = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
      do
      {
         if (objd[i].data != NULL)
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	461a      	mov	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4413      	add	r3, r2
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d039      	beq.n	8004088 <COE_initDefaultValues+0xc4>
         {
            COE_setValue (&objd[i], objd[i].value);
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	461a      	mov	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	1899      	adds	r1, r3, r2
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	461a      	mov	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4413      	add	r3, r2
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f04f 0400 	mov.w	r4, #0
 800403a:	461a      	mov	r2, r3
 800403c:	4623      	mov	r3, r4
 800403e:	4608      	mov	r0, r1
 8004040:	f7ff ff22 	bl	8003e88 <COE_setValue>
            DPRINT ("%04x:%02x = %x\n", SDOobjects[n].index, objd[i].subindex, objd[i].value);
 8004044:	4926      	ldr	r1, [pc, #152]	; (80040e0 <COE_initDefaultValues+0x11c>)
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	440b      	add	r3, r1
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	b29b      	uxth	r3, r3
 8004056:	4619      	mov	r1, r3
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	461a      	mov	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	b29b      	uxth	r3, r3
 800406c:	4618      	mov	r0, r3
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	461a      	mov	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4602      	mov	r2, r0
 8004082:	4818      	ldr	r0, [pc, #96]	; (80040e4 <COE_initDefaultValues+0x120>)
 8004084:	f007 fda4 	bl	800bbd0 <iprintf>
         }
      } while (objd[i++].subindex < maxsub);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	60fa      	str	r2, [r7, #12]
 800408e:	461a      	mov	r2, r3
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	461a      	mov	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4413      	add	r3, r2
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d3a9      	bcc.n	8003ffe <COE_initDefaultValues+0x3a>
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	3301      	adds	r3, #1
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	490b      	ldr	r1, [pc, #44]	; (80040e0 <COE_initDefaultValues+0x11c>)
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	1a9b      	subs	r3, r3, r2
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	440b      	add	r3, r1
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d182      	bne.n	8003fd0 <COE_initDefaultValues+0xc>
   }

   /* Let application override default values */
   if (ESCvar.set_defaults_hook != NULL)
 80040ca:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <COE_initDefaultValues+0x124>)
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <COE_initDefaultValues+0x114>
   {
      ESCvar.set_defaults_hook();
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <COE_initDefaultValues+0x124>)
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	4798      	blx	r3
   }
}
 80040d8:	bf00      	nop
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd90      	pop	{r4, r7, pc}
 80040e0:	0800cf64 	.word	0x0800cf64
 80040e4:	0800c634 	.word	0x0800c634
 80040e8:	20000164 	.word	0x20000164

080040ec <COE_pdoPack>:
 * @param[in] buffer     = input process data
 * @param[in] nmappings  = number of mappings in sync manager
 * @param[in] mappings   = list of mapped objects in sync manager
 */
void COE_pdoPack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 80040ec:	b590      	push	{r4, r7, lr}
 80040ee:	b08d      	sub	sp, #52	; 0x34
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d006      	beq.n	8004110 <COE_pdoPack+0x24>
 8004102:	4b25      	ldr	r3, [pc, #148]	; (8004198 <COE_pdoPack+0xac>)
 8004104:	4a25      	ldr	r2, [pc, #148]	; (800419c <COE_pdoPack+0xb0>)
 8004106:	f240 4182 	movw	r1, #1154	; 0x482
 800410a:	4825      	ldr	r0, [pc, #148]	; (80041a0 <COE_pdoPack+0xb4>)
 800410c:	f007 fa2c 	bl	800b568 <__assert_func>

   for (ix = 0; ix < nmappings; ix++)
 8004110:	2300      	movs	r3, #0
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
 8004114:	e038      	b.n	8004188 <COE_pdoPack+0x9c>
   {
      const _objd * obj = mappings[ix].obj;
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	4413      	add	r3, r2
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	623b      	str	r3, [r7, #32]
      uint16_t offset = mappings[ix].offset;
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	889b      	ldrh	r3, [r3, #4]
 800412c:	83fb      	strh	r3, [r7, #30]

      if (obj != NULL)
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d026      	beq.n	8004182 <COE_pdoPack+0x96>
      {
         if (obj->bitlength > 64)
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	889b      	ldrh	r3, [r3, #4]
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	d910      	bls.n	8004160 <COE_pdoPack+0x74>
         {
            memcpy (
               &buffer[BITS2BYTES (offset)],
 800413e:	8bfb      	ldrh	r3, [r7, #30]
 8004140:	3307      	adds	r3, #7
 8004142:	10db      	asrs	r3, r3, #3
 8004144:	461a      	mov	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1898      	adds	r0, r3, r2
               obj->data,
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	6919      	ldr	r1, [r3, #16]
               BITS2BYTES (obj->bitlength)
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	889b      	ldrh	r3, [r3, #4]
 8004152:	b29b      	uxth	r3, r3
 8004154:	3307      	adds	r3, #7
 8004156:	10db      	asrs	r3, r3, #3
            memcpy (
 8004158:	461a      	mov	r2, r3
 800415a:	f007 fa5f 	bl	800b61c <memcpy>
 800415e:	e010      	b.n	8004182 <COE_pdoPack+0x96>
            );
         }
         else
         {
            /* Atomically get object value */
            uint64_t value = COE_getValue (obj);
 8004160:	6a38      	ldr	r0, [r7, #32]
 8004162:	f7ff fdd9 	bl	8003d18 <COE_getValue>
 8004166:	e9c7 0104 	strd	r0, r1, [r7, #16]
            COE_bitsliceSet (
 800416a:	8bf9      	ldrh	r1, [r7, #30]
               (uint64_t *)buffer,
               offset,
               obj->bitlength,
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	889b      	ldrh	r3, [r3, #4]
 8004170:	b29b      	uxth	r3, r3
            COE_bitsliceSet (
 8004172:	461a      	mov	r2, r3
 8004174:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004178:	e9cd 3400 	strd	r3, r4, [sp]
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f7ff fcc2 	bl	8003b06 <COE_bitsliceSet>
   for (ix = 0; ix < nmappings; ix++)
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	3301      	adds	r3, #1
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
 8004188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	429a      	cmp	r2, r3
 800418e:	dbc2      	blt.n	8004116 <COE_pdoPack+0x2a>
               value
            );
         }
      }
   }
}
 8004190:	bf00      	nop
 8004192:	372c      	adds	r7, #44	; 0x2c
 8004194:	46bd      	mov	sp, r7
 8004196:	bd90      	pop	{r4, r7, pc}
 8004198:	0800c64c 	.word	0x0800c64c
 800419c:	0800c6c4 	.word	0x0800c6c4
 80041a0:	0800c608 	.word	0x0800c608

080041a4 <COE_pdoUnpack>:
 * @param[in] buffer    = output process data
 * @param[in] nmappings = number of mappings in sync manager
 * @param[in] mappings  = list of mapped objects in sync manager
 */
void COE_pdoUnpack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	; 0x28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d006      	beq.n	80041c8 <COE_pdoUnpack+0x24>
 80041ba:	4b24      	ldr	r3, [pc, #144]	; (800424c <COE_pdoUnpack+0xa8>)
 80041bc:	4a24      	ldr	r2, [pc, #144]	; (8004250 <COE_pdoUnpack+0xac>)
 80041be:	f240 41b1 	movw	r1, #1201	; 0x4b1
 80041c2:	4824      	ldr	r0, [pc, #144]	; (8004254 <COE_pdoUnpack+0xb0>)
 80041c4:	f007 f9d0 	bl	800b568 <__assert_func>

   for (ix = 0; ix < nmappings; ix++)
 80041c8:	2300      	movs	r3, #0
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
 80041cc:	e036      	b.n	800423c <COE_pdoUnpack+0x98>
   {
      const _objd * obj = mappings[ix].obj;
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	4413      	add	r3, r2
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	623b      	str	r3, [r7, #32]
      uint16_t offset = mappings[ix].offset;
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	889b      	ldrh	r3, [r3, #4]
 80041e4:	83fb      	strh	r3, [r7, #30]

      if (obj != NULL)
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d024      	beq.n	8004236 <COE_pdoUnpack+0x92>
      {
         if (obj->bitlength > 64)
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	889b      	ldrh	r3, [r3, #4]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b40      	cmp	r3, #64	; 0x40
 80041f4:	d910      	bls.n	8004218 <COE_pdoUnpack+0x74>
         {
            memcpy (
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	6918      	ldr	r0, [r3, #16]
               obj->data,
               &buffer[BITS2BYTES (offset)],
 80041fa:	8bfb      	ldrh	r3, [r7, #30]
 80041fc:	3307      	adds	r3, #7
 80041fe:	10db      	asrs	r3, r3, #3
 8004200:	461a      	mov	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1899      	adds	r1, r3, r2
               BITS2BYTES (obj->bitlength)
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	889b      	ldrh	r3, [r3, #4]
 800420a:	b29b      	uxth	r3, r3
 800420c:	3307      	adds	r3, #7
 800420e:	10db      	asrs	r3, r3, #3
            memcpy (
 8004210:	461a      	mov	r2, r3
 8004212:	f007 fa03 	bl	800b61c <memcpy>
 8004216:	e00e      	b.n	8004236 <COE_pdoUnpack+0x92>
            );
         }
         else
         {
            /* Atomically set object value */
            uint64_t value = COE_bitsliceGet (
 8004218:	8bf9      	ldrh	r1, [r7, #30]
               (uint64_t *)buffer,
               offset,
               obj->bitlength
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	889b      	ldrh	r3, [r3, #4]
 800421e:	b29b      	uxth	r3, r3
            uint64_t value = COE_bitsliceGet (
 8004220:	461a      	mov	r2, r3
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f7ff fbd6 	bl	80039d4 <COE_bitsliceGet>
 8004228:	e9c7 0104 	strd	r0, r1, [r7, #16]
            );
            COE_setValue (obj, value);
 800422c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004230:	6a38      	ldr	r0, [r7, #32]
 8004232:	f7ff fe29 	bl	8003e88 <COE_setValue>
   for (ix = 0; ix < nmappings; ix++)
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	3301      	adds	r3, #1
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
 800423c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	429a      	cmp	r2, r3
 8004242:	dbc4      	blt.n	80041ce <COE_pdoUnpack+0x2a>
         }
      }
   }
}
 8004244:	bf00      	nop
 8004246:	3728      	adds	r7, #40	; 0x28
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	0800c64c 	.word	0x0800c64c
 8004250:	0800c6d0 	.word	0x0800c6d0
 8004254:	0800c608 	.word	0x0800c608

08004258 <COE_maxSub>:
 * This function fetches the value of subindex 0 (max subindex).
 *
 * @param[in] index = object index
 */
uint8_t COE_maxSub (uint16_t index)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	80fb      	strh	r3, [r7, #6]
   int nidx;
   uint8_t maxsub;

   nidx = SDO_findobject (index);
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe f9df 	bl	8002628 <SDO_findobject>
 800426a:	60f8      	str	r0, [r7, #12]
   if (nidx == -1)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004272:	d101      	bne.n	8004278 <COE_maxSub+0x20>
      return 0;
 8004274:	2300      	movs	r3, #0
 8004276:	e027      	b.n	80042c8 <COE_maxSub+0x70>

   maxsub = OBJ_VALUE_FETCH (maxsub, SDOobjects[nidx].objdesc[0]);
 8004278:	4915      	ldr	r1, [pc, #84]	; (80042d0 <COE_maxSub+0x78>)
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	440b      	add	r3, r1
 8004286:	3308      	adds	r3, #8
 8004288:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00c      	beq.n	80042ac <COE_maxSub+0x54>
 8004292:	490f      	ldr	r1, [pc, #60]	; (80042d0 <COE_maxSub+0x78>)
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	440b      	add	r3, r1
 80042a0:	3308      	adds	r3, #8
 80042a2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	e00b      	b.n	80042c4 <COE_maxSub+0x6c>
 80042ac:	4908      	ldr	r1, [pc, #32]	; (80042d0 <COE_maxSub+0x78>)
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4613      	mov	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	440b      	add	r3, r1
 80042ba:	3308      	adds	r3, #8
 80042bc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	72fb      	strb	r3, [r7, #11]
   return maxsub;
 80042c6:	7afb      	ldrb	r3, [r7, #11]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	0800cf64 	.word	0x0800cf64

080042d4 <lan9252_write_32>:

static int lan9252 = -1;

/* lan9252 singel write */
static void lan9252_write_32 (uint16_t address, uint32_t val)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	6039      	str	r1, [r7, #0]
 80042de:	80fb      	strh	r3, [r7, #6]
    uint8_t data[7];

    data[0] = ESC_CMD_SERIAL_WRITE;
 80042e0:	2302      	movs	r3, #2
 80042e2:	723b      	strb	r3, [r7, #8]
    data[1] = ((address >> 8) & 0xFF);
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	0a1b      	lsrs	r3, r3, #8
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	727b      	strb	r3, [r7, #9]
    data[2] = (address & 0xFF);
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	72bb      	strb	r3, [r7, #10]
    data[3] = (val & 0xFF);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	72fb      	strb	r3, [r7, #11]
    data[4] = ((val >> 8) & 0xFF);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	0a1b      	lsrs	r3, r3, #8
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	733b      	strb	r3, [r7, #12]
    data[5] = ((val >> 16) & 0xFF);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	0c1b      	lsrs	r3, r3, #16
 8004306:	b2db      	uxtb	r3, r3
 8004308:	737b      	strb	r3, [r7, #13]
    data[6] = ((val >> 24) & 0xFF);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	0e1b      	lsrs	r3, r3, #24
 800430e:	b2db      	uxtb	r3, r3
 8004310:	73bb      	strb	r3, [r7, #14]

    /* Select device. */
    spi_select (lan9252);
 8004312:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <lan9252_write_32+0x70>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	b25b      	sxtb	r3, r3
 8004318:	4618      	mov	r0, r3
 800431a:	f000 faf4 	bl	8004906 <spi_select>
    /* Write data */
    write (lan9252, data, sizeof(data));
 800431e:	4b09      	ldr	r3, [pc, #36]	; (8004344 <lan9252_write_32+0x70>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	b25b      	sxtb	r3, r3
 8004324:	f107 0108 	add.w	r1, r7, #8
 8004328:	2207      	movs	r2, #7
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fb0a 	bl	8004944 <write>
    /* Un-select device. */
    spi_unselect (lan9252);
 8004330:	4b04      	ldr	r3, [pc, #16]	; (8004344 <lan9252_write_32+0x70>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	b25b      	sxtb	r3, r3
 8004336:	4618      	mov	r0, r3
 8004338:	f000 faf4 	bl	8004924 <spi_unselect>
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20000020 	.word	0x20000020

08004348 <lan9252_read_32>:

/* lan9252 single read */
static uint32_t lan9252_read_32 (uint32_t address)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
   uint8_t data[4];
   uint8_t result[4];

   data[0] = ESC_CMD_FAST_READ;
 8004350:	230b      	movs	r3, #11
 8004352:	733b      	strb	r3, [r7, #12]
   data[1] = ((address >> 8) & 0xFF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	0a1b      	lsrs	r3, r3, #8
 8004358:	b2db      	uxtb	r3, r3
 800435a:	737b      	strb	r3, [r7, #13]
   data[2] = (address & 0xFF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	73bb      	strb	r3, [r7, #14]
   data[3] = ESC_CMD_FAST_READ_DUMMY;
 8004362:	2301      	movs	r3, #1
 8004364:	73fb      	strb	r3, [r7, #15]

   /* Select device. */
   spi_select (lan9252);
 8004366:	4b16      	ldr	r3, [pc, #88]	; (80043c0 <lan9252_read_32+0x78>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	b25b      	sxtb	r3, r3
 800436c:	4618      	mov	r0, r3
 800436e:	f000 faca 	bl	8004906 <spi_select>
   /* Read data */
   write (lan9252, data, sizeof(data));
 8004372:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <lan9252_read_32+0x78>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	b25b      	sxtb	r3, r3
 8004378:	f107 010c 	add.w	r1, r7, #12
 800437c:	2204      	movs	r2, #4
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fae0 	bl	8004944 <write>
   read (lan9252, result, sizeof(result));
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <lan9252_read_32+0x78>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	b25b      	sxtb	r3, r3
 800438a:	f107 0108 	add.w	r1, r7, #8
 800438e:	2204      	movs	r2, #4
 8004390:	4618      	mov	r0, r3
 8004392:	f000 faed 	bl	8004970 <read>
   /* Un-select device. */
   spi_unselect (lan9252);
 8004396:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <lan9252_read_32+0x78>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	b25b      	sxtb	r3, r3
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fac1 	bl	8004924 <spi_unselect>

   return ((result[3] << 24) |
 80043a2:	7afb      	ldrb	r3, [r7, #11]
 80043a4:	061a      	lsls	r2, r3, #24
           (result[2] << 16) |
 80043a6:	7abb      	ldrb	r3, [r7, #10]
 80043a8:	041b      	lsls	r3, r3, #16
   return ((result[3] << 24) |
 80043aa:	431a      	orrs	r2, r3
           (result[1] << 8) |
 80043ac:	7a7b      	ldrb	r3, [r7, #9]
 80043ae:	021b      	lsls	r3, r3, #8
           (result[2] << 16) |
 80043b0:	4313      	orrs	r3, r2
            result[0]);
 80043b2:	7a3a      	ldrb	r2, [r7, #8]
           (result[1] << 8) |
 80043b4:	4313      	orrs	r3, r2
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20000020 	.word	0x20000020

080043c4 <ESC_read_csr>:

/* ESC read CSR function */
static void ESC_read_csr (uint16_t address, void *buf, uint16_t len)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	6039      	str	r1, [r7, #0]
 80043ce:	80fb      	strh	r3, [r7, #6]
 80043d0:	4613      	mov	r3, r2
 80043d2:	80bb      	strh	r3, [r7, #4]
   uint32_t value;

   value = (ESC_CSR_CMD_READ | ESC_CSR_CMD_SIZE(len) | address);
 80043d4:	88bb      	ldrh	r3, [r7, #4]
 80043d6:	041b      	lsls	r3, r3, #16
 80043d8:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
   lan9252_write_32(ESC_CSR_CMD_REG, value);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4619      	mov	r1, r3
 80043e6:	f44f 7041 	mov.w	r0, #772	; 0x304
 80043ea:	f7ff ff73 	bl	80042d4 <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_CSR_CMD_REG);
 80043ee:	f44f 7041 	mov.w	r0, #772	; 0x304
 80043f2:	f7ff ffa9 	bl	8004348 <lan9252_read_32>
 80043f6:	4603      	mov	r3, r0
 80043f8:	60fb      	str	r3, [r7, #12]
   } while(value & ESC_CSR_CMD_BUSY);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	dbf6      	blt.n	80043ee <ESC_read_csr+0x2a>

   value = lan9252_read_32(ESC_CSR_DATA_REG);
 8004400:	f44f 7040 	mov.w	r0, #768	; 0x300
 8004404:	f7ff ffa0 	bl	8004348 <lan9252_read_32>
 8004408:	4603      	mov	r3, r0
 800440a:	60fb      	str	r3, [r7, #12]
   memcpy(buf, (uint8_t *)&value, len);
 800440c:	88ba      	ldrh	r2, [r7, #4]
 800440e:	f107 030c 	add.w	r3, r7, #12
 8004412:	4619      	mov	r1, r3
 8004414:	6838      	ldr	r0, [r7, #0]
 8004416:	f007 f901 	bl	800b61c <memcpy>
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <ESC_write_csr>:

/* ESC write CSR function */
static void ESC_write_csr (uint16_t address, void *buf, uint16_t len)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	4603      	mov	r3, r0
 800442a:	6039      	str	r1, [r7, #0]
 800442c:	80fb      	strh	r3, [r7, #6]
 800442e:	4613      	mov	r3, r2
 8004430:	80bb      	strh	r3, [r7, #4]
   uint32_t value;

   memcpy((uint8_t*)&value, buf,len);
 8004432:	88ba      	ldrh	r2, [r7, #4]
 8004434:	f107 030c 	add.w	r3, r7, #12
 8004438:	6839      	ldr	r1, [r7, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f007 f8ee 	bl	800b61c <memcpy>
   lan9252_write_32(ESC_CSR_DATA_REG, value);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4619      	mov	r1, r3
 8004444:	f44f 7040 	mov.w	r0, #768	; 0x300
 8004448:	f7ff ff44 	bl	80042d4 <lan9252_write_32>
   value = (ESC_CSR_CMD_WRITE | ESC_CSR_CMD_SIZE(len) | address);
 800444c:	88bb      	ldrh	r3, [r7, #4]
 800444e:	041b      	lsls	r3, r3, #16
 8004450:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
   lan9252_write_32(ESC_CSR_CMD_REG, value);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4619      	mov	r1, r3
 800445e:	f44f 7041 	mov.w	r0, #772	; 0x304
 8004462:	f7ff ff37 	bl	80042d4 <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_CSR_CMD_REG);
 8004466:	f44f 7041 	mov.w	r0, #772	; 0x304
 800446a:	f7ff ff6d 	bl	8004348 <lan9252_read_32>
 800446e:	4603      	mov	r3, r0
 8004470:	60fb      	str	r3, [r7, #12]
   } while(value & ESC_CSR_CMD_BUSY);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	dbf6      	blt.n	8004466 <ESC_write_csr+0x44>
}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <ESC_read_pram>:

/* ESC read process data ram function */
static void ESC_read_pram (uint16_t address, void *buf, uint16_t len)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	6039      	str	r1, [r7, #0]
 800448a:	80fb      	strh	r3, [r7, #6]
 800448c:	4613      	mov	r3, r2
 800448e:	80bb      	strh	r3, [r7, #4]
   uint32_t value;
   uint8_t * temp_buf = buf;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	61bb      	str	r3, [r7, #24]
   uint16_t byte_offset = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	83fb      	strh	r3, [r7, #30]
   uint8_t fifo_cnt, first_byte_position, temp_len, data[4];

   value = ESC_PRAM_CMD_ABORT;
 8004498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800449c:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_RD_CMD_REG, value);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4619      	mov	r1, r3
 80044a2:	f44f 7043 	mov.w	r0, #780	; 0x30c
 80044a6:	f7ff ff15 	bl	80042d4 <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_PRAM_RD_CMD_REG);
 80044aa:	f44f 7043 	mov.w	r0, #780	; 0x30c
 80044ae:	f7ff ff4b 	bl	8004348 <lan9252_read_32>
 80044b2:	4603      	mov	r3, r0
 80044b4:	613b      	str	r3, [r7, #16]
   }while(value & ESC_PRAM_CMD_BUSY);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	dbf6      	blt.n	80044aa <ESC_read_pram+0x2a>

   value = ESC_PRAM_SIZE(len) | ESC_PRAM_ADDR(address);
 80044bc:	88bb      	ldrh	r3, [r7, #4]
 80044be:	041a      	lsls	r2, r3, #16
 80044c0:	88fb      	ldrh	r3, [r7, #6]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_RD_ADDR_LEN_REG, value);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4619      	mov	r1, r3
 80044ca:	f44f 7042 	mov.w	r0, #776	; 0x308
 80044ce:	f7ff ff01 	bl	80042d4 <lan9252_write_32>

   value = ESC_PRAM_CMD_BUSY;
 80044d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044d6:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_RD_CMD_REG, value);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4619      	mov	r1, r3
 80044dc:	f44f 7043 	mov.w	r0, #780	; 0x30c
 80044e0:	f7ff fef8 	bl	80042d4 <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_PRAM_RD_CMD_REG);
 80044e4:	f44f 7043 	mov.w	r0, #780	; 0x30c
 80044e8:	f7ff ff2e 	bl	8004348 <lan9252_read_32>
 80044ec:	4603      	mov	r3, r0
 80044ee:	613b      	str	r3, [r7, #16]
   }while((value & ESC_PRAM_CMD_AVAIL) == 0);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f4      	beq.n	80044e4 <ESC_read_pram+0x64>

   /* Fifo count */
   fifo_cnt = ESC_PRAM_CMD_CNT(value);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	0a1b      	lsrs	r3, r3, #8
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	f003 031f 	and.w	r3, r3, #31
 8004504:	777b      	strb	r3, [r7, #29]

   /* Read first value from FIFO */
   value = lan9252_read_32(ESC_PRAM_RD_FIFO_REG);
 8004506:	2000      	movs	r0, #0
 8004508:	f7ff ff1e 	bl	8004348 <lan9252_read_32>
 800450c:	4603      	mov	r3, r0
 800450e:	613b      	str	r3, [r7, #16]
   fifo_cnt--;
 8004510:	7f7b      	ldrb	r3, [r7, #29]
 8004512:	3b01      	subs	r3, #1
 8004514:	777b      	strb	r3, [r7, #29]

   /* Find out first byte position and adjust the copy from that
    * according to LAN9252 datasheet and MicroChip SDK code
    */
   first_byte_position = (address & 0x03);
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	75fb      	strb	r3, [r7, #23]
   temp_len = ((4 - first_byte_position) > len) ? len : (4 - first_byte_position);
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	f1c3 0204 	rsb	r2, r3, #4
 8004526:	88bb      	ldrh	r3, [r7, #4]
 8004528:	4293      	cmp	r3, r2
 800452a:	bfa8      	it	ge
 800452c:	4613      	movge	r3, r2
 800452e:	75bb      	strb	r3, [r7, #22]

   memcpy(temp_buf ,((uint8_t *)&value + first_byte_position), temp_len);
 8004530:	7dfb      	ldrb	r3, [r7, #23]
 8004532:	f107 0210 	add.w	r2, r7, #16
 8004536:	4413      	add	r3, r2
 8004538:	7dba      	ldrb	r2, [r7, #22]
 800453a:	4619      	mov	r1, r3
 800453c:	69b8      	ldr	r0, [r7, #24]
 800453e:	f007 f86d 	bl	800b61c <memcpy>
   len -= temp_len;
 8004542:	7dbb      	ldrb	r3, [r7, #22]
 8004544:	b29b      	uxth	r3, r3
 8004546:	88ba      	ldrh	r2, [r7, #4]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	80bb      	strh	r3, [r7, #4]
   byte_offset += temp_len;
 800454c:	7dbb      	ldrb	r3, [r7, #22]
 800454e:	b29a      	uxth	r2, r3
 8004550:	8bfb      	ldrh	r3, [r7, #30]
 8004552:	4413      	add	r3, r2
 8004554:	83fb      	strh	r3, [r7, #30]

   /* Select device. */
   spi_select (lan9252);
 8004556:	4b21      	ldr	r3, [pc, #132]	; (80045dc <ESC_read_pram+0x15c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	b25b      	sxtb	r3, r3
 800455c:	4618      	mov	r0, r3
 800455e:	f000 f9d2 	bl	8004906 <spi_select>
   /* Send command and address for fifo read */
   data[0] = ESC_CMD_FAST_READ;
 8004562:	230b      	movs	r3, #11
 8004564:	733b      	strb	r3, [r7, #12]
   data[1] = ((ESC_PRAM_RD_FIFO_REG >> 8) & 0xFF);
 8004566:	2300      	movs	r3, #0
 8004568:	737b      	strb	r3, [r7, #13]
   data[2] = (ESC_PRAM_RD_FIFO_REG & 0xFF);
 800456a:	2300      	movs	r3, #0
 800456c:	73bb      	strb	r3, [r7, #14]
   data[3] = ESC_CMD_FAST_READ_DUMMY;
 800456e:	2301      	movs	r3, #1
 8004570:	73fb      	strb	r3, [r7, #15]
   write (lan9252, data, sizeof(data));
 8004572:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <ESC_read_pram+0x15c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	b25b      	sxtb	r3, r3
 8004578:	f107 010c 	add.w	r1, r7, #12
 800457c:	2204      	movs	r2, #4
 800457e:	4618      	mov	r0, r3
 8004580:	f000 f9e0 	bl	8004944 <write>

   /* Continue reading until we have read len */
   while(len > 0)
 8004584:	e01c      	b.n	80045c0 <ESC_read_pram+0x140>
   {
      temp_len = (len > 4) ? 4: len;
 8004586:	88bb      	ldrh	r3, [r7, #4]
 8004588:	2b04      	cmp	r3, #4
 800458a:	bf28      	it	cs
 800458c:	2304      	movcs	r3, #4
 800458e:	b29b      	uxth	r3, r3
 8004590:	75bb      	strb	r3, [r7, #22]
      /* Always read 4 byte */
      read (lan9252, (temp_buf + byte_offset), sizeof(uint32_t));
 8004592:	4b12      	ldr	r3, [pc, #72]	; (80045dc <ESC_read_pram+0x15c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	b258      	sxtb	r0, r3
 8004598:	8bfb      	ldrh	r3, [r7, #30]
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4413      	add	r3, r2
 800459e:	2204      	movs	r2, #4
 80045a0:	4619      	mov	r1, r3
 80045a2:	f000 f9e5 	bl	8004970 <read>

      fifo_cnt--;
 80045a6:	7f7b      	ldrb	r3, [r7, #29]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	777b      	strb	r3, [r7, #29]
      len -= temp_len;
 80045ac:	7dbb      	ldrb	r3, [r7, #22]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	88ba      	ldrh	r2, [r7, #4]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	80bb      	strh	r3, [r7, #4]
      byte_offset += temp_len;
 80045b6:	7dbb      	ldrb	r3, [r7, #22]
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	8bfb      	ldrh	r3, [r7, #30]
 80045bc:	4413      	add	r3, r2
 80045be:	83fb      	strh	r3, [r7, #30]
   while(len > 0)
 80045c0:	88bb      	ldrh	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1df      	bne.n	8004586 <ESC_read_pram+0x106>
   }
   /* Un-select device. */
   spi_unselect (lan9252);
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <ESC_read_pram+0x15c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	b25b      	sxtb	r3, r3
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 f9a9 	bl	8004924 <spi_unselect>
}
 80045d2:	bf00      	nop
 80045d4:	3720      	adds	r7, #32
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000020 	.word	0x20000020

080045e0 <ESC_write_pram>:

/* ESC write process data ram function */
static void ESC_write_pram (uint16_t address, void *buf, uint16_t len)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	6039      	str	r1, [r7, #0]
 80045ea:	80fb      	strh	r3, [r7, #6]
 80045ec:	4613      	mov	r3, r2
 80045ee:	80bb      	strh	r3, [r7, #4]
   uint32_t value;
   uint8_t * temp_buf = buf;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	61bb      	str	r3, [r7, #24]
   uint16_t byte_offset = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	83fb      	strh	r3, [r7, #30]
   uint8_t fifo_cnt, first_byte_position, temp_len, data[3];

   value = ESC_PRAM_CMD_ABORT;
 80045f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045fc:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_WR_CMD_REG, value);
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4619      	mov	r1, r3
 8004602:	f44f 7045 	mov.w	r0, #788	; 0x314
 8004606:	f7ff fe65 	bl	80042d4 <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_PRAM_WR_CMD_REG);
 800460a:	f44f 7045 	mov.w	r0, #788	; 0x314
 800460e:	f7ff fe9b 	bl	8004348 <lan9252_read_32>
 8004612:	4603      	mov	r3, r0
 8004614:	613b      	str	r3, [r7, #16]
   }while(value & ESC_PRAM_CMD_BUSY);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	dbf6      	blt.n	800460a <ESC_write_pram+0x2a>

   value = ESC_PRAM_SIZE(len) | ESC_PRAM_ADDR(address);
 800461c:	88bb      	ldrh	r3, [r7, #4]
 800461e:	041a      	lsls	r2, r3, #16
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_WR_ADDR_LEN_REG, value);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4619      	mov	r1, r3
 800462a:	f44f 7044 	mov.w	r0, #784	; 0x310
 800462e:	f7ff fe51 	bl	80042d4 <lan9252_write_32>

   value = ESC_PRAM_CMD_BUSY;
 8004632:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004636:	613b      	str	r3, [r7, #16]
   lan9252_write_32(ESC_PRAM_WR_CMD_REG, value);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	4619      	mov	r1, r3
 800463c:	f44f 7045 	mov.w	r0, #788	; 0x314
 8004640:	f7ff fe48 	bl	80042d4 <lan9252_write_32>

   do
   {
      value = lan9252_read_32(ESC_PRAM_WR_CMD_REG);
 8004644:	f44f 7045 	mov.w	r0, #788	; 0x314
 8004648:	f7ff fe7e 	bl	8004348 <lan9252_read_32>
 800464c:	4603      	mov	r3, r0
 800464e:	613b      	str	r3, [r7, #16]
   }while((value & ESC_PRAM_CMD_AVAIL) == 0);
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f4      	beq.n	8004644 <ESC_write_pram+0x64>

   /* Fifo count */
   fifo_cnt = ESC_PRAM_CMD_CNT(value);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	0a1b      	lsrs	r3, r3, #8
 800465e:	b2db      	uxtb	r3, r3
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	777b      	strb	r3, [r7, #29]

   /* Find out first byte position and adjust the copy from that
    * according to LAN9252 datasheet
    */
   first_byte_position = (address & 0x03);
 8004666:	88fb      	ldrh	r3, [r7, #6]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	75fb      	strb	r3, [r7, #23]
   temp_len = ((4 - first_byte_position) > len) ? len : (4 - first_byte_position);
 8004670:	7dfb      	ldrb	r3, [r7, #23]
 8004672:	f1c3 0204 	rsb	r2, r3, #4
 8004676:	88bb      	ldrh	r3, [r7, #4]
 8004678:	4293      	cmp	r3, r2
 800467a:	bfa8      	it	ge
 800467c:	4613      	movge	r3, r2
 800467e:	75bb      	strb	r3, [r7, #22]

   memcpy(((uint8_t *)&value + first_byte_position), temp_buf, temp_len);
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	f107 0210 	add.w	r2, r7, #16
 8004686:	4413      	add	r3, r2
 8004688:	7dba      	ldrb	r2, [r7, #22]
 800468a:	69b9      	ldr	r1, [r7, #24]
 800468c:	4618      	mov	r0, r3
 800468e:	f006 ffc5 	bl	800b61c <memcpy>

   /* Write first value from FIFO */
   lan9252_write_32(ESC_PRAM_WR_FIFO_REG, value);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	4619      	mov	r1, r3
 8004696:	2020      	movs	r0, #32
 8004698:	f7ff fe1c 	bl	80042d4 <lan9252_write_32>

   len -= temp_len;
 800469c:	7dbb      	ldrb	r3, [r7, #22]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	88ba      	ldrh	r2, [r7, #4]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	80bb      	strh	r3, [r7, #4]
   byte_offset += temp_len;
 80046a6:	7dbb      	ldrb	r3, [r7, #22]
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	8bfb      	ldrh	r3, [r7, #30]
 80046ac:	4413      	add	r3, r2
 80046ae:	83fb      	strh	r3, [r7, #30]
   fifo_cnt--;
 80046b0:	7f7b      	ldrb	r3, [r7, #29]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	777b      	strb	r3, [r7, #29]

   /* Select device. */
   spi_select (lan9252);
 80046b6:	4b25      	ldr	r3, [pc, #148]	; (800474c <ESC_write_pram+0x16c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	b25b      	sxtb	r3, r3
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 f922 	bl	8004906 <spi_select>
   /* Send command and address for incrementing write */
   data[0] = ESC_CMD_SERIAL_WRITE;
 80046c2:	2302      	movs	r3, #2
 80046c4:	733b      	strb	r3, [r7, #12]
   data[1] = ((ESC_PRAM_WR_FIFO_REG >> 8) & 0xFF);
 80046c6:	2300      	movs	r3, #0
 80046c8:	737b      	strb	r3, [r7, #13]
   data[2] = (ESC_PRAM_WR_FIFO_REG & 0xFF);
 80046ca:	2320      	movs	r3, #32
 80046cc:	73bb      	strb	r3, [r7, #14]
   write (lan9252, data, sizeof(data));
 80046ce:	4b1f      	ldr	r3, [pc, #124]	; (800474c <ESC_write_pram+0x16c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	b25b      	sxtb	r3, r3
 80046d4:	f107 010c 	add.w	r1, r7, #12
 80046d8:	2203      	movs	r2, #3
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f932 	bl	8004944 <write>

   /* Continue reading until we have read len */
   while(len > 0)
 80046e0:	e026      	b.n	8004730 <ESC_write_pram+0x150>
   {
      temp_len = (len > 4) ? 4 : len;
 80046e2:	88bb      	ldrh	r3, [r7, #4]
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	bf28      	it	cs
 80046e8:	2304      	movcs	r3, #4
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	75bb      	strb	r3, [r7, #22]
      value = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	613b      	str	r3, [r7, #16]
      memcpy((uint8_t *)&value, (temp_buf + byte_offset), temp_len);
 80046f2:	8bfb      	ldrh	r3, [r7, #30]
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	18d1      	adds	r1, r2, r3
 80046f8:	7dba      	ldrb	r2, [r7, #22]
 80046fa:	f107 0310 	add.w	r3, r7, #16
 80046fe:	4618      	mov	r0, r3
 8004700:	f006 ff8c 	bl	800b61c <memcpy>
      /* Always write 4 byte */
      write (lan9252, (void *)&value, sizeof(value));
 8004704:	4b11      	ldr	r3, [pc, #68]	; (800474c <ESC_write_pram+0x16c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	b25b      	sxtb	r3, r3
 800470a:	f107 0110 	add.w	r1, r7, #16
 800470e:	2204      	movs	r2, #4
 8004710:	4618      	mov	r0, r3
 8004712:	f000 f917 	bl	8004944 <write>

      fifo_cnt--;
 8004716:	7f7b      	ldrb	r3, [r7, #29]
 8004718:	3b01      	subs	r3, #1
 800471a:	777b      	strb	r3, [r7, #29]
      len -= temp_len;
 800471c:	7dbb      	ldrb	r3, [r7, #22]
 800471e:	b29b      	uxth	r3, r3
 8004720:	88ba      	ldrh	r2, [r7, #4]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	80bb      	strh	r3, [r7, #4]
      byte_offset += temp_len;
 8004726:	7dbb      	ldrb	r3, [r7, #22]
 8004728:	b29a      	uxth	r2, r3
 800472a:	8bfb      	ldrh	r3, [r7, #30]
 800472c:	4413      	add	r3, r2
 800472e:	83fb      	strh	r3, [r7, #30]
   while(len > 0)
 8004730:	88bb      	ldrh	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1d5      	bne.n	80046e2 <ESC_write_pram+0x102>
   }
   /* Un-select device. */
   spi_unselect (lan9252);
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <ESC_write_pram+0x16c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	b25b      	sxtb	r3, r3
 800473c:	4618      	mov	r0, r3
 800473e:	f000 f8f1 	bl	8004924 <spi_unselect>
}
 8004742:	bf00      	nop
 8004744:	3720      	adds	r7, #32
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000020 	.word	0x20000020

08004750 <ESC_read>:
 * @param[in]   address     = address of ESC register to read
 * @param[out]  buf         = pointer to buffer to read in
 * @param[in]   len         = number of bytes to read
 */
void ESC_read (uint16_t address, void *buf, uint16_t len)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	6039      	str	r1, [r7, #0]
 800475a:	80fb      	strh	r3, [r7, #6]
 800475c:	4613      	mov	r3, r2
 800475e:	80bb      	strh	r3, [r7, #4]
   /* Select Read function depending on address, process data ram or not */
   if (address >= 0x1000)
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004766:	d306      	bcc.n	8004776 <ESC_read+0x26>
   {
      ESC_read_pram(address, buf, len);
 8004768:	88ba      	ldrh	r2, [r7, #4]
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	6839      	ldr	r1, [r7, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff fe86 	bl	8004480 <ESC_read_pram>
 8004774:	e038      	b.n	80047e8 <ESC_read+0x98>
   }
   else
   {
      uint16_t size;
      uint8_t *temp_buf = (uint8_t *)buf;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	60bb      	str	r3, [r7, #8]

      while(len > 0)
 800477a:	e032      	b.n	80047e2 <ESC_read+0x92>
      {
         /* We write maximum 4 bytes at the time */
         size = (len > 4) ? 4 : len;
 800477c:	88bb      	ldrh	r3, [r7, #4]
 800477e:	2b04      	cmp	r3, #4
 8004780:	bf28      	it	cs
 8004782:	2304      	movcs	r3, #4
 8004784:	81fb      	strh	r3, [r7, #14]
         /* Make size aligned to address according to LAN9252 datasheet
          * Table 12-14 EtherCAT CSR Address VS size and MicroChip SDK code
          */
         /* If we got an odd address size is 1 , 01b 11b is captured */
         if(address & BIT(0))
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <ESC_read+0x46>
         {
            size = 1;
 8004790:	2301      	movs	r3, #1
 8004792:	81fb      	strh	r3, [r7, #14]
 8004794:	e013      	b.n	80047be <ESC_read+0x6e>
         }
         /* If address 1xb and size != 1 and 3 , allow size 2 else size 1 */
         else if (address & BIT(1))
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d009      	beq.n	80047b4 <ESC_read+0x64>
         {
            size = (size & BIT(0)) ? 1 : 2;
 80047a0:	89fb      	ldrh	r3, [r7, #14]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <ESC_read+0x5e>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <ESC_read+0x60>
 80047ae:	2302      	movs	r3, #2
 80047b0:	81fb      	strh	r3, [r7, #14]
 80047b2:	e004      	b.n	80047be <ESC_read+0x6e>
         }
         /* size 3 not valid */
         else if (size == 3)
 80047b4:	89fb      	ldrh	r3, [r7, #14]
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d101      	bne.n	80047be <ESC_read+0x6e>
         {
            size = 1;
 80047ba:	2301      	movs	r3, #1
 80047bc:	81fb      	strh	r3, [r7, #14]
         }
         /* else size is kept AS IS */
         ESC_read_csr(address, temp_buf, size);
 80047be:	89fa      	ldrh	r2, [r7, #14]
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff fdfd 	bl	80043c4 <ESC_read_csr>

         /* next address */
         len -= size;
 80047ca:	88ba      	ldrh	r2, [r7, #4]
 80047cc:	89fb      	ldrh	r3, [r7, #14]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	80bb      	strh	r3, [r7, #4]
         temp_buf += size;
 80047d2:	89fb      	ldrh	r3, [r7, #14]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	4413      	add	r3, r2
 80047d8:	60bb      	str	r3, [r7, #8]
         address += size;
 80047da:	88fa      	ldrh	r2, [r7, #6]
 80047dc:	89fb      	ldrh	r3, [r7, #14]
 80047de:	4413      	add	r3, r2
 80047e0:	80fb      	strh	r3, [r7, #6]
      while(len > 0)
 80047e2:	88bb      	ldrh	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1c9      	bne.n	800477c <ESC_read+0x2c>
      }
   }
   /* To mimic the ET1100 always providing AlEvent on every read or write */
   ESC_read_csr(ESCREG_ALEVENT,(void *)&ESCvar.ALevent,sizeof(ESCvar.ALevent));
 80047e8:	2202      	movs	r2, #2
 80047ea:	4908      	ldr	r1, [pc, #32]	; (800480c <ESC_read+0xbc>)
 80047ec:	f44f 7008 	mov.w	r0, #544	; 0x220
 80047f0:	f7ff fde8 	bl	80043c4 <ESC_read_csr>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <ESC_read+0xc0>)
 80047f6:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	4b04      	ldr	r3, [pc, #16]	; (8004810 <ESC_read+0xc0>)
 80047fe:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8

}
 8004802:	bf00      	nop
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	2000022c 	.word	0x2000022c
 8004810:	20000164 	.word	0x20000164

08004814 <ESC_write>:
 * @param[in]   address     = address of ESC register to write
 * @param[out]  buf         = pointer to buffer to write from
 * @param[in]   len         = number of bytes to write
 */
void ESC_write (uint16_t address, void *buf, uint16_t len)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	6039      	str	r1, [r7, #0]
 800481e:	80fb      	strh	r3, [r7, #6]
 8004820:	4613      	mov	r3, r2
 8004822:	80bb      	strh	r3, [r7, #4]
   /* Select Write function depending on address, process data ram or not */
   if (address >= 0x1000)
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800482a:	d306      	bcc.n	800483a <ESC_write+0x26>
   {
      ESC_write_pram(address, buf, len);
 800482c:	88ba      	ldrh	r2, [r7, #4]
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	6839      	ldr	r1, [r7, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fed4 	bl	80045e0 <ESC_write_pram>
 8004838:	e038      	b.n	80048ac <ESC_write+0x98>
   }
   else
   {
      uint16_t size;
      uint8_t *temp_buf = (uint8_t *)buf;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	60bb      	str	r3, [r7, #8]

      while(len > 0)
 800483e:	e032      	b.n	80048a6 <ESC_write+0x92>
      {
         /* We write maximum 4 bytes at the time */
         size = (len > 4) ? 4 : len;
 8004840:	88bb      	ldrh	r3, [r7, #4]
 8004842:	2b04      	cmp	r3, #4
 8004844:	bf28      	it	cs
 8004846:	2304      	movcs	r3, #4
 8004848:	81fb      	strh	r3, [r7, #14]
         /* Make size aligned to address according to LAN9252 datasheet
          * Table 12-14 EtherCAT CSR Address VS size  and MicroChip SDK code
          */
         /* If we got an odd address size is 1 , 01b 11b is captured */
         if(address & BIT(0))
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <ESC_write+0x46>
         {
            size = 1;
 8004854:	2301      	movs	r3, #1
 8004856:	81fb      	strh	r3, [r7, #14]
 8004858:	e013      	b.n	8004882 <ESC_write+0x6e>
         }
         /* If address 1xb and size != 1 and 3 , allow size 2 else size 1 */
         else if (address & BIT(1))
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d009      	beq.n	8004878 <ESC_write+0x64>
         {
            size = (size & BIT(0)) ? 1 : 2;
 8004864:	89fb      	ldrh	r3, [r7, #14]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <ESC_write+0x5e>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <ESC_write+0x60>
 8004872:	2302      	movs	r3, #2
 8004874:	81fb      	strh	r3, [r7, #14]
 8004876:	e004      	b.n	8004882 <ESC_write+0x6e>
         }
         /* size 3 not valid */
         else if (size == 3)
 8004878:	89fb      	ldrh	r3, [r7, #14]
 800487a:	2b03      	cmp	r3, #3
 800487c:	d101      	bne.n	8004882 <ESC_write+0x6e>
         {
            size = 1;
 800487e:	2301      	movs	r3, #1
 8004880:	81fb      	strh	r3, [r7, #14]
         }
         /* else size is kept AS IS */
         ESC_write_csr(address, temp_buf, size);
 8004882:	89fa      	ldrh	r2, [r7, #14]
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff fdca 	bl	8004422 <ESC_write_csr>

         /* next address */
         len -= size;
 800488e:	88ba      	ldrh	r2, [r7, #4]
 8004890:	89fb      	ldrh	r3, [r7, #14]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	80bb      	strh	r3, [r7, #4]
         temp_buf += size;
 8004896:	89fb      	ldrh	r3, [r7, #14]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	4413      	add	r3, r2
 800489c:	60bb      	str	r3, [r7, #8]
         address += size;
 800489e:	88fa      	ldrh	r2, [r7, #6]
 80048a0:	89fb      	ldrh	r3, [r7, #14]
 80048a2:	4413      	add	r3, r2
 80048a4:	80fb      	strh	r3, [r7, #6]
      while(len > 0)
 80048a6:	88bb      	ldrh	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1c9      	bne.n	8004840 <ESC_write+0x2c>
      }
   }

   /* To mimic the ET1x00 always providing AlEvent on every read or write */
   ESC_read_csr(ESCREG_ALEVENT,(void *)&ESCvar.ALevent,sizeof(ESCvar.ALevent));
 80048ac:	2202      	movs	r2, #2
 80048ae:	4908      	ldr	r1, [pc, #32]	; (80048d0 <ESC_write+0xbc>)
 80048b0:	f44f 7008 	mov.w	r0, #544	; 0x220
 80048b4:	f7ff fd86 	bl	80043c4 <ESC_read_csr>
   ESCvar.ALevent = etohs (ESCvar.ALevent);
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <ESC_write+0xc0>)
 80048ba:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80048be:	b29a      	uxth	r2, r3
 80048c0:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <ESC_write+0xc0>)
 80048c2:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
}
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	2000022c 	.word	0x2000022c
 80048d4:	20000164 	.word	0x20000164

080048d8 <ESC_init>:
{

}

void ESC_init (const esc_cfg_t * config)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
   //lan9252 = open (spi_name, O_RDWR, 0);

   /* Reset the ecat core here due to evb-lan9252-digio not having any GPIO
    * for that purpose.
    */
   lan9252_write_32(ESC_RESET_CTRL_REG,ESC_RESET_CTRL_RST);
 80048e0:	2140      	movs	r1, #64	; 0x40
 80048e2:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
 80048e6:	f7ff fcf5 	bl	80042d4 <lan9252_write_32>
   do
   {
      value = lan9252_read_32(ESC_CSR_CMD_REG);
 80048ea:	f44f 7041 	mov.w	r0, #772	; 0x304
 80048ee:	f7ff fd2b 	bl	8004348 <lan9252_read_32>
 80048f2:	60f8      	str	r0, [r7, #12]
   } while(value & ESC_RESET_CTRL_RST);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f5      	bne.n	80048ea <ESC_init+0x12>



}
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <spi_select>:

extern SPI_HandleTypeDef hspi1;


void spi_select (int8_t board)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	4603      	mov	r3, r0
 800490e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8004910:	2200      	movs	r2, #0
 8004912:	2101      	movs	r1, #1
 8004914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004918:	f001 faf4 	bl	8005f04 <HAL_GPIO_WritePin>
}
 800491c:	bf00      	nop
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <spi_unselect>:

void spi_unselect (int8_t board)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800492e:	2201      	movs	r2, #1
 8004930:	2101      	movs	r1, #1
 8004932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004936:	f001 fae5 	bl	8005f04 <HAL_GPIO_WritePin>
}
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <write>:

void write (int8_t board, uint8_t *data, uint8_t size)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	6039      	str	r1, [r7, #0]
 800494e:	71fb      	strb	r3, [r7, #7]
 8004950:	4613      	mov	r3, r2
 8004952:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, data, size, tout);
 8004954:	79bb      	ldrb	r3, [r7, #6]
 8004956:	b29a      	uxth	r2, r3
 8004958:	f241 3388 	movw	r3, #5000	; 0x1388
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	4803      	ldr	r0, [pc, #12]	; (800496c <write+0x28>)
 8004960:	f003 f95c 	bl	8007c1c <HAL_SPI_Transmit>
}
 8004964:	bf00      	nop
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000984 	.word	0x20000984

08004970 <read>:

void read (int8_t board, uint8_t *result, uint8_t size)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	6039      	str	r1, [r7, #0]
 800497a:	71fb      	strb	r3, [r7, #7]
 800497c:	4613      	mov	r3, r2
 800497e:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Receive(&hspi1, result, size, tout);
 8004980:	79bb      	ldrb	r3, [r7, #6]
 8004982:	b29a      	uxth	r2, r3
 8004984:	f241 3388 	movw	r3, #5000	; 0x1388
 8004988:	6839      	ldr	r1, [r7, #0]
 800498a:	4803      	ldr	r0, [pc, #12]	; (8004998 <read+0x28>)
 800498c:	f003 faac 	bl	8007ee8 <HAL_SPI_Receive>
}
 8004990:	bf00      	nop
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000984 	.word	0x20000984

0800499c <PWMGen3>:
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
		  }
}

void PWMGen3 (volatile int32_t *value, TIM_HandleTypeDef *timer, uint32_t timchannel, GPIO_TypeDef *gpioport, uint32_t gpiopin)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
	if (*value<0)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	da44      	bge.n	8004a3c <PWMGen3+0xa0>
		  {
			  HAL_GPIO_WritePin(gpioport, gpiopin, GPIO_PIN_SET);
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2201      	movs	r2, #1
 80049b8:	4619      	mov	r1, r3
 80049ba:	6838      	ldr	r0, [r7, #0]
 80049bc:	f001 faa2 	bl	8005f04 <HAL_GPIO_WritePin>
			  int32_t duty = - *value + PWMOffset;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f1c3 0304 	rsb	r3, r3, #4
 80049c8:	613b      	str	r3, [r7, #16]
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, 99 - duty);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d106      	bne.n	80049de <PWMGen3+0x42>
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	635a      	str	r2, [r3, #52]	; 0x34
		  {
			  HAL_GPIO_WritePin(gpioport, gpiopin, GPIO_PIN_RESET);
			  int32_t duty =  *value + PWMOffset;
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
		  }
}
 80049dc:	e065      	b.n	8004aaa <PWMGen3+0x10e>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, 99 - duty);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d106      	bne.n	80049f2 <PWMGen3+0x56>
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38
}
 80049f0:	e05b      	b.n	8004aaa <PWMGen3+0x10e>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, 99 - duty);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d106      	bne.n	8004a06 <PWMGen3+0x6a>
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004a04:	e051      	b.n	8004aaa <PWMGen3+0x10e>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, 99 - duty);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b0c      	cmp	r3, #12
 8004a0a:	d106      	bne.n	8004a1a <PWMGen3+0x7e>
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004a18:	e047      	b.n	8004aaa <PWMGen3+0x10e>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, 99 - duty);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	d106      	bne.n	8004a2e <PWMGen3+0x92>
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004a2c:	e03d      	b.n	8004aaa <PWMGen3+0x10e>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, 99 - duty);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004a3a:	e036      	b.n	8004aaa <PWMGen3+0x10e>
			  HAL_GPIO_WritePin(gpioport, gpiopin, GPIO_PIN_RESET);
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2200      	movs	r2, #0
 8004a42:	4619      	mov	r1, r3
 8004a44:	6838      	ldr	r0, [r7, #0]
 8004a46:	f001 fa5d 	bl	8005f04 <HAL_GPIO_WritePin>
			  int32_t duty =  *value + PWMOffset;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	617b      	str	r3, [r7, #20]
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d104      	bne.n	8004a62 <PWMGen3+0xc6>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004a60:	e023      	b.n	8004aaa <PWMGen3+0x10e>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d104      	bne.n	8004a72 <PWMGen3+0xd6>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004a70:	e01b      	b.n	8004aaa <PWMGen3+0x10e>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d104      	bne.n	8004a82 <PWMGen3+0xe6>
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004a80:	e013      	b.n	8004aaa <PWMGen3+0x10e>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b0c      	cmp	r3, #12
 8004a86:	d104      	bne.n	8004a92 <PWMGen3+0xf6>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004a90:	e00b      	b.n	8004aaa <PWMGen3+0x10e>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d104      	bne.n	8004aa2 <PWMGen3+0x106>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004aa0:	e003      	b.n	8004aaa <PWMGen3+0x10e>
		  	  __HAL_TIM_SET_COMPARE(timer, timchannel, duty);
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004aaa:	bf00      	nop
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	0000      	movs	r0, r0
 8004ab4:	0000      	movs	r0, r0
	...

08004ab8 <cb_get_inputs>:
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void cb_get_inputs (void)					//just add
{
 8004ab8:	b598      	push	{r3, r4, r7, lr}
 8004aba:	af00      	add	r7, sp, #0
	if (Obj.BUTTON.BUTTON_1 == 1) {
 8004abc:	4b30      	ldr	r3, [pc, #192]	; (8004b80 <cb_get_inputs+0xc8>)
 8004abe:	795b      	ldrb	r3, [r3, #5]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d109      	bne.n	8004ad8 <cb_get_inputs+0x20>
		Obj.LED.LED_RED = 1;
 8004ac4:	4b2e      	ldr	r3, [pc, #184]	; (8004b80 <cb_get_inputs+0xc8>)
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8004aca:	2201      	movs	r2, #1
 8004acc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ad0:	482c      	ldr	r0, [pc, #176]	; (8004b84 <cb_get_inputs+0xcc>)
 8004ad2:	f001 fa17 	bl	8005f04 <HAL_GPIO_WritePin>
 8004ad6:	e008      	b.n	8004aea <cb_get_inputs+0x32>
	}
	else {
		Obj.LED.LED_RED = 0;
 8004ad8:	4b29      	ldr	r3, [pc, #164]	; (8004b80 <cb_get_inputs+0xc8>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ae4:	4827      	ldr	r0, [pc, #156]	; (8004b84 <cb_get_inputs+0xcc>)
 8004ae6:	f001 fa0d 	bl	8005f04 <HAL_GPIO_WritePin>
	}

	if (Obj.BUTTON.BUTTON_2 == 1) {
 8004aea:	4b25      	ldr	r3, [pc, #148]	; (8004b80 <cb_get_inputs+0xc8>)
 8004aec:	799b      	ldrb	r3, [r3, #6]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d10b      	bne.n	8004b0a <cb_get_inputs+0x52>
		Obj.BUTTON_VAL = 1;
 8004af2:	4b23      	ldr	r3, [pc, #140]	; (8004b80 <cb_get_inputs+0xc8>)
 8004af4:	2201      	movs	r2, #1
 8004af6:	71da      	strb	r2, [r3, #7]
		Obj.LED.LED_BLUE = 1;
 8004af8:	4b21      	ldr	r3, [pc, #132]	; (8004b80 <cb_get_inputs+0xc8>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004afe:	2201      	movs	r2, #1
 8004b00:	2180      	movs	r1, #128	; 0x80
 8004b02:	4820      	ldr	r0, [pc, #128]	; (8004b84 <cb_get_inputs+0xcc>)
 8004b04:	f001 f9fe 	bl	8005f04 <HAL_GPIO_WritePin>
 8004b08:	e007      	b.n	8004b1a <cb_get_inputs+0x62>
	}
	else {
		Obj.LED.LED_BLUE = 0;
 8004b0a:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <cb_get_inputs+0xc8>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004b10:	2200      	movs	r2, #0
 8004b12:	2180      	movs	r1, #128	; 0x80
 8004b14:	481b      	ldr	r0, [pc, #108]	; (8004b84 <cb_get_inputs+0xcc>)
 8004b16:	f001 f9f5 	bl	8005f04 <HAL_GPIO_WritePin>
	}

	Obj.LED_VAL = Obj.BUTTON_VAL;
 8004b1a:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <cb_get_inputs+0xc8>)
 8004b1c:	79da      	ldrb	r2, [r3, #7]
 8004b1e:	4b18      	ldr	r3, [pc, #96]	; (8004b80 <cb_get_inputs+0xc8>)
 8004b20:	70da      	strb	r2, [r3, #3]

	Motorstatus = Obj.MotorStatus;
 8004b22:	4b17      	ldr	r3, [pc, #92]	; (8004b80 <cb_get_inputs+0xc8>)
 8004b24:	7a1a      	ldrb	r2, [r3, #8]
 8004b26:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <cb_get_inputs+0xd0>)
 8004b28:	701a      	strb	r2, [r3, #0]

	Pwmduty = (int32_t)(Obj.pwm * Postgain);
 8004b2a:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <cb_get_inputs+0xc8>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fb fd1a 	bl	8000568 <__aeabi_f2d>
 8004b34:	a310      	add	r3, pc, #64	; (adr r3, 8004b78 <cb_get_inputs+0xc0>)
 8004b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3a:	f7fb fd6d 	bl	8000618 <__aeabi_dmul>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	460c      	mov	r4, r1
 8004b42:	4618      	mov	r0, r3
 8004b44:	4621      	mov	r1, r4
 8004b46:	f7fb ff79 	bl	8000a3c <__aeabi_d2iz>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <cb_get_inputs+0xd4>)
 8004b4e:	601a      	str	r2, [r3, #0]
	if (Pwmduty < -90) Pwmduty = -90;
 8004b50:	4b0e      	ldr	r3, [pc, #56]	; (8004b8c <cb_get_inputs+0xd4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8004b58:	da03      	bge.n	8004b62 <cb_get_inputs+0xaa>
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <cb_get_inputs+0xd4>)
 8004b5c:	f06f 0259 	mvn.w	r2, #89	; 0x59
 8004b60:	601a      	str	r2, [r3, #0]
	if (Pwmduty > 90) Pwmduty = 90;
 8004b62:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <cb_get_inputs+0xd4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b5a      	cmp	r3, #90	; 0x5a
 8004b68:	dd02      	ble.n	8004b70 <cb_get_inputs+0xb8>
 8004b6a:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <cb_get_inputs+0xd4>)
 8004b6c:	225a      	movs	r2, #90	; 0x5a
 8004b6e:	601a      	str	r2, [r3, #0]
}
 8004b70:	bf00      	nop
 8004b72:	bd98      	pop	{r3, r4, r7, pc}
 8004b74:	f3af 8000 	nop.w
 8004b78:	258bf259 	.word	0x258bf259
 8004b7c:	3fe258bf 	.word	0x3fe258bf
 8004b80:	200009e8 	.word	0x200009e8
 8004b84:	48000400 	.word	0x48000400
 8004b88:	20000152 	.word	0x20000152
 8004b8c:	20000154 	.word	0x20000154

08004b90 <cb_set_outputs>:

void cb_set_outputs (void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
}
 8004b94:	bf00      	nop
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
	...

08004ba0 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	80fb      	strh	r3, [r7, #6]
	Obj.PHY_BUTTON ^= 0x01;
 8004baa:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <HAL_GPIO_EXTI_Callback+0x24>)
 8004bac:	791b      	ldrb	r3, [r3, #4]
 8004bae:	f083 0301 	eor.w	r3, r3, #1
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	4b03      	ldr	r3, [pc, #12]	; (8004bc4 <HAL_GPIO_EXTI_Callback+0x24>)
 8004bb6:	711a      	strb	r2, [r3, #4]
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	200009e8 	.word	0x200009e8

08004bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004bce:	f000 fe62 	bl	8005896 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004bd2:	f000 f84d 	bl	8004c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004bd6:	f000 fa4d 	bl	8005074 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8004bda:	f000 f8d1 	bl	8004d80 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8004bde:	f000 f913 	bl	8004e08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004be2:	f000 fa1d 	bl	8005020 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8004be6:	f000 f95b 	bl	8004ea0 <MX_SPI1_Init>
  MX_TIM3_Init();
 8004bea:	f000 f997 	bl	8004f1c <MX_TIM3_Init>
     .esc_hw_interrupt_disable = NULL,
     .esc_hw_eep_handler = NULL,
     .esc_check_dc_handler = NULL,
  };

  ecat_slv_init (&config);
 8004bee:	4819      	ldr	r0, [pc, #100]	; (8004c54 <main+0x8c>)
 8004bf0:	f7fc fa64 	bl	80010bc <ecat_slv_init>
  DPRINT("Hello Main\n");
 8004bf4:	4818      	ldr	r0, [pc, #96]	; (8004c58 <main+0x90>)
 8004bf6:	f007 f85f 	bl	800bcb8 <puts>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	4817      	ldr	r0, [pc, #92]	; (8004c5c <main+0x94>)
 8004c00:	f001 f980 	bl	8005f04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8004c04:	2201      	movs	r2, #1
 8004c06:	2102      	movs	r1, #2
 8004c08:	4814      	ldr	r0, [pc, #80]	; (8004c5c <main+0x94>)
 8004c0a:	f001 f97b 	bl	8005f04 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004c0e:	2100      	movs	r1, #0
 8004c10:	4813      	ldr	r0, [pc, #76]	; (8004c60 <main+0x98>)
 8004c12:	f003 fe79 	bl	8008908 <HAL_TIM_PWM_Start>
  int32_t pwmduty = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ecat_slv();								//just add
 8004c1a:	f7fc fa45 	bl	80010a8 <ecat_slv>

	  switch (Motorstatus)
 8004c1e:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <main+0x9c>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <main+0x76>
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d000      	beq.n	8004c2c <main+0x64>

//		  PWMGen2(&pwmduty, &htim3, TIM_CHANNEL_1, GPIOD, GPIO_PIN_0, GPIOD, GPIO_PIN_1);
		  PWMGen3(&pwmduty, &htim3, TIM_CHANNEL_1, GPIOE, GPIO_PIN_1);
		  break;
	  default:
		  break;
 8004c2a:	e011      	b.n	8004c50 <main+0x88>
		  PWMGen3(&Pwmduty, &htim3, TIM_CHANNEL_1, GPIOE, GPIO_PIN_1);
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <main+0xa0>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	490a      	ldr	r1, [pc, #40]	; (8004c60 <main+0x98>)
 8004c36:	480d      	ldr	r0, [pc, #52]	; (8004c6c <main+0xa4>)
 8004c38:	f7ff feb0 	bl	800499c <PWMGen3>
		  break;
 8004c3c:	e008      	b.n	8004c50 <main+0x88>
		  PWMGen3(&pwmduty, &htim3, TIM_CHANNEL_1, GPIOE, GPIO_PIN_1);
 8004c3e:	1d38      	adds	r0, r7, #4
 8004c40:	2302      	movs	r3, #2
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	4b08      	ldr	r3, [pc, #32]	; (8004c68 <main+0xa0>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	4905      	ldr	r1, [pc, #20]	; (8004c60 <main+0x98>)
 8004c4a:	f7ff fea7 	bl	800499c <PWMGen3>
		  break;
 8004c4e:	bf00      	nop
	  ecat_slv();								//just add
 8004c50:	e7e3      	b.n	8004c1a <main+0x52>
 8004c52:	bf00      	nop
 8004c54:	20000024 	.word	0x20000024
 8004c58:	0800c680 	.word	0x0800c680
 8004c5c:	48000c00 	.word	0x48000c00
 8004c60:	200008b8 	.word	0x200008b8
 8004c64:	20000152 	.word	0x20000152
 8004c68:	48001000 	.word	0x48001000
 8004c6c:	20000154 	.word	0x20000154

08004c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b0bc      	sub	sp, #240	; 0xf0
 8004c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c7a:	2244      	movs	r2, #68	; 0x44
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f006 fcd7 	bl	800b632 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	609a      	str	r2, [r3, #8]
 8004c90:	60da      	str	r2, [r3, #12]
 8004c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c94:	1d3b      	adds	r3, r7, #4
 8004c96:	2294      	movs	r2, #148	; 0x94
 8004c98:	2100      	movs	r1, #0
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f006 fcc9 	bl	800b632 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	f001 fac7 	bl	8006234 <HAL_PWREx_ControlVoltageScaling>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8004cac:	f000 fafc 	bl	80052a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004cb6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004cba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 8004cd0:	231e      	movs	r3, #30
 8004cd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004cdc:	2302      	movs	r3, #2
 8004cde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ce8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004cec:	4618      	mov	r0, r3
 8004cee:	f001 fb65 	bl	80063bc <HAL_RCC_OscConfig>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004cf8:	f000 fad6 	bl	80052a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004cfc:	230f      	movs	r3, #15
 8004cfe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d02:	2303      	movs	r3, #3
 8004d04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d16:	2300      	movs	r3, #0
 8004d18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004d1c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004d20:	2105      	movs	r1, #5
 8004d22:	4618      	mov	r0, r3
 8004d24:	f001 ff38 	bl	8006b98 <HAL_RCC_ClockConfig>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004d2e:	f000 fabb 	bl	80052a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPUART1
 8004d32:	f242 0324 	movw	r3, #8228	; 0x2024
 8004d36:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004d40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004d44:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8004d46:	2303      	movs	r3, #3
 8004d48:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8004d4e:	230c      	movs	r3, #12
 8004d50:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8004d52:	2302      	movs	r3, #2
 8004d54:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004d56:	2302      	movs	r3, #2
 8004d58:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8004d5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d62:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d64:	1d3b      	adds	r3, r7, #4
 8004d66:	4618      	mov	r0, r3
 8004d68:	f002 f9c6 	bl	80070f8 <HAL_RCCEx_PeriphCLKConfig>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8004d72:	f000 fa99 	bl	80052a8 <Error_Handler>
  }
}
 8004d76:	bf00      	nop
 8004d78:	37f0      	adds	r7, #240	; 0xf0
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004d84:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <MX_LPUART1_UART_Init+0x80>)
 8004d86:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <MX_LPUART1_UART_Init+0x84>)
 8004d88:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8004d8a:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <MX_LPUART1_UART_Init+0x80>)
 8004d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d90:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d92:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <MX_LPUART1_UART_Init+0x80>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004d98:	4b19      	ldr	r3, [pc, #100]	; (8004e00 <MX_LPUART1_UART_Init+0x80>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004d9e:	4b18      	ldr	r3, [pc, #96]	; (8004e00 <MX_LPUART1_UART_Init+0x80>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004da4:	4b16      	ldr	r3, [pc, #88]	; (8004e00 <MX_LPUART1_UART_Init+0x80>)
 8004da6:	220c      	movs	r2, #12
 8004da8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004daa:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <MX_LPUART1_UART_Init+0x80>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004db0:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <MX_LPUART1_UART_Init+0x80>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004db6:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <MX_LPUART1_UART_Init+0x80>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004dbc:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <MX_LPUART1_UART_Init+0x80>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8004dc2:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <MX_LPUART1_UART_Init+0x80>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004dc8:	480d      	ldr	r0, [pc, #52]	; (8004e00 <MX_LPUART1_UART_Init+0x80>)
 8004dca:	f004 fc53 	bl	8009674 <HAL_UART_Init>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8004dd4:	f000 fa68 	bl	80052a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4809      	ldr	r0, [pc, #36]	; (8004e00 <MX_LPUART1_UART_Init+0x80>)
 8004ddc:	f006 f861 	bl	800aea2 <HAL_UARTEx_SetTxFifoThreshold>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004de6:	f000 fa5f 	bl	80052a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004dea:	2100      	movs	r1, #0
 8004dec:	4804      	ldr	r0, [pc, #16]	; (8004e00 <MX_LPUART1_UART_Init+0x80>)
 8004dee:	f006 f896 	bl	800af1e <HAL_UARTEx_SetRxFifoThreshold>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004df8:	f000 fa56 	bl	80052a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004dfc:	bf00      	nop
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	200008f8 	.word	0x200008f8
 8004e04:	40008000 	.word	0x40008000

08004e08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004e0c:	4b22      	ldr	r3, [pc, #136]	; (8004e98 <MX_USART3_UART_Init+0x90>)
 8004e0e:	4a23      	ldr	r2, [pc, #140]	; (8004e9c <MX_USART3_UART_Init+0x94>)
 8004e10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004e12:	4b21      	ldr	r3, [pc, #132]	; (8004e98 <MX_USART3_UART_Init+0x90>)
 8004e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004e1a:	4b1f      	ldr	r3, [pc, #124]	; (8004e98 <MX_USART3_UART_Init+0x90>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004e20:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <MX_USART3_UART_Init+0x90>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004e26:	4b1c      	ldr	r3, [pc, #112]	; (8004e98 <MX_USART3_UART_Init+0x90>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004e2c:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <MX_USART3_UART_Init+0x90>)
 8004e2e:	220c      	movs	r2, #12
 8004e30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e32:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <MX_USART3_UART_Init+0x90>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e38:	4b17      	ldr	r3, [pc, #92]	; (8004e98 <MX_USART3_UART_Init+0x90>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e3e:	4b16      	ldr	r3, [pc, #88]	; (8004e98 <MX_USART3_UART_Init+0x90>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e44:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <MX_USART3_UART_Init+0x90>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e4a:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <MX_USART3_UART_Init+0x90>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004e50:	4811      	ldr	r0, [pc, #68]	; (8004e98 <MX_USART3_UART_Init+0x90>)
 8004e52:	f004 fc0f 	bl	8009674 <HAL_UART_Init>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004e5c:	f000 fa24 	bl	80052a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e60:	2100      	movs	r1, #0
 8004e62:	480d      	ldr	r0, [pc, #52]	; (8004e98 <MX_USART3_UART_Init+0x90>)
 8004e64:	f006 f81d 	bl	800aea2 <HAL_UARTEx_SetTxFifoThreshold>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004e6e:	f000 fa1b 	bl	80052a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e72:	2100      	movs	r1, #0
 8004e74:	4808      	ldr	r0, [pc, #32]	; (8004e98 <MX_USART3_UART_Init+0x90>)
 8004e76:	f006 f852 	bl	800af1e <HAL_UARTEx_SetRxFifoThreshold>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004e80:	f000 fa12 	bl	80052a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004e84:	4804      	ldr	r0, [pc, #16]	; (8004e98 <MX_USART3_UART_Init+0x90>)
 8004e86:	f005 ffd3 	bl	800ae30 <HAL_UARTEx_DisableFifoMode>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004e90:	f000 fa0a 	bl	80052a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004e94:	bf00      	nop
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20000424 	.word	0x20000424
 8004e9c:	40004800 	.word	0x40004800

08004ea0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004ea4:	4b1b      	ldr	r3, [pc, #108]	; (8004f14 <MX_SPI1_Init+0x74>)
 8004ea6:	4a1c      	ldr	r2, [pc, #112]	; (8004f18 <MX_SPI1_Init+0x78>)
 8004ea8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004eaa:	4b1a      	ldr	r3, [pc, #104]	; (8004f14 <MX_SPI1_Init+0x74>)
 8004eac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004eb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004eb2:	4b18      	ldr	r3, [pc, #96]	; (8004f14 <MX_SPI1_Init+0x74>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004eb8:	4b16      	ldr	r3, [pc, #88]	; (8004f14 <MX_SPI1_Init+0x74>)
 8004eba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004ebe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ec0:	4b14      	ldr	r3, [pc, #80]	; (8004f14 <MX_SPI1_Init+0x74>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ec6:	4b13      	ldr	r3, [pc, #76]	; (8004f14 <MX_SPI1_Init+0x74>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004ecc:	4b11      	ldr	r3, [pc, #68]	; (8004f14 <MX_SPI1_Init+0x74>)
 8004ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ed2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <MX_SPI1_Init+0x74>)
 8004ed6:	2208      	movs	r2, #8
 8004ed8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004eda:	4b0e      	ldr	r3, [pc, #56]	; (8004f14 <MX_SPI1_Init+0x74>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <MX_SPI1_Init+0x74>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ee6:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <MX_SPI1_Init+0x74>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004eec:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <MX_SPI1_Init+0x74>)
 8004eee:	2207      	movs	r2, #7
 8004ef0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004ef2:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <MX_SPI1_Init+0x74>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004ef8:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <MX_SPI1_Init+0x74>)
 8004efa:	2208      	movs	r2, #8
 8004efc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004efe:	4805      	ldr	r0, [pc, #20]	; (8004f14 <MX_SPI1_Init+0x74>)
 8004f00:	f002 fe02 	bl	8007b08 <HAL_SPI_Init>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004f0a:	f000 f9cd 	bl	80052a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004f0e:	bf00      	nop
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000984 	.word	0x20000984
 8004f18:	40013000 	.word	0x40013000

08004f1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08e      	sub	sp, #56	; 0x38
 8004f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	605a      	str	r2, [r3, #4]
 8004f2c:	609a      	str	r2, [r3, #8]
 8004f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f30:	f107 031c 	add.w	r3, r7, #28
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f3c:	463b      	mov	r3, r7
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	605a      	str	r2, [r3, #4]
 8004f44:	609a      	str	r2, [r3, #8]
 8004f46:	60da      	str	r2, [r3, #12]
 8004f48:	611a      	str	r2, [r3, #16]
 8004f4a:	615a      	str	r2, [r3, #20]
 8004f4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f4e:	4b32      	ldr	r3, [pc, #200]	; (8005018 <MX_TIM3_Init+0xfc>)
 8004f50:	4a32      	ldr	r2, [pc, #200]	; (800501c <MX_TIM3_Init+0x100>)
 8004f52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19;
 8004f54:	4b30      	ldr	r3, [pc, #192]	; (8005018 <MX_TIM3_Init+0xfc>)
 8004f56:	2213      	movs	r2, #19
 8004f58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f5a:	4b2f      	ldr	r3, [pc, #188]	; (8005018 <MX_TIM3_Init+0xfc>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8004f60:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <MX_TIM3_Init+0xfc>)
 8004f62:	2263      	movs	r2, #99	; 0x63
 8004f64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f66:	4b2c      	ldr	r3, [pc, #176]	; (8005018 <MX_TIM3_Init+0xfc>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f6c:	4b2a      	ldr	r3, [pc, #168]	; (8005018 <MX_TIM3_Init+0xfc>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004f72:	4829      	ldr	r0, [pc, #164]	; (8005018 <MX_TIM3_Init+0xfc>)
 8004f74:	f003 fc68 	bl	8008848 <HAL_TIM_Base_Init>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004f7e:	f000 f993 	bl	80052a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004f88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4822      	ldr	r0, [pc, #136]	; (8005018 <MX_TIM3_Init+0xfc>)
 8004f90:	f003 fe2a 	bl	8008be8 <HAL_TIM_ConfigClockSource>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004f9a:	f000 f985 	bl	80052a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004f9e:	481e      	ldr	r0, [pc, #120]	; (8005018 <MX_TIM3_Init+0xfc>)
 8004fa0:	f003 fc7d 	bl	800889e <HAL_TIM_PWM_Init>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004faa:	f000 f97d 	bl	80052a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004fb6:	f107 031c 	add.w	r3, r7, #28
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4816      	ldr	r0, [pc, #88]	; (8005018 <MX_TIM3_Init+0xfc>)
 8004fbe:	f004 fafd 	bl	80095bc <HAL_TIMEx_MasterConfigSynchronization>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004fc8:	f000 f96e 	bl	80052a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004fcc:	2360      	movs	r3, #96	; 0x60
 8004fce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004fdc:	463b      	mov	r3, r7
 8004fde:	2200      	movs	r2, #0
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	480d      	ldr	r0, [pc, #52]	; (8005018 <MX_TIM3_Init+0xfc>)
 8004fe4:	f003 fce8 	bl	80089b8 <HAL_TIM_PWM_ConfigChannel>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004fee:	f000 f95b 	bl	80052a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4807      	ldr	r0, [pc, #28]	; (8005018 <MX_TIM3_Init+0xfc>)
 8004ffa:	f003 fcdd 	bl	80089b8 <HAL_TIM_PWM_ConfigChannel>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005004:	f000 f950 	bl	80052a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005008:	4803      	ldr	r0, [pc, #12]	; (8005018 <MX_TIM3_Init+0xfc>)
 800500a:	f000 fa55 	bl	80054b8 <HAL_TIM_MspPostInit>

}
 800500e:	bf00      	nop
 8005010:	3738      	adds	r7, #56	; 0x38
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	200008b8 	.word	0x200008b8
 800501c:	40000400 	.word	0x40000400

08005020 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005024:	4b12      	ldr	r3, [pc, #72]	; (8005070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8005026:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800502a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800502c:	4b10      	ldr	r3, [pc, #64]	; (8005070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800502e:	2206      	movs	r2, #6
 8005030:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005032:	4b0f      	ldr	r3, [pc, #60]	; (8005070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8005034:	2202      	movs	r2, #2
 8005036:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8005038:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800503a:	2201      	movs	r2, #1
 800503c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8005040:	2200      	movs	r2, #0
 8005042:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005044:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8005046:	2200      	movs	r2, #0
 8005048:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800504a:	4b09      	ldr	r3, [pc, #36]	; (8005070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800504c:	2201      	movs	r2, #1
 800504e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8005052:	2200      	movs	r2, #0
 8005054:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005056:	4b06      	ldr	r3, [pc, #24]	; (8005070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8005058:	2201      	movs	r2, #1
 800505a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800505c:	4804      	ldr	r0, [pc, #16]	; (8005070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800505e:	f000 ff81 	bl	8005f64 <HAL_PCD_Init>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8005068:	f000 f91e 	bl	80052a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800506c:	bf00      	nop
 800506e:	bd80      	pop	{r7, pc}
 8005070:	200004b0 	.word	0x200004b0

08005074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08c      	sub	sp, #48	; 0x30
 8005078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800507a:	f107 031c 	add.w	r3, r7, #28
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	605a      	str	r2, [r3, #4]
 8005084:	609a      	str	r2, [r3, #8]
 8005086:	60da      	str	r2, [r3, #12]
 8005088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800508a:	4b80      	ldr	r3, [pc, #512]	; (800528c <MX_GPIO_Init+0x218>)
 800508c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508e:	4a7f      	ldr	r2, [pc, #508]	; (800528c <MX_GPIO_Init+0x218>)
 8005090:	f043 0310 	orr.w	r3, r3, #16
 8005094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005096:	4b7d      	ldr	r3, [pc, #500]	; (800528c <MX_GPIO_Init+0x218>)
 8005098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509a:	f003 0310 	and.w	r3, r3, #16
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050a2:	4b7a      	ldr	r3, [pc, #488]	; (800528c <MX_GPIO_Init+0x218>)
 80050a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a6:	4a79      	ldr	r2, [pc, #484]	; (800528c <MX_GPIO_Init+0x218>)
 80050a8:	f043 0304 	orr.w	r3, r3, #4
 80050ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050ae:	4b77      	ldr	r3, [pc, #476]	; (800528c <MX_GPIO_Init+0x218>)
 80050b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80050ba:	4b74      	ldr	r3, [pc, #464]	; (800528c <MX_GPIO_Init+0x218>)
 80050bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050be:	4a73      	ldr	r2, [pc, #460]	; (800528c <MX_GPIO_Init+0x218>)
 80050c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050c6:	4b71      	ldr	r3, [pc, #452]	; (800528c <MX_GPIO_Init+0x218>)
 80050c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d2:	4b6e      	ldr	r3, [pc, #440]	; (800528c <MX_GPIO_Init+0x218>)
 80050d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d6:	4a6d      	ldr	r2, [pc, #436]	; (800528c <MX_GPIO_Init+0x218>)
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050de:	4b6b      	ldr	r3, [pc, #428]	; (800528c <MX_GPIO_Init+0x218>)
 80050e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ea:	4b68      	ldr	r3, [pc, #416]	; (800528c <MX_GPIO_Init+0x218>)
 80050ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ee:	4a67      	ldr	r2, [pc, #412]	; (800528c <MX_GPIO_Init+0x218>)
 80050f0:	f043 0302 	orr.w	r3, r3, #2
 80050f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050f6:	4b65      	ldr	r3, [pc, #404]	; (800528c <MX_GPIO_Init+0x218>)
 80050f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005102:	4b62      	ldr	r3, [pc, #392]	; (800528c <MX_GPIO_Init+0x218>)
 8005104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005106:	4a61      	ldr	r2, [pc, #388]	; (800528c <MX_GPIO_Init+0x218>)
 8005108:	f043 0308 	orr.w	r3, r3, #8
 800510c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800510e:	4b5f      	ldr	r3, [pc, #380]	; (800528c <MX_GPIO_Init+0x218>)
 8005110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800511a:	4b5c      	ldr	r3, [pc, #368]	; (800528c <MX_GPIO_Init+0x218>)
 800511c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511e:	4a5b      	ldr	r2, [pc, #364]	; (800528c <MX_GPIO_Init+0x218>)
 8005120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005126:	4b59      	ldr	r3, [pc, #356]	; (800528c <MX_GPIO_Init+0x218>)
 8005128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800512a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8005132:	f001 f933 	bl	800639c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_SET);
 8005136:	2201      	movs	r2, #1
 8005138:	2121      	movs	r1, #33	; 0x21
 800513a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800513e:	f000 fee1 	bl	8005f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005142:	2200      	movs	r2, #0
 8005144:	f244 0181 	movw	r1, #16513	; 0x4081
 8005148:	4851      	ldr	r0, [pc, #324]	; (8005290 <MX_GPIO_Init+0x21c>)
 800514a:	f000 fedb 	bl	8005f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800514e:	2200      	movs	r2, #0
 8005150:	2120      	movs	r1, #32
 8005152:	4850      	ldr	r0, [pc, #320]	; (8005294 <MX_GPIO_Init+0x220>)
 8005154:	f000 fed6 	bl	8005f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8005158:	2200      	movs	r2, #0
 800515a:	2180      	movs	r1, #128	; 0x80
 800515c:	484e      	ldr	r0, [pc, #312]	; (8005298 <MX_GPIO_Init+0x224>)
 800515e:	f000 fed1 	bl	8005f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8005162:	2200      	movs	r2, #0
 8005164:	2103      	movs	r1, #3
 8005166:	484d      	ldr	r0, [pc, #308]	; (800529c <MX_GPIO_Init+0x228>)
 8005168:	f000 fecc 	bl	8005f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800516c:	2200      	movs	r2, #0
 800516e:	2102      	movs	r1, #2
 8005170:	484b      	ldr	r0, [pc, #300]	; (80052a0 <MX_GPIO_Init+0x22c>)
 8005172:	f000 fec7 	bl	8005f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800517a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800517c:	4b49      	ldr	r3, [pc, #292]	; (80052a4 <MX_GPIO_Init+0x230>)
 800517e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005180:	2300      	movs	r3, #0
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005184:	f107 031c 	add.w	r3, r7, #28
 8005188:	4619      	mov	r1, r3
 800518a:	4843      	ldr	r0, [pc, #268]	; (8005298 <MX_GPIO_Init+0x224>)
 800518c:	f000 fd28 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005190:	2301      	movs	r3, #1
 8005192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005194:	2301      	movs	r3, #1
 8005196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005198:	2301      	movs	r3, #1
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800519c:	2303      	movs	r3, #3
 800519e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051a0:	f107 031c 	add.w	r3, r7, #28
 80051a4:	4619      	mov	r1, r3
 80051a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051aa:	f000 fd19 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80051ae:	2320      	movs	r3, #32
 80051b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051b2:	2301      	movs	r3, #1
 80051b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051b6:	2301      	movs	r3, #1
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ba:	2300      	movs	r3, #0
 80051bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051be:	f107 031c 	add.w	r3, r7, #28
 80051c2:	4619      	mov	r1, r3
 80051c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051c8:	f000 fd0a 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin;
 80051cc:	f244 0381 	movw	r3, #16513	; 0x4081
 80051d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051d2:	2301      	movs	r3, #1
 80051d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051d6:	2301      	movs	r3, #1
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051da:	2300      	movs	r3, #0
 80051dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051de:	f107 031c 	add.w	r3, r7, #28
 80051e2:	4619      	mov	r1, r3
 80051e4:	482a      	ldr	r0, [pc, #168]	; (8005290 <MX_GPIO_Init+0x21c>)
 80051e6:	f000 fcfb 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80051ea:	2320      	movs	r3, #32
 80051ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051ee:	2301      	movs	r3, #1
 80051f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051f6:	2300      	movs	r3, #0
 80051f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80051fa:	f107 031c 	add.w	r3, r7, #28
 80051fe:	4619      	mov	r1, r3
 8005200:	4824      	ldr	r0, [pc, #144]	; (8005294 <MX_GPIO_Init+0x220>)
 8005202:	f000 fced 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005206:	2340      	movs	r3, #64	; 0x40
 8005208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800520a:	2300      	movs	r3, #0
 800520c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520e:	2300      	movs	r3, #0
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005212:	f107 031c 	add.w	r3, r7, #28
 8005216:	4619      	mov	r1, r3
 8005218:	481e      	ldr	r0, [pc, #120]	; (8005294 <MX_GPIO_Init+0x220>)
 800521a:	f000 fce1 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800521e:	2380      	movs	r3, #128	; 0x80
 8005220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005222:	2301      	movs	r3, #1
 8005224:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005226:	2301      	movs	r3, #1
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800522a:	2300      	movs	r3, #0
 800522c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800522e:	f107 031c 	add.w	r3, r7, #28
 8005232:	4619      	mov	r1, r3
 8005234:	4818      	ldr	r0, [pc, #96]	; (8005298 <MX_GPIO_Init+0x224>)
 8005236:	f000 fcd3 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800523a:	2303      	movs	r3, #3
 800523c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800523e:	2301      	movs	r3, #1
 8005240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005242:	2301      	movs	r3, #1
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005246:	2302      	movs	r3, #2
 8005248:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800524a:	f107 031c 	add.w	r3, r7, #28
 800524e:	4619      	mov	r1, r3
 8005250:	4812      	ldr	r0, [pc, #72]	; (800529c <MX_GPIO_Init+0x228>)
 8005252:	f000 fcc5 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005256:	2302      	movs	r3, #2
 8005258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800525a:	2301      	movs	r3, #1
 800525c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800525e:	2301      	movs	r3, #1
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005262:	2302      	movs	r3, #2
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005266:	f107 031c 	add.w	r3, r7, #28
 800526a:	4619      	mov	r1, r3
 800526c:	480c      	ldr	r0, [pc, #48]	; (80052a0 <MX_GPIO_Init+0x22c>)
 800526e:	f000 fcb7 	bl	8005be0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005272:	2200      	movs	r2, #0
 8005274:	2100      	movs	r1, #0
 8005276:	2028      	movs	r0, #40	; 0x28
 8005278:	f000 fc7b 	bl	8005b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800527c:	2028      	movs	r0, #40	; 0x28
 800527e:	f000 fc94 	bl	8005baa <HAL_NVIC_EnableIRQ>

}
 8005282:	bf00      	nop
 8005284:	3730      	adds	r7, #48	; 0x30
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40021000 	.word	0x40021000
 8005290:	48000400 	.word	0x48000400
 8005294:	48001800 	.word	0x48001800
 8005298:	48000800 	.word	0x48000800
 800529c:	48000c00 	.word	0x48000c00
 80052a0:	48001000 	.word	0x48001000
 80052a4:	10110000 	.word	0x10110000

080052a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80052ac:	bf00      	nop
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052be:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <HAL_MspInit+0x44>)
 80052c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c2:	4a0e      	ldr	r2, [pc, #56]	; (80052fc <HAL_MspInit+0x44>)
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	6613      	str	r3, [r2, #96]	; 0x60
 80052ca:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <HAL_MspInit+0x44>)
 80052cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	607b      	str	r3, [r7, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052d6:	4b09      	ldr	r3, [pc, #36]	; (80052fc <HAL_MspInit+0x44>)
 80052d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052da:	4a08      	ldr	r2, [pc, #32]	; (80052fc <HAL_MspInit+0x44>)
 80052dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e0:	6593      	str	r3, [r2, #88]	; 0x58
 80052e2:	4b06      	ldr	r3, [pc, #24]	; (80052fc <HAL_MspInit+0x44>)
 80052e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40021000 	.word	0x40021000

08005300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08c      	sub	sp, #48	; 0x30
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005308:	f107 031c 	add.w	r3, r7, #28
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	605a      	str	r2, [r3, #4]
 8005312:	609a      	str	r2, [r3, #8]
 8005314:	60da      	str	r2, [r3, #12]
 8005316:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a30      	ldr	r2, [pc, #192]	; (80053e0 <HAL_UART_MspInit+0xe0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d12b      	bne.n	800537a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005322:	4b30      	ldr	r3, [pc, #192]	; (80053e4 <HAL_UART_MspInit+0xe4>)
 8005324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005326:	4a2f      	ldr	r2, [pc, #188]	; (80053e4 <HAL_UART_MspInit+0xe4>)
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800532e:	4b2d      	ldr	r3, [pc, #180]	; (80053e4 <HAL_UART_MspInit+0xe4>)
 8005330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800533a:	4b2a      	ldr	r3, [pc, #168]	; (80053e4 <HAL_UART_MspInit+0xe4>)
 800533c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533e:	4a29      	ldr	r2, [pc, #164]	; (80053e4 <HAL_UART_MspInit+0xe4>)
 8005340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005346:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <HAL_UART_MspInit+0xe4>)
 8005348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8005352:	f001 f823 	bl	800639c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8005356:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800535a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535c:	2302      	movs	r3, #2
 800535e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005360:	2300      	movs	r3, #0
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005364:	2303      	movs	r3, #3
 8005366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005368:	2308      	movs	r3, #8
 800536a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800536c:	f107 031c 	add.w	r3, r7, #28
 8005370:	4619      	mov	r1, r3
 8005372:	481d      	ldr	r0, [pc, #116]	; (80053e8 <HAL_UART_MspInit+0xe8>)
 8005374:	f000 fc34 	bl	8005be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005378:	e02d      	b.n	80053d6 <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART3)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a1b      	ldr	r2, [pc, #108]	; (80053ec <HAL_UART_MspInit+0xec>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d128      	bne.n	80053d6 <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005384:	4b17      	ldr	r3, [pc, #92]	; (80053e4 <HAL_UART_MspInit+0xe4>)
 8005386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005388:	4a16      	ldr	r2, [pc, #88]	; (80053e4 <HAL_UART_MspInit+0xe4>)
 800538a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800538e:	6593      	str	r3, [r2, #88]	; 0x58
 8005390:	4b14      	ldr	r3, [pc, #80]	; (80053e4 <HAL_UART_MspInit+0xe4>)
 8005392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800539c:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <HAL_UART_MspInit+0xe4>)
 800539e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a0:	4a10      	ldr	r2, [pc, #64]	; (80053e4 <HAL_UART_MspInit+0xe4>)
 80053a2:	f043 0308 	orr.w	r3, r3, #8
 80053a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053a8:	4b0e      	ldr	r3, [pc, #56]	; (80053e4 <HAL_UART_MspInit+0xe4>)
 80053aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80053b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80053b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ba:	2302      	movs	r3, #2
 80053bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053c2:	2303      	movs	r3, #3
 80053c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80053c6:	2307      	movs	r3, #7
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053ca:	f107 031c 	add.w	r3, r7, #28
 80053ce:	4619      	mov	r1, r3
 80053d0:	4807      	ldr	r0, [pc, #28]	; (80053f0 <HAL_UART_MspInit+0xf0>)
 80053d2:	f000 fc05 	bl	8005be0 <HAL_GPIO_Init>
}
 80053d6:	bf00      	nop
 80053d8:	3730      	adds	r7, #48	; 0x30
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40008000 	.word	0x40008000
 80053e4:	40021000 	.word	0x40021000
 80053e8:	48001800 	.word	0x48001800
 80053ec:	40004800 	.word	0x40004800
 80053f0:	48000c00 	.word	0x48000c00

080053f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	; 0x28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053fc:	f107 0314 	add.w	r3, r7, #20
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	605a      	str	r2, [r3, #4]
 8005406:	609a      	str	r2, [r3, #8]
 8005408:	60da      	str	r2, [r3, #12]
 800540a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a17      	ldr	r2, [pc, #92]	; (8005470 <HAL_SPI_MspInit+0x7c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d128      	bne.n	8005468 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005416:	4b17      	ldr	r3, [pc, #92]	; (8005474 <HAL_SPI_MspInit+0x80>)
 8005418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800541a:	4a16      	ldr	r2, [pc, #88]	; (8005474 <HAL_SPI_MspInit+0x80>)
 800541c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005420:	6613      	str	r3, [r2, #96]	; 0x60
 8005422:	4b14      	ldr	r3, [pc, #80]	; (8005474 <HAL_SPI_MspInit+0x80>)
 8005424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005426:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800542e:	4b11      	ldr	r3, [pc, #68]	; (8005474 <HAL_SPI_MspInit+0x80>)
 8005430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005432:	4a10      	ldr	r2, [pc, #64]	; (8005474 <HAL_SPI_MspInit+0x80>)
 8005434:	f043 0301 	orr.w	r3, r3, #1
 8005438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800543a:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <HAL_SPI_MspInit+0x80>)
 800543c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8005446:	23c2      	movs	r3, #194	; 0xc2
 8005448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800544a:	2302      	movs	r3, #2
 800544c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800544e:	2300      	movs	r3, #0
 8005450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005452:	2303      	movs	r3, #3
 8005454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005456:	2305      	movs	r3, #5
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800545a:	f107 0314 	add.w	r3, r7, #20
 800545e:	4619      	mov	r1, r3
 8005460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005464:	f000 fbbc 	bl	8005be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005468:	bf00      	nop
 800546a:	3728      	adds	r7, #40	; 0x28
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40013000 	.word	0x40013000
 8005474:	40021000 	.word	0x40021000

08005478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a0a      	ldr	r2, [pc, #40]	; (80054b0 <HAL_TIM_Base_MspInit+0x38>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d10b      	bne.n	80054a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800548a:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <HAL_TIM_Base_MspInit+0x3c>)
 800548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548e:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <HAL_TIM_Base_MspInit+0x3c>)
 8005490:	f043 0302 	orr.w	r3, r3, #2
 8005494:	6593      	str	r3, [r2, #88]	; 0x58
 8005496:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <HAL_TIM_Base_MspInit+0x3c>)
 8005498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80054a2:	bf00      	nop
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40000400 	.word	0x40000400
 80054b4:	40021000 	.word	0x40021000

080054b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c0:	f107 030c 	add.w	r3, r7, #12
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	605a      	str	r2, [r3, #4]
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	60da      	str	r2, [r3, #12]
 80054ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a11      	ldr	r2, [pc, #68]	; (800551c <HAL_TIM_MspPostInit+0x64>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d11b      	bne.n	8005512 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80054da:	4b11      	ldr	r3, [pc, #68]	; (8005520 <HAL_TIM_MspPostInit+0x68>)
 80054dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054de:	4a10      	ldr	r2, [pc, #64]	; (8005520 <HAL_TIM_MspPostInit+0x68>)
 80054e0:	f043 0310 	orr.w	r3, r3, #16
 80054e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054e6:	4b0e      	ldr	r3, [pc, #56]	; (8005520 <HAL_TIM_MspPostInit+0x68>)
 80054e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ea:	f003 0310 	and.w	r3, r3, #16
 80054ee:	60bb      	str	r3, [r7, #8]
 80054f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PE3     ------> TIM3_CH1
    PE4     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80054f2:	2318      	movs	r3, #24
 80054f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f6:	2302      	movs	r3, #2
 80054f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054fe:	2300      	movs	r3, #0
 8005500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005502:	2302      	movs	r3, #2
 8005504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005506:	f107 030c 	add.w	r3, r7, #12
 800550a:	4619      	mov	r1, r3
 800550c:	4805      	ldr	r0, [pc, #20]	; (8005524 <HAL_TIM_MspPostInit+0x6c>)
 800550e:	f000 fb67 	bl	8005be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005512:	bf00      	nop
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40000400 	.word	0x40000400
 8005520:	40021000 	.word	0x40021000
 8005524:	48001000 	.word	0x48001000

08005528 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005530:	f107 0314 	add.w	r3, r7, #20
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	605a      	str	r2, [r3, #4]
 800553a:	609a      	str	r2, [r3, #8]
 800553c:	60da      	str	r2, [r3, #12]
 800553e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005548:	d154      	bne.n	80055f4 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800554a:	4b2c      	ldr	r3, [pc, #176]	; (80055fc <HAL_PCD_MspInit+0xd4>)
 800554c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554e:	4a2b      	ldr	r2, [pc, #172]	; (80055fc <HAL_PCD_MspInit+0xd4>)
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005556:	4b29      	ldr	r3, [pc, #164]	; (80055fc <HAL_PCD_MspInit+0xd4>)
 8005558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005562:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005568:	2302      	movs	r3, #2
 800556a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556c:	2300      	movs	r3, #0
 800556e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005570:	2303      	movs	r3, #3
 8005572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005574:	230a      	movs	r3, #10
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005578:	f107 0314 	add.w	r3, r7, #20
 800557c:	4619      	mov	r1, r3
 800557e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005582:	f000 fb2d 	bl	8005be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800558a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800558c:	2300      	movs	r3, #0
 800558e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005590:	2300      	movs	r3, #0
 8005592:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005594:	f107 0314 	add.w	r3, r7, #20
 8005598:	4619      	mov	r1, r3
 800559a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800559e:	f000 fb1f 	bl	8005be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80055a2:	4b16      	ldr	r3, [pc, #88]	; (80055fc <HAL_PCD_MspInit+0xd4>)
 80055a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a6:	4a15      	ldr	r2, [pc, #84]	; (80055fc <HAL_PCD_MspInit+0xd4>)
 80055a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055ae:	4b13      	ldr	r3, [pc, #76]	; (80055fc <HAL_PCD_MspInit+0xd4>)
 80055b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ba:	4b10      	ldr	r3, [pc, #64]	; (80055fc <HAL_PCD_MspInit+0xd4>)
 80055bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d114      	bne.n	80055f0 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c6:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <HAL_PCD_MspInit+0xd4>)
 80055c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ca:	4a0c      	ldr	r2, [pc, #48]	; (80055fc <HAL_PCD_MspInit+0xd4>)
 80055cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d0:	6593      	str	r3, [r2, #88]	; 0x58
 80055d2:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <HAL_PCD_MspInit+0xd4>)
 80055d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055da:	60bb      	str	r3, [r7, #8]
 80055dc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80055de:	f000 fecd 	bl	800637c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <HAL_PCD_MspInit+0xd4>)
 80055e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e6:	4a05      	ldr	r2, [pc, #20]	; (80055fc <HAL_PCD_MspInit+0xd4>)
 80055e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ec:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80055ee:	e001      	b.n	80055f4 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80055f0:	f000 fec4 	bl	800637c <HAL_PWREx_EnableVddUSB>
}
 80055f4:	bf00      	nop
 80055f6:	3728      	adds	r7, #40	; 0x28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40021000 	.word	0x40021000

08005600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005604:	bf00      	nop
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800560e:	b480      	push	{r7}
 8005610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005612:	e7fe      	b.n	8005612 <HardFault_Handler+0x4>

08005614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005618:	e7fe      	b.n	8005618 <MemManage_Handler+0x4>

0800561a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800561a:	b480      	push	{r7}
 800561c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800561e:	e7fe      	b.n	800561e <BusFault_Handler+0x4>

08005620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005624:	e7fe      	b.n	8005624 <UsageFault_Handler+0x4>

08005626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005626:	b480      	push	{r7}
 8005628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800562a:	bf00      	nop
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005638:	bf00      	nop
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005642:	b480      	push	{r7}
 8005644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005646:	bf00      	nop
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005654:	f000 f972 	bl	800593c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005658:	bf00      	nop
 800565a:	bd80      	pop	{r7, pc}

0800565c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005660:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005664:	f000 fc66 	bl	8005f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005668:	bf00      	nop
 800566a:	bd80      	pop	{r7, pc}

0800566c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
	return 1;
 8005670:	2301      	movs	r3, #1
}
 8005672:	4618      	mov	r0, r3
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <_kill>:

int _kill(int pid, int sig)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005686:	f005 ff8d 	bl	800b5a4 <__errno>
 800568a:	4602      	mov	r2, r0
 800568c:	2316      	movs	r3, #22
 800568e:	6013      	str	r3, [r2, #0]
	return -1;
 8005690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005694:	4618      	mov	r0, r3
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <_exit>:

void _exit (int status)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80056a4:	f04f 31ff 	mov.w	r1, #4294967295
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7ff ffe7 	bl	800567c <_kill>
	while (1) {}		/* Make sure we hang here */
 80056ae:	e7fe      	b.n	80056ae <_exit+0x12>

080056b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056bc:	2300      	movs	r3, #0
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	e00a      	b.n	80056d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80056c2:	f3af 8000 	nop.w
 80056c6:	4601      	mov	r1, r0
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	60ba      	str	r2, [r7, #8]
 80056ce:	b2ca      	uxtb	r2, r1
 80056d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	3301      	adds	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	429a      	cmp	r2, r3
 80056de:	dbf0      	blt.n	80056c2 <_read+0x12>
	}

return len;
 80056e0:	687b      	ldr	r3, [r7, #4]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <_write>:

extern UART_HandleTypeDef hlpuart1;

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
	{
		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
	}
	return len;*/
	HAL_UART_Transmit(&hlpuart1, ptr, len , HAL_MAX_DELAY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005700:	68b9      	ldr	r1, [r7, #8]
 8005702:	4804      	ldr	r0, [pc, #16]	; (8005714 <_write+0x28>)
 8005704:	f004 f806 	bl	8009714 <HAL_UART_Transmit>
	return len;
 8005708:	687b      	ldr	r3, [r7, #4]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	200008f8 	.word	0x200008f8

08005718 <_close>:

int _close(int file)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	return -1;
 8005720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005740:	605a      	str	r2, [r3, #4]
	return 0;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <_isatty>:

int _isatty(int file)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	return 1;
 8005758:	2301      	movs	r3, #1
}
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005766:	b480      	push	{r7}
 8005768:	b085      	sub	sp, #20
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
	return 0;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005788:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <_sbrk+0x50>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d102      	bne.n	8005796 <_sbrk+0x16>
		heap_end = &end;
 8005790:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <_sbrk+0x50>)
 8005792:	4a10      	ldr	r2, [pc, #64]	; (80057d4 <_sbrk+0x54>)
 8005794:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005796:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <_sbrk+0x50>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800579c:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <_sbrk+0x50>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4413      	add	r3, r2
 80057a4:	466a      	mov	r2, sp
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d907      	bls.n	80057ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80057aa:	f005 fefb 	bl	800b5a4 <__errno>
 80057ae:	4602      	mov	r2, r0
 80057b0:	230c      	movs	r3, #12
 80057b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80057b4:	f04f 33ff 	mov.w	r3, #4294967295
 80057b8:	e006      	b.n	80057c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80057ba:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <_sbrk+0x50>)
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4413      	add	r3, r2
 80057c2:	4a03      	ldr	r2, [pc, #12]	; (80057d0 <_sbrk+0x50>)
 80057c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80057c6:	68fb      	ldr	r3, [r7, #12]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20000158 	.word	0x20000158
 80057d4:	20000a08 	.word	0x20000a08

080057d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80057dc:	4b17      	ldr	r3, [pc, #92]	; (800583c <SystemInit+0x64>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e2:	4a16      	ldr	r2, [pc, #88]	; (800583c <SystemInit+0x64>)
 80057e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80057ec:	4b14      	ldr	r3, [pc, #80]	; (8005840 <SystemInit+0x68>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a13      	ldr	r2, [pc, #76]	; (8005840 <SystemInit+0x68>)
 80057f2:	f043 0301 	orr.w	r3, r3, #1
 80057f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80057f8:	4b11      	ldr	r3, [pc, #68]	; (8005840 <SystemInit+0x68>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80057fe:	4b10      	ldr	r3, [pc, #64]	; (8005840 <SystemInit+0x68>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a0f      	ldr	r2, [pc, #60]	; (8005840 <SystemInit+0x68>)
 8005804:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005808:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800580c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800580e:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <SystemInit+0x68>)
 8005810:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005814:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <SystemInit+0x68>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a09      	ldr	r2, [pc, #36]	; (8005840 <SystemInit+0x68>)
 800581c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005820:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <SystemInit+0x68>)
 8005824:	2200      	movs	r2, #0
 8005826:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005828:	4b04      	ldr	r3, [pc, #16]	; (800583c <SystemInit+0x64>)
 800582a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800582e:	609a      	str	r2, [r3, #8]
#endif
}
 8005830:	bf00      	nop
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	e000ed00 	.word	0xe000ed00
 8005840:	40021000 	.word	0x40021000

08005844 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800587c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005848:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800584a:	e003      	b.n	8005854 <LoopCopyDataInit>

0800584c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800584c:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800584e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005850:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005852:	3104      	adds	r1, #4

08005854 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005854:	480b      	ldr	r0, [pc, #44]	; (8005884 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005856:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005858:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800585a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800585c:	d3f6      	bcc.n	800584c <CopyDataInit>
	ldr	r2, =_sbss
 800585e:	4a0b      	ldr	r2, [pc, #44]	; (800588c <LoopForever+0x12>)
	b	LoopFillZerobss
 8005860:	e002      	b.n	8005868 <LoopFillZerobss>

08005862 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005862:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005864:	f842 3b04 	str.w	r3, [r2], #4

08005868 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005868:	4b09      	ldr	r3, [pc, #36]	; (8005890 <LoopForever+0x16>)
	cmp	r2, r3
 800586a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800586c:	d3f9      	bcc.n	8005862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800586e:	f7ff ffb3 	bl	80057d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005872:	f005 feaf 	bl	800b5d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005876:	f7ff f9a7 	bl	8004bc8 <main>

0800587a <LoopForever>:

LoopForever:
    b LoopForever
 800587a:	e7fe      	b.n	800587a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800587c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8005880:	0800d1e0 	.word	0x0800d1e0
	ldr	r0, =_sdata
 8005884:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005888:	200000d4 	.word	0x200000d4
	ldr	r2, =_sbss
 800588c:	200000d8 	.word	0x200000d8
	ldr	r3, = _ebss
 8005890:	20000a04 	.word	0x20000a04

08005894 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005894:	e7fe      	b.n	8005894 <ADC1_IRQHandler>

08005896 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800589c:	2300      	movs	r3, #0
 800589e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058a0:	2003      	movs	r0, #3
 80058a2:	f000 f95b 	bl	8005b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80058a6:	2000      	movs	r0, #0
 80058a8:	f000 f80e 	bl	80058c8 <HAL_InitTick>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	71fb      	strb	r3, [r7, #7]
 80058b6:	e001      	b.n	80058bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80058b8:	f7ff fcfe 	bl	80052b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80058bc:	79fb      	ldrb	r3, [r7, #7]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80058d4:	4b16      	ldr	r3, [pc, #88]	; (8005930 <HAL_InitTick+0x68>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d022      	beq.n	8005922 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80058dc:	4b15      	ldr	r3, [pc, #84]	; (8005934 <HAL_InitTick+0x6c>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b13      	ldr	r3, [pc, #76]	; (8005930 <HAL_InitTick+0x68>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80058e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80058ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 f968 	bl	8005bc6 <HAL_SYSTICK_Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10f      	bne.n	800591c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b0f      	cmp	r3, #15
 8005900:	d809      	bhi.n	8005916 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005902:	2200      	movs	r2, #0
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	f04f 30ff 	mov.w	r0, #4294967295
 800590a:	f000 f932 	bl	8005b72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800590e:	4a0a      	ldr	r2, [pc, #40]	; (8005938 <HAL_InitTick+0x70>)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	e007      	b.n	8005926 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	73fb      	strb	r3, [r7, #15]
 800591a:	e004      	b.n	8005926 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
 8005920:	e001      	b.n	8005926 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005926:	7bfb      	ldrb	r3, [r7, #15]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	2000006c 	.word	0x2000006c
 8005934:	20000064 	.word	0x20000064
 8005938:	20000068 	.word	0x20000068

0800593c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005940:	4b05      	ldr	r3, [pc, #20]	; (8005958 <HAL_IncTick+0x1c>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	4b05      	ldr	r3, [pc, #20]	; (800595c <HAL_IncTick+0x20>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4413      	add	r3, r2
 800594a:	4a03      	ldr	r2, [pc, #12]	; (8005958 <HAL_IncTick+0x1c>)
 800594c:	6013      	str	r3, [r2, #0]
}
 800594e:	bf00      	nop
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	200009fc 	.word	0x200009fc
 800595c:	2000006c 	.word	0x2000006c

08005960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  return uwTick;
 8005964:	4b03      	ldr	r3, [pc, #12]	; (8005974 <HAL_GetTick+0x14>)
 8005966:	681b      	ldr	r3, [r3, #0]
}
 8005968:	4618      	mov	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	200009fc 	.word	0x200009fc

08005978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005980:	f7ff ffee 	bl	8005960 <HAL_GetTick>
 8005984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005990:	d004      	beq.n	800599c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005992:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <HAL_Delay+0x40>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4413      	add	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800599c:	bf00      	nop
 800599e:	f7ff ffdf 	bl	8005960 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d8f7      	bhi.n	800599e <HAL_Delay+0x26>
  {
  }
}
 80059ae:	bf00      	nop
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	2000006c 	.word	0x2000006c

080059bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059cc:	4b0c      	ldr	r3, [pc, #48]	; (8005a00 <__NVIC_SetPriorityGrouping+0x44>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059d8:	4013      	ands	r3, r2
 80059da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059ee:	4a04      	ldr	r2, [pc, #16]	; (8005a00 <__NVIC_SetPriorityGrouping+0x44>)
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	60d3      	str	r3, [r2, #12]
}
 80059f4:	bf00      	nop
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	e000ed00 	.word	0xe000ed00

08005a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a08:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <__NVIC_GetPriorityGrouping+0x18>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	0a1b      	lsrs	r3, r3, #8
 8005a0e:	f003 0307 	and.w	r3, r3, #7
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	e000ed00 	.word	0xe000ed00

08005a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	db0b      	blt.n	8005a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	f003 021f 	and.w	r2, r3, #31
 8005a38:	4907      	ldr	r1, [pc, #28]	; (8005a58 <__NVIC_EnableIRQ+0x38>)
 8005a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	2001      	movs	r0, #1
 8005a42:	fa00 f202 	lsl.w	r2, r0, r2
 8005a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	e000e100 	.word	0xe000e100

08005a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	4603      	mov	r3, r0
 8005a64:	6039      	str	r1, [r7, #0]
 8005a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	db0a      	blt.n	8005a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	490c      	ldr	r1, [pc, #48]	; (8005aa8 <__NVIC_SetPriority+0x4c>)
 8005a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a7a:	0112      	lsls	r2, r2, #4
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	440b      	add	r3, r1
 8005a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a84:	e00a      	b.n	8005a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	4908      	ldr	r1, [pc, #32]	; (8005aac <__NVIC_SetPriority+0x50>)
 8005a8c:	79fb      	ldrb	r3, [r7, #7]
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	3b04      	subs	r3, #4
 8005a94:	0112      	lsls	r2, r2, #4
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	440b      	add	r3, r1
 8005a9a:	761a      	strb	r2, [r3, #24]
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	e000e100 	.word	0xe000e100
 8005aac:	e000ed00 	.word	0xe000ed00

08005ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b089      	sub	sp, #36	; 0x24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	f1c3 0307 	rsb	r3, r3, #7
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	bf28      	it	cs
 8005ace:	2304      	movcs	r3, #4
 8005ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	2b06      	cmp	r3, #6
 8005ad8:	d902      	bls.n	8005ae0 <NVIC_EncodePriority+0x30>
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	3b03      	subs	r3, #3
 8005ade:	e000      	b.n	8005ae2 <NVIC_EncodePriority+0x32>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	43da      	mvns	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	401a      	ands	r2, r3
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005af8:	f04f 31ff 	mov.w	r1, #4294967295
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	fa01 f303 	lsl.w	r3, r1, r3
 8005b02:	43d9      	mvns	r1, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b08:	4313      	orrs	r3, r2
         );
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3724      	adds	r7, #36	; 0x24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b28:	d301      	bcc.n	8005b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e00f      	b.n	8005b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b2e:	4a0a      	ldr	r2, [pc, #40]	; (8005b58 <SysTick_Config+0x40>)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b36:	210f      	movs	r1, #15
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3c:	f7ff ff8e 	bl	8005a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b40:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <SysTick_Config+0x40>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b46:	4b04      	ldr	r3, [pc, #16]	; (8005b58 <SysTick_Config+0x40>)
 8005b48:	2207      	movs	r2, #7
 8005b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	e000e010 	.word	0xe000e010

08005b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff ff29 	bl	80059bc <__NVIC_SetPriorityGrouping>
}
 8005b6a:	bf00      	nop
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b086      	sub	sp, #24
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	4603      	mov	r3, r0
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607a      	str	r2, [r7, #4]
 8005b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b84:	f7ff ff3e 	bl	8005a04 <__NVIC_GetPriorityGrouping>
 8005b88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	6978      	ldr	r0, [r7, #20]
 8005b90:	f7ff ff8e 	bl	8005ab0 <NVIC_EncodePriority>
 8005b94:	4602      	mov	r2, r0
 8005b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff ff5d 	bl	8005a5c <__NVIC_SetPriority>
}
 8005ba2:	bf00      	nop
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7ff ff31 	bl	8005a20 <__NVIC_EnableIRQ>
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff ffa2 	bl	8005b18 <SysTick_Config>
 8005bd4:	4603      	mov	r3, r0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bee:	e166      	b.n	8005ebe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 8158 	beq.w	8005eb8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d003      	beq.n	8005c18 <HAL_GPIO_Init+0x38>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b12      	cmp	r3, #18
 8005c16:	d123      	bne.n	8005c60 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	08da      	lsrs	r2, r3, #3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3208      	adds	r2, #8
 8005c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	220f      	movs	r2, #15
 8005c30:	fa02 f303 	lsl.w	r3, r2, r3
 8005c34:	43db      	mvns	r3, r3
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	08da      	lsrs	r2, r3, #3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3208      	adds	r2, #8
 8005c5a:	6939      	ldr	r1, [r7, #16]
 8005c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	2203      	movs	r2, #3
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	43db      	mvns	r3, r3
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4013      	ands	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f003 0203 	and.w	r2, r3, #3
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d00b      	beq.n	8005cb4 <HAL_GPIO_Init+0xd4>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d007      	beq.n	8005cb4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ca8:	2b11      	cmp	r3, #17
 8005caa:	d003      	beq.n	8005cb4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2b12      	cmp	r3, #18
 8005cb2:	d130      	bne.n	8005d16 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cea:	2201      	movs	r2, #1
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	091b      	lsrs	r3, r3, #4
 8005d00:	f003 0201 	and.w	r2, r3, #1
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	2203      	movs	r2, #3
 8005d22:	fa02 f303 	lsl.w	r3, r2, r3
 8005d26:	43db      	mvns	r3, r3
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 80b2 	beq.w	8005eb8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d54:	4b61      	ldr	r3, [pc, #388]	; (8005edc <HAL_GPIO_Init+0x2fc>)
 8005d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d58:	4a60      	ldr	r2, [pc, #384]	; (8005edc <HAL_GPIO_Init+0x2fc>)
 8005d5a:	f043 0301 	orr.w	r3, r3, #1
 8005d5e:	6613      	str	r3, [r2, #96]	; 0x60
 8005d60:	4b5e      	ldr	r3, [pc, #376]	; (8005edc <HAL_GPIO_Init+0x2fc>)
 8005d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	60bb      	str	r3, [r7, #8]
 8005d6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005d6c:	4a5c      	ldr	r2, [pc, #368]	; (8005ee0 <HAL_GPIO_Init+0x300>)
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	089b      	lsrs	r3, r3, #2
 8005d72:	3302      	adds	r3, #2
 8005d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f003 0303 	and.w	r3, r3, #3
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	220f      	movs	r2, #15
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005d96:	d02b      	beq.n	8005df0 <HAL_GPIO_Init+0x210>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a52      	ldr	r2, [pc, #328]	; (8005ee4 <HAL_GPIO_Init+0x304>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d025      	beq.n	8005dec <HAL_GPIO_Init+0x20c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a51      	ldr	r2, [pc, #324]	; (8005ee8 <HAL_GPIO_Init+0x308>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d01f      	beq.n	8005de8 <HAL_GPIO_Init+0x208>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a50      	ldr	r2, [pc, #320]	; (8005eec <HAL_GPIO_Init+0x30c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d019      	beq.n	8005de4 <HAL_GPIO_Init+0x204>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a4f      	ldr	r2, [pc, #316]	; (8005ef0 <HAL_GPIO_Init+0x310>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d013      	beq.n	8005de0 <HAL_GPIO_Init+0x200>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a4e      	ldr	r2, [pc, #312]	; (8005ef4 <HAL_GPIO_Init+0x314>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00d      	beq.n	8005ddc <HAL_GPIO_Init+0x1fc>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a4d      	ldr	r2, [pc, #308]	; (8005ef8 <HAL_GPIO_Init+0x318>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d007      	beq.n	8005dd8 <HAL_GPIO_Init+0x1f8>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a4c      	ldr	r2, [pc, #304]	; (8005efc <HAL_GPIO_Init+0x31c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d101      	bne.n	8005dd4 <HAL_GPIO_Init+0x1f4>
 8005dd0:	2307      	movs	r3, #7
 8005dd2:	e00e      	b.n	8005df2 <HAL_GPIO_Init+0x212>
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	e00c      	b.n	8005df2 <HAL_GPIO_Init+0x212>
 8005dd8:	2306      	movs	r3, #6
 8005dda:	e00a      	b.n	8005df2 <HAL_GPIO_Init+0x212>
 8005ddc:	2305      	movs	r3, #5
 8005dde:	e008      	b.n	8005df2 <HAL_GPIO_Init+0x212>
 8005de0:	2304      	movs	r3, #4
 8005de2:	e006      	b.n	8005df2 <HAL_GPIO_Init+0x212>
 8005de4:	2303      	movs	r3, #3
 8005de6:	e004      	b.n	8005df2 <HAL_GPIO_Init+0x212>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e002      	b.n	8005df2 <HAL_GPIO_Init+0x212>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <HAL_GPIO_Init+0x212>
 8005df0:	2300      	movs	r3, #0
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	f002 0203 	and.w	r2, r2, #3
 8005df8:	0092      	lsls	r2, r2, #2
 8005dfa:	4093      	lsls	r3, r2
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005e02:	4937      	ldr	r1, [pc, #220]	; (8005ee0 <HAL_GPIO_Init+0x300>)
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	089b      	lsrs	r3, r3, #2
 8005e08:	3302      	adds	r3, #2
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005e10:	4b3b      	ldr	r3, [pc, #236]	; (8005f00 <HAL_GPIO_Init+0x320>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e34:	4a32      	ldr	r2, [pc, #200]	; (8005f00 <HAL_GPIO_Init+0x320>)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005e3a:	4b31      	ldr	r3, [pc, #196]	; (8005f00 <HAL_GPIO_Init+0x320>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	43db      	mvns	r3, r3
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4013      	ands	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005e5e:	4a28      	ldr	r2, [pc, #160]	; (8005f00 <HAL_GPIO_Init+0x320>)
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e64:	4b26      	ldr	r3, [pc, #152]	; (8005f00 <HAL_GPIO_Init+0x320>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4013      	ands	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005e88:	4a1d      	ldr	r2, [pc, #116]	; (8005f00 <HAL_GPIO_Init+0x320>)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005e8e:	4b1c      	ldr	r3, [pc, #112]	; (8005f00 <HAL_GPIO_Init+0x320>)
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	43db      	mvns	r3, r3
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005eb2:	4a13      	ldr	r2, [pc, #76]	; (8005f00 <HAL_GPIO_Init+0x320>)
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f47f ae91 	bne.w	8005bf0 <HAL_GPIO_Init+0x10>
  }
}
 8005ece:	bf00      	nop
 8005ed0:	371c      	adds	r7, #28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	48000400 	.word	0x48000400
 8005ee8:	48000800 	.word	0x48000800
 8005eec:	48000c00 	.word	0x48000c00
 8005ef0:	48001000 	.word	0x48001000
 8005ef4:	48001400 	.word	0x48001400
 8005ef8:	48001800 	.word	0x48001800
 8005efc:	48001c00 	.word	0x48001c00
 8005f00:	40010400 	.word	0x40010400

08005f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	807b      	strh	r3, [r7, #2]
 8005f10:	4613      	mov	r3, r2
 8005f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f14:	787b      	ldrb	r3, [r7, #1]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f1a:	887a      	ldrh	r2, [r7, #2]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f20:	e002      	b.n	8005f28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f22:	887a      	ldrh	r2, [r7, #2]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005f3e:	4b08      	ldr	r3, [pc, #32]	; (8005f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f40:	695a      	ldr	r2, [r3, #20]
 8005f42:	88fb      	ldrh	r3, [r7, #6]
 8005f44:	4013      	ands	r3, r2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d006      	beq.n	8005f58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f4a:	4a05      	ldr	r2, [pc, #20]	; (8005f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f4c:	88fb      	ldrh	r3, [r7, #6]
 8005f4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f50:	88fb      	ldrh	r3, [r7, #6]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe fe24 	bl	8004ba0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40010400 	.word	0x40010400

08005f64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f66:	b08f      	sub	sp, #60	; 0x3c
 8005f68:	af0a      	add	r7, sp, #40	; 0x28
 8005f6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e116      	b.n	80061a4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d106      	bne.n	8005f96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff fac9 	bl	8005528 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2203      	movs	r2, #3
 8005f9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d102      	bne.n	8005fb0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f005 f8ab 	bl	800b110 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	687e      	ldr	r6, [r7, #4]
 8005fc2:	466d      	mov	r5, sp
 8005fc4:	f106 0410 	add.w	r4, r6, #16
 8005fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fd8:	1d33      	adds	r3, r6, #4
 8005fda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fdc:	6838      	ldr	r0, [r7, #0]
 8005fde:	f005 f845 	bl	800b06c <USB_CoreInit>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e0d7      	b.n	80061a4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f005 f899 	bl	800b132 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006000:	2300      	movs	r3, #0
 8006002:	73fb      	strb	r3, [r7, #15]
 8006004:	e04a      	b.n	800609c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006006:	7bfa      	ldrb	r2, [r7, #15]
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	333d      	adds	r3, #61	; 0x3d
 8006016:	2201      	movs	r2, #1
 8006018:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800601a:	7bfa      	ldrb	r2, [r7, #15]
 800601c:	6879      	ldr	r1, [r7, #4]
 800601e:	4613      	mov	r3, r2
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	440b      	add	r3, r1
 8006028:	333c      	adds	r3, #60	; 0x3c
 800602a:	7bfa      	ldrb	r2, [r7, #15]
 800602c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800602e:	7bfa      	ldrb	r2, [r7, #15]
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	b298      	uxth	r0, r3
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	4613      	mov	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	440b      	add	r3, r1
 8006040:	3342      	adds	r3, #66	; 0x42
 8006042:	4602      	mov	r2, r0
 8006044:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006046:	7bfa      	ldrb	r2, [r7, #15]
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	4613      	mov	r3, r2
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	1a9b      	subs	r3, r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	440b      	add	r3, r1
 8006054:	333f      	adds	r3, #63	; 0x3f
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800605a:	7bfa      	ldrb	r2, [r7, #15]
 800605c:	6879      	ldr	r1, [r7, #4]
 800605e:	4613      	mov	r3, r2
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	1a9b      	subs	r3, r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	440b      	add	r3, r1
 8006068:	3344      	adds	r3, #68	; 0x44
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800606e:	7bfa      	ldrb	r2, [r7, #15]
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	4613      	mov	r3, r2
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	1a9b      	subs	r3, r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	440b      	add	r3, r1
 800607c:	3348      	adds	r3, #72	; 0x48
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006082:	7bfa      	ldrb	r2, [r7, #15]
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	440b      	add	r3, r1
 8006090:	3350      	adds	r3, #80	; 0x50
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006096:	7bfb      	ldrb	r3, [r7, #15]
 8006098:	3301      	adds	r3, #1
 800609a:	73fb      	strb	r3, [r7, #15]
 800609c:	7bfa      	ldrb	r2, [r7, #15]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d3af      	bcc.n	8006006 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060a6:	2300      	movs	r3, #0
 80060a8:	73fb      	strb	r3, [r7, #15]
 80060aa:	e044      	b.n	8006136 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80060ac:	7bfa      	ldrb	r2, [r7, #15]
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	4613      	mov	r3, r2
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	1a9b      	subs	r3, r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	440b      	add	r3, r1
 80060ba:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80060be:	2200      	movs	r2, #0
 80060c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80060c2:	7bfa      	ldrb	r2, [r7, #15]
 80060c4:	6879      	ldr	r1, [r7, #4]
 80060c6:	4613      	mov	r3, r2
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	1a9b      	subs	r3, r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	440b      	add	r3, r1
 80060d0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80060d4:	7bfa      	ldrb	r2, [r7, #15]
 80060d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80060d8:	7bfa      	ldrb	r2, [r7, #15]
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	4613      	mov	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	1a9b      	subs	r3, r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	440b      	add	r3, r1
 80060e6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80060ea:	2200      	movs	r2, #0
 80060ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80060ee:	7bfa      	ldrb	r2, [r7, #15]
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	1a9b      	subs	r3, r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006104:	7bfa      	ldrb	r2, [r7, #15]
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	4613      	mov	r3, r2
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	1a9b      	subs	r3, r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800611a:	7bfa      	ldrb	r2, [r7, #15]
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	4613      	mov	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	440b      	add	r3, r1
 8006128:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	3301      	adds	r3, #1
 8006134:	73fb      	strb	r3, [r7, #15]
 8006136:	7bfa      	ldrb	r2, [r7, #15]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	429a      	cmp	r2, r3
 800613e:	d3b5      	bcc.n	80060ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	603b      	str	r3, [r7, #0]
 8006146:	687e      	ldr	r6, [r7, #4]
 8006148:	466d      	mov	r5, sp
 800614a:	f106 0410 	add.w	r4, r6, #16
 800614e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006156:	e894 0003 	ldmia.w	r4, {r0, r1}
 800615a:	e885 0003 	stmia.w	r5, {r0, r1}
 800615e:	1d33      	adds	r3, r6, #4
 8006160:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006162:	6838      	ldr	r0, [r7, #0]
 8006164:	f005 f810 	bl	800b188 <USB_DevInit>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d005      	beq.n	800617a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2202      	movs	r2, #2
 8006172:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e014      	b.n	80061a4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	2b01      	cmp	r3, #1
 8006190:	d102      	bne.n	8006198 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f80a 	bl	80061ac <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4618      	mov	r0, r3
 800619e:	f005 f996 	bl	800b4ce <USB_DevDisconnect>

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061de:	f043 0303 	orr.w	r3, r3, #3
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80061f4:	b480      	push	{r7}
 80061f6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80061f8:	4b0d      	ldr	r3, [pc, #52]	; (8006230 <HAL_PWREx_GetVoltageRange+0x3c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006204:	d102      	bne.n	800620c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800620a:	e00b      	b.n	8006224 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800620c:	4b08      	ldr	r3, [pc, #32]	; (8006230 <HAL_PWREx_GetVoltageRange+0x3c>)
 800620e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621a:	d102      	bne.n	8006222 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800621c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006220:	e000      	b.n	8006224 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006222:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006224:	4618      	mov	r0, r3
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40007000 	.word	0x40007000

08006234 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d141      	bne.n	80062c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006242:	4b4b      	ldr	r3, [pc, #300]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800624a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800624e:	d131      	bne.n	80062b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006250:	4b47      	ldr	r3, [pc, #284]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006256:	4a46      	ldr	r2, [pc, #280]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800625c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006260:	4b43      	ldr	r3, [pc, #268]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006268:	4a41      	ldr	r2, [pc, #260]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800626a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800626e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006270:	4b40      	ldr	r3, [pc, #256]	; (8006374 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2232      	movs	r2, #50	; 0x32
 8006276:	fb02 f303 	mul.w	r3, r2, r3
 800627a:	4a3f      	ldr	r2, [pc, #252]	; (8006378 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800627c:	fba2 2303 	umull	r2, r3, r2, r3
 8006280:	0c9b      	lsrs	r3, r3, #18
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006286:	e002      	b.n	800628e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3b01      	subs	r3, #1
 800628c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800628e:	4b38      	ldr	r3, [pc, #224]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629a:	d102      	bne.n	80062a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f2      	bne.n	8006288 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062a2:	4b33      	ldr	r3, [pc, #204]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ae:	d158      	bne.n	8006362 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e057      	b.n	8006364 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062b4:	4b2e      	ldr	r3, [pc, #184]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062ba:	4a2d      	ldr	r2, [pc, #180]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80062c4:	e04d      	b.n	8006362 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062cc:	d141      	bne.n	8006352 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80062ce:	4b28      	ldr	r3, [pc, #160]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062da:	d131      	bne.n	8006340 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062dc:	4b24      	ldr	r3, [pc, #144]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062e2:	4a23      	ldr	r2, [pc, #140]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062ec:	4b20      	ldr	r3, [pc, #128]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80062f4:	4a1e      	ldr	r2, [pc, #120]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80062fc:	4b1d      	ldr	r3, [pc, #116]	; (8006374 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2232      	movs	r2, #50	; 0x32
 8006302:	fb02 f303 	mul.w	r3, r2, r3
 8006306:	4a1c      	ldr	r2, [pc, #112]	; (8006378 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006308:	fba2 2303 	umull	r2, r3, r2, r3
 800630c:	0c9b      	lsrs	r3, r3, #18
 800630e:	3301      	adds	r3, #1
 8006310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006312:	e002      	b.n	800631a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	3b01      	subs	r3, #1
 8006318:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800631a:	4b15      	ldr	r3, [pc, #84]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006326:	d102      	bne.n	800632e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1f2      	bne.n	8006314 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800632e:	4b10      	ldr	r3, [pc, #64]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633a:	d112      	bne.n	8006362 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e011      	b.n	8006364 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006340:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006346:	4a0a      	ldr	r2, [pc, #40]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800634c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006350:	e007      	b.n	8006362 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006352:	4b07      	ldr	r3, [pc, #28]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800635a:	4a05      	ldr	r2, [pc, #20]	; (8006370 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800635c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006360:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	40007000 	.word	0x40007000
 8006374:	20000064 	.word	0x20000064
 8006378:	431bde83 	.word	0x431bde83

0800637c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006380:	4b05      	ldr	r3, [pc, #20]	; (8006398 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	4a04      	ldr	r2, [pc, #16]	; (8006398 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800638a:	6053      	str	r3, [r2, #4]
}
 800638c:	bf00      	nop
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	40007000 	.word	0x40007000

0800639c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	4a04      	ldr	r2, [pc, #16]	; (80063b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80063a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063aa:	6053      	str	r3, [r2, #4]
}
 80063ac:	bf00      	nop
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40007000 	.word	0x40007000

080063bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e3db      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ce:	4ba4      	ldr	r3, [pc, #656]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 030c 	and.w	r3, r3, #12
 80063d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063d8:	4ba1      	ldr	r3, [pc, #644]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f003 0303 	and.w	r3, r3, #3
 80063e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0310 	and.w	r3, r3, #16
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 80e1 	beq.w	80065b2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <HAL_RCC_OscConfig+0x4a>
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	2b0c      	cmp	r3, #12
 80063fa:	f040 8088 	bne.w	800650e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b01      	cmp	r3, #1
 8006402:	f040 8084 	bne.w	800650e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006406:	4b96      	ldr	r3, [pc, #600]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d005      	beq.n	800641e <HAL_RCC_OscConfig+0x62>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e3b3      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1a      	ldr	r2, [r3, #32]
 8006422:	4b8f      	ldr	r3, [pc, #572]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b00      	cmp	r3, #0
 800642c:	d004      	beq.n	8006438 <HAL_RCC_OscConfig+0x7c>
 800642e:	4b8c      	ldr	r3, [pc, #560]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006436:	e005      	b.n	8006444 <HAL_RCC_OscConfig+0x88>
 8006438:	4b89      	ldr	r3, [pc, #548]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 800643a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800643e:	091b      	lsrs	r3, r3, #4
 8006440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006444:	4293      	cmp	r3, r2
 8006446:	d223      	bcs.n	8006490 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	4618      	mov	r0, r3
 800644e:	f000 fd91 	bl	8006f74 <RCC_SetFlashLatencyFromMSIRange>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e394      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800645c:	4b80      	ldr	r3, [pc, #512]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a7f      	ldr	r2, [pc, #508]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006462:	f043 0308 	orr.w	r3, r3, #8
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	4b7d      	ldr	r3, [pc, #500]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	497a      	ldr	r1, [pc, #488]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006476:	4313      	orrs	r3, r2
 8006478:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800647a:	4b79      	ldr	r3, [pc, #484]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	4975      	ldr	r1, [pc, #468]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 800648a:	4313      	orrs	r3, r2
 800648c:	604b      	str	r3, [r1, #4]
 800648e:	e022      	b.n	80064d6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006490:	4b73      	ldr	r3, [pc, #460]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a72      	ldr	r2, [pc, #456]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006496:	f043 0308 	orr.w	r3, r3, #8
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	4b70      	ldr	r3, [pc, #448]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	496d      	ldr	r1, [pc, #436]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064ae:	4b6c      	ldr	r3, [pc, #432]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	4968      	ldr	r1, [pc, #416]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fd54 	bl	8006f74 <RCC_SetFlashLatencyFromMSIRange>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e357      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064d6:	f000 fc8b 	bl	8006df0 <HAL_RCC_GetSysClockFreq>
 80064da:	4601      	mov	r1, r0
 80064dc:	4b60      	ldr	r3, [pc, #384]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	091b      	lsrs	r3, r3, #4
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	4a5f      	ldr	r2, [pc, #380]	; (8006664 <HAL_RCC_OscConfig+0x2a8>)
 80064e8:	5cd3      	ldrb	r3, [r2, r3]
 80064ea:	f003 031f 	and.w	r3, r3, #31
 80064ee:	fa21 f303 	lsr.w	r3, r1, r3
 80064f2:	4a5d      	ldr	r2, [pc, #372]	; (8006668 <HAL_RCC_OscConfig+0x2ac>)
 80064f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80064f6:	4b5d      	ldr	r3, [pc, #372]	; (800666c <HAL_RCC_OscConfig+0x2b0>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff f9e4 	bl	80058c8 <HAL_InitTick>
 8006500:	4603      	mov	r3, r0
 8006502:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006504:	7bfb      	ldrb	r3, [r7, #15]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d052      	beq.n	80065b0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	e33b      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d032      	beq.n	800657c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006516:	4b52      	ldr	r3, [pc, #328]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a51      	ldr	r2, [pc, #324]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 800651c:	f043 0301 	orr.w	r3, r3, #1
 8006520:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006522:	f7ff fa1d 	bl	8005960 <HAL_GetTick>
 8006526:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006528:	e008      	b.n	800653c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800652a:	f7ff fa19 	bl	8005960 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d901      	bls.n	800653c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e324      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800653c:	4b48      	ldr	r3, [pc, #288]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d0f0      	beq.n	800652a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006548:	4b45      	ldr	r3, [pc, #276]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a44      	ldr	r2, [pc, #272]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 800654e:	f043 0308 	orr.w	r3, r3, #8
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	4b42      	ldr	r3, [pc, #264]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	493f      	ldr	r1, [pc, #252]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006562:	4313      	orrs	r3, r2
 8006564:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006566:	4b3e      	ldr	r3, [pc, #248]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	021b      	lsls	r3, r3, #8
 8006574:	493a      	ldr	r1, [pc, #232]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006576:	4313      	orrs	r3, r2
 8006578:	604b      	str	r3, [r1, #4]
 800657a:	e01a      	b.n	80065b2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800657c:	4b38      	ldr	r3, [pc, #224]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a37      	ldr	r2, [pc, #220]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006582:	f023 0301 	bic.w	r3, r3, #1
 8006586:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006588:	f7ff f9ea 	bl	8005960 <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800658e:	e008      	b.n	80065a2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006590:	f7ff f9e6 	bl	8005960 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e2f1      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80065a2:	4b2f      	ldr	r3, [pc, #188]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1f0      	bne.n	8006590 <HAL_RCC_OscConfig+0x1d4>
 80065ae:	e000      	b.n	80065b2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d074      	beq.n	80066a8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d005      	beq.n	80065d0 <HAL_RCC_OscConfig+0x214>
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	2b0c      	cmp	r3, #12
 80065c8:	d10e      	bne.n	80065e8 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d10b      	bne.n	80065e8 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d0:	4b23      	ldr	r3, [pc, #140]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d064      	beq.n	80066a6 <HAL_RCC_OscConfig+0x2ea>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d160      	bne.n	80066a6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e2ce      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f0:	d106      	bne.n	8006600 <HAL_RCC_OscConfig+0x244>
 80065f2:	4b1b      	ldr	r3, [pc, #108]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a1a      	ldr	r2, [pc, #104]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 80065f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	e01d      	b.n	800663c <HAL_RCC_OscConfig+0x280>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006608:	d10c      	bne.n	8006624 <HAL_RCC_OscConfig+0x268>
 800660a:	4b15      	ldr	r3, [pc, #84]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a14      	ldr	r2, [pc, #80]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	4b12      	ldr	r3, [pc, #72]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a11      	ldr	r2, [pc, #68]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 800661c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	e00b      	b.n	800663c <HAL_RCC_OscConfig+0x280>
 8006624:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a0d      	ldr	r2, [pc, #52]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 800662a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a0a      	ldr	r2, [pc, #40]	; (8006660 <HAL_RCC_OscConfig+0x2a4>)
 8006636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800663a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01c      	beq.n	800667e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006644:	f7ff f98c 	bl	8005960 <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800664a:	e011      	b.n	8006670 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800664c:	f7ff f988 	bl	8005960 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b64      	cmp	r3, #100	; 0x64
 8006658:	d90a      	bls.n	8006670 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e293      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
 800665e:	bf00      	nop
 8006660:	40021000 	.word	0x40021000
 8006664:	0800d0b4 	.word	0x0800d0b4
 8006668:	20000064 	.word	0x20000064
 800666c:	20000068 	.word	0x20000068
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006670:	4bae      	ldr	r3, [pc, #696]	; (800692c <HAL_RCC_OscConfig+0x570>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0e7      	beq.n	800664c <HAL_RCC_OscConfig+0x290>
 800667c:	e014      	b.n	80066a8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667e:	f7ff f96f 	bl	8005960 <HAL_GetTick>
 8006682:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006686:	f7ff f96b 	bl	8005960 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b64      	cmp	r3, #100	; 0x64
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e276      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006698:	4ba4      	ldr	r3, [pc, #656]	; (800692c <HAL_RCC_OscConfig+0x570>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1f0      	bne.n	8006686 <HAL_RCC_OscConfig+0x2ca>
 80066a4:	e000      	b.n	80066a8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d060      	beq.n	8006776 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d005      	beq.n	80066c6 <HAL_RCC_OscConfig+0x30a>
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b0c      	cmp	r3, #12
 80066be:	d119      	bne.n	80066f4 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d116      	bne.n	80066f4 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066c6:	4b99      	ldr	r3, [pc, #612]	; (800692c <HAL_RCC_OscConfig+0x570>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d005      	beq.n	80066de <HAL_RCC_OscConfig+0x322>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e253      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066de:	4b93      	ldr	r3, [pc, #588]	; (800692c <HAL_RCC_OscConfig+0x570>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	061b      	lsls	r3, r3, #24
 80066ec:	498f      	ldr	r1, [pc, #572]	; (800692c <HAL_RCC_OscConfig+0x570>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066f2:	e040      	b.n	8006776 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d023      	beq.n	8006744 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066fc:	4b8b      	ldr	r3, [pc, #556]	; (800692c <HAL_RCC_OscConfig+0x570>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a8a      	ldr	r2, [pc, #552]	; (800692c <HAL_RCC_OscConfig+0x570>)
 8006702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006708:	f7ff f92a 	bl	8005960 <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006710:	f7ff f926 	bl	8005960 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e231      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006722:	4b82      	ldr	r3, [pc, #520]	; (800692c <HAL_RCC_OscConfig+0x570>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f0      	beq.n	8006710 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800672e:	4b7f      	ldr	r3, [pc, #508]	; (800692c <HAL_RCC_OscConfig+0x570>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	061b      	lsls	r3, r3, #24
 800673c:	497b      	ldr	r1, [pc, #492]	; (800692c <HAL_RCC_OscConfig+0x570>)
 800673e:	4313      	orrs	r3, r2
 8006740:	604b      	str	r3, [r1, #4]
 8006742:	e018      	b.n	8006776 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006744:	4b79      	ldr	r3, [pc, #484]	; (800692c <HAL_RCC_OscConfig+0x570>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a78      	ldr	r2, [pc, #480]	; (800692c <HAL_RCC_OscConfig+0x570>)
 800674a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800674e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006750:	f7ff f906 	bl	8005960 <HAL_GetTick>
 8006754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006756:	e008      	b.n	800676a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006758:	f7ff f902 	bl	8005960 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b02      	cmp	r3, #2
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e20d      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800676a:	4b70      	ldr	r3, [pc, #448]	; (800692c <HAL_RCC_OscConfig+0x570>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1f0      	bne.n	8006758 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0308 	and.w	r3, r3, #8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d03c      	beq.n	80067fc <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d01c      	beq.n	80067c4 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800678a:	4b68      	ldr	r3, [pc, #416]	; (800692c <HAL_RCC_OscConfig+0x570>)
 800678c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006790:	4a66      	ldr	r2, [pc, #408]	; (800692c <HAL_RCC_OscConfig+0x570>)
 8006792:	f043 0301 	orr.w	r3, r3, #1
 8006796:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679a:	f7ff f8e1 	bl	8005960 <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067a0:	e008      	b.n	80067b4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067a2:	f7ff f8dd 	bl	8005960 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e1e8      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067b4:	4b5d      	ldr	r3, [pc, #372]	; (800692c <HAL_RCC_OscConfig+0x570>)
 80067b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0ef      	beq.n	80067a2 <HAL_RCC_OscConfig+0x3e6>
 80067c2:	e01b      	b.n	80067fc <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067c4:	4b59      	ldr	r3, [pc, #356]	; (800692c <HAL_RCC_OscConfig+0x570>)
 80067c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067ca:	4a58      	ldr	r2, [pc, #352]	; (800692c <HAL_RCC_OscConfig+0x570>)
 80067cc:	f023 0301 	bic.w	r3, r3, #1
 80067d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d4:	f7ff f8c4 	bl	8005960 <HAL_GetTick>
 80067d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067da:	e008      	b.n	80067ee <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067dc:	f7ff f8c0 	bl	8005960 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d901      	bls.n	80067ee <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e1cb      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067ee:	4b4f      	ldr	r3, [pc, #316]	; (800692c <HAL_RCC_OscConfig+0x570>)
 80067f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1ef      	bne.n	80067dc <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 80a5 	beq.w	8006954 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800680a:	2300      	movs	r3, #0
 800680c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800680e:	4b47      	ldr	r3, [pc, #284]	; (800692c <HAL_RCC_OscConfig+0x570>)
 8006810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10d      	bne.n	8006836 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800681a:	4b44      	ldr	r3, [pc, #272]	; (800692c <HAL_RCC_OscConfig+0x570>)
 800681c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681e:	4a43      	ldr	r2, [pc, #268]	; (800692c <HAL_RCC_OscConfig+0x570>)
 8006820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006824:	6593      	str	r3, [r2, #88]	; 0x58
 8006826:	4b41      	ldr	r3, [pc, #260]	; (800692c <HAL_RCC_OscConfig+0x570>)
 8006828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800682a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682e:	60bb      	str	r3, [r7, #8]
 8006830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006832:	2301      	movs	r3, #1
 8006834:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006836:	4b3e      	ldr	r3, [pc, #248]	; (8006930 <HAL_RCC_OscConfig+0x574>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683e:	2b00      	cmp	r3, #0
 8006840:	d118      	bne.n	8006874 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006842:	4b3b      	ldr	r3, [pc, #236]	; (8006930 <HAL_RCC_OscConfig+0x574>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a3a      	ldr	r2, [pc, #232]	; (8006930 <HAL_RCC_OscConfig+0x574>)
 8006848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800684c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800684e:	f7ff f887 	bl	8005960 <HAL_GetTick>
 8006852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006854:	e008      	b.n	8006868 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006856:	f7ff f883 	bl	8005960 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b02      	cmp	r3, #2
 8006862:	d901      	bls.n	8006868 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e18e      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006868:	4b31      	ldr	r3, [pc, #196]	; (8006930 <HAL_RCC_OscConfig+0x574>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0f0      	beq.n	8006856 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d108      	bne.n	800688e <HAL_RCC_OscConfig+0x4d2>
 800687c:	4b2b      	ldr	r3, [pc, #172]	; (800692c <HAL_RCC_OscConfig+0x570>)
 800687e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006882:	4a2a      	ldr	r2, [pc, #168]	; (800692c <HAL_RCC_OscConfig+0x570>)
 8006884:	f043 0301 	orr.w	r3, r3, #1
 8006888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800688c:	e024      	b.n	80068d8 <HAL_RCC_OscConfig+0x51c>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	2b05      	cmp	r3, #5
 8006894:	d110      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4fc>
 8006896:	4b25      	ldr	r3, [pc, #148]	; (800692c <HAL_RCC_OscConfig+0x570>)
 8006898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689c:	4a23      	ldr	r2, [pc, #140]	; (800692c <HAL_RCC_OscConfig+0x570>)
 800689e:	f043 0304 	orr.w	r3, r3, #4
 80068a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068a6:	4b21      	ldr	r3, [pc, #132]	; (800692c <HAL_RCC_OscConfig+0x570>)
 80068a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ac:	4a1f      	ldr	r2, [pc, #124]	; (800692c <HAL_RCC_OscConfig+0x570>)
 80068ae:	f043 0301 	orr.w	r3, r3, #1
 80068b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068b6:	e00f      	b.n	80068d8 <HAL_RCC_OscConfig+0x51c>
 80068b8:	4b1c      	ldr	r3, [pc, #112]	; (800692c <HAL_RCC_OscConfig+0x570>)
 80068ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068be:	4a1b      	ldr	r2, [pc, #108]	; (800692c <HAL_RCC_OscConfig+0x570>)
 80068c0:	f023 0301 	bic.w	r3, r3, #1
 80068c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068c8:	4b18      	ldr	r3, [pc, #96]	; (800692c <HAL_RCC_OscConfig+0x570>)
 80068ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ce:	4a17      	ldr	r2, [pc, #92]	; (800692c <HAL_RCC_OscConfig+0x570>)
 80068d0:	f023 0304 	bic.w	r3, r3, #4
 80068d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d016      	beq.n	800690e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e0:	f7ff f83e 	bl	8005960 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068e6:	e00a      	b.n	80068fe <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068e8:	f7ff f83a 	bl	8005960 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e143      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068fe:	4b0b      	ldr	r3, [pc, #44]	; (800692c <HAL_RCC_OscConfig+0x570>)
 8006900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006904:	f003 0302 	and.w	r3, r3, #2
 8006908:	2b00      	cmp	r3, #0
 800690a:	d0ed      	beq.n	80068e8 <HAL_RCC_OscConfig+0x52c>
 800690c:	e019      	b.n	8006942 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800690e:	f7ff f827 	bl	8005960 <HAL_GetTick>
 8006912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006914:	e00e      	b.n	8006934 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006916:	f7ff f823 	bl	8005960 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	f241 3288 	movw	r2, #5000	; 0x1388
 8006924:	4293      	cmp	r3, r2
 8006926:	d905      	bls.n	8006934 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e12c      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
 800692c:	40021000 	.word	0x40021000
 8006930:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006934:	4b96      	ldr	r3, [pc, #600]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e9      	bne.n	8006916 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006942:	7ffb      	ldrb	r3, [r7, #31]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d105      	bne.n	8006954 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006948:	4b91      	ldr	r3, [pc, #580]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 800694a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800694c:	4a90      	ldr	r2, [pc, #576]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 800694e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006952:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0320 	and.w	r3, r3, #32
 800695c:	2b00      	cmp	r3, #0
 800695e:	d03c      	beq.n	80069da <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	2b00      	cmp	r3, #0
 8006966:	d01c      	beq.n	80069a2 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006968:	4b89      	ldr	r3, [pc, #548]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 800696a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800696e:	4a88      	ldr	r2, [pc, #544]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006970:	f043 0301 	orr.w	r3, r3, #1
 8006974:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006978:	f7fe fff2 	bl	8005960 <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006980:	f7fe ffee 	bl	8005960 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e0f9      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006992:	4b7f      	ldr	r3, [pc, #508]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006994:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0ef      	beq.n	8006980 <HAL_RCC_OscConfig+0x5c4>
 80069a0:	e01b      	b.n	80069da <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069a2:	4b7b      	ldr	r3, [pc, #492]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 80069a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069a8:	4a79      	ldr	r2, [pc, #484]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 80069aa:	f023 0301 	bic.w	r3, r3, #1
 80069ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b2:	f7fe ffd5 	bl	8005960 <HAL_GetTick>
 80069b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80069b8:	e008      	b.n	80069cc <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069ba:	f7fe ffd1 	bl	8005960 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e0dc      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80069cc:	4b70      	ldr	r3, [pc, #448]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 80069ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1ef      	bne.n	80069ba <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 80d0 	beq.w	8006b84 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	2b0c      	cmp	r3, #12
 80069e8:	f000 808d 	beq.w	8006b06 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d15a      	bne.n	8006aaa <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069f4:	4b66      	ldr	r3, [pc, #408]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a65      	ldr	r2, [pc, #404]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 80069fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a00:	f7fe ffae 	bl	8005960 <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a06:	e008      	b.n	8006a1a <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a08:	f7fe ffaa 	bl	8005960 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e0b5      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a1a:	4b5d      	ldr	r3, [pc, #372]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1f0      	bne.n	8006a08 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a26:	4b5a      	ldr	r3, [pc, #360]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	4b5a      	ldr	r3, [pc, #360]	; (8006b94 <HAL_RCC_OscConfig+0x7d8>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006a36:	3a01      	subs	r2, #1
 8006a38:	0112      	lsls	r2, r2, #4
 8006a3a:	4311      	orrs	r1, r2
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a40:	0212      	lsls	r2, r2, #8
 8006a42:	4311      	orrs	r1, r2
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a48:	0852      	lsrs	r2, r2, #1
 8006a4a:	3a01      	subs	r2, #1
 8006a4c:	0552      	lsls	r2, r2, #21
 8006a4e:	4311      	orrs	r1, r2
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006a54:	0852      	lsrs	r2, r2, #1
 8006a56:	3a01      	subs	r2, #1
 8006a58:	0652      	lsls	r2, r2, #25
 8006a5a:	4311      	orrs	r1, r2
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a60:	06d2      	lsls	r2, r2, #27
 8006a62:	430a      	orrs	r2, r1
 8006a64:	494a      	ldr	r1, [pc, #296]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a6a:	4b49      	ldr	r3, [pc, #292]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a48      	ldr	r2, [pc, #288]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006a70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a74:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a76:	4b46      	ldr	r3, [pc, #280]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	4a45      	ldr	r2, [pc, #276]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006a7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a80:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a82:	f7fe ff6d 	bl	8005960 <HAL_GetTick>
 8006a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a8a:	f7fe ff69 	bl	8005960 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e074      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a9c:	4b3c      	ldr	r3, [pc, #240]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0f0      	beq.n	8006a8a <HAL_RCC_OscConfig+0x6ce>
 8006aa8:	e06c      	b.n	8006b84 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aaa:	4b39      	ldr	r3, [pc, #228]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a38      	ldr	r2, [pc, #224]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ab4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006ab6:	4b36      	ldr	r3, [pc, #216]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d105      	bne.n	8006ace <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006ac2:	4b33      	ldr	r3, [pc, #204]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	4a32      	ldr	r2, [pc, #200]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006ac8:	f023 0303 	bic.w	r3, r3, #3
 8006acc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006ace:	4b30      	ldr	r3, [pc, #192]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	4a2f      	ldr	r2, [pc, #188]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006ad4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006adc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ade:	f7fe ff3f 	bl	8005960 <HAL_GetTick>
 8006ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ae4:	e008      	b.n	8006af8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae6:	f7fe ff3b 	bl	8005960 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d901      	bls.n	8006af8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e046      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006af8:	4b25      	ldr	r3, [pc, #148]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1f0      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x72a>
 8006b04:	e03e      	b.n	8006b84 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e039      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8006b12:	4b1f      	ldr	r3, [pc, #124]	; (8006b90 <HAL_RCC_OscConfig+0x7d4>)
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f003 0203 	and.w	r2, r3, #3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d12c      	bne.n	8006b80 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b30:	3b01      	subs	r3, #1
 8006b32:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d123      	bne.n	8006b80 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b42:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d11b      	bne.n	8006b80 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b52:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d113      	bne.n	8006b80 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b62:	085b      	lsrs	r3, r3, #1
 8006b64:	3b01      	subs	r3, #1
 8006b66:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d109      	bne.n	8006b80 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	085b      	lsrs	r3, r3, #1
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d001      	beq.n	8006b84 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3720      	adds	r7, #32
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	40021000 	.word	0x40021000
 8006b94:	019d800c 	.word	0x019d800c

08006b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e10f      	b.n	8006dd0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bb0:	4b89      	ldr	r3, [pc, #548]	; (8006dd8 <HAL_RCC_ClockConfig+0x240>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 030f 	and.w	r3, r3, #15
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d910      	bls.n	8006be0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bbe:	4b86      	ldr	r3, [pc, #536]	; (8006dd8 <HAL_RCC_ClockConfig+0x240>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f023 020f 	bic.w	r2, r3, #15
 8006bc6:	4984      	ldr	r1, [pc, #528]	; (8006dd8 <HAL_RCC_ClockConfig+0x240>)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bce:	4b82      	ldr	r3, [pc, #520]	; (8006dd8 <HAL_RCC_ClockConfig+0x240>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 030f 	and.w	r3, r3, #15
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d001      	beq.n	8006be0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e0f7      	b.n	8006dd0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 8089 	beq.w	8006d00 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d133      	bne.n	8006c5e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bf6:	4b79      	ldr	r3, [pc, #484]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e0e4      	b.n	8006dd0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006c06:	f000 fa0f 	bl	8007028 <RCC_GetSysClockFreqFromPLLSource>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	4b74      	ldr	r3, [pc, #464]	; (8006de0 <HAL_RCC_ClockConfig+0x248>)
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d955      	bls.n	8006cbe <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006c12:	4b72      	ldr	r3, [pc, #456]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006c1e:	4b6f      	ldr	r3, [pc, #444]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c26:	4a6d      	ldr	r2, [pc, #436]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006c2e:	2380      	movs	r3, #128	; 0x80
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	e044      	b.n	8006cbe <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d03e      	beq.n	8006cbe <HAL_RCC_ClockConfig+0x126>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d13a      	bne.n	8006cbe <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006c48:	4b64      	ldr	r3, [pc, #400]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c50:	4a62      	ldr	r2, [pc, #392]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c56:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006c58:	2380      	movs	r3, #128	; 0x80
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	e02f      	b.n	8006cbe <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d107      	bne.n	8006c76 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c66:	4b5d      	ldr	r3, [pc, #372]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d115      	bne.n	8006c9e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e0ac      	b.n	8006dd0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d107      	bne.n	8006c8e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c7e:	4b57      	ldr	r3, [pc, #348]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d109      	bne.n	8006c9e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e0a0      	b.n	8006dd0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c8e:	4b53      	ldr	r3, [pc, #332]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e098      	b.n	8006dd0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006c9e:	f000 f8a7 	bl	8006df0 <HAL_RCC_GetSysClockFreq>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	4b4e      	ldr	r3, [pc, #312]	; (8006de0 <HAL_RCC_ClockConfig+0x248>)
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d909      	bls.n	8006cbe <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006caa:	4b4c      	ldr	r3, [pc, #304]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cb2:	4a4a      	ldr	r2, [pc, #296]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006cba:	2380      	movs	r3, #128	; 0x80
 8006cbc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006cbe:	4b47      	ldr	r3, [pc, #284]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f023 0203 	bic.w	r2, r3, #3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	4944      	ldr	r1, [pc, #272]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cd0:	f7fe fe46 	bl	8005960 <HAL_GetTick>
 8006cd4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cd6:	e00a      	b.n	8006cee <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cd8:	f7fe fe42 	bl	8005960 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e070      	b.n	8006dd0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cee:	4b3b      	ldr	r3, [pc, #236]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 020c 	and.w	r2, r3, #12
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d1eb      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d009      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d0c:	4b33      	ldr	r3, [pc, #204]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	4930      	ldr	r1, [pc, #192]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	608b      	str	r3, [r1, #8]
 8006d1e:	e008      	b.n	8006d32 <HAL_RCC_ClockConfig+0x19a>
  }
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2b80      	cmp	r3, #128	; 0x80
 8006d24:	d105      	bne.n	8006d32 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006d26:	4b2d      	ldr	r3, [pc, #180]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	4a2c      	ldr	r2, [pc, #176]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d30:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d32:	4b29      	ldr	r3, [pc, #164]	; (8006dd8 <HAL_RCC_ClockConfig+0x240>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d210      	bcs.n	8006d62 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d40:	4b25      	ldr	r3, [pc, #148]	; (8006dd8 <HAL_RCC_ClockConfig+0x240>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f023 020f 	bic.w	r2, r3, #15
 8006d48:	4923      	ldr	r1, [pc, #140]	; (8006dd8 <HAL_RCC_ClockConfig+0x240>)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d50:	4b21      	ldr	r3, [pc, #132]	; (8006dd8 <HAL_RCC_ClockConfig+0x240>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 030f 	and.w	r3, r3, #15
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d001      	beq.n	8006d62 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e036      	b.n	8006dd0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0304 	and.w	r3, r3, #4
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d008      	beq.n	8006d80 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d6e:	4b1b      	ldr	r3, [pc, #108]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	4918      	ldr	r1, [pc, #96]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d009      	beq.n	8006da0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d8c:	4b13      	ldr	r3, [pc, #76]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	4910      	ldr	r1, [pc, #64]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006da0:	f000 f826 	bl	8006df0 <HAL_RCC_GetSysClockFreq>
 8006da4:	4601      	mov	r1, r0
 8006da6:	4b0d      	ldr	r3, [pc, #52]	; (8006ddc <HAL_RCC_ClockConfig+0x244>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	091b      	lsrs	r3, r3, #4
 8006dac:	f003 030f 	and.w	r3, r3, #15
 8006db0:	4a0c      	ldr	r2, [pc, #48]	; (8006de4 <HAL_RCC_ClockConfig+0x24c>)
 8006db2:	5cd3      	ldrb	r3, [r2, r3]
 8006db4:	f003 031f 	and.w	r3, r3, #31
 8006db8:	fa21 f303 	lsr.w	r3, r1, r3
 8006dbc:	4a0a      	ldr	r2, [pc, #40]	; (8006de8 <HAL_RCC_ClockConfig+0x250>)
 8006dbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <HAL_RCC_ClockConfig+0x254>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fe fd7f 	bl	80058c8 <HAL_InitTick>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	73fb      	strb	r3, [r7, #15]

  return status;
 8006dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	40022000 	.word	0x40022000
 8006ddc:	40021000 	.word	0x40021000
 8006de0:	04c4b400 	.word	0x04c4b400
 8006de4:	0800d0b4 	.word	0x0800d0b4
 8006de8:	20000064 	.word	0x20000064
 8006dec:	20000068 	.word	0x20000068

08006df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b089      	sub	sp, #36	; 0x24
 8006df4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	61fb      	str	r3, [r7, #28]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dfe:	4b3d      	ldr	r3, [pc, #244]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 030c 	and.w	r3, r3, #12
 8006e06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e08:	4b3a      	ldr	r3, [pc, #232]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <HAL_RCC_GetSysClockFreq+0x34>
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	2b0c      	cmp	r3, #12
 8006e1c:	d121      	bne.n	8006e62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d11e      	bne.n	8006e62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e24:	4b33      	ldr	r3, [pc, #204]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0308 	and.w	r3, r3, #8
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d107      	bne.n	8006e40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e30:	4b30      	ldr	r3, [pc, #192]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e36:	0a1b      	lsrs	r3, r3, #8
 8006e38:	f003 030f 	and.w	r3, r3, #15
 8006e3c:	61fb      	str	r3, [r7, #28]
 8006e3e:	e005      	b.n	8006e4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e40:	4b2c      	ldr	r3, [pc, #176]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	091b      	lsrs	r3, r3, #4
 8006e46:	f003 030f 	and.w	r3, r3, #15
 8006e4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e4c:	4a2a      	ldr	r2, [pc, #168]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d10d      	bne.n	8006e78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e60:	e00a      	b.n	8006e78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d102      	bne.n	8006e6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e68:	4b24      	ldr	r3, [pc, #144]	; (8006efc <HAL_RCC_GetSysClockFreq+0x10c>)
 8006e6a:	61bb      	str	r3, [r7, #24]
 8006e6c:	e004      	b.n	8006e78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d101      	bne.n	8006e78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e74:	4b22      	ldr	r3, [pc, #136]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	2b0c      	cmp	r3, #12
 8006e7c:	d133      	bne.n	8006ee6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e7e:	4b1d      	ldr	r3, [pc, #116]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f003 0303 	and.w	r3, r3, #3
 8006e86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d002      	beq.n	8006e94 <HAL_RCC_GetSysClockFreq+0xa4>
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d003      	beq.n	8006e9a <HAL_RCC_GetSysClockFreq+0xaa>
 8006e92:	e005      	b.n	8006ea0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006e94:	4b19      	ldr	r3, [pc, #100]	; (8006efc <HAL_RCC_GetSysClockFreq+0x10c>)
 8006e96:	617b      	str	r3, [r7, #20]
      break;
 8006e98:	e005      	b.n	8006ea6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006e9a:	4b19      	ldr	r3, [pc, #100]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e9c:	617b      	str	r3, [r7, #20]
      break;
 8006e9e:	e002      	b.n	8006ea6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	617b      	str	r3, [r7, #20]
      break;
 8006ea4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ea6:	4b13      	ldr	r3, [pc, #76]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	091b      	lsrs	r3, r3, #4
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006eb4:	4b0f      	ldr	r3, [pc, #60]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	0a1b      	lsrs	r3, r3, #8
 8006eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	fb02 f203 	mul.w	r2, r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eca:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ecc:	4b09      	ldr	r3, [pc, #36]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	0e5b      	lsrs	r3, r3, #25
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3724      	adds	r7, #36	; 0x24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	40021000 	.word	0x40021000
 8006ef8:	0800d0cc 	.word	0x0800d0cc
 8006efc:	00f42400 	.word	0x00f42400
 8006f00:	007a1200 	.word	0x007a1200

08006f04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f04:	b480      	push	{r7}
 8006f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f08:	4b03      	ldr	r3, [pc, #12]	; (8006f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	20000064 	.word	0x20000064

08006f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f20:	f7ff fff0 	bl	8006f04 <HAL_RCC_GetHCLKFreq>
 8006f24:	4601      	mov	r1, r0
 8006f26:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	0a1b      	lsrs	r3, r3, #8
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	4a04      	ldr	r2, [pc, #16]	; (8006f44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f32:	5cd3      	ldrb	r3, [r2, r3]
 8006f34:	f003 031f 	and.w	r3, r3, #31
 8006f38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40021000 	.word	0x40021000
 8006f44:	0800d0c4 	.word	0x0800d0c4

08006f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f4c:	f7ff ffda 	bl	8006f04 <HAL_RCC_GetHCLKFreq>
 8006f50:	4601      	mov	r1, r0
 8006f52:	4b06      	ldr	r3, [pc, #24]	; (8006f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	0adb      	lsrs	r3, r3, #11
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	4a04      	ldr	r2, [pc, #16]	; (8006f70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f5e:	5cd3      	ldrb	r3, [r2, r3]
 8006f60:	f003 031f 	and.w	r3, r3, #31
 8006f64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	40021000 	.word	0x40021000
 8006f70:	0800d0c4 	.word	0x0800d0c4

08006f74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006f80:	4b27      	ldr	r3, [pc, #156]	; (8007020 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d003      	beq.n	8006f94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006f8c:	f7ff f932 	bl	80061f4 <HAL_PWREx_GetVoltageRange>
 8006f90:	6178      	str	r0, [r7, #20]
 8006f92:	e014      	b.n	8006fbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f94:	4b22      	ldr	r3, [pc, #136]	; (8007020 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f98:	4a21      	ldr	r2, [pc, #132]	; (8007020 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8006fa0:	4b1f      	ldr	r3, [pc, #124]	; (8007020 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006fac:	f7ff f922 	bl	80061f4 <HAL_PWREx_GetVoltageRange>
 8006fb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006fb2:	4b1b      	ldr	r3, [pc, #108]	; (8007020 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb6:	4a1a      	ldr	r2, [pc, #104]	; (8007020 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fc4:	d10b      	bne.n	8006fde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b80      	cmp	r3, #128	; 0x80
 8006fca:	d913      	bls.n	8006ff4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2ba0      	cmp	r3, #160	; 0xa0
 8006fd0:	d902      	bls.n	8006fd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	613b      	str	r3, [r7, #16]
 8006fd6:	e00d      	b.n	8006ff4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006fd8:	2301      	movs	r3, #1
 8006fda:	613b      	str	r3, [r7, #16]
 8006fdc:	e00a      	b.n	8006ff4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8006fe2:	d902      	bls.n	8006fea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	613b      	str	r3, [r7, #16]
 8006fe8:	e004      	b.n	8006ff4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b70      	cmp	r3, #112	; 0x70
 8006fee:	d101      	bne.n	8006ff4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006ff4:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f023 020f 	bic.w	r2, r3, #15
 8006ffc:	4909      	ldr	r1, [pc, #36]	; (8007024 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	4313      	orrs	r3, r2
 8007002:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007004:	4b07      	ldr	r3, [pc, #28]	; (8007024 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 030f 	and.w	r3, r3, #15
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	429a      	cmp	r2, r3
 8007010:	d001      	beq.n	8007016 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	40021000 	.word	0x40021000
 8007024:	40022000 	.word	0x40022000

08007028 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8007032:	4b2d      	ldr	r3, [pc, #180]	; (80070e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	2b01      	cmp	r3, #1
 800703c:	d118      	bne.n	8007070 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800703e:	4b2a      	ldr	r3, [pc, #168]	; (80070e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d107      	bne.n	800705a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800704a:	4b27      	ldr	r3, [pc, #156]	; (80070e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800704c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007050:	0a1b      	lsrs	r3, r3, #8
 8007052:	f003 030f 	and.w	r3, r3, #15
 8007056:	617b      	str	r3, [r7, #20]
 8007058:	e005      	b.n	8007066 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800705a:	4b23      	ldr	r3, [pc, #140]	; (80070e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	091b      	lsrs	r3, r3, #4
 8007060:	f003 030f 	and.w	r3, r3, #15
 8007064:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007066:	4a21      	ldr	r2, [pc, #132]	; (80070ec <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800706e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007070:	4b1d      	ldr	r3, [pc, #116]	; (80070e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f003 0303 	and.w	r3, r3, #3
 8007078:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d002      	beq.n	8007086 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8007080:	2b03      	cmp	r3, #3
 8007082:	d003      	beq.n	800708c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8007084:	e005      	b.n	8007092 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007086:	4b1a      	ldr	r3, [pc, #104]	; (80070f0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007088:	613b      	str	r3, [r7, #16]
    break;
 800708a:	e005      	b.n	8007098 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800708c:	4b19      	ldr	r3, [pc, #100]	; (80070f4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800708e:	613b      	str	r3, [r7, #16]
    break;
 8007090:	e002      	b.n	8007098 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	613b      	str	r3, [r7, #16]
    break;
 8007096:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007098:	4b13      	ldr	r3, [pc, #76]	; (80070e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	091b      	lsrs	r3, r3, #4
 800709e:	f003 030f 	and.w	r3, r3, #15
 80070a2:	3301      	adds	r3, #1
 80070a4:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80070a6:	4b10      	ldr	r3, [pc, #64]	; (80070e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	0a1b      	lsrs	r3, r3, #8
 80070ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	fb02 f203 	mul.w	r2, r2, r3
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070bc:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070be:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	0e5b      	lsrs	r3, r3, #25
 80070c4:	f003 0303 	and.w	r3, r3, #3
 80070c8:	3301      	adds	r3, #1
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d6:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80070d8:	683b      	ldr	r3, [r7, #0]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	40021000 	.word	0x40021000
 80070ec:	0800d0cc 	.word	0x0800d0cc
 80070f0:	00f42400 	.word	0x00f42400
 80070f4:	007a1200 	.word	0x007a1200

080070f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007100:	2300      	movs	r3, #0
 8007102:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007104:	2300      	movs	r3, #0
 8007106:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007110:	2b00      	cmp	r3, #0
 8007112:	d03d      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007118:	2b40      	cmp	r3, #64	; 0x40
 800711a:	d00b      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800711c:	2b40      	cmp	r3, #64	; 0x40
 800711e:	d804      	bhi.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00e      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8007124:	2b20      	cmp	r3, #32
 8007126:	d015      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007128:	e01d      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800712a:	2b60      	cmp	r3, #96	; 0x60
 800712c:	d01e      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800712e:	2b80      	cmp	r3, #128	; 0x80
 8007130:	d01c      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007132:	e018      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007134:	4b86      	ldr	r3, [pc, #536]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	4a85      	ldr	r2, [pc, #532]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800713a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800713e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007140:	e015      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	3304      	adds	r3, #4
 8007146:	2100      	movs	r1, #0
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fafd 	bl	8007748 <RCCEx_PLLSAI1_Config>
 800714e:	4603      	mov	r3, r0
 8007150:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007152:	e00c      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3320      	adds	r3, #32
 8007158:	2100      	movs	r1, #0
 800715a:	4618      	mov	r0, r3
 800715c:	f000 fbe4 	bl	8007928 <RCCEx_PLLSAI2_Config>
 8007160:	4603      	mov	r3, r0
 8007162:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007164:	e003      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	74fb      	strb	r3, [r7, #19]
      break;
 800716a:	e000      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 800716c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800716e:	7cfb      	ldrb	r3, [r7, #19]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10b      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007174:	4b76      	ldr	r3, [pc, #472]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007176:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800717a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007182:	4973      	ldr	r1, [pc, #460]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007184:	4313      	orrs	r3, r2
 8007186:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800718a:	e001      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718c:	7cfb      	ldrb	r3, [r7, #19]
 800718e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d042      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a4:	d00f      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80071a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071aa:	d805      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d011      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80071b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b4:	d017      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xee>
 80071b6:	e01f      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80071b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071bc:	d01f      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80071be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c2:	d01c      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80071c4:	e018      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80071c6:	4b62      	ldr	r3, [pc, #392]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	4a61      	ldr	r2, [pc, #388]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80071cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071d0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80071d2:	e015      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3304      	adds	r3, #4
 80071d8:	2100      	movs	r1, #0
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 fab4 	bl	8007748 <RCCEx_PLLSAI1_Config>
 80071e0:	4603      	mov	r3, r0
 80071e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80071e4:	e00c      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3320      	adds	r3, #32
 80071ea:	2100      	movs	r1, #0
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 fb9b 	bl	8007928 <RCCEx_PLLSAI2_Config>
 80071f2:	4603      	mov	r3, r0
 80071f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80071f6:	e003      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	74fb      	strb	r3, [r7, #19]
      break;
 80071fc:	e000      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80071fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007200:	7cfb      	ldrb	r3, [r7, #19]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10b      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007206:	4b52      	ldr	r3, [pc, #328]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007208:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800720c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007214:	494e      	ldr	r1, [pc, #312]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007216:	4313      	orrs	r3, r2
 8007218:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800721c:	e001      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800721e:	7cfb      	ldrb	r3, [r7, #19]
 8007220:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 809f 	beq.w	800736e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007230:	2300      	movs	r3, #0
 8007232:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007234:	4b46      	ldr	r3, [pc, #280]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8007240:	2301      	movs	r3, #1
 8007242:	e000      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007244:	2300      	movs	r3, #0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00d      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800724a:	4b41      	ldr	r3, [pc, #260]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800724c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724e:	4a40      	ldr	r2, [pc, #256]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007254:	6593      	str	r3, [r2, #88]	; 0x58
 8007256:	4b3e      	ldr	r3, [pc, #248]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800725e:	60bb      	str	r3, [r7, #8]
 8007260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007262:	2301      	movs	r3, #1
 8007264:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007266:	4b3b      	ldr	r3, [pc, #236]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a3a      	ldr	r2, [pc, #232]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800726c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007270:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007272:	f7fe fb75 	bl	8005960 <HAL_GetTick>
 8007276:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007278:	e009      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800727a:	f7fe fb71 	bl	8005960 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	2b02      	cmp	r3, #2
 8007286:	d902      	bls.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	74fb      	strb	r3, [r7, #19]
        break;
 800728c:	e005      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800728e:	4b31      	ldr	r3, [pc, #196]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007296:	2b00      	cmp	r3, #0
 8007298:	d0ef      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800729a:	7cfb      	ldrb	r3, [r7, #19]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d15b      	bne.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80072a0:	4b2b      	ldr	r3, [pc, #172]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80072a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072aa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d01f      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d019      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80072be:	4b24      	ldr	r3, [pc, #144]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80072c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072ca:	4b21      	ldr	r3, [pc, #132]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80072cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d0:	4a1f      	ldr	r2, [pc, #124]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80072d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072da:	4b1d      	ldr	r3, [pc, #116]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80072dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e0:	4a1b      	ldr	r2, [pc, #108]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80072e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80072ea:	4a19      	ldr	r2, [pc, #100]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d016      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072fc:	f7fe fb30 	bl	8005960 <HAL_GetTick>
 8007300:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007302:	e00b      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007304:	f7fe fb2c 	bl	8005960 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007312:	4293      	cmp	r3, r2
 8007314:	d902      	bls.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	74fb      	strb	r3, [r7, #19]
            break;
 800731a:	e006      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800731c:	4b0c      	ldr	r3, [pc, #48]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800731e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0ec      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800732a:	7cfb      	ldrb	r3, [r7, #19]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10c      	bne.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007340:	4903      	ldr	r1, [pc, #12]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007342:	4313      	orrs	r3, r2
 8007344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007348:	e008      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800734a:	7cfb      	ldrb	r3, [r7, #19]
 800734c:	74bb      	strb	r3, [r7, #18]
 800734e:	e005      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8007350:	40021000 	.word	0x40021000
 8007354:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007358:	7cfb      	ldrb	r3, [r7, #19]
 800735a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800735c:	7c7b      	ldrb	r3, [r7, #17]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d105      	bne.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007362:	4ba0      	ldr	r3, [pc, #640]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007366:	4a9f      	ldr	r2, [pc, #636]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800736c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800737a:	4b9a      	ldr	r3, [pc, #616]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800737c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007380:	f023 0203 	bic.w	r2, r3, #3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007388:	4996      	ldr	r1, [pc, #600]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800738a:	4313      	orrs	r3, r2
 800738c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800739c:	4b91      	ldr	r3, [pc, #580]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800739e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a2:	f023 020c 	bic.w	r2, r3, #12
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	498e      	ldr	r1, [pc, #568]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073be:	4b89      	ldr	r3, [pc, #548]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073cc:	4985      	ldr	r1, [pc, #532]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0308 	and.w	r3, r3, #8
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00a      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80073e0:	4b80      	ldr	r3, [pc, #512]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ee:	497d      	ldr	r1, [pc, #500]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0310 	and.w	r3, r3, #16
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007402:	4b78      	ldr	r3, [pc, #480]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007410:	4974      	ldr	r1, [pc, #464]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007412:	4313      	orrs	r3, r2
 8007414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0320 	and.w	r3, r3, #32
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00a      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007424:	4b6f      	ldr	r3, [pc, #444]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007432:	496c      	ldr	r1, [pc, #432]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007434:	4313      	orrs	r3, r2
 8007436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007446:	4b67      	ldr	r3, [pc, #412]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007454:	4963      	ldr	r1, [pc, #396]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007456:	4313      	orrs	r3, r2
 8007458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00a      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007468:	4b5e      	ldr	r3, [pc, #376]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800746a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800746e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007476:	495b      	ldr	r1, [pc, #364]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007478:	4313      	orrs	r3, r2
 800747a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800748a:	4b56      	ldr	r3, [pc, #344]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800748c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007490:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007498:	4952      	ldr	r1, [pc, #328]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800749a:	4313      	orrs	r3, r2
 800749c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074ac:	4b4d      	ldr	r3, [pc, #308]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ba:	494a      	ldr	r1, [pc, #296]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074ce:	4b45      	ldr	r3, [pc, #276]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074dc:	4941      	ldr	r1, [pc, #260]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00a      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80074f0:	4b3c      	ldr	r3, [pc, #240]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074f6:	f023 0203 	bic.w	r2, r3, #3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074fe:	4939      	ldr	r1, [pc, #228]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007500:	4313      	orrs	r3, r2
 8007502:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d028      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007512:	4b34      	ldr	r3, [pc, #208]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007518:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007520:	4930      	ldr	r1, [pc, #192]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007522:	4313      	orrs	r3, r2
 8007524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800752c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007530:	d106      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007532:	4b2c      	ldr	r3, [pc, #176]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	4a2b      	ldr	r2, [pc, #172]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800753c:	60d3      	str	r3, [r2, #12]
 800753e:	e011      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007548:	d10c      	bne.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3304      	adds	r3, #4
 800754e:	2101      	movs	r1, #1
 8007550:	4618      	mov	r0, r3
 8007552:	f000 f8f9 	bl	8007748 <RCCEx_PLLSAI1_Config>
 8007556:	4603      	mov	r3, r0
 8007558:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800755a:	7cfb      	ldrb	r3, [r7, #19]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8007560:	7cfb      	ldrb	r3, [r7, #19]
 8007562:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d04d      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007578:	d108      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x494>
 800757a:	4b1a      	ldr	r3, [pc, #104]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800757c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007580:	4a18      	ldr	r2, [pc, #96]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007586:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800758a:	e012      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800758c:	4b15      	ldr	r3, [pc, #84]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800758e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007592:	4a14      	ldr	r2, [pc, #80]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007598:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800759c:	4b11      	ldr	r3, [pc, #68]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800759e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075aa:	490e      	ldr	r1, [pc, #56]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075ba:	d106      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075bc:	4b09      	ldr	r3, [pc, #36]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	4a08      	ldr	r2, [pc, #32]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075c6:	60d3      	str	r3, [r2, #12]
 80075c8:	e020      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075d2:	d109      	bne.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80075d4:	4b03      	ldr	r3, [pc, #12]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	4a02      	ldr	r2, [pc, #8]	; (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075de:	60d3      	str	r3, [r2, #12]
 80075e0:	e014      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80075e2:	bf00      	nop
 80075e4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075f0:	d10c      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3304      	adds	r3, #4
 80075f6:	2101      	movs	r1, #1
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 f8a5 	bl	8007748 <RCCEx_PLLSAI1_Config>
 80075fe:	4603      	mov	r3, r0
 8007600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007602:	7cfb      	ldrb	r3, [r7, #19]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007608:	7cfb      	ldrb	r3, [r7, #19]
 800760a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d028      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007618:	4b4a      	ldr	r3, [pc, #296]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800761a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800761e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007626:	4947      	ldr	r1, [pc, #284]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007628:	4313      	orrs	r3, r2
 800762a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007632:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007636:	d106      	bne.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007638:	4b42      	ldr	r3, [pc, #264]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	4a41      	ldr	r2, [pc, #260]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800763e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007642:	60d3      	str	r3, [r2, #12]
 8007644:	e011      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800764a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800764e:	d10c      	bne.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3304      	adds	r3, #4
 8007654:	2101      	movs	r1, #1
 8007656:	4618      	mov	r0, r3
 8007658:	f000 f876 	bl	8007748 <RCCEx_PLLSAI1_Config>
 800765c:	4603      	mov	r3, r0
 800765e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007660:	7cfb      	ldrb	r3, [r7, #19]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8007666:	7cfb      	ldrb	r3, [r7, #19]
 8007668:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d01e      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007676:	4b33      	ldr	r3, [pc, #204]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007686:	492f      	ldr	r1, [pc, #188]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007688:	4313      	orrs	r3, r2
 800768a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007698:	d10c      	bne.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3304      	adds	r3, #4
 800769e:	2102      	movs	r1, #2
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 f851 	bl	8007748 <RCCEx_PLLSAI1_Config>
 80076a6:	4603      	mov	r3, r0
 80076a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80076aa:	7cfb      	ldrb	r3, [r7, #19]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 80076b0:	7cfb      	ldrb	r3, [r7, #19]
 80076b2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00b      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076c0:	4b20      	ldr	r3, [pc, #128]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80076c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076c6:	f023 0204 	bic.w	r2, r3, #4
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076d0:	491c      	ldr	r1, [pc, #112]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00b      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80076e4:	4b17      	ldr	r3, [pc, #92]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80076e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076ea:	f023 0218 	bic.w	r2, r3, #24
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f4:	4913      	ldr	r1, [pc, #76]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d017      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007708:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800770a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800770e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007718:	490a      	ldr	r1, [pc, #40]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800771a:	4313      	orrs	r3, r2
 800771c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800772a:	d105      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800772c:	4b05      	ldr	r3, [pc, #20]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	4a04      	ldr	r2, [pc, #16]	; (8007744 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007736:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007738:	7cbb      	ldrb	r3, [r7, #18]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	40021000 	.word	0x40021000

08007748 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007756:	4b70      	ldr	r3, [pc, #448]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00e      	beq.n	8007780 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007762:	4b6d      	ldr	r3, [pc, #436]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f003 0203 	and.w	r2, r3, #3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	429a      	cmp	r2, r3
 8007770:	d103      	bne.n	800777a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
       ||
 8007776:	2b00      	cmp	r3, #0
 8007778:	d13f      	bne.n	80077fa <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	73fb      	strb	r3, [r7, #15]
 800777e:	e03c      	b.n	80077fa <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b02      	cmp	r3, #2
 8007786:	d00c      	beq.n	80077a2 <RCCEx_PLLSAI1_Config+0x5a>
 8007788:	2b03      	cmp	r3, #3
 800778a:	d013      	beq.n	80077b4 <RCCEx_PLLSAI1_Config+0x6c>
 800778c:	2b01      	cmp	r3, #1
 800778e:	d120      	bne.n	80077d2 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007790:	4b61      	ldr	r3, [pc, #388]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d11d      	bne.n	80077d8 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077a0:	e01a      	b.n	80077d8 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80077a2:	4b5d      	ldr	r3, [pc, #372]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d116      	bne.n	80077dc <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077b2:	e013      	b.n	80077dc <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80077b4:	4b58      	ldr	r3, [pc, #352]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10f      	bne.n	80077e0 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80077c0:	4b55      	ldr	r3, [pc, #340]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d109      	bne.n	80077e0 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077d0:	e006      	b.n	80077e0 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	73fb      	strb	r3, [r7, #15]
      break;
 80077d6:	e004      	b.n	80077e2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80077d8:	bf00      	nop
 80077da:	e002      	b.n	80077e2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80077dc:	bf00      	nop
 80077de:	e000      	b.n	80077e2 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80077e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d108      	bne.n	80077fa <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80077e8:	4b4b      	ldr	r3, [pc, #300]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	f023 0203 	bic.w	r2, r3, #3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4948      	ldr	r1, [pc, #288]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f040 8086 	bne.w	800790e <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007802:	4b45      	ldr	r3, [pc, #276]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a44      	ldr	r2, [pc, #272]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007808:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800780c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800780e:	f7fe f8a7 	bl	8005960 <HAL_GetTick>
 8007812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007814:	e009      	b.n	800782a <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007816:	f7fe f8a3 	bl	8005960 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d902      	bls.n	800782a <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	73fb      	strb	r3, [r7, #15]
        break;
 8007828:	e005      	b.n	8007836 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800782a:	4b3b      	ldr	r3, [pc, #236]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1ef      	bne.n	8007816 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d168      	bne.n	800790e <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d113      	bne.n	800786a <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007842:	4b35      	ldr	r3, [pc, #212]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007844:	691a      	ldr	r2, [r3, #16]
 8007846:	4b35      	ldr	r3, [pc, #212]	; (800791c <RCCEx_PLLSAI1_Config+0x1d4>)
 8007848:	4013      	ands	r3, r2
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6892      	ldr	r2, [r2, #8]
 800784e:	0211      	lsls	r1, r2, #8
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	68d2      	ldr	r2, [r2, #12]
 8007854:	06d2      	lsls	r2, r2, #27
 8007856:	4311      	orrs	r1, r2
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	6852      	ldr	r2, [r2, #4]
 800785c:	3a01      	subs	r2, #1
 800785e:	0112      	lsls	r2, r2, #4
 8007860:	430a      	orrs	r2, r1
 8007862:	492d      	ldr	r1, [pc, #180]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007864:	4313      	orrs	r3, r2
 8007866:	610b      	str	r3, [r1, #16]
 8007868:	e02d      	b.n	80078c6 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d115      	bne.n	800789c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007870:	4b29      	ldr	r3, [pc, #164]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007872:	691a      	ldr	r2, [r3, #16]
 8007874:	4b2a      	ldr	r3, [pc, #168]	; (8007920 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007876:	4013      	ands	r3, r2
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	6892      	ldr	r2, [r2, #8]
 800787c:	0211      	lsls	r1, r2, #8
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6912      	ldr	r2, [r2, #16]
 8007882:	0852      	lsrs	r2, r2, #1
 8007884:	3a01      	subs	r2, #1
 8007886:	0552      	lsls	r2, r2, #21
 8007888:	4311      	orrs	r1, r2
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6852      	ldr	r2, [r2, #4]
 800788e:	3a01      	subs	r2, #1
 8007890:	0112      	lsls	r2, r2, #4
 8007892:	430a      	orrs	r2, r1
 8007894:	4920      	ldr	r1, [pc, #128]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007896:	4313      	orrs	r3, r2
 8007898:	610b      	str	r3, [r1, #16]
 800789a:	e014      	b.n	80078c6 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800789c:	4b1e      	ldr	r3, [pc, #120]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 800789e:	691a      	ldr	r2, [r3, #16]
 80078a0:	4b20      	ldr	r3, [pc, #128]	; (8007924 <RCCEx_PLLSAI1_Config+0x1dc>)
 80078a2:	4013      	ands	r3, r2
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6892      	ldr	r2, [r2, #8]
 80078a8:	0211      	lsls	r1, r2, #8
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	6952      	ldr	r2, [r2, #20]
 80078ae:	0852      	lsrs	r2, r2, #1
 80078b0:	3a01      	subs	r2, #1
 80078b2:	0652      	lsls	r2, r2, #25
 80078b4:	4311      	orrs	r1, r2
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	6852      	ldr	r2, [r2, #4]
 80078ba:	3a01      	subs	r2, #1
 80078bc:	0112      	lsls	r2, r2, #4
 80078be:	430a      	orrs	r2, r1
 80078c0:	4915      	ldr	r1, [pc, #84]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80078c6:	4b14      	ldr	r3, [pc, #80]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a13      	ldr	r2, [pc, #76]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 80078cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078d2:	f7fe f845 	bl	8005960 <HAL_GetTick>
 80078d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078d8:	e009      	b.n	80078ee <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078da:	f7fe f841 	bl	8005960 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d902      	bls.n	80078ee <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	73fb      	strb	r3, [r7, #15]
          break;
 80078ec:	e005      	b.n	80078fa <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80078ee:	4b0a      	ldr	r3, [pc, #40]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0ef      	beq.n	80078da <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d106      	bne.n	800790e <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007900:	4b05      	ldr	r3, [pc, #20]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 8007902:	691a      	ldr	r2, [r3, #16]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	4903      	ldr	r1, [pc, #12]	; (8007918 <RCCEx_PLLSAI1_Config+0x1d0>)
 800790a:	4313      	orrs	r3, r2
 800790c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800790e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	40021000 	.word	0x40021000
 800791c:	07ff800f 	.word	0x07ff800f
 8007920:	ff9f800f 	.word	0xff9f800f
 8007924:	f9ff800f 	.word	0xf9ff800f

08007928 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007936:	4b70      	ldr	r3, [pc, #448]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f003 0303 	and.w	r3, r3, #3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00e      	beq.n	8007960 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007942:	4b6d      	ldr	r3, [pc, #436]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	f003 0203 	and.w	r2, r3, #3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d103      	bne.n	800795a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
       ||
 8007956:	2b00      	cmp	r3, #0
 8007958:	d13f      	bne.n	80079da <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	73fb      	strb	r3, [r7, #15]
 800795e:	e03c      	b.n	80079da <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b02      	cmp	r3, #2
 8007966:	d00c      	beq.n	8007982 <RCCEx_PLLSAI2_Config+0x5a>
 8007968:	2b03      	cmp	r3, #3
 800796a:	d013      	beq.n	8007994 <RCCEx_PLLSAI2_Config+0x6c>
 800796c:	2b01      	cmp	r3, #1
 800796e:	d120      	bne.n	80079b2 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007970:	4b61      	ldr	r3, [pc, #388]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d11d      	bne.n	80079b8 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007980:	e01a      	b.n	80079b8 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007982:	4b5d      	ldr	r3, [pc, #372]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800798a:	2b00      	cmp	r3, #0
 800798c:	d116      	bne.n	80079bc <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007992:	e013      	b.n	80079bc <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007994:	4b58      	ldr	r3, [pc, #352]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10f      	bne.n	80079c0 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80079a0:	4b55      	ldr	r3, [pc, #340]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d109      	bne.n	80079c0 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079b0:	e006      	b.n	80079c0 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	73fb      	strb	r3, [r7, #15]
      break;
 80079b6:	e004      	b.n	80079c2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80079b8:	bf00      	nop
 80079ba:	e002      	b.n	80079c2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80079bc:	bf00      	nop
 80079be:	e000      	b.n	80079c2 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80079c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d108      	bne.n	80079da <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80079c8:	4b4b      	ldr	r3, [pc, #300]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f023 0203 	bic.w	r2, r3, #3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4948      	ldr	r1, [pc, #288]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80079da:	7bfb      	ldrb	r3, [r7, #15]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f040 8086 	bne.w	8007aee <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80079e2:	4b45      	ldr	r3, [pc, #276]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a44      	ldr	r2, [pc, #272]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 80079e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ee:	f7fd ffb7 	bl	8005960 <HAL_GetTick>
 80079f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80079f4:	e009      	b.n	8007a0a <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80079f6:	f7fd ffb3 	bl	8005960 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d902      	bls.n	8007a0a <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	73fb      	strb	r3, [r7, #15]
        break;
 8007a08:	e005      	b.n	8007a16 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007a0a:	4b3b      	ldr	r3, [pc, #236]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1ef      	bne.n	80079f6 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d168      	bne.n	8007aee <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d113      	bne.n	8007a4a <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007a22:	4b35      	ldr	r3, [pc, #212]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007a24:	695a      	ldr	r2, [r3, #20]
 8007a26:	4b35      	ldr	r3, [pc, #212]	; (8007afc <RCCEx_PLLSAI2_Config+0x1d4>)
 8007a28:	4013      	ands	r3, r2
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	6892      	ldr	r2, [r2, #8]
 8007a2e:	0211      	lsls	r1, r2, #8
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	68d2      	ldr	r2, [r2, #12]
 8007a34:	06d2      	lsls	r2, r2, #27
 8007a36:	4311      	orrs	r1, r2
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	6852      	ldr	r2, [r2, #4]
 8007a3c:	3a01      	subs	r2, #1
 8007a3e:	0112      	lsls	r2, r2, #4
 8007a40:	430a      	orrs	r2, r1
 8007a42:	492d      	ldr	r1, [pc, #180]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	614b      	str	r3, [r1, #20]
 8007a48:	e02d      	b.n	8007aa6 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d115      	bne.n	8007a7c <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007a50:	4b29      	ldr	r3, [pc, #164]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007a52:	695a      	ldr	r2, [r3, #20]
 8007a54:	4b2a      	ldr	r3, [pc, #168]	; (8007b00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a56:	4013      	ands	r3, r2
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	6892      	ldr	r2, [r2, #8]
 8007a5c:	0211      	lsls	r1, r2, #8
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	6912      	ldr	r2, [r2, #16]
 8007a62:	0852      	lsrs	r2, r2, #1
 8007a64:	3a01      	subs	r2, #1
 8007a66:	0552      	lsls	r2, r2, #21
 8007a68:	4311      	orrs	r1, r2
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	6852      	ldr	r2, [r2, #4]
 8007a6e:	3a01      	subs	r2, #1
 8007a70:	0112      	lsls	r2, r2, #4
 8007a72:	430a      	orrs	r2, r1
 8007a74:	4920      	ldr	r1, [pc, #128]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	614b      	str	r3, [r1, #20]
 8007a7a:	e014      	b.n	8007aa6 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007a7c:	4b1e      	ldr	r3, [pc, #120]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007a7e:	695a      	ldr	r2, [r3, #20]
 8007a80:	4b20      	ldr	r3, [pc, #128]	; (8007b04 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007a82:	4013      	ands	r3, r2
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	6892      	ldr	r2, [r2, #8]
 8007a88:	0211      	lsls	r1, r2, #8
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6952      	ldr	r2, [r2, #20]
 8007a8e:	0852      	lsrs	r2, r2, #1
 8007a90:	3a01      	subs	r2, #1
 8007a92:	0652      	lsls	r2, r2, #25
 8007a94:	4311      	orrs	r1, r2
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	6852      	ldr	r2, [r2, #4]
 8007a9a:	3a01      	subs	r2, #1
 8007a9c:	0112      	lsls	r2, r2, #4
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	4915      	ldr	r1, [pc, #84]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007aa6:	4b14      	ldr	r3, [pc, #80]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a13      	ldr	r2, [pc, #76]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ab0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ab2:	f7fd ff55 	bl	8005960 <HAL_GetTick>
 8007ab6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007ab8:	e009      	b.n	8007ace <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007aba:	f7fd ff51 	bl	8005960 <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d902      	bls.n	8007ace <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	73fb      	strb	r3, [r7, #15]
          break;
 8007acc:	e005      	b.n	8007ada <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007ace:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0ef      	beq.n	8007aba <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d106      	bne.n	8007aee <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007ae0:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007ae2:	695a      	ldr	r2, [r3, #20]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	4903      	ldr	r1, [pc, #12]	; (8007af8 <RCCEx_PLLSAI2_Config+0x1d0>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	40021000 	.word	0x40021000
 8007afc:	07ff800f 	.word	0x07ff800f
 8007b00:	ff9f800f 	.word	0xff9f800f
 8007b04:	f9ff800f 	.word	0xf9ff800f

08007b08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e07c      	b.n	8007c14 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d106      	bne.n	8007b3a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7fd fc5d 	bl	80053f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b50:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b5a:	d902      	bls.n	8007b62 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	e002      	b.n	8007b68 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b66:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007b70:	d007      	beq.n	8007b82 <HAL_SPI_Init+0x7a>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b7a:	d002      	beq.n	8007b82 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10b      	bne.n	8007ba2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b92:	d903      	bls.n	8007b9c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	631a      	str	r2, [r3, #48]	; 0x30
 8007b9a:	e002      	b.n	8007ba2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	ea42 0103 	orr.w	r1, r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	0c1b      	lsrs	r3, r3, #16
 8007be2:	f003 0204 	and.w	r2, r3, #4
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bea:	431a      	orrs	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	ea42 0103 	orr.w	r1, r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d101      	bne.n	8007c3e <HAL_SPI_Transmit+0x22>
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	e150      	b.n	8007ee0 <HAL_SPI_Transmit+0x2c4>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c46:	f7fd fe8b 	bl	8005960 <HAL_GetTick>
 8007c4a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007c4c:	88fb      	ldrh	r3, [r7, #6]
 8007c4e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d002      	beq.n	8007c62 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c60:	e135      	b.n	8007ece <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d002      	beq.n	8007c6e <HAL_SPI_Transmit+0x52>
 8007c68:	88fb      	ldrh	r3, [r7, #6]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d102      	bne.n	8007c74 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c72:	e12c      	b.n	8007ece <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2203      	movs	r2, #3
 8007c78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	88fa      	ldrh	r2, [r7, #6]
 8007c8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	88fa      	ldrh	r2, [r7, #6]
 8007c92:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cbe:	d107      	bne.n	8007cd0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cda:	2b40      	cmp	r3, #64	; 0x40
 8007cdc:	d007      	beq.n	8007cee <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cf6:	d94b      	bls.n	8007d90 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <HAL_SPI_Transmit+0xea>
 8007d00:	8afb      	ldrh	r3, [r7, #22]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d13e      	bne.n	8007d84 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0a:	881a      	ldrh	r2, [r3, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d16:	1c9a      	adds	r2, r3, #2
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	3b01      	subs	r3, #1
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d2a:	e02b      	b.n	8007d84 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d112      	bne.n	8007d60 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3e:	881a      	ldrh	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4a:	1c9a      	adds	r2, r3, #2
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	3b01      	subs	r3, #1
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d5e:	e011      	b.n	8007d84 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d60:	f7fd fdfe 	bl	8005960 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d803      	bhi.n	8007d78 <HAL_SPI_Transmit+0x15c>
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d76:	d102      	bne.n	8007d7e <HAL_SPI_Transmit+0x162>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d102      	bne.n	8007d84 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d82:	e0a4      	b.n	8007ece <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1ce      	bne.n	8007d2c <HAL_SPI_Transmit+0x110>
 8007d8e:	e07c      	b.n	8007e8a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <HAL_SPI_Transmit+0x182>
 8007d98:	8afb      	ldrh	r3, [r7, #22]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d170      	bne.n	8007e80 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d912      	bls.n	8007dce <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dac:	881a      	ldrh	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db8:	1c9a      	adds	r2, r3, #2
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	3b02      	subs	r3, #2
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007dcc:	e058      	b.n	8007e80 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	330c      	adds	r3, #12
 8007dd8:	7812      	ldrb	r2, [r2, #0]
 8007dda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007df4:	e044      	b.n	8007e80 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d12b      	bne.n	8007e5c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d912      	bls.n	8007e34 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e12:	881a      	ldrh	r2, [r3, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1e:	1c9a      	adds	r2, r3, #2
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	3b02      	subs	r3, #2
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e32:	e025      	b.n	8007e80 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	330c      	adds	r3, #12
 8007e3e:	7812      	ldrb	r2, [r2, #0]
 8007e40:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	3b01      	subs	r3, #1
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e5a:	e011      	b.n	8007e80 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e5c:	f7fd fd80 	bl	8005960 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d803      	bhi.n	8007e74 <HAL_SPI_Transmit+0x258>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e72:	d102      	bne.n	8007e7a <HAL_SPI_Transmit+0x25e>
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d102      	bne.n	8007e80 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e7e:	e026      	b.n	8007ece <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1b5      	bne.n	8007df6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f000 fc94 	bl	80087bc <SPI_EndRxTxTransaction>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10a      	bne.n	8007ebe <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	613b      	str	r3, [r7, #16]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	613b      	str	r3, [r7, #16]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	613b      	str	r3, [r7, #16]
 8007ebc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	77fb      	strb	r3, [r7, #31]
 8007eca:	e000      	b.n	8007ece <HAL_SPI_Transmit+0x2b2>
  }

error:
 8007ecc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007ede:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3720      	adds	r7, #32
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b088      	sub	sp, #32
 8007eec:	af02      	add	r7, sp, #8
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f04:	d112      	bne.n	8007f2c <HAL_SPI_Receive+0x44>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10e      	bne.n	8007f2c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2204      	movs	r2, #4
 8007f12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007f16:	88fa      	ldrh	r2, [r7, #6]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	68b9      	ldr	r1, [r7, #8]
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 f908 	bl	8008138 <HAL_SPI_TransmitReceive>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	e101      	b.n	8008130 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d101      	bne.n	8007f3a <HAL_SPI_Receive+0x52>
 8007f36:	2302      	movs	r3, #2
 8007f38:	e0fa      	b.n	8008130 <HAL_SPI_Receive+0x248>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f42:	f7fd fd0d 	bl	8005960 <HAL_GetTick>
 8007f46:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d002      	beq.n	8007f5a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007f54:	2302      	movs	r3, #2
 8007f56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f58:	e0e1      	b.n	800811e <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <HAL_SPI_Receive+0x7e>
 8007f60:	88fb      	ldrh	r3, [r7, #6]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d102      	bne.n	8007f6c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f6a:	e0d8      	b.n	800811e <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2204      	movs	r2, #4
 8007f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	88fa      	ldrh	r2, [r7, #6]
 8007f84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	88fa      	ldrh	r2, [r7, #6]
 8007f8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fb6:	d908      	bls.n	8007fca <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007fc6:	605a      	str	r2, [r3, #4]
 8007fc8:	e007      	b.n	8007fda <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fd8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fe2:	d107      	bne.n	8007ff4 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ff2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffe:	2b40      	cmp	r3, #64	; 0x40
 8008000:	d007      	beq.n	8008012 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008010:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800801a:	d867      	bhi.n	80080ec <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800801c:	e030      	b.n	8008080 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b01      	cmp	r3, #1
 800802a:	d117      	bne.n	800805c <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f103 020c 	add.w	r2, r3, #12
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008038:	7812      	ldrb	r2, [r2, #0]
 800803a:	b2d2      	uxtb	r2, r2
 800803c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800804e:	b29b      	uxth	r3, r3
 8008050:	3b01      	subs	r3, #1
 8008052:	b29a      	uxth	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800805a:	e011      	b.n	8008080 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800805c:	f7fd fc80 	bl	8005960 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	429a      	cmp	r2, r3
 800806a:	d803      	bhi.n	8008074 <HAL_SPI_Receive+0x18c>
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008072:	d102      	bne.n	800807a <HAL_SPI_Receive+0x192>
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d102      	bne.n	8008080 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800807e:	e04e      	b.n	800811e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008086:	b29b      	uxth	r3, r3
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1c8      	bne.n	800801e <HAL_SPI_Receive+0x136>
 800808c:	e034      	b.n	80080f8 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b01      	cmp	r3, #1
 800809a:	d115      	bne.n	80080c8 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68da      	ldr	r2, [r3, #12]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a6:	b292      	uxth	r2, r2
 80080a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	1c9a      	adds	r2, r3, #2
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	3b01      	subs	r3, #1
 80080be:	b29a      	uxth	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80080c6:	e011      	b.n	80080ec <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080c8:	f7fd fc4a 	bl	8005960 <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d803      	bhi.n	80080e0 <HAL_SPI_Receive+0x1f8>
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080de:	d102      	bne.n	80080e6 <HAL_SPI_Receive+0x1fe>
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d102      	bne.n	80080ec <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80080ea:	e018      	b.n	800811e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1ca      	bne.n	800808e <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 fb05 	bl	800870c <SPI_EndRxTransaction>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d002      	beq.n	800810e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2220      	movs	r2, #32
 800810c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	75fb      	strb	r3, [r7, #23]
 800811a:	e000      	b.n	800811e <HAL_SPI_Receive+0x236>
  }

error :
 800811c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800812e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3718      	adds	r7, #24
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08a      	sub	sp, #40	; 0x28
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008146:	2301      	movs	r3, #1
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008156:	2b01      	cmp	r3, #1
 8008158:	d101      	bne.n	800815e <HAL_SPI_TransmitReceive+0x26>
 800815a:	2302      	movs	r3, #2
 800815c:	e1fb      	b.n	8008556 <HAL_SPI_TransmitReceive+0x41e>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008166:	f7fd fbfb 	bl	8005960 <HAL_GetTick>
 800816a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008172:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800817a:	887b      	ldrh	r3, [r7, #2]
 800817c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800817e:	887b      	ldrh	r3, [r7, #2]
 8008180:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008182:	7efb      	ldrb	r3, [r7, #27]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d00e      	beq.n	80081a6 <HAL_SPI_TransmitReceive+0x6e>
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800818e:	d106      	bne.n	800819e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d102      	bne.n	800819e <HAL_SPI_TransmitReceive+0x66>
 8008198:	7efb      	ldrb	r3, [r7, #27]
 800819a:	2b04      	cmp	r3, #4
 800819c:	d003      	beq.n	80081a6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800819e:	2302      	movs	r3, #2
 80081a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80081a4:	e1cd      	b.n	8008542 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d005      	beq.n	80081b8 <HAL_SPI_TransmitReceive+0x80>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <HAL_SPI_TransmitReceive+0x80>
 80081b2:	887b      	ldrh	r3, [r7, #2]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d103      	bne.n	80081c0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80081be:	e1c0      	b.n	8008542 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d003      	beq.n	80081d4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2205      	movs	r2, #5
 80081d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	887a      	ldrh	r2, [r7, #2]
 80081e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	887a      	ldrh	r2, [r7, #2]
 80081ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	887a      	ldrh	r2, [r7, #2]
 80081fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	887a      	ldrh	r2, [r7, #2]
 8008200:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008216:	d802      	bhi.n	800821e <HAL_SPI_TransmitReceive+0xe6>
 8008218:	8a3b      	ldrh	r3, [r7, #16]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d908      	bls.n	8008230 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800822c:	605a      	str	r2, [r3, #4]
 800822e:	e007      	b.n	8008240 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800823e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824a:	2b40      	cmp	r3, #64	; 0x40
 800824c:	d007      	beq.n	800825e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800825c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008266:	d97c      	bls.n	8008362 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <HAL_SPI_TransmitReceive+0x13e>
 8008270:	8a7b      	ldrh	r3, [r7, #18]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d169      	bne.n	800834a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827a:	881a      	ldrh	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008286:	1c9a      	adds	r2, r3, #2
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008290:	b29b      	uxth	r3, r3
 8008292:	3b01      	subs	r3, #1
 8008294:	b29a      	uxth	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800829a:	e056      	b.n	800834a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d11b      	bne.n	80082e2 <HAL_SPI_TransmitReceive+0x1aa>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d016      	beq.n	80082e2 <HAL_SPI_TransmitReceive+0x1aa>
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d113      	bne.n	80082e2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082be:	881a      	ldrh	r2, [r3, #0]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ca:	1c9a      	adds	r2, r3, #2
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	3b01      	subs	r3, #1
 80082d8:	b29a      	uxth	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d11c      	bne.n	800832a <HAL_SPI_TransmitReceive+0x1f2>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d016      	beq.n	800832a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	b292      	uxth	r2, r2
 8008308:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	1c9a      	adds	r2, r3, #2
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800831a:	b29b      	uxth	r3, r3
 800831c:	3b01      	subs	r3, #1
 800831e:	b29a      	uxth	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008326:	2301      	movs	r3, #1
 8008328:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800832a:	f7fd fb19 	bl	8005960 <HAL_GetTick>
 800832e:	4602      	mov	r2, r0
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008336:	429a      	cmp	r2, r3
 8008338:	d807      	bhi.n	800834a <HAL_SPI_TransmitReceive+0x212>
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008340:	d003      	beq.n	800834a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008348:	e0fb      	b.n	8008542 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800834e:	b29b      	uxth	r3, r3
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1a3      	bne.n	800829c <HAL_SPI_TransmitReceive+0x164>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800835a:	b29b      	uxth	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	d19d      	bne.n	800829c <HAL_SPI_TransmitReceive+0x164>
 8008360:	e0df      	b.n	8008522 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <HAL_SPI_TransmitReceive+0x23a>
 800836a:	8a7b      	ldrh	r3, [r7, #18]
 800836c:	2b01      	cmp	r3, #1
 800836e:	f040 80cb 	bne.w	8008508 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008376:	b29b      	uxth	r3, r3
 8008378:	2b01      	cmp	r3, #1
 800837a:	d912      	bls.n	80083a2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008380:	881a      	ldrh	r2, [r3, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838c:	1c9a      	adds	r2, r3, #2
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008396:	b29b      	uxth	r3, r3
 8008398:	3b02      	subs	r3, #2
 800839a:	b29a      	uxth	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80083a0:	e0b2      	b.n	8008508 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	330c      	adds	r3, #12
 80083ac:	7812      	ldrb	r2, [r2, #0]
 80083ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b4:	1c5a      	adds	r2, r3, #1
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083be:	b29b      	uxth	r3, r3
 80083c0:	3b01      	subs	r3, #1
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083c8:	e09e      	b.n	8008508 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d134      	bne.n	8008442 <HAL_SPI_TransmitReceive+0x30a>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083dc:	b29b      	uxth	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d02f      	beq.n	8008442 <HAL_SPI_TransmitReceive+0x30a>
 80083e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d12c      	bne.n	8008442 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d912      	bls.n	8008418 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f6:	881a      	ldrh	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008402:	1c9a      	adds	r2, r3, #2
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800840c:	b29b      	uxth	r3, r3
 800840e:	3b02      	subs	r3, #2
 8008410:	b29a      	uxth	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008416:	e012      	b.n	800843e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	330c      	adds	r3, #12
 8008422:	7812      	ldrb	r2, [r2, #0]
 8008424:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008434:	b29b      	uxth	r3, r3
 8008436:	3b01      	subs	r3, #1
 8008438:	b29a      	uxth	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f003 0301 	and.w	r3, r3, #1
 800844c:	2b01      	cmp	r3, #1
 800844e:	d148      	bne.n	80084e2 <HAL_SPI_TransmitReceive+0x3aa>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008456:	b29b      	uxth	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	d042      	beq.n	80084e2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008462:	b29b      	uxth	r3, r3
 8008464:	2b01      	cmp	r3, #1
 8008466:	d923      	bls.n	80084b0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68da      	ldr	r2, [r3, #12]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008472:	b292      	uxth	r2, r2
 8008474:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847a:	1c9a      	adds	r2, r3, #2
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008486:	b29b      	uxth	r3, r3
 8008488:	3b02      	subs	r3, #2
 800848a:	b29a      	uxth	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008498:	b29b      	uxth	r3, r3
 800849a:	2b01      	cmp	r3, #1
 800849c:	d81f      	bhi.n	80084de <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	685a      	ldr	r2, [r3, #4]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084ac:	605a      	str	r2, [r3, #4]
 80084ae:	e016      	b.n	80084de <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f103 020c 	add.w	r2, r3, #12
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084bc:	7812      	ldrb	r2, [r2, #0]
 80084be:	b2d2      	uxtb	r2, r2
 80084c0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	3b01      	subs	r3, #1
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084de:	2301      	movs	r3, #1
 80084e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80084e2:	f7fd fa3d 	bl	8005960 <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d803      	bhi.n	80084fa <HAL_SPI_TransmitReceive+0x3c2>
 80084f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f8:	d102      	bne.n	8008500 <HAL_SPI_TransmitReceive+0x3c8>
 80084fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d103      	bne.n	8008508 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008500:	2303      	movs	r3, #3
 8008502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008506:	e01c      	b.n	8008542 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800850c:	b29b      	uxth	r3, r3
 800850e:	2b00      	cmp	r3, #0
 8008510:	f47f af5b 	bne.w	80083ca <HAL_SPI_TransmitReceive+0x292>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800851a:	b29b      	uxth	r3, r3
 800851c:	2b00      	cmp	r3, #0
 800851e:	f47f af54 	bne.w	80083ca <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008522:	69fa      	ldr	r2, [r7, #28]
 8008524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 f948 	bl	80087bc <SPI_EndRxTxTransaction>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d006      	beq.n	8008540 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2220      	movs	r2, #32
 800853c:	661a      	str	r2, [r3, #96]	; 0x60
 800853e:	e000      	b.n	8008542 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008540:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008552:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008556:	4618      	mov	r0, r3
 8008558:	3728      	adds	r7, #40	; 0x28
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	603b      	str	r3, [r7, #0]
 800856a:	4613      	mov	r3, r2
 800856c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800856e:	e04c      	b.n	800860a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008576:	d048      	beq.n	800860a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008578:	f7fd f9f2 	bl	8005960 <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	429a      	cmp	r2, r3
 8008586:	d902      	bls.n	800858e <SPI_WaitFlagStateUntilTimeout+0x30>
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d13d      	bne.n	800860a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800859c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085a6:	d111      	bne.n	80085cc <SPI_WaitFlagStateUntilTimeout+0x6e>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085b0:	d004      	beq.n	80085bc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ba:	d107      	bne.n	80085cc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d4:	d10f      	bne.n	80085f6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e00f      	b.n	800862a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689a      	ldr	r2, [r3, #8]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	4013      	ands	r3, r2
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	429a      	cmp	r2, r3
 8008618:	bf0c      	ite	eq
 800861a:	2301      	moveq	r3, #1
 800861c:	2300      	movne	r3, #0
 800861e:	b2db      	uxtb	r3, r3
 8008620:	461a      	mov	r2, r3
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	429a      	cmp	r2, r3
 8008626:	d1a3      	bne.n	8008570 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	607a      	str	r2, [r7, #4]
 800863e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8008640:	e057      	b.n	80086f2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008648:	d106      	bne.n	8008658 <SPI_WaitFifoStateUntilTimeout+0x26>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d103      	bne.n	8008658 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	330c      	adds	r3, #12
 8008656:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865e:	d048      	beq.n	80086f2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008660:	f7fd f97e 	bl	8005960 <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	429a      	cmp	r2, r3
 800866e:	d902      	bls.n	8008676 <SPI_WaitFifoStateUntilTimeout+0x44>
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d13d      	bne.n	80086f2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008684:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800868e:	d111      	bne.n	80086b4 <SPI_WaitFifoStateUntilTimeout+0x82>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008698:	d004      	beq.n	80086a4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a2:	d107      	bne.n	80086b4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086bc:	d10f      	bne.n	80086de <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e008      	b.n	8008704 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	689a      	ldr	r2, [r3, #8]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	4013      	ands	r3, r2
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d19f      	bne.n	8008642 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af02      	add	r7, sp, #8
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008720:	d111      	bne.n	8008746 <SPI_EndRxTransaction+0x3a>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800872a:	d004      	beq.n	8008736 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008734:	d107      	bne.n	8008746 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008744:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2200      	movs	r2, #0
 800874e:	2180      	movs	r1, #128	; 0x80
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f7ff ff04 	bl	800855e <SPI_WaitFlagStateUntilTimeout>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d007      	beq.n	800876c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008760:	f043 0220 	orr.w	r2, r3, #32
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e023      	b.n	80087b4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008774:	d11d      	bne.n	80087b2 <SPI_EndRxTransaction+0xa6>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800877e:	d004      	beq.n	800878a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008788:	d113      	bne.n	80087b2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2200      	movs	r2, #0
 8008792:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f7ff ff4b 	bl	8008632 <SPI_WaitFifoStateUntilTimeout>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d007      	beq.n	80087b2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087a6:	f043 0220 	orr.w	r2, r3, #32
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e000      	b.n	80087b4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af02      	add	r7, sp, #8
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f7ff ff2c 	bl	8008632 <SPI_WaitFifoStateUntilTimeout>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d007      	beq.n	80087f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087e4:	f043 0220 	orr.w	r2, r3, #32
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e027      	b.n	8008840 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2200      	movs	r2, #0
 80087f8:	2180      	movs	r1, #128	; 0x80
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f7ff feaf 	bl	800855e <SPI_WaitFlagStateUntilTimeout>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d007      	beq.n	8008816 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800880a:	f043 0220 	orr.w	r2, r3, #32
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e014      	b.n	8008840 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2200      	movs	r2, #0
 800881e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f7ff ff05 	bl	8008632 <SPI_WaitFifoStateUntilTimeout>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d007      	beq.n	800883e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008832:	f043 0220 	orr.w	r2, r3, #32
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e000      	b.n	8008840 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e01d      	b.n	8008896 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d106      	bne.n	8008874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7fc fe02 	bl	8005478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2202      	movs	r2, #2
 8008878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3304      	adds	r3, #4
 8008884:	4619      	mov	r1, r3
 8008886:	4610      	mov	r0, r2
 8008888:	f000 fa68 	bl	8008d5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b082      	sub	sp, #8
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e01d      	b.n	80088ec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d106      	bne.n	80088ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f815 	bl	80088f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2202      	movs	r2, #2
 80088ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	3304      	adds	r3, #4
 80088da:	4619      	mov	r1, r3
 80088dc:	4610      	mov	r0, r2
 80088de:	f000 fa3d 	bl	8008d5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2201      	movs	r2, #1
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fe28 	bl	8009570 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a1e      	ldr	r2, [pc, #120]	; (80089a0 <HAL_TIM_PWM_Start+0x98>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d013      	beq.n	8008952 <HAL_TIM_PWM_Start+0x4a>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a1d      	ldr	r2, [pc, #116]	; (80089a4 <HAL_TIM_PWM_Start+0x9c>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d00e      	beq.n	8008952 <HAL_TIM_PWM_Start+0x4a>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a1b      	ldr	r2, [pc, #108]	; (80089a8 <HAL_TIM_PWM_Start+0xa0>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d009      	beq.n	8008952 <HAL_TIM_PWM_Start+0x4a>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a1a      	ldr	r2, [pc, #104]	; (80089ac <HAL_TIM_PWM_Start+0xa4>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d004      	beq.n	8008952 <HAL_TIM_PWM_Start+0x4a>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a18      	ldr	r2, [pc, #96]	; (80089b0 <HAL_TIM_PWM_Start+0xa8>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d101      	bne.n	8008956 <HAL_TIM_PWM_Start+0x4e>
 8008952:	2301      	movs	r3, #1
 8008954:	e000      	b.n	8008958 <HAL_TIM_PWM_Start+0x50>
 8008956:	2300      	movs	r3, #0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d007      	beq.n	800896c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800896a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	689a      	ldr	r2, [r3, #8]
 8008972:	4b10      	ldr	r3, [pc, #64]	; (80089b4 <HAL_TIM_PWM_Start+0xac>)
 8008974:	4013      	ands	r3, r2
 8008976:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2b06      	cmp	r3, #6
 800897c:	d00b      	beq.n	8008996 <HAL_TIM_PWM_Start+0x8e>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008984:	d007      	beq.n	8008996 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f042 0201 	orr.w	r2, r2, #1
 8008994:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	40012c00 	.word	0x40012c00
 80089a4:	40013400 	.word	0x40013400
 80089a8:	40014000 	.word	0x40014000
 80089ac:	40014400 	.word	0x40014400
 80089b0:	40014800 	.word	0x40014800
 80089b4:	00010007 	.word	0x00010007

080089b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d101      	bne.n	80089d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80089ce:	2302      	movs	r3, #2
 80089d0:	e105      	b.n	8008bde <HAL_TIM_PWM_ConfigChannel+0x226>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2202      	movs	r2, #2
 80089de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b14      	cmp	r3, #20
 80089e6:	f200 80f0 	bhi.w	8008bca <HAL_TIM_PWM_ConfigChannel+0x212>
 80089ea:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a45 	.word	0x08008a45
 80089f4:	08008bcb 	.word	0x08008bcb
 80089f8:	08008bcb 	.word	0x08008bcb
 80089fc:	08008bcb 	.word	0x08008bcb
 8008a00:	08008a85 	.word	0x08008a85
 8008a04:	08008bcb 	.word	0x08008bcb
 8008a08:	08008bcb 	.word	0x08008bcb
 8008a0c:	08008bcb 	.word	0x08008bcb
 8008a10:	08008ac7 	.word	0x08008ac7
 8008a14:	08008bcb 	.word	0x08008bcb
 8008a18:	08008bcb 	.word	0x08008bcb
 8008a1c:	08008bcb 	.word	0x08008bcb
 8008a20:	08008b07 	.word	0x08008b07
 8008a24:	08008bcb 	.word	0x08008bcb
 8008a28:	08008bcb 	.word	0x08008bcb
 8008a2c:	08008bcb 	.word	0x08008bcb
 8008a30:	08008b49 	.word	0x08008b49
 8008a34:	08008bcb 	.word	0x08008bcb
 8008a38:	08008bcb 	.word	0x08008bcb
 8008a3c:	08008bcb 	.word	0x08008bcb
 8008a40:	08008b89 	.word	0x08008b89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 fa20 	bl	8008e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	699a      	ldr	r2, [r3, #24]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f042 0208 	orr.w	r2, r2, #8
 8008a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	699a      	ldr	r2, [r3, #24]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 0204 	bic.w	r2, r2, #4
 8008a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6999      	ldr	r1, [r3, #24]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	691a      	ldr	r2, [r3, #16]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	619a      	str	r2, [r3, #24]
      break;
 8008a82:	e0a3      	b.n	8008bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68b9      	ldr	r1, [r7, #8]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 fa90 	bl	8008fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	699a      	ldr	r2, [r3, #24]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	699a      	ldr	r2, [r3, #24]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6999      	ldr	r1, [r3, #24]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	021a      	lsls	r2, r3, #8
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	619a      	str	r2, [r3, #24]
      break;
 8008ac4:	e082      	b.n	8008bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68b9      	ldr	r1, [r7, #8]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 faf9 	bl	80090c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	69da      	ldr	r2, [r3, #28]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f042 0208 	orr.w	r2, r2, #8
 8008ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	69da      	ldr	r2, [r3, #28]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f022 0204 	bic.w	r2, r2, #4
 8008af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	69d9      	ldr	r1, [r3, #28]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	691a      	ldr	r2, [r3, #16]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	430a      	orrs	r2, r1
 8008b02:	61da      	str	r2, [r3, #28]
      break;
 8008b04:	e062      	b.n	8008bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68b9      	ldr	r1, [r7, #8]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 fb61 	bl	80091d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	69da      	ldr	r2, [r3, #28]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69da      	ldr	r2, [r3, #28]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69d9      	ldr	r1, [r3, #28]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	021a      	lsls	r2, r3, #8
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	430a      	orrs	r2, r1
 8008b44:	61da      	str	r2, [r3, #28]
      break;
 8008b46:	e041      	b.n	8008bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68b9      	ldr	r1, [r7, #8]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 fbaa 	bl	80092a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f042 0208 	orr.w	r2, r2, #8
 8008b62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f022 0204 	bic.w	r2, r2, #4
 8008b72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	691a      	ldr	r2, [r3, #16]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b86:	e021      	b.n	8008bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68b9      	ldr	r1, [r7, #8]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f000 fbee 	bl	8009370 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ba2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	021a      	lsls	r2, r3, #8
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008bc8:	e000      	b.n	8008bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8008bca:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop

08008be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d101      	bne.n	8008c00 <HAL_TIM_ConfigClockSource+0x18>
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	e0a8      	b.n	8008d52 <HAL_TIM_ConfigClockSource+0x16a>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b40      	cmp	r3, #64	; 0x40
 8008c3a:	d067      	beq.n	8008d0c <HAL_TIM_ConfigClockSource+0x124>
 8008c3c:	2b40      	cmp	r3, #64	; 0x40
 8008c3e:	d80b      	bhi.n	8008c58 <HAL_TIM_ConfigClockSource+0x70>
 8008c40:	2b10      	cmp	r3, #16
 8008c42:	d073      	beq.n	8008d2c <HAL_TIM_ConfigClockSource+0x144>
 8008c44:	2b10      	cmp	r3, #16
 8008c46:	d802      	bhi.n	8008c4e <HAL_TIM_ConfigClockSource+0x66>
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d06f      	beq.n	8008d2c <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008c4c:	e078      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008c4e:	2b20      	cmp	r3, #32
 8008c50:	d06c      	beq.n	8008d2c <HAL_TIM_ConfigClockSource+0x144>
 8008c52:	2b30      	cmp	r3, #48	; 0x30
 8008c54:	d06a      	beq.n	8008d2c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8008c56:	e073      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008c58:	2b70      	cmp	r3, #112	; 0x70
 8008c5a:	d00d      	beq.n	8008c78 <HAL_TIM_ConfigClockSource+0x90>
 8008c5c:	2b70      	cmp	r3, #112	; 0x70
 8008c5e:	d804      	bhi.n	8008c6a <HAL_TIM_ConfigClockSource+0x82>
 8008c60:	2b50      	cmp	r3, #80	; 0x50
 8008c62:	d033      	beq.n	8008ccc <HAL_TIM_ConfigClockSource+0xe4>
 8008c64:	2b60      	cmp	r3, #96	; 0x60
 8008c66:	d041      	beq.n	8008cec <HAL_TIM_ConfigClockSource+0x104>
      break;
 8008c68:	e06a      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c6e:	d066      	beq.n	8008d3e <HAL_TIM_ConfigClockSource+0x156>
 8008c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c74:	d017      	beq.n	8008ca6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8008c76:	e063      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6818      	ldr	r0, [r3, #0]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	6899      	ldr	r1, [r3, #8]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f000 fc52 	bl	8009530 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	609a      	str	r2, [r3, #8]
      break;
 8008ca4:	e04c      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6818      	ldr	r0, [r3, #0]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	6899      	ldr	r1, [r3, #8]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	f000 fc3b 	bl	8009530 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689a      	ldr	r2, [r3, #8]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cc8:	609a      	str	r2, [r3, #8]
      break;
 8008cca:	e039      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6818      	ldr	r0, [r3, #0]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	6859      	ldr	r1, [r3, #4]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	f000 fbaf 	bl	800943c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2150      	movs	r1, #80	; 0x50
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 fc08 	bl	80094fa <TIM_ITRx_SetConfig>
      break;
 8008cea:	e029      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6818      	ldr	r0, [r3, #0]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	6859      	ldr	r1, [r3, #4]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	f000 fbce 	bl	800949a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2160      	movs	r1, #96	; 0x60
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 fbf8 	bl	80094fa <TIM_ITRx_SetConfig>
      break;
 8008d0a:	e019      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6818      	ldr	r0, [r3, #0]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	6859      	ldr	r1, [r3, #4]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f000 fb8f 	bl	800943c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2140      	movs	r1, #64	; 0x40
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 fbe8 	bl	80094fa <TIM_ITRx_SetConfig>
      break;
 8008d2a:	e009      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4619      	mov	r1, r3
 8008d36:	4610      	mov	r0, r2
 8008d38:	f000 fbdf 	bl	80094fa <TIM_ITRx_SetConfig>
      break;
 8008d3c:	e000      	b.n	8008d40 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8008d3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
	...

08008d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a40      	ldr	r2, [pc, #256]	; (8008e70 <TIM_Base_SetConfig+0x114>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d013      	beq.n	8008d9c <TIM_Base_SetConfig+0x40>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d7a:	d00f      	beq.n	8008d9c <TIM_Base_SetConfig+0x40>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a3d      	ldr	r2, [pc, #244]	; (8008e74 <TIM_Base_SetConfig+0x118>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d00b      	beq.n	8008d9c <TIM_Base_SetConfig+0x40>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a3c      	ldr	r2, [pc, #240]	; (8008e78 <TIM_Base_SetConfig+0x11c>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d007      	beq.n	8008d9c <TIM_Base_SetConfig+0x40>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a3b      	ldr	r2, [pc, #236]	; (8008e7c <TIM_Base_SetConfig+0x120>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d003      	beq.n	8008d9c <TIM_Base_SetConfig+0x40>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a3a      	ldr	r2, [pc, #232]	; (8008e80 <TIM_Base_SetConfig+0x124>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d108      	bne.n	8008dae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a2f      	ldr	r2, [pc, #188]	; (8008e70 <TIM_Base_SetConfig+0x114>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d01f      	beq.n	8008df6 <TIM_Base_SetConfig+0x9a>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dbc:	d01b      	beq.n	8008df6 <TIM_Base_SetConfig+0x9a>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a2c      	ldr	r2, [pc, #176]	; (8008e74 <TIM_Base_SetConfig+0x118>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d017      	beq.n	8008df6 <TIM_Base_SetConfig+0x9a>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a2b      	ldr	r2, [pc, #172]	; (8008e78 <TIM_Base_SetConfig+0x11c>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d013      	beq.n	8008df6 <TIM_Base_SetConfig+0x9a>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a2a      	ldr	r2, [pc, #168]	; (8008e7c <TIM_Base_SetConfig+0x120>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d00f      	beq.n	8008df6 <TIM_Base_SetConfig+0x9a>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a29      	ldr	r2, [pc, #164]	; (8008e80 <TIM_Base_SetConfig+0x124>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d00b      	beq.n	8008df6 <TIM_Base_SetConfig+0x9a>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a28      	ldr	r2, [pc, #160]	; (8008e84 <TIM_Base_SetConfig+0x128>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d007      	beq.n	8008df6 <TIM_Base_SetConfig+0x9a>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a27      	ldr	r2, [pc, #156]	; (8008e88 <TIM_Base_SetConfig+0x12c>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d003      	beq.n	8008df6 <TIM_Base_SetConfig+0x9a>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a26      	ldr	r2, [pc, #152]	; (8008e8c <TIM_Base_SetConfig+0x130>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d108      	bne.n	8008e08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a10      	ldr	r2, [pc, #64]	; (8008e70 <TIM_Base_SetConfig+0x114>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d00f      	beq.n	8008e54 <TIM_Base_SetConfig+0xf8>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a12      	ldr	r2, [pc, #72]	; (8008e80 <TIM_Base_SetConfig+0x124>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d00b      	beq.n	8008e54 <TIM_Base_SetConfig+0xf8>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a11      	ldr	r2, [pc, #68]	; (8008e84 <TIM_Base_SetConfig+0x128>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d007      	beq.n	8008e54 <TIM_Base_SetConfig+0xf8>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a10      	ldr	r2, [pc, #64]	; (8008e88 <TIM_Base_SetConfig+0x12c>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d003      	beq.n	8008e54 <TIM_Base_SetConfig+0xf8>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a0f      	ldr	r2, [pc, #60]	; (8008e8c <TIM_Base_SetConfig+0x130>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d103      	bne.n	8008e5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	691a      	ldr	r2, [r3, #16]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	615a      	str	r2, [r3, #20]
}
 8008e62:	bf00      	nop
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	40012c00 	.word	0x40012c00
 8008e74:	40000400 	.word	0x40000400
 8008e78:	40000800 	.word	0x40000800
 8008e7c:	40000c00 	.word	0x40000c00
 8008e80:	40013400 	.word	0x40013400
 8008e84:	40014000 	.word	0x40014000
 8008e88:	40014400 	.word	0x40014400
 8008e8c:	40014800 	.word	0x40014800

08008e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b087      	sub	sp, #28
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	f023 0201 	bic.w	r2, r3, #1
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	699b      	ldr	r3, [r3, #24]
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f023 0303 	bic.w	r3, r3, #3
 8008eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f023 0302 	bic.w	r3, r3, #2
 8008edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a2c      	ldr	r2, [pc, #176]	; (8008f9c <TIM_OC1_SetConfig+0x10c>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d00f      	beq.n	8008f10 <TIM_OC1_SetConfig+0x80>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a2b      	ldr	r2, [pc, #172]	; (8008fa0 <TIM_OC1_SetConfig+0x110>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d00b      	beq.n	8008f10 <TIM_OC1_SetConfig+0x80>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a2a      	ldr	r2, [pc, #168]	; (8008fa4 <TIM_OC1_SetConfig+0x114>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d007      	beq.n	8008f10 <TIM_OC1_SetConfig+0x80>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a29      	ldr	r2, [pc, #164]	; (8008fa8 <TIM_OC1_SetConfig+0x118>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d003      	beq.n	8008f10 <TIM_OC1_SetConfig+0x80>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a28      	ldr	r2, [pc, #160]	; (8008fac <TIM_OC1_SetConfig+0x11c>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d10c      	bne.n	8008f2a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f023 0308 	bic.w	r3, r3, #8
 8008f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f023 0304 	bic.w	r3, r3, #4
 8008f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a1b      	ldr	r2, [pc, #108]	; (8008f9c <TIM_OC1_SetConfig+0x10c>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d00f      	beq.n	8008f52 <TIM_OC1_SetConfig+0xc2>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a1a      	ldr	r2, [pc, #104]	; (8008fa0 <TIM_OC1_SetConfig+0x110>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d00b      	beq.n	8008f52 <TIM_OC1_SetConfig+0xc2>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a19      	ldr	r2, [pc, #100]	; (8008fa4 <TIM_OC1_SetConfig+0x114>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d007      	beq.n	8008f52 <TIM_OC1_SetConfig+0xc2>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a18      	ldr	r2, [pc, #96]	; (8008fa8 <TIM_OC1_SetConfig+0x118>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d003      	beq.n	8008f52 <TIM_OC1_SetConfig+0xc2>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a17      	ldr	r2, [pc, #92]	; (8008fac <TIM_OC1_SetConfig+0x11c>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d111      	bne.n	8008f76 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	621a      	str	r2, [r3, #32]
}
 8008f90:	bf00      	nop
 8008f92:	371c      	adds	r7, #28
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	40012c00 	.word	0x40012c00
 8008fa0:	40013400 	.word	0x40013400
 8008fa4:	40014000 	.word	0x40014000
 8008fa8:	40014400 	.word	0x40014400
 8008fac:	40014800 	.word	0x40014800

08008fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	f023 0210 	bic.w	r2, r3, #16
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	021b      	lsls	r3, r3, #8
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	f023 0320 	bic.w	r3, r3, #32
 8008ffe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	011b      	lsls	r3, r3, #4
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	4313      	orrs	r3, r2
 800900a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a28      	ldr	r2, [pc, #160]	; (80090b0 <TIM_OC2_SetConfig+0x100>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d003      	beq.n	800901c <TIM_OC2_SetConfig+0x6c>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a27      	ldr	r2, [pc, #156]	; (80090b4 <TIM_OC2_SetConfig+0x104>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d10d      	bne.n	8009038 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	011b      	lsls	r3, r3, #4
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	4313      	orrs	r3, r2
 800902e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009036:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a1d      	ldr	r2, [pc, #116]	; (80090b0 <TIM_OC2_SetConfig+0x100>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d00f      	beq.n	8009060 <TIM_OC2_SetConfig+0xb0>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a1c      	ldr	r2, [pc, #112]	; (80090b4 <TIM_OC2_SetConfig+0x104>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d00b      	beq.n	8009060 <TIM_OC2_SetConfig+0xb0>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a1b      	ldr	r2, [pc, #108]	; (80090b8 <TIM_OC2_SetConfig+0x108>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d007      	beq.n	8009060 <TIM_OC2_SetConfig+0xb0>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a1a      	ldr	r2, [pc, #104]	; (80090bc <TIM_OC2_SetConfig+0x10c>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d003      	beq.n	8009060 <TIM_OC2_SetConfig+0xb0>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a19      	ldr	r2, [pc, #100]	; (80090c0 <TIM_OC2_SetConfig+0x110>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d113      	bne.n	8009088 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009066:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800906e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	4313      	orrs	r3, r2
 800907a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	4313      	orrs	r3, r2
 8009086:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	693a      	ldr	r2, [r7, #16]
 800908c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	621a      	str	r2, [r3, #32]
}
 80090a2:	bf00      	nop
 80090a4:	371c      	adds	r7, #28
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	40012c00 	.word	0x40012c00
 80090b4:	40013400 	.word	0x40013400
 80090b8:	40014000 	.word	0x40014000
 80090bc:	40014400 	.word	0x40014400
 80090c0:	40014800 	.word	0x40014800

080090c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b087      	sub	sp, #28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f023 0303 	bic.w	r3, r3, #3
 80090fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	4313      	orrs	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	021b      	lsls	r3, r3, #8
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	4313      	orrs	r3, r2
 800911c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a27      	ldr	r2, [pc, #156]	; (80091c0 <TIM_OC3_SetConfig+0xfc>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d003      	beq.n	800912e <TIM_OC3_SetConfig+0x6a>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a26      	ldr	r2, [pc, #152]	; (80091c4 <TIM_OC3_SetConfig+0x100>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d10d      	bne.n	800914a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	021b      	lsls	r3, r3, #8
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	4313      	orrs	r3, r2
 8009140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a1c      	ldr	r2, [pc, #112]	; (80091c0 <TIM_OC3_SetConfig+0xfc>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d00f      	beq.n	8009172 <TIM_OC3_SetConfig+0xae>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a1b      	ldr	r2, [pc, #108]	; (80091c4 <TIM_OC3_SetConfig+0x100>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d00b      	beq.n	8009172 <TIM_OC3_SetConfig+0xae>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a1a      	ldr	r2, [pc, #104]	; (80091c8 <TIM_OC3_SetConfig+0x104>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d007      	beq.n	8009172 <TIM_OC3_SetConfig+0xae>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a19      	ldr	r2, [pc, #100]	; (80091cc <TIM_OC3_SetConfig+0x108>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d003      	beq.n	8009172 <TIM_OC3_SetConfig+0xae>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a18      	ldr	r2, [pc, #96]	; (80091d0 <TIM_OC3_SetConfig+0x10c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d113      	bne.n	800919a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	695b      	ldr	r3, [r3, #20]
 8009186:	011b      	lsls	r3, r3, #4
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	4313      	orrs	r3, r2
 800918c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	011b      	lsls	r3, r3, #4
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	4313      	orrs	r3, r2
 8009198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	697a      	ldr	r2, [r7, #20]
 80091b2:	621a      	str	r2, [r3, #32]
}
 80091b4:	bf00      	nop
 80091b6:	371c      	adds	r7, #28
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	40012c00 	.word	0x40012c00
 80091c4:	40013400 	.word	0x40013400
 80091c8:	40014000 	.word	0x40014000
 80091cc:	40014400 	.word	0x40014400
 80091d0:	40014800 	.word	0x40014800

080091d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b087      	sub	sp, #28
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800920e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	021b      	lsls	r3, r3, #8
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	4313      	orrs	r3, r2
 800921a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	031b      	lsls	r3, r3, #12
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	4313      	orrs	r3, r2
 800922e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a18      	ldr	r2, [pc, #96]	; (8009294 <TIM_OC4_SetConfig+0xc0>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d00f      	beq.n	8009258 <TIM_OC4_SetConfig+0x84>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a17      	ldr	r2, [pc, #92]	; (8009298 <TIM_OC4_SetConfig+0xc4>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d00b      	beq.n	8009258 <TIM_OC4_SetConfig+0x84>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a16      	ldr	r2, [pc, #88]	; (800929c <TIM_OC4_SetConfig+0xc8>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d007      	beq.n	8009258 <TIM_OC4_SetConfig+0x84>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a15      	ldr	r2, [pc, #84]	; (80092a0 <TIM_OC4_SetConfig+0xcc>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d003      	beq.n	8009258 <TIM_OC4_SetConfig+0x84>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a14      	ldr	r2, [pc, #80]	; (80092a4 <TIM_OC4_SetConfig+0xd0>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d109      	bne.n	800926c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800925e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	695b      	ldr	r3, [r3, #20]
 8009264:	019b      	lsls	r3, r3, #6
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	4313      	orrs	r3, r2
 800926a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	693a      	ldr	r2, [r7, #16]
 8009284:	621a      	str	r2, [r3, #32]
}
 8009286:	bf00      	nop
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	40012c00 	.word	0x40012c00
 8009298:	40013400 	.word	0x40013400
 800929c:	40014000 	.word	0x40014000
 80092a0:	40014400 	.word	0x40014400
 80092a4:	40014800 	.word	0x40014800

080092a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80092ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	041b      	lsls	r3, r3, #16
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a17      	ldr	r2, [pc, #92]	; (800935c <TIM_OC5_SetConfig+0xb4>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d00f      	beq.n	8009322 <TIM_OC5_SetConfig+0x7a>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a16      	ldr	r2, [pc, #88]	; (8009360 <TIM_OC5_SetConfig+0xb8>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d00b      	beq.n	8009322 <TIM_OC5_SetConfig+0x7a>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a15      	ldr	r2, [pc, #84]	; (8009364 <TIM_OC5_SetConfig+0xbc>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d007      	beq.n	8009322 <TIM_OC5_SetConfig+0x7a>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a14      	ldr	r2, [pc, #80]	; (8009368 <TIM_OC5_SetConfig+0xc0>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d003      	beq.n	8009322 <TIM_OC5_SetConfig+0x7a>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a13      	ldr	r2, [pc, #76]	; (800936c <TIM_OC5_SetConfig+0xc4>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d109      	bne.n	8009336 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009328:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	021b      	lsls	r3, r3, #8
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	4313      	orrs	r3, r2
 8009334:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	621a      	str	r2, [r3, #32]
}
 8009350:	bf00      	nop
 8009352:	371c      	adds	r7, #28
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	40012c00 	.word	0x40012c00
 8009360:	40013400 	.word	0x40013400
 8009364:	40014000 	.word	0x40014000
 8009368:	40014400 	.word	0x40014400
 800936c:	40014800 	.word	0x40014800

08009370 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009370:	b480      	push	{r7}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800939e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	021b      	lsls	r3, r3, #8
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	051b      	lsls	r3, r3, #20
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a18      	ldr	r2, [pc, #96]	; (8009428 <TIM_OC6_SetConfig+0xb8>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d00f      	beq.n	80093ec <TIM_OC6_SetConfig+0x7c>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a17      	ldr	r2, [pc, #92]	; (800942c <TIM_OC6_SetConfig+0xbc>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d00b      	beq.n	80093ec <TIM_OC6_SetConfig+0x7c>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a16      	ldr	r2, [pc, #88]	; (8009430 <TIM_OC6_SetConfig+0xc0>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d007      	beq.n	80093ec <TIM_OC6_SetConfig+0x7c>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a15      	ldr	r2, [pc, #84]	; (8009434 <TIM_OC6_SetConfig+0xc4>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d003      	beq.n	80093ec <TIM_OC6_SetConfig+0x7c>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a14      	ldr	r2, [pc, #80]	; (8009438 <TIM_OC6_SetConfig+0xc8>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d109      	bne.n	8009400 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	695b      	ldr	r3, [r3, #20]
 80093f8:	029b      	lsls	r3, r3, #10
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	621a      	str	r2, [r3, #32]
}
 800941a:	bf00      	nop
 800941c:	371c      	adds	r7, #28
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	40012c00 	.word	0x40012c00
 800942c:	40013400 	.word	0x40013400
 8009430:	40014000 	.word	0x40014000
 8009434:	40014400 	.word	0x40014400
 8009438:	40014800 	.word	0x40014800

0800943c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6a1b      	ldr	r3, [r3, #32]
 800944c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	f023 0201 	bic.w	r2, r3, #1
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	4313      	orrs	r3, r2
 8009470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	f023 030a 	bic.w	r3, r3, #10
 8009478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	4313      	orrs	r3, r2
 8009480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	621a      	str	r2, [r3, #32]
}
 800948e:	bf00      	nop
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800949a:	b480      	push	{r7}
 800949c:	b087      	sub	sp, #28
 800949e:	af00      	add	r7, sp, #0
 80094a0:	60f8      	str	r0, [r7, #12]
 80094a2:	60b9      	str	r1, [r7, #8]
 80094a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	f023 0210 	bic.w	r2, r3, #16
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6a1b      	ldr	r3, [r3, #32]
 80094bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	031b      	lsls	r3, r3, #12
 80094ca:	697a      	ldr	r2, [r7, #20]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	011b      	lsls	r3, r3, #4
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	4313      	orrs	r3, r2
 80094e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	697a      	ldr	r2, [r7, #20]
 80094e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	621a      	str	r2, [r3, #32]
}
 80094ee:	bf00      	nop
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b085      	sub	sp, #20
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	4313      	orrs	r3, r2
 8009518:	f043 0307 	orr.w	r3, r3, #7
 800951c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	609a      	str	r2, [r3, #8]
}
 8009524:	bf00      	nop
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009530:	b480      	push	{r7}
 8009532:	b087      	sub	sp, #28
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
 800953c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800954a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	021a      	lsls	r2, r3, #8
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	431a      	orrs	r2, r3
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	4313      	orrs	r3, r2
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	4313      	orrs	r3, r2
 800955c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	609a      	str	r2, [r3, #8]
}
 8009564:	bf00      	nop
 8009566:	371c      	adds	r7, #28
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009570:	b480      	push	{r7}
 8009572:	b087      	sub	sp, #28
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	f003 031f 	and.w	r3, r3, #31
 8009582:	2201      	movs	r2, #1
 8009584:	fa02 f303 	lsl.w	r3, r2, r3
 8009588:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6a1a      	ldr	r2, [r3, #32]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	43db      	mvns	r3, r3
 8009592:	401a      	ands	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6a1a      	ldr	r2, [r3, #32]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	f003 031f 	and.w	r3, r3, #31
 80095a2:	6879      	ldr	r1, [r7, #4]
 80095a4:	fa01 f303 	lsl.w	r3, r1, r3
 80095a8:	431a      	orrs	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	621a      	str	r2, [r3, #32]
}
 80095ae:	bf00      	nop
 80095b0:	371c      	adds	r7, #28
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
	...

080095bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d101      	bne.n	80095d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095d0:	2302      	movs	r3, #2
 80095d2:	e045      	b.n	8009660 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2202      	movs	r2, #2
 80095e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a1c      	ldr	r2, [pc, #112]	; (800966c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d004      	beq.n	8009608 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a1b      	ldr	r2, [pc, #108]	; (8009670 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d108      	bne.n	800961a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800960e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	4313      	orrs	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009620:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	4313      	orrs	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009632:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	4313      	orrs	r3, r2
 800963c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	40012c00 	.word	0x40012c00
 8009670:	40013400 	.word	0x40013400

08009674 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d101      	bne.n	8009686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e042      	b.n	800970c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800968c:	2b00      	cmp	r3, #0
 800968e:	d106      	bne.n	800969e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7fb fe31 	bl	8005300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2224      	movs	r2, #36	; 0x24
 80096a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0201 	bic.w	r2, r2, #1
 80096b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f8c6 	bl	8009848 <UART_SetConfig>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d101      	bne.n	80096c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e022      	b.n	800970c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f001 fa7a 	bl	800abc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689a      	ldr	r2, [r3, #8]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f042 0201 	orr.w	r2, r2, #1
 8009702:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f001 fb01 	bl	800ad0c <UART_CheckIdleState>
 800970a:	4603      	mov	r3, r0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b08a      	sub	sp, #40	; 0x28
 8009718:	af02      	add	r7, sp, #8
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	4613      	mov	r3, r2
 8009722:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800972a:	2b20      	cmp	r3, #32
 800972c:	f040 8084 	bne.w	8009838 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d002      	beq.n	800973c <HAL_UART_Transmit+0x28>
 8009736:	88fb      	ldrh	r3, [r7, #6]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	e07c      	b.n	800983a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009746:	2b01      	cmp	r3, #1
 8009748:	d101      	bne.n	800974e <HAL_UART_Transmit+0x3a>
 800974a:	2302      	movs	r3, #2
 800974c:	e075      	b.n	800983a <HAL_UART_Transmit+0x126>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2221      	movs	r2, #33	; 0x21
 8009762:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009766:	f7fc f8fb 	bl	8005960 <HAL_GetTick>
 800976a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	88fa      	ldrh	r2, [r7, #6]
 8009770:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	88fa      	ldrh	r2, [r7, #6]
 8009778:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009784:	d108      	bne.n	8009798 <HAL_UART_Transmit+0x84>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d104      	bne.n	8009798 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800978e:	2300      	movs	r3, #0
 8009790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	61bb      	str	r3, [r7, #24]
 8009796:	e003      	b.n	80097a0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800979c:	2300      	movs	r3, #0
 800979e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80097a0:	e02d      	b.n	80097fe <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2200      	movs	r2, #0
 80097aa:	2180      	movs	r1, #128	; 0x80
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f001 faf5 	bl	800ad9c <UART_WaitOnFlagUntilTimeout>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e03e      	b.n	800983a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10b      	bne.n	80097da <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	881a      	ldrh	r2, [r3, #0]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097ce:	b292      	uxth	r2, r2
 80097d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	3302      	adds	r3, #2
 80097d6:	61bb      	str	r3, [r7, #24]
 80097d8:	e008      	b.n	80097ec <HAL_UART_Transmit+0xd8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	781a      	ldrb	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	b292      	uxth	r2, r2
 80097e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	3301      	adds	r3, #1
 80097ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	3b01      	subs	r3, #1
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009804:	b29b      	uxth	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1cb      	bne.n	80097a2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	2200      	movs	r2, #0
 8009812:	2140      	movs	r1, #64	; 0x40
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f001 fac1 	bl	800ad9c <UART_WaitOnFlagUntilTimeout>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <HAL_UART_Transmit+0x110>
    {
      return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e00a      	b.n	800983a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2220      	movs	r2, #32
 8009828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	e000      	b.n	800983a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009838:	2302      	movs	r3, #2
  }
}
 800983a:	4618      	mov	r0, r3
 800983c:	3720      	adds	r7, #32
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	0000      	movs	r0, r0
 8009844:	0000      	movs	r0, r0
	...

08009848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009848:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800984c:	b088      	sub	sp, #32
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009852:	2300      	movs	r3, #0
 8009854:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800985a:	2300      	movs	r3, #0
 800985c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	689a      	ldr	r2, [r3, #8]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	431a      	orrs	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	431a      	orrs	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	4313      	orrs	r3, r2
 8009874:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800987a:	69fa      	ldr	r2, [r7, #28]
 800987c:	4313      	orrs	r3, r2
 800987e:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	4bac      	ldr	r3, [pc, #688]	; (8009b38 <UART_SetConfig+0x2f0>)
 8009888:	4013      	ands	r3, r2
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	6812      	ldr	r2, [r2, #0]
 800988e:	69f9      	ldr	r1, [r7, #28]
 8009890:	430b      	orrs	r3, r1
 8009892:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68da      	ldr	r2, [r3, #12]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4aa1      	ldr	r2, [pc, #644]	; (8009b3c <UART_SetConfig+0x2f4>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d004      	beq.n	80098c4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	69fa      	ldr	r2, [r7, #28]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80098ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	6812      	ldr	r2, [r2, #0]
 80098d6:	69f9      	ldr	r1, [r7, #28]
 80098d8:	430b      	orrs	r3, r1
 80098da:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e2:	f023 010f 	bic.w	r1, r3, #15
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	430a      	orrs	r2, r1
 80098f0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a92      	ldr	r2, [pc, #584]	; (8009b40 <UART_SetConfig+0x2f8>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d121      	bne.n	8009940 <UART_SetConfig+0xf8>
 80098fc:	4b91      	ldr	r3, [pc, #580]	; (8009b44 <UART_SetConfig+0x2fc>)
 80098fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009902:	f003 0303 	and.w	r3, r3, #3
 8009906:	2b03      	cmp	r3, #3
 8009908:	d816      	bhi.n	8009938 <UART_SetConfig+0xf0>
 800990a:	a201      	add	r2, pc, #4	; (adr r2, 8009910 <UART_SetConfig+0xc8>)
 800990c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009910:	08009921 	.word	0x08009921
 8009914:	0800992d 	.word	0x0800992d
 8009918:	08009927 	.word	0x08009927
 800991c:	08009933 	.word	0x08009933
 8009920:	2301      	movs	r3, #1
 8009922:	76fb      	strb	r3, [r7, #27]
 8009924:	e0e8      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009926:	2302      	movs	r3, #2
 8009928:	76fb      	strb	r3, [r7, #27]
 800992a:	e0e5      	b.n	8009af8 <UART_SetConfig+0x2b0>
 800992c:	2304      	movs	r3, #4
 800992e:	76fb      	strb	r3, [r7, #27]
 8009930:	e0e2      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009932:	2308      	movs	r3, #8
 8009934:	76fb      	strb	r3, [r7, #27]
 8009936:	e0df      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009938:	2310      	movs	r3, #16
 800993a:	76fb      	strb	r3, [r7, #27]
 800993c:	bf00      	nop
 800993e:	e0db      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a80      	ldr	r2, [pc, #512]	; (8009b48 <UART_SetConfig+0x300>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d134      	bne.n	80099b4 <UART_SetConfig+0x16c>
 800994a:	4b7e      	ldr	r3, [pc, #504]	; (8009b44 <UART_SetConfig+0x2fc>)
 800994c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009950:	f003 030c 	and.w	r3, r3, #12
 8009954:	2b0c      	cmp	r3, #12
 8009956:	d829      	bhi.n	80099ac <UART_SetConfig+0x164>
 8009958:	a201      	add	r2, pc, #4	; (adr r2, 8009960 <UART_SetConfig+0x118>)
 800995a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995e:	bf00      	nop
 8009960:	08009995 	.word	0x08009995
 8009964:	080099ad 	.word	0x080099ad
 8009968:	080099ad 	.word	0x080099ad
 800996c:	080099ad 	.word	0x080099ad
 8009970:	080099a1 	.word	0x080099a1
 8009974:	080099ad 	.word	0x080099ad
 8009978:	080099ad 	.word	0x080099ad
 800997c:	080099ad 	.word	0x080099ad
 8009980:	0800999b 	.word	0x0800999b
 8009984:	080099ad 	.word	0x080099ad
 8009988:	080099ad 	.word	0x080099ad
 800998c:	080099ad 	.word	0x080099ad
 8009990:	080099a7 	.word	0x080099a7
 8009994:	2300      	movs	r3, #0
 8009996:	76fb      	strb	r3, [r7, #27]
 8009998:	e0ae      	b.n	8009af8 <UART_SetConfig+0x2b0>
 800999a:	2302      	movs	r3, #2
 800999c:	76fb      	strb	r3, [r7, #27]
 800999e:	e0ab      	b.n	8009af8 <UART_SetConfig+0x2b0>
 80099a0:	2304      	movs	r3, #4
 80099a2:	76fb      	strb	r3, [r7, #27]
 80099a4:	e0a8      	b.n	8009af8 <UART_SetConfig+0x2b0>
 80099a6:	2308      	movs	r3, #8
 80099a8:	76fb      	strb	r3, [r7, #27]
 80099aa:	e0a5      	b.n	8009af8 <UART_SetConfig+0x2b0>
 80099ac:	2310      	movs	r3, #16
 80099ae:	76fb      	strb	r3, [r7, #27]
 80099b0:	bf00      	nop
 80099b2:	e0a1      	b.n	8009af8 <UART_SetConfig+0x2b0>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a64      	ldr	r2, [pc, #400]	; (8009b4c <UART_SetConfig+0x304>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d120      	bne.n	8009a00 <UART_SetConfig+0x1b8>
 80099be:	4b61      	ldr	r3, [pc, #388]	; (8009b44 <UART_SetConfig+0x2fc>)
 80099c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80099c8:	2b10      	cmp	r3, #16
 80099ca:	d00f      	beq.n	80099ec <UART_SetConfig+0x1a4>
 80099cc:	2b10      	cmp	r3, #16
 80099ce:	d802      	bhi.n	80099d6 <UART_SetConfig+0x18e>
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d005      	beq.n	80099e0 <UART_SetConfig+0x198>
 80099d4:	e010      	b.n	80099f8 <UART_SetConfig+0x1b0>
 80099d6:	2b20      	cmp	r3, #32
 80099d8:	d005      	beq.n	80099e6 <UART_SetConfig+0x19e>
 80099da:	2b30      	cmp	r3, #48	; 0x30
 80099dc:	d009      	beq.n	80099f2 <UART_SetConfig+0x1aa>
 80099de:	e00b      	b.n	80099f8 <UART_SetConfig+0x1b0>
 80099e0:	2300      	movs	r3, #0
 80099e2:	76fb      	strb	r3, [r7, #27]
 80099e4:	e088      	b.n	8009af8 <UART_SetConfig+0x2b0>
 80099e6:	2302      	movs	r3, #2
 80099e8:	76fb      	strb	r3, [r7, #27]
 80099ea:	e085      	b.n	8009af8 <UART_SetConfig+0x2b0>
 80099ec:	2304      	movs	r3, #4
 80099ee:	76fb      	strb	r3, [r7, #27]
 80099f0:	e082      	b.n	8009af8 <UART_SetConfig+0x2b0>
 80099f2:	2308      	movs	r3, #8
 80099f4:	76fb      	strb	r3, [r7, #27]
 80099f6:	e07f      	b.n	8009af8 <UART_SetConfig+0x2b0>
 80099f8:	2310      	movs	r3, #16
 80099fa:	76fb      	strb	r3, [r7, #27]
 80099fc:	bf00      	nop
 80099fe:	e07b      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a52      	ldr	r2, [pc, #328]	; (8009b50 <UART_SetConfig+0x308>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d120      	bne.n	8009a4c <UART_SetConfig+0x204>
 8009a0a:	4b4e      	ldr	r3, [pc, #312]	; (8009b44 <UART_SetConfig+0x2fc>)
 8009a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009a14:	2b40      	cmp	r3, #64	; 0x40
 8009a16:	d00f      	beq.n	8009a38 <UART_SetConfig+0x1f0>
 8009a18:	2b40      	cmp	r3, #64	; 0x40
 8009a1a:	d802      	bhi.n	8009a22 <UART_SetConfig+0x1da>
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d005      	beq.n	8009a2c <UART_SetConfig+0x1e4>
 8009a20:	e010      	b.n	8009a44 <UART_SetConfig+0x1fc>
 8009a22:	2b80      	cmp	r3, #128	; 0x80
 8009a24:	d005      	beq.n	8009a32 <UART_SetConfig+0x1ea>
 8009a26:	2bc0      	cmp	r3, #192	; 0xc0
 8009a28:	d009      	beq.n	8009a3e <UART_SetConfig+0x1f6>
 8009a2a:	e00b      	b.n	8009a44 <UART_SetConfig+0x1fc>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	76fb      	strb	r3, [r7, #27]
 8009a30:	e062      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009a32:	2302      	movs	r3, #2
 8009a34:	76fb      	strb	r3, [r7, #27]
 8009a36:	e05f      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009a38:	2304      	movs	r3, #4
 8009a3a:	76fb      	strb	r3, [r7, #27]
 8009a3c:	e05c      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009a3e:	2308      	movs	r3, #8
 8009a40:	76fb      	strb	r3, [r7, #27]
 8009a42:	e059      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009a44:	2310      	movs	r3, #16
 8009a46:	76fb      	strb	r3, [r7, #27]
 8009a48:	bf00      	nop
 8009a4a:	e055      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a40      	ldr	r2, [pc, #256]	; (8009b54 <UART_SetConfig+0x30c>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d124      	bne.n	8009aa0 <UART_SetConfig+0x258>
 8009a56:	4b3b      	ldr	r3, [pc, #236]	; (8009b44 <UART_SetConfig+0x2fc>)
 8009a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a64:	d012      	beq.n	8009a8c <UART_SetConfig+0x244>
 8009a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a6a:	d802      	bhi.n	8009a72 <UART_SetConfig+0x22a>
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d007      	beq.n	8009a80 <UART_SetConfig+0x238>
 8009a70:	e012      	b.n	8009a98 <UART_SetConfig+0x250>
 8009a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a76:	d006      	beq.n	8009a86 <UART_SetConfig+0x23e>
 8009a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a7c:	d009      	beq.n	8009a92 <UART_SetConfig+0x24a>
 8009a7e:	e00b      	b.n	8009a98 <UART_SetConfig+0x250>
 8009a80:	2300      	movs	r3, #0
 8009a82:	76fb      	strb	r3, [r7, #27]
 8009a84:	e038      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009a86:	2302      	movs	r3, #2
 8009a88:	76fb      	strb	r3, [r7, #27]
 8009a8a:	e035      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009a8c:	2304      	movs	r3, #4
 8009a8e:	76fb      	strb	r3, [r7, #27]
 8009a90:	e032      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009a92:	2308      	movs	r3, #8
 8009a94:	76fb      	strb	r3, [r7, #27]
 8009a96:	e02f      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009a98:	2310      	movs	r3, #16
 8009a9a:	76fb      	strb	r3, [r7, #27]
 8009a9c:	bf00      	nop
 8009a9e:	e02b      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a25      	ldr	r2, [pc, #148]	; (8009b3c <UART_SetConfig+0x2f4>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d124      	bne.n	8009af4 <UART_SetConfig+0x2ac>
 8009aaa:	4b26      	ldr	r3, [pc, #152]	; (8009b44 <UART_SetConfig+0x2fc>)
 8009aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ab0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ab8:	d012      	beq.n	8009ae0 <UART_SetConfig+0x298>
 8009aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009abe:	d802      	bhi.n	8009ac6 <UART_SetConfig+0x27e>
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d007      	beq.n	8009ad4 <UART_SetConfig+0x28c>
 8009ac4:	e012      	b.n	8009aec <UART_SetConfig+0x2a4>
 8009ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aca:	d006      	beq.n	8009ada <UART_SetConfig+0x292>
 8009acc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ad0:	d009      	beq.n	8009ae6 <UART_SetConfig+0x29e>
 8009ad2:	e00b      	b.n	8009aec <UART_SetConfig+0x2a4>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	76fb      	strb	r3, [r7, #27]
 8009ad8:	e00e      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009ada:	2302      	movs	r3, #2
 8009adc:	76fb      	strb	r3, [r7, #27]
 8009ade:	e00b      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009ae0:	2304      	movs	r3, #4
 8009ae2:	76fb      	strb	r3, [r7, #27]
 8009ae4:	e008      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009ae6:	2308      	movs	r3, #8
 8009ae8:	76fb      	strb	r3, [r7, #27]
 8009aea:	e005      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009aec:	2310      	movs	r3, #16
 8009aee:	76fb      	strb	r3, [r7, #27]
 8009af0:	bf00      	nop
 8009af2:	e001      	b.n	8009af8 <UART_SetConfig+0x2b0>
 8009af4:	2310      	movs	r3, #16
 8009af6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a0f      	ldr	r2, [pc, #60]	; (8009b3c <UART_SetConfig+0x2f4>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	f040 842d 	bne.w	800a35e <UART_SetConfig+0xb16>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b04:	7efb      	ldrb	r3, [r7, #27]
 8009b06:	2b08      	cmp	r3, #8
 8009b08:	f200 816b 	bhi.w	8009de2 <UART_SetConfig+0x59a>
 8009b0c:	a201      	add	r2, pc, #4	; (adr r2, 8009b14 <UART_SetConfig+0x2cc>)
 8009b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b12:	bf00      	nop
 8009b14:	08009b59 	.word	0x08009b59
 8009b18:	08009de3 	.word	0x08009de3
 8009b1c:	08009bfb 	.word	0x08009bfb
 8009b20:	08009de3 	.word	0x08009de3
 8009b24:	08009c93 	.word	0x08009c93
 8009b28:	08009de3 	.word	0x08009de3
 8009b2c:	08009de3 	.word	0x08009de3
 8009b30:	08009de3 	.word	0x08009de3
 8009b34:	08009d35 	.word	0x08009d35
 8009b38:	cfff69f3 	.word	0xcfff69f3
 8009b3c:	40008000 	.word	0x40008000
 8009b40:	40013800 	.word	0x40013800
 8009b44:	40021000 	.word	0x40021000
 8009b48:	40004400 	.word	0x40004400
 8009b4c:	40004800 	.word	0x40004800
 8009b50:	40004c00 	.word	0x40004c00
 8009b54:	40005000 	.word	0x40005000
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009b58:	f7fd f9e0 	bl	8006f1c <HAL_RCC_GetPCLK1Freq>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d044      	beq.n	8009bf0 <UART_SetConfig+0x3a8>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d03e      	beq.n	8009bec <UART_SetConfig+0x3a4>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d038      	beq.n	8009be8 <UART_SetConfig+0x3a0>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	2b03      	cmp	r3, #3
 8009b7c:	d032      	beq.n	8009be4 <UART_SetConfig+0x39c>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	2b04      	cmp	r3, #4
 8009b84:	d02c      	beq.n	8009be0 <UART_SetConfig+0x398>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8a:	2b05      	cmp	r3, #5
 8009b8c:	d026      	beq.n	8009bdc <UART_SetConfig+0x394>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b92:	2b06      	cmp	r3, #6
 8009b94:	d020      	beq.n	8009bd8 <UART_SetConfig+0x390>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	2b07      	cmp	r3, #7
 8009b9c:	d01a      	beq.n	8009bd4 <UART_SetConfig+0x38c>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba2:	2b08      	cmp	r3, #8
 8009ba4:	d014      	beq.n	8009bd0 <UART_SetConfig+0x388>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009baa:	2b09      	cmp	r3, #9
 8009bac:	d00e      	beq.n	8009bcc <UART_SetConfig+0x384>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb2:	2b0a      	cmp	r3, #10
 8009bb4:	d008      	beq.n	8009bc8 <UART_SetConfig+0x380>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bba:	2b0b      	cmp	r3, #11
 8009bbc:	d102      	bne.n	8009bc4 <UART_SetConfig+0x37c>
 8009bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bc2:	e016      	b.n	8009bf2 <UART_SetConfig+0x3aa>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e014      	b.n	8009bf2 <UART_SetConfig+0x3aa>
 8009bc8:	2380      	movs	r3, #128	; 0x80
 8009bca:	e012      	b.n	8009bf2 <UART_SetConfig+0x3aa>
 8009bcc:	2340      	movs	r3, #64	; 0x40
 8009bce:	e010      	b.n	8009bf2 <UART_SetConfig+0x3aa>
 8009bd0:	2320      	movs	r3, #32
 8009bd2:	e00e      	b.n	8009bf2 <UART_SetConfig+0x3aa>
 8009bd4:	2310      	movs	r3, #16
 8009bd6:	e00c      	b.n	8009bf2 <UART_SetConfig+0x3aa>
 8009bd8:	230c      	movs	r3, #12
 8009bda:	e00a      	b.n	8009bf2 <UART_SetConfig+0x3aa>
 8009bdc:	230a      	movs	r3, #10
 8009bde:	e008      	b.n	8009bf2 <UART_SetConfig+0x3aa>
 8009be0:	2308      	movs	r3, #8
 8009be2:	e006      	b.n	8009bf2 <UART_SetConfig+0x3aa>
 8009be4:	2306      	movs	r3, #6
 8009be6:	e004      	b.n	8009bf2 <UART_SetConfig+0x3aa>
 8009be8:	2304      	movs	r3, #4
 8009bea:	e002      	b.n	8009bf2 <UART_SetConfig+0x3aa>
 8009bec:	2302      	movs	r3, #2
 8009bee:	e000      	b.n	8009bf2 <UART_SetConfig+0x3aa>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf6:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8009bf8:	e0f6      	b.n	8009de8 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d044      	beq.n	8009c8c <UART_SetConfig+0x444>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d03e      	beq.n	8009c88 <UART_SetConfig+0x440>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d038      	beq.n	8009c84 <UART_SetConfig+0x43c>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c16:	2b03      	cmp	r3, #3
 8009c18:	d032      	beq.n	8009c80 <UART_SetConfig+0x438>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1e:	2b04      	cmp	r3, #4
 8009c20:	d02c      	beq.n	8009c7c <UART_SetConfig+0x434>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c26:	2b05      	cmp	r3, #5
 8009c28:	d026      	beq.n	8009c78 <UART_SetConfig+0x430>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2e:	2b06      	cmp	r3, #6
 8009c30:	d020      	beq.n	8009c74 <UART_SetConfig+0x42c>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c36:	2b07      	cmp	r3, #7
 8009c38:	d01a      	beq.n	8009c70 <UART_SetConfig+0x428>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3e:	2b08      	cmp	r3, #8
 8009c40:	d014      	beq.n	8009c6c <UART_SetConfig+0x424>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c46:	2b09      	cmp	r3, #9
 8009c48:	d00e      	beq.n	8009c68 <UART_SetConfig+0x420>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4e:	2b0a      	cmp	r3, #10
 8009c50:	d008      	beq.n	8009c64 <UART_SetConfig+0x41c>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c56:	2b0b      	cmp	r3, #11
 8009c58:	d102      	bne.n	8009c60 <UART_SetConfig+0x418>
 8009c5a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009c5e:	e016      	b.n	8009c8e <UART_SetConfig+0x446>
 8009c60:	4ba1      	ldr	r3, [pc, #644]	; (8009ee8 <UART_SetConfig+0x6a0>)
 8009c62:	e014      	b.n	8009c8e <UART_SetConfig+0x446>
 8009c64:	4ba1      	ldr	r3, [pc, #644]	; (8009eec <UART_SetConfig+0x6a4>)
 8009c66:	e012      	b.n	8009c8e <UART_SetConfig+0x446>
 8009c68:	4ba1      	ldr	r3, [pc, #644]	; (8009ef0 <UART_SetConfig+0x6a8>)
 8009c6a:	e010      	b.n	8009c8e <UART_SetConfig+0x446>
 8009c6c:	4ba1      	ldr	r3, [pc, #644]	; (8009ef4 <UART_SetConfig+0x6ac>)
 8009c6e:	e00e      	b.n	8009c8e <UART_SetConfig+0x446>
 8009c70:	4ba1      	ldr	r3, [pc, #644]	; (8009ef8 <UART_SetConfig+0x6b0>)
 8009c72:	e00c      	b.n	8009c8e <UART_SetConfig+0x446>
 8009c74:	4ba1      	ldr	r3, [pc, #644]	; (8009efc <UART_SetConfig+0x6b4>)
 8009c76:	e00a      	b.n	8009c8e <UART_SetConfig+0x446>
 8009c78:	4ba1      	ldr	r3, [pc, #644]	; (8009f00 <UART_SetConfig+0x6b8>)
 8009c7a:	e008      	b.n	8009c8e <UART_SetConfig+0x446>
 8009c7c:	4ba1      	ldr	r3, [pc, #644]	; (8009f04 <UART_SetConfig+0x6bc>)
 8009c7e:	e006      	b.n	8009c8e <UART_SetConfig+0x446>
 8009c80:	4ba1      	ldr	r3, [pc, #644]	; (8009f08 <UART_SetConfig+0x6c0>)
 8009c82:	e004      	b.n	8009c8e <UART_SetConfig+0x446>
 8009c84:	4ba1      	ldr	r3, [pc, #644]	; (8009f0c <UART_SetConfig+0x6c4>)
 8009c86:	e002      	b.n	8009c8e <UART_SetConfig+0x446>
 8009c88:	4ba1      	ldr	r3, [pc, #644]	; (8009f10 <UART_SetConfig+0x6c8>)
 8009c8a:	e000      	b.n	8009c8e <UART_SetConfig+0x446>
 8009c8c:	4b96      	ldr	r3, [pc, #600]	; (8009ee8 <UART_SetConfig+0x6a0>)
 8009c8e:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8009c90:	e0aa      	b.n	8009de8 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009c92:	f7fd f8ad 	bl	8006df0 <HAL_RCC_GetSysClockFreq>
 8009c96:	4602      	mov	r2, r0
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d044      	beq.n	8009d2a <UART_SetConfig+0x4e2>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d03e      	beq.n	8009d26 <UART_SetConfig+0x4de>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d038      	beq.n	8009d22 <UART_SetConfig+0x4da>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	2b03      	cmp	r3, #3
 8009cb6:	d032      	beq.n	8009d1e <UART_SetConfig+0x4d6>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbc:	2b04      	cmp	r3, #4
 8009cbe:	d02c      	beq.n	8009d1a <UART_SetConfig+0x4d2>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc4:	2b05      	cmp	r3, #5
 8009cc6:	d026      	beq.n	8009d16 <UART_SetConfig+0x4ce>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ccc:	2b06      	cmp	r3, #6
 8009cce:	d020      	beq.n	8009d12 <UART_SetConfig+0x4ca>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd4:	2b07      	cmp	r3, #7
 8009cd6:	d01a      	beq.n	8009d0e <UART_SetConfig+0x4c6>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cdc:	2b08      	cmp	r3, #8
 8009cde:	d014      	beq.n	8009d0a <UART_SetConfig+0x4c2>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce4:	2b09      	cmp	r3, #9
 8009ce6:	d00e      	beq.n	8009d06 <UART_SetConfig+0x4be>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cec:	2b0a      	cmp	r3, #10
 8009cee:	d008      	beq.n	8009d02 <UART_SetConfig+0x4ba>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf4:	2b0b      	cmp	r3, #11
 8009cf6:	d102      	bne.n	8009cfe <UART_SetConfig+0x4b6>
 8009cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cfc:	e016      	b.n	8009d2c <UART_SetConfig+0x4e4>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e014      	b.n	8009d2c <UART_SetConfig+0x4e4>
 8009d02:	2380      	movs	r3, #128	; 0x80
 8009d04:	e012      	b.n	8009d2c <UART_SetConfig+0x4e4>
 8009d06:	2340      	movs	r3, #64	; 0x40
 8009d08:	e010      	b.n	8009d2c <UART_SetConfig+0x4e4>
 8009d0a:	2320      	movs	r3, #32
 8009d0c:	e00e      	b.n	8009d2c <UART_SetConfig+0x4e4>
 8009d0e:	2310      	movs	r3, #16
 8009d10:	e00c      	b.n	8009d2c <UART_SetConfig+0x4e4>
 8009d12:	230c      	movs	r3, #12
 8009d14:	e00a      	b.n	8009d2c <UART_SetConfig+0x4e4>
 8009d16:	230a      	movs	r3, #10
 8009d18:	e008      	b.n	8009d2c <UART_SetConfig+0x4e4>
 8009d1a:	2308      	movs	r3, #8
 8009d1c:	e006      	b.n	8009d2c <UART_SetConfig+0x4e4>
 8009d1e:	2306      	movs	r3, #6
 8009d20:	e004      	b.n	8009d2c <UART_SetConfig+0x4e4>
 8009d22:	2304      	movs	r3, #4
 8009d24:	e002      	b.n	8009d2c <UART_SetConfig+0x4e4>
 8009d26:	2302      	movs	r3, #2
 8009d28:	e000      	b.n	8009d2c <UART_SetConfig+0x4e4>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d30:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8009d32:	e059      	b.n	8009de8 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d04e      	beq.n	8009dda <UART_SetConfig+0x592>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d047      	beq.n	8009dd4 <UART_SetConfig+0x58c>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d040      	beq.n	8009dce <UART_SetConfig+0x586>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	2b03      	cmp	r3, #3
 8009d52:	d039      	beq.n	8009dc8 <UART_SetConfig+0x580>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d58:	2b04      	cmp	r3, #4
 8009d5a:	d032      	beq.n	8009dc2 <UART_SetConfig+0x57a>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d60:	2b05      	cmp	r3, #5
 8009d62:	d02b      	beq.n	8009dbc <UART_SetConfig+0x574>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d68:	2b06      	cmp	r3, #6
 8009d6a:	d024      	beq.n	8009db6 <UART_SetConfig+0x56e>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	2b07      	cmp	r3, #7
 8009d72:	d01d      	beq.n	8009db0 <UART_SetConfig+0x568>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d78:	2b08      	cmp	r3, #8
 8009d7a:	d016      	beq.n	8009daa <UART_SetConfig+0x562>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d80:	2b09      	cmp	r3, #9
 8009d82:	d00f      	beq.n	8009da4 <UART_SetConfig+0x55c>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d88:	2b0a      	cmp	r3, #10
 8009d8a:	d008      	beq.n	8009d9e <UART_SetConfig+0x556>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d90:	2b0b      	cmp	r3, #11
 8009d92:	d101      	bne.n	8009d98 <UART_SetConfig+0x550>
 8009d94:	2380      	movs	r3, #128	; 0x80
 8009d96:	e022      	b.n	8009dde <UART_SetConfig+0x596>
 8009d98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d9c:	e01f      	b.n	8009dde <UART_SetConfig+0x596>
 8009d9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009da2:	e01c      	b.n	8009dde <UART_SetConfig+0x596>
 8009da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009da8:	e019      	b.n	8009dde <UART_SetConfig+0x596>
 8009daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dae:	e016      	b.n	8009dde <UART_SetConfig+0x596>
 8009db0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009db4:	e013      	b.n	8009dde <UART_SetConfig+0x596>
 8009db6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009dba:	e010      	b.n	8009dde <UART_SetConfig+0x596>
 8009dbc:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009dc0:	e00d      	b.n	8009dde <UART_SetConfig+0x596>
 8009dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dc6:	e00a      	b.n	8009dde <UART_SetConfig+0x596>
 8009dc8:	f241 5355 	movw	r3, #5461	; 0x1555
 8009dcc:	e007      	b.n	8009dde <UART_SetConfig+0x596>
 8009dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009dd2:	e004      	b.n	8009dde <UART_SetConfig+0x596>
 8009dd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009dd8:	e001      	b.n	8009dde <UART_SetConfig+0x596>
 8009dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dde:	60fb      	str	r3, [r7, #12]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8009de0:	e002      	b.n	8009de8 <UART_SetConfig+0x5a0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	74fb      	strb	r3, [r7, #19]
        break;
 8009de6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f000 86c2 	beq.w	800ab74 <UART_SetConfig+0x132c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	4613      	mov	r3, r2
 8009df6:	005b      	lsls	r3, r3, #1
 8009df8:	4413      	add	r3, r2
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d305      	bcc.n	8009e0c <UART_SetConfig+0x5c4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d903      	bls.n	8009e14 <UART_SetConfig+0x5cc>
      {
        ret = HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	74fb      	strb	r3, [r7, #19]
 8009e10:	f000 beb0 	b.w	800ab74 <UART_SetConfig+0x132c>
      }
      else
      {
        switch (clocksource)
 8009e14:	7efb      	ldrb	r3, [r7, #27]
 8009e16:	2b08      	cmp	r3, #8
 8009e18:	f200 828c 	bhi.w	800a334 <UART_SetConfig+0xaec>
 8009e1c:	a201      	add	r2, pc, #4	; (adr r2, 8009e24 <UART_SetConfig+0x5dc>)
 8009e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e22:	bf00      	nop
 8009e24:	08009e49 	.word	0x08009e49
 8009e28:	0800a335 	.word	0x0800a335
 8009e2c:	08009fb3 	.word	0x08009fb3
 8009e30:	0800a335 	.word	0x0800a335
 8009e34:	0800a0a9 	.word	0x0800a0a9
 8009e38:	0800a335 	.word	0x0800a335
 8009e3c:	0800a335 	.word	0x0800a335
 8009e40:	0800a335 	.word	0x0800a335
 8009e44:	0800a1e5 	.word	0x0800a1e5
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e48:	f7fd f868 	bl	8006f1c <HAL_RCC_GetPCLK1Freq>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f04f 0100 	mov.w	r1, #0
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d07e      	beq.n	8009f5a <UART_SetConfig+0x712>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d075      	beq.n	8009f50 <UART_SetConfig+0x708>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d06c      	beq.n	8009f46 <UART_SetConfig+0x6fe>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e70:	2b03      	cmp	r3, #3
 8009e72:	d063      	beq.n	8009f3c <UART_SetConfig+0x6f4>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	d05a      	beq.n	8009f32 <UART_SetConfig+0x6ea>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e80:	2b05      	cmp	r3, #5
 8009e82:	d051      	beq.n	8009f28 <UART_SetConfig+0x6e0>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e88:	2b06      	cmp	r3, #6
 8009e8a:	d048      	beq.n	8009f1e <UART_SetConfig+0x6d6>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	2b07      	cmp	r3, #7
 8009e92:	d03f      	beq.n	8009f14 <UART_SetConfig+0x6cc>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e98:	2b08      	cmp	r3, #8
 8009e9a:	d01f      	beq.n	8009edc <UART_SetConfig+0x694>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea0:	2b09      	cmp	r3, #9
 8009ea2:	d016      	beq.n	8009ed2 <UART_SetConfig+0x68a>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea8:	2b0a      	cmp	r3, #10
 8009eaa:	d00d      	beq.n	8009ec8 <UART_SetConfig+0x680>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb0:	2b0b      	cmp	r3, #11
 8009eb2:	d104      	bne.n	8009ebe <UART_SetConfig+0x676>
 8009eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eb8:	f04f 0400 	mov.w	r4, #0
 8009ebc:	e051      	b.n	8009f62 <UART_SetConfig+0x71a>
 8009ebe:	f04f 0301 	mov.w	r3, #1
 8009ec2:	f04f 0400 	mov.w	r4, #0
 8009ec6:	e04c      	b.n	8009f62 <UART_SetConfig+0x71a>
 8009ec8:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009ecc:	f04f 0400 	mov.w	r4, #0
 8009ed0:	e047      	b.n	8009f62 <UART_SetConfig+0x71a>
 8009ed2:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009ed6:	f04f 0400 	mov.w	r4, #0
 8009eda:	e042      	b.n	8009f62 <UART_SetConfig+0x71a>
 8009edc:	f04f 0320 	mov.w	r3, #32
 8009ee0:	f04f 0400 	mov.w	r4, #0
 8009ee4:	e03d      	b.n	8009f62 <UART_SetConfig+0x71a>
 8009ee6:	bf00      	nop
 8009ee8:	00f42400 	.word	0x00f42400
 8009eec:	0001e848 	.word	0x0001e848
 8009ef0:	0003d090 	.word	0x0003d090
 8009ef4:	0007a120 	.word	0x0007a120
 8009ef8:	000f4240 	.word	0x000f4240
 8009efc:	00145855 	.word	0x00145855
 8009f00:	00186a00 	.word	0x00186a00
 8009f04:	001e8480 	.word	0x001e8480
 8009f08:	0028b0aa 	.word	0x0028b0aa
 8009f0c:	003d0900 	.word	0x003d0900
 8009f10:	007a1200 	.word	0x007a1200
 8009f14:	f04f 0310 	mov.w	r3, #16
 8009f18:	f04f 0400 	mov.w	r4, #0
 8009f1c:	e021      	b.n	8009f62 <UART_SetConfig+0x71a>
 8009f1e:	f04f 030c 	mov.w	r3, #12
 8009f22:	f04f 0400 	mov.w	r4, #0
 8009f26:	e01c      	b.n	8009f62 <UART_SetConfig+0x71a>
 8009f28:	f04f 030a 	mov.w	r3, #10
 8009f2c:	f04f 0400 	mov.w	r4, #0
 8009f30:	e017      	b.n	8009f62 <UART_SetConfig+0x71a>
 8009f32:	f04f 0308 	mov.w	r3, #8
 8009f36:	f04f 0400 	mov.w	r4, #0
 8009f3a:	e012      	b.n	8009f62 <UART_SetConfig+0x71a>
 8009f3c:	f04f 0306 	mov.w	r3, #6
 8009f40:	f04f 0400 	mov.w	r4, #0
 8009f44:	e00d      	b.n	8009f62 <UART_SetConfig+0x71a>
 8009f46:	f04f 0304 	mov.w	r3, #4
 8009f4a:	f04f 0400 	mov.w	r4, #0
 8009f4e:	e008      	b.n	8009f62 <UART_SetConfig+0x71a>
 8009f50:	f04f 0302 	mov.w	r3, #2
 8009f54:	f04f 0400 	mov.w	r4, #0
 8009f58:	e003      	b.n	8009f62 <UART_SetConfig+0x71a>
 8009f5a:	f04f 0301 	mov.w	r3, #1
 8009f5e:	f04f 0400 	mov.w	r4, #0
 8009f62:	461a      	mov	r2, r3
 8009f64:	4623      	mov	r3, r4
 8009f66:	f7f6 fd91 	bl	8000a8c <__aeabi_uldivmod>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	4619      	mov	r1, r3
 8009f70:	4622      	mov	r2, r4
 8009f72:	f04f 0300 	mov.w	r3, #0
 8009f76:	f04f 0400 	mov.w	r4, #0
 8009f7a:	0214      	lsls	r4, r2, #8
 8009f7c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009f80:	020b      	lsls	r3, r1, #8
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6852      	ldr	r2, [r2, #4]
 8009f86:	0852      	lsrs	r2, r2, #1
 8009f88:	4611      	mov	r1, r2
 8009f8a:	f04f 0200 	mov.w	r2, #0
 8009f8e:	eb13 0b01 	adds.w	fp, r3, r1
 8009f92:	eb44 0c02 	adc.w	ip, r4, r2
 8009f96:	4658      	mov	r0, fp
 8009f98:	4661      	mov	r1, ip
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	f04f 0400 	mov.w	r4, #0
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	4623      	mov	r3, r4
 8009fa6:	f7f6 fd71 	bl	8000a8c <__aeabi_uldivmod>
 8009faa:	4603      	mov	r3, r0
 8009fac:	460c      	mov	r4, r1
 8009fae:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8009fb0:	e1c3      	b.n	800a33a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d05b      	beq.n	800a072 <UART_SetConfig+0x82a>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d053      	beq.n	800a06a <UART_SetConfig+0x822>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d04b      	beq.n	800a062 <UART_SetConfig+0x81a>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d043      	beq.n	800a05a <UART_SetConfig+0x812>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd6:	2b04      	cmp	r3, #4
 8009fd8:	d03b      	beq.n	800a052 <UART_SetConfig+0x80a>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	2b05      	cmp	r3, #5
 8009fe0:	d033      	beq.n	800a04a <UART_SetConfig+0x802>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe6:	2b06      	cmp	r3, #6
 8009fe8:	d02b      	beq.n	800a042 <UART_SetConfig+0x7fa>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fee:	2b07      	cmp	r3, #7
 8009ff0:	d023      	beq.n	800a03a <UART_SetConfig+0x7f2>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff6:	2b08      	cmp	r3, #8
 8009ff8:	d01b      	beq.n	800a032 <UART_SetConfig+0x7ea>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	2b09      	cmp	r3, #9
 800a000:	d013      	beq.n	800a02a <UART_SetConfig+0x7e2>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	2b0a      	cmp	r3, #10
 800a008:	d00b      	beq.n	800a022 <UART_SetConfig+0x7da>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00e:	2b0b      	cmp	r3, #11
 800a010:	d103      	bne.n	800a01a <UART_SetConfig+0x7d2>
 800a012:	4bad      	ldr	r3, [pc, #692]	; (800a2c8 <UART_SetConfig+0xa80>)
 800a014:	f04f 0400 	mov.w	r4, #0
 800a018:	e02e      	b.n	800a078 <UART_SetConfig+0x830>
 800a01a:	4bac      	ldr	r3, [pc, #688]	; (800a2cc <UART_SetConfig+0xa84>)
 800a01c:	f04f 0400 	mov.w	r4, #0
 800a020:	e02a      	b.n	800a078 <UART_SetConfig+0x830>
 800a022:	4bab      	ldr	r3, [pc, #684]	; (800a2d0 <UART_SetConfig+0xa88>)
 800a024:	f04f 0400 	mov.w	r4, #0
 800a028:	e026      	b.n	800a078 <UART_SetConfig+0x830>
 800a02a:	4baa      	ldr	r3, [pc, #680]	; (800a2d4 <UART_SetConfig+0xa8c>)
 800a02c:	f04f 0400 	mov.w	r4, #0
 800a030:	e022      	b.n	800a078 <UART_SetConfig+0x830>
 800a032:	4ba9      	ldr	r3, [pc, #676]	; (800a2d8 <UART_SetConfig+0xa90>)
 800a034:	f04f 0400 	mov.w	r4, #0
 800a038:	e01e      	b.n	800a078 <UART_SetConfig+0x830>
 800a03a:	4ba8      	ldr	r3, [pc, #672]	; (800a2dc <UART_SetConfig+0xa94>)
 800a03c:	f04f 0400 	mov.w	r4, #0
 800a040:	e01a      	b.n	800a078 <UART_SetConfig+0x830>
 800a042:	a49d      	add	r4, pc, #628	; (adr r4, 800a2b8 <UART_SetConfig+0xa70>)
 800a044:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a048:	e016      	b.n	800a078 <UART_SetConfig+0x830>
 800a04a:	4ba5      	ldr	r3, [pc, #660]	; (800a2e0 <UART_SetConfig+0xa98>)
 800a04c:	f04f 0400 	mov.w	r4, #0
 800a050:	e012      	b.n	800a078 <UART_SetConfig+0x830>
 800a052:	4ba4      	ldr	r3, [pc, #656]	; (800a2e4 <UART_SetConfig+0xa9c>)
 800a054:	f04f 0400 	mov.w	r4, #0
 800a058:	e00e      	b.n	800a078 <UART_SetConfig+0x830>
 800a05a:	a499      	add	r4, pc, #612	; (adr r4, 800a2c0 <UART_SetConfig+0xa78>)
 800a05c:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a060:	e00a      	b.n	800a078 <UART_SetConfig+0x830>
 800a062:	4ba1      	ldr	r3, [pc, #644]	; (800a2e8 <UART_SetConfig+0xaa0>)
 800a064:	f04f 0400 	mov.w	r4, #0
 800a068:	e006      	b.n	800a078 <UART_SetConfig+0x830>
 800a06a:	4ba0      	ldr	r3, [pc, #640]	; (800a2ec <UART_SetConfig+0xaa4>)
 800a06c:	f04f 0400 	mov.w	r4, #0
 800a070:	e002      	b.n	800a078 <UART_SetConfig+0x830>
 800a072:	4b96      	ldr	r3, [pc, #600]	; (800a2cc <UART_SetConfig+0xa84>)
 800a074:	f04f 0400 	mov.w	r4, #0
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	6852      	ldr	r2, [r2, #4]
 800a07c:	0852      	lsrs	r2, r2, #1
 800a07e:	4611      	mov	r1, r2
 800a080:	f04f 0200 	mov.w	r2, #0
 800a084:	eb13 0b01 	adds.w	fp, r3, r1
 800a088:	eb44 0c02 	adc.w	ip, r4, r2
 800a08c:	4658      	mov	r0, fp
 800a08e:	4661      	mov	r1, ip
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	f04f 0400 	mov.w	r4, #0
 800a098:	461a      	mov	r2, r3
 800a09a:	4623      	mov	r3, r4
 800a09c:	f7f6 fcf6 	bl	8000a8c <__aeabi_uldivmod>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800a0a6:	e148      	b.n	800a33a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0a8:	f7fc fea2 	bl	8006df0 <HAL_RCC_GetSysClockFreq>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f04f 0100 	mov.w	r1, #0
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d067      	beq.n	800a18c <UART_SetConfig+0x944>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d05e      	beq.n	800a182 <UART_SetConfig+0x93a>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d055      	beq.n	800a178 <UART_SetConfig+0x930>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d04c      	beq.n	800a16e <UART_SetConfig+0x926>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d8:	2b04      	cmp	r3, #4
 800a0da:	d043      	beq.n	800a164 <UART_SetConfig+0x91c>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e0:	2b05      	cmp	r3, #5
 800a0e2:	d03a      	beq.n	800a15a <UART_SetConfig+0x912>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e8:	2b06      	cmp	r3, #6
 800a0ea:	d031      	beq.n	800a150 <UART_SetConfig+0x908>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f0:	2b07      	cmp	r3, #7
 800a0f2:	d028      	beq.n	800a146 <UART_SetConfig+0x8fe>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f8:	2b08      	cmp	r3, #8
 800a0fa:	d01f      	beq.n	800a13c <UART_SetConfig+0x8f4>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a100:	2b09      	cmp	r3, #9
 800a102:	d016      	beq.n	800a132 <UART_SetConfig+0x8ea>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a108:	2b0a      	cmp	r3, #10
 800a10a:	d00d      	beq.n	800a128 <UART_SetConfig+0x8e0>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a110:	2b0b      	cmp	r3, #11
 800a112:	d104      	bne.n	800a11e <UART_SetConfig+0x8d6>
 800a114:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a118:	f04f 0400 	mov.w	r4, #0
 800a11c:	e03a      	b.n	800a194 <UART_SetConfig+0x94c>
 800a11e:	f04f 0301 	mov.w	r3, #1
 800a122:	f04f 0400 	mov.w	r4, #0
 800a126:	e035      	b.n	800a194 <UART_SetConfig+0x94c>
 800a128:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a12c:	f04f 0400 	mov.w	r4, #0
 800a130:	e030      	b.n	800a194 <UART_SetConfig+0x94c>
 800a132:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a136:	f04f 0400 	mov.w	r4, #0
 800a13a:	e02b      	b.n	800a194 <UART_SetConfig+0x94c>
 800a13c:	f04f 0320 	mov.w	r3, #32
 800a140:	f04f 0400 	mov.w	r4, #0
 800a144:	e026      	b.n	800a194 <UART_SetConfig+0x94c>
 800a146:	f04f 0310 	mov.w	r3, #16
 800a14a:	f04f 0400 	mov.w	r4, #0
 800a14e:	e021      	b.n	800a194 <UART_SetConfig+0x94c>
 800a150:	f04f 030c 	mov.w	r3, #12
 800a154:	f04f 0400 	mov.w	r4, #0
 800a158:	e01c      	b.n	800a194 <UART_SetConfig+0x94c>
 800a15a:	f04f 030a 	mov.w	r3, #10
 800a15e:	f04f 0400 	mov.w	r4, #0
 800a162:	e017      	b.n	800a194 <UART_SetConfig+0x94c>
 800a164:	f04f 0308 	mov.w	r3, #8
 800a168:	f04f 0400 	mov.w	r4, #0
 800a16c:	e012      	b.n	800a194 <UART_SetConfig+0x94c>
 800a16e:	f04f 0306 	mov.w	r3, #6
 800a172:	f04f 0400 	mov.w	r4, #0
 800a176:	e00d      	b.n	800a194 <UART_SetConfig+0x94c>
 800a178:	f04f 0304 	mov.w	r3, #4
 800a17c:	f04f 0400 	mov.w	r4, #0
 800a180:	e008      	b.n	800a194 <UART_SetConfig+0x94c>
 800a182:	f04f 0302 	mov.w	r3, #2
 800a186:	f04f 0400 	mov.w	r4, #0
 800a18a:	e003      	b.n	800a194 <UART_SetConfig+0x94c>
 800a18c:	f04f 0301 	mov.w	r3, #1
 800a190:	f04f 0400 	mov.w	r4, #0
 800a194:	461a      	mov	r2, r3
 800a196:	4623      	mov	r3, r4
 800a198:	f7f6 fc78 	bl	8000a8c <__aeabi_uldivmod>
 800a19c:	4603      	mov	r3, r0
 800a19e:	460c      	mov	r4, r1
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	4622      	mov	r2, r4
 800a1a4:	f04f 0300 	mov.w	r3, #0
 800a1a8:	f04f 0400 	mov.w	r4, #0
 800a1ac:	0214      	lsls	r4, r2, #8
 800a1ae:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a1b2:	020b      	lsls	r3, r1, #8
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	6852      	ldr	r2, [r2, #4]
 800a1b8:	0852      	lsrs	r2, r2, #1
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	f04f 0200 	mov.w	r2, #0
 800a1c0:	eb13 0b01 	adds.w	fp, r3, r1
 800a1c4:	eb44 0c02 	adc.w	ip, r4, r2
 800a1c8:	4658      	mov	r0, fp
 800a1ca:	4661      	mov	r1, ip
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	f04f 0400 	mov.w	r4, #0
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	4623      	mov	r3, r4
 800a1d8:	f7f6 fc58 	bl	8000a8c <__aeabi_uldivmod>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	460c      	mov	r4, r1
 800a1e0:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800a1e2:	e0aa      	b.n	800a33a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 8087 	beq.w	800a2fc <UART_SetConfig+0xab4>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d05b      	beq.n	800a2ae <UART_SetConfig+0xa66>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d052      	beq.n	800a2a4 <UART_SetConfig+0xa5c>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a202:	2b03      	cmp	r3, #3
 800a204:	d04a      	beq.n	800a29c <UART_SetConfig+0xa54>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20a:	2b04      	cmp	r3, #4
 800a20c:	d041      	beq.n	800a292 <UART_SetConfig+0xa4a>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a212:	2b05      	cmp	r3, #5
 800a214:	d039      	beq.n	800a28a <UART_SetConfig+0xa42>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21a:	2b06      	cmp	r3, #6
 800a21c:	d031      	beq.n	800a282 <UART_SetConfig+0xa3a>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a222:	2b07      	cmp	r3, #7
 800a224:	d028      	beq.n	800a278 <UART_SetConfig+0xa30>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22a:	2b08      	cmp	r3, #8
 800a22c:	d01f      	beq.n	800a26e <UART_SetConfig+0xa26>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a232:	2b09      	cmp	r3, #9
 800a234:	d016      	beq.n	800a264 <UART_SetConfig+0xa1c>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	2b0a      	cmp	r3, #10
 800a23c:	d00d      	beq.n	800a25a <UART_SetConfig+0xa12>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a242:	2b0b      	cmp	r3, #11
 800a244:	d104      	bne.n	800a250 <UART_SetConfig+0xa08>
 800a246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a24a:	f04f 0400 	mov.w	r4, #0
 800a24e:	e059      	b.n	800a304 <UART_SetConfig+0xabc>
 800a250:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a254:	f04f 0400 	mov.w	r4, #0
 800a258:	e054      	b.n	800a304 <UART_SetConfig+0xabc>
 800a25a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a25e:	f04f 0400 	mov.w	r4, #0
 800a262:	e04f      	b.n	800a304 <UART_SetConfig+0xabc>
 800a264:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a268:	f04f 0400 	mov.w	r4, #0
 800a26c:	e04a      	b.n	800a304 <UART_SetConfig+0xabc>
 800a26e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a272:	f04f 0400 	mov.w	r4, #0
 800a276:	e045      	b.n	800a304 <UART_SetConfig+0xabc>
 800a278:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a27c:	f04f 0400 	mov.w	r4, #0
 800a280:	e040      	b.n	800a304 <UART_SetConfig+0xabc>
 800a282:	4b1b      	ldr	r3, [pc, #108]	; (800a2f0 <UART_SetConfig+0xaa8>)
 800a284:	f04f 0400 	mov.w	r4, #0
 800a288:	e03c      	b.n	800a304 <UART_SetConfig+0xabc>
 800a28a:	4b1a      	ldr	r3, [pc, #104]	; (800a2f4 <UART_SetConfig+0xaac>)
 800a28c:	f04f 0400 	mov.w	r4, #0
 800a290:	e038      	b.n	800a304 <UART_SetConfig+0xabc>
 800a292:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a296:	f04f 0400 	mov.w	r4, #0
 800a29a:	e033      	b.n	800a304 <UART_SetConfig+0xabc>
 800a29c:	4b16      	ldr	r3, [pc, #88]	; (800a2f8 <UART_SetConfig+0xab0>)
 800a29e:	f04f 0400 	mov.w	r4, #0
 800a2a2:	e02f      	b.n	800a304 <UART_SetConfig+0xabc>
 800a2a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a2a8:	f04f 0400 	mov.w	r4, #0
 800a2ac:	e02a      	b.n	800a304 <UART_SetConfig+0xabc>
 800a2ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a2b2:	f04f 0400 	mov.w	r4, #0
 800a2b6:	e025      	b.n	800a304 <UART_SetConfig+0xabc>
 800a2b8:	14585500 	.word	0x14585500
 800a2bc:	00000000 	.word	0x00000000
 800a2c0:	28b0aa00 	.word	0x28b0aa00
 800a2c4:	00000000 	.word	0x00000000
 800a2c8:	00f42400 	.word	0x00f42400
 800a2cc:	f4240000 	.word	0xf4240000
 800a2d0:	01e84800 	.word	0x01e84800
 800a2d4:	03d09000 	.word	0x03d09000
 800a2d8:	07a12000 	.word	0x07a12000
 800a2dc:	0f424000 	.word	0x0f424000
 800a2e0:	186a0000 	.word	0x186a0000
 800a2e4:	1e848000 	.word	0x1e848000
 800a2e8:	3d090000 	.word	0x3d090000
 800a2ec:	7a120000 	.word	0x7a120000
 800a2f0:	000aaa00 	.word	0x000aaa00
 800a2f4:	000ccc00 	.word	0x000ccc00
 800a2f8:	00155500 	.word	0x00155500
 800a2fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a300:	f04f 0400 	mov.w	r4, #0
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	6852      	ldr	r2, [r2, #4]
 800a308:	0852      	lsrs	r2, r2, #1
 800a30a:	4611      	mov	r1, r2
 800a30c:	f04f 0200 	mov.w	r2, #0
 800a310:	eb13 0b01 	adds.w	fp, r3, r1
 800a314:	eb44 0c02 	adc.w	ip, r4, r2
 800a318:	4658      	mov	r0, fp
 800a31a:	4661      	mov	r1, ip
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	f04f 0400 	mov.w	r4, #0
 800a324:	461a      	mov	r2, r3
 800a326:	4623      	mov	r3, r4
 800a328:	f7f6 fbb0 	bl	8000a8c <__aeabi_uldivmod>
 800a32c:	4603      	mov	r3, r0
 800a32e:	460c      	mov	r4, r1
 800a330:	617b      	str	r3, [r7, #20]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 800a332:	e002      	b.n	800a33a <UART_SetConfig+0xaf2>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	74fb      	strb	r3, [r7, #19]
            break;
 800a338:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a340:	d309      	bcc.n	800a356 <UART_SetConfig+0xb0e>
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a348:	d205      	bcs.n	800a356 <UART_SetConfig+0xb0e>
        {
          huart->Instance->BRR = usartdiv;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	60da      	str	r2, [r3, #12]
 800a352:	f000 bc0f 	b.w	800ab74 <UART_SetConfig+0x132c>
        }
        else
        {
          ret = HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	74fb      	strb	r3, [r7, #19]
 800a35a:	f000 bc0b 	b.w	800ab74 <UART_SetConfig+0x132c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	69db      	ldr	r3, [r3, #28]
 800a362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a366:	f040 81ff 	bne.w	800a768 <UART_SetConfig+0xf20>
  {
    switch (clocksource)
 800a36a:	7efb      	ldrb	r3, [r7, #27]
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	f200 81db 	bhi.w	800a728 <UART_SetConfig+0xee0>
 800a372:	a201      	add	r2, pc, #4	; (adr r2, 800a378 <UART_SetConfig+0xb30>)
 800a374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a378:	0800a39d 	.word	0x0800a39d
 800a37c:	0800a453 	.word	0x0800a453
 800a380:	0800a509 	.word	0x0800a509
 800a384:	0800a729 	.word	0x0800a729
 800a388:	0800a5b1 	.word	0x0800a5b1
 800a38c:	0800a729 	.word	0x0800a729
 800a390:	0800a729 	.word	0x0800a729
 800a394:	0800a729 	.word	0x0800a729
 800a398:	0800a667 	.word	0x0800a667
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a39c:	f7fc fdbe 	bl	8006f1c <HAL_RCC_GetPCLK1Freq>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d044      	beq.n	800a434 <UART_SetConfig+0xbec>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d03e      	beq.n	800a430 <UART_SetConfig+0xbe8>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d038      	beq.n	800a42c <UART_SetConfig+0xbe4>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3be:	2b03      	cmp	r3, #3
 800a3c0:	d032      	beq.n	800a428 <UART_SetConfig+0xbe0>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c6:	2b04      	cmp	r3, #4
 800a3c8:	d02c      	beq.n	800a424 <UART_SetConfig+0xbdc>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ce:	2b05      	cmp	r3, #5
 800a3d0:	d026      	beq.n	800a420 <UART_SetConfig+0xbd8>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d6:	2b06      	cmp	r3, #6
 800a3d8:	d020      	beq.n	800a41c <UART_SetConfig+0xbd4>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3de:	2b07      	cmp	r3, #7
 800a3e0:	d01a      	beq.n	800a418 <UART_SetConfig+0xbd0>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e6:	2b08      	cmp	r3, #8
 800a3e8:	d014      	beq.n	800a414 <UART_SetConfig+0xbcc>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ee:	2b09      	cmp	r3, #9
 800a3f0:	d00e      	beq.n	800a410 <UART_SetConfig+0xbc8>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f6:	2b0a      	cmp	r3, #10
 800a3f8:	d008      	beq.n	800a40c <UART_SetConfig+0xbc4>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fe:	2b0b      	cmp	r3, #11
 800a400:	d102      	bne.n	800a408 <UART_SetConfig+0xbc0>
 800a402:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a406:	e016      	b.n	800a436 <UART_SetConfig+0xbee>
 800a408:	2301      	movs	r3, #1
 800a40a:	e014      	b.n	800a436 <UART_SetConfig+0xbee>
 800a40c:	2380      	movs	r3, #128	; 0x80
 800a40e:	e012      	b.n	800a436 <UART_SetConfig+0xbee>
 800a410:	2340      	movs	r3, #64	; 0x40
 800a412:	e010      	b.n	800a436 <UART_SetConfig+0xbee>
 800a414:	2320      	movs	r3, #32
 800a416:	e00e      	b.n	800a436 <UART_SetConfig+0xbee>
 800a418:	2310      	movs	r3, #16
 800a41a:	e00c      	b.n	800a436 <UART_SetConfig+0xbee>
 800a41c:	230c      	movs	r3, #12
 800a41e:	e00a      	b.n	800a436 <UART_SetConfig+0xbee>
 800a420:	230a      	movs	r3, #10
 800a422:	e008      	b.n	800a436 <UART_SetConfig+0xbee>
 800a424:	2308      	movs	r3, #8
 800a426:	e006      	b.n	800a436 <UART_SetConfig+0xbee>
 800a428:	2306      	movs	r3, #6
 800a42a:	e004      	b.n	800a436 <UART_SetConfig+0xbee>
 800a42c:	2304      	movs	r3, #4
 800a42e:	e002      	b.n	800a436 <UART_SetConfig+0xbee>
 800a430:	2302      	movs	r3, #2
 800a432:	e000      	b.n	800a436 <UART_SetConfig+0xbee>
 800a434:	2301      	movs	r3, #1
 800a436:	fbb2 f3f3 	udiv	r3, r2, r3
 800a43a:	005a      	lsls	r2, r3, #1
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	085b      	lsrs	r3, r3, #1
 800a442:	441a      	add	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	fbb2 f3f3 	udiv	r3, r2, r3
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800a450:	e16d      	b.n	800a72e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a452:	f7fc fd79 	bl	8006f48 <HAL_RCC_GetPCLK2Freq>
 800a456:	4602      	mov	r2, r0
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d044      	beq.n	800a4ea <UART_SetConfig+0xca2>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a464:	2b01      	cmp	r3, #1
 800a466:	d03e      	beq.n	800a4e6 <UART_SetConfig+0xc9e>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d038      	beq.n	800a4e2 <UART_SetConfig+0xc9a>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a474:	2b03      	cmp	r3, #3
 800a476:	d032      	beq.n	800a4de <UART_SetConfig+0xc96>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47c:	2b04      	cmp	r3, #4
 800a47e:	d02c      	beq.n	800a4da <UART_SetConfig+0xc92>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a484:	2b05      	cmp	r3, #5
 800a486:	d026      	beq.n	800a4d6 <UART_SetConfig+0xc8e>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48c:	2b06      	cmp	r3, #6
 800a48e:	d020      	beq.n	800a4d2 <UART_SetConfig+0xc8a>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a494:	2b07      	cmp	r3, #7
 800a496:	d01a      	beq.n	800a4ce <UART_SetConfig+0xc86>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49c:	2b08      	cmp	r3, #8
 800a49e:	d014      	beq.n	800a4ca <UART_SetConfig+0xc82>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a4:	2b09      	cmp	r3, #9
 800a4a6:	d00e      	beq.n	800a4c6 <UART_SetConfig+0xc7e>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ac:	2b0a      	cmp	r3, #10
 800a4ae:	d008      	beq.n	800a4c2 <UART_SetConfig+0xc7a>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b4:	2b0b      	cmp	r3, #11
 800a4b6:	d102      	bne.n	800a4be <UART_SetConfig+0xc76>
 800a4b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4bc:	e016      	b.n	800a4ec <UART_SetConfig+0xca4>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e014      	b.n	800a4ec <UART_SetConfig+0xca4>
 800a4c2:	2380      	movs	r3, #128	; 0x80
 800a4c4:	e012      	b.n	800a4ec <UART_SetConfig+0xca4>
 800a4c6:	2340      	movs	r3, #64	; 0x40
 800a4c8:	e010      	b.n	800a4ec <UART_SetConfig+0xca4>
 800a4ca:	2320      	movs	r3, #32
 800a4cc:	e00e      	b.n	800a4ec <UART_SetConfig+0xca4>
 800a4ce:	2310      	movs	r3, #16
 800a4d0:	e00c      	b.n	800a4ec <UART_SetConfig+0xca4>
 800a4d2:	230c      	movs	r3, #12
 800a4d4:	e00a      	b.n	800a4ec <UART_SetConfig+0xca4>
 800a4d6:	230a      	movs	r3, #10
 800a4d8:	e008      	b.n	800a4ec <UART_SetConfig+0xca4>
 800a4da:	2308      	movs	r3, #8
 800a4dc:	e006      	b.n	800a4ec <UART_SetConfig+0xca4>
 800a4de:	2306      	movs	r3, #6
 800a4e0:	e004      	b.n	800a4ec <UART_SetConfig+0xca4>
 800a4e2:	2304      	movs	r3, #4
 800a4e4:	e002      	b.n	800a4ec <UART_SetConfig+0xca4>
 800a4e6:	2302      	movs	r3, #2
 800a4e8:	e000      	b.n	800a4ec <UART_SetConfig+0xca4>
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4f0:	005a      	lsls	r2, r3, #1
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	085b      	lsrs	r3, r3, #1
 800a4f8:	441a      	add	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a502:	b29b      	uxth	r3, r3
 800a504:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800a506:	e112      	b.n	800a72e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d043      	beq.n	800a598 <UART_SetConfig+0xd50>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a514:	2b01      	cmp	r3, #1
 800a516:	d03d      	beq.n	800a594 <UART_SetConfig+0xd4c>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d037      	beq.n	800a590 <UART_SetConfig+0xd48>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a524:	2b03      	cmp	r3, #3
 800a526:	d031      	beq.n	800a58c <UART_SetConfig+0xd44>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52c:	2b04      	cmp	r3, #4
 800a52e:	d02b      	beq.n	800a588 <UART_SetConfig+0xd40>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a534:	2b05      	cmp	r3, #5
 800a536:	d025      	beq.n	800a584 <UART_SetConfig+0xd3c>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53c:	2b06      	cmp	r3, #6
 800a53e:	d01f      	beq.n	800a580 <UART_SetConfig+0xd38>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	2b07      	cmp	r3, #7
 800a546:	d019      	beq.n	800a57c <UART_SetConfig+0xd34>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	2b08      	cmp	r3, #8
 800a54e:	d013      	beq.n	800a578 <UART_SetConfig+0xd30>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	2b09      	cmp	r3, #9
 800a556:	d00d      	beq.n	800a574 <UART_SetConfig+0xd2c>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55c:	2b0a      	cmp	r3, #10
 800a55e:	d007      	beq.n	800a570 <UART_SetConfig+0xd28>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	2b0b      	cmp	r3, #11
 800a566:	d101      	bne.n	800a56c <UART_SetConfig+0xd24>
 800a568:	4b8c      	ldr	r3, [pc, #560]	; (800a79c <UART_SetConfig+0xf54>)
 800a56a:	e016      	b.n	800a59a <UART_SetConfig+0xd52>
 800a56c:	4b8c      	ldr	r3, [pc, #560]	; (800a7a0 <UART_SetConfig+0xf58>)
 800a56e:	e014      	b.n	800a59a <UART_SetConfig+0xd52>
 800a570:	4b8c      	ldr	r3, [pc, #560]	; (800a7a4 <UART_SetConfig+0xf5c>)
 800a572:	e012      	b.n	800a59a <UART_SetConfig+0xd52>
 800a574:	4b8c      	ldr	r3, [pc, #560]	; (800a7a8 <UART_SetConfig+0xf60>)
 800a576:	e010      	b.n	800a59a <UART_SetConfig+0xd52>
 800a578:	4b8c      	ldr	r3, [pc, #560]	; (800a7ac <UART_SetConfig+0xf64>)
 800a57a:	e00e      	b.n	800a59a <UART_SetConfig+0xd52>
 800a57c:	4b8c      	ldr	r3, [pc, #560]	; (800a7b0 <UART_SetConfig+0xf68>)
 800a57e:	e00c      	b.n	800a59a <UART_SetConfig+0xd52>
 800a580:	4b8c      	ldr	r3, [pc, #560]	; (800a7b4 <UART_SetConfig+0xf6c>)
 800a582:	e00a      	b.n	800a59a <UART_SetConfig+0xd52>
 800a584:	4b8c      	ldr	r3, [pc, #560]	; (800a7b8 <UART_SetConfig+0xf70>)
 800a586:	e008      	b.n	800a59a <UART_SetConfig+0xd52>
 800a588:	4b8c      	ldr	r3, [pc, #560]	; (800a7bc <UART_SetConfig+0xf74>)
 800a58a:	e006      	b.n	800a59a <UART_SetConfig+0xd52>
 800a58c:	4b8c      	ldr	r3, [pc, #560]	; (800a7c0 <UART_SetConfig+0xf78>)
 800a58e:	e004      	b.n	800a59a <UART_SetConfig+0xd52>
 800a590:	4b8c      	ldr	r3, [pc, #560]	; (800a7c4 <UART_SetConfig+0xf7c>)
 800a592:	e002      	b.n	800a59a <UART_SetConfig+0xd52>
 800a594:	4b8c      	ldr	r3, [pc, #560]	; (800a7c8 <UART_SetConfig+0xf80>)
 800a596:	e000      	b.n	800a59a <UART_SetConfig+0xd52>
 800a598:	4b81      	ldr	r3, [pc, #516]	; (800a7a0 <UART_SetConfig+0xf58>)
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	6852      	ldr	r2, [r2, #4]
 800a59e:	0852      	lsrs	r2, r2, #1
 800a5a0:	441a      	add	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800a5ae:	e0be      	b.n	800a72e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5b0:	f7fc fc1e 	bl	8006df0 <HAL_RCC_GetSysClockFreq>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d044      	beq.n	800a648 <UART_SetConfig+0xe00>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d03e      	beq.n	800a644 <UART_SetConfig+0xdfc>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d038      	beq.n	800a640 <UART_SetConfig+0xdf8>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d2:	2b03      	cmp	r3, #3
 800a5d4:	d032      	beq.n	800a63c <UART_SetConfig+0xdf4>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5da:	2b04      	cmp	r3, #4
 800a5dc:	d02c      	beq.n	800a638 <UART_SetConfig+0xdf0>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e2:	2b05      	cmp	r3, #5
 800a5e4:	d026      	beq.n	800a634 <UART_SetConfig+0xdec>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ea:	2b06      	cmp	r3, #6
 800a5ec:	d020      	beq.n	800a630 <UART_SetConfig+0xde8>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f2:	2b07      	cmp	r3, #7
 800a5f4:	d01a      	beq.n	800a62c <UART_SetConfig+0xde4>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fa:	2b08      	cmp	r3, #8
 800a5fc:	d014      	beq.n	800a628 <UART_SetConfig+0xde0>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a602:	2b09      	cmp	r3, #9
 800a604:	d00e      	beq.n	800a624 <UART_SetConfig+0xddc>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60a:	2b0a      	cmp	r3, #10
 800a60c:	d008      	beq.n	800a620 <UART_SetConfig+0xdd8>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a612:	2b0b      	cmp	r3, #11
 800a614:	d102      	bne.n	800a61c <UART_SetConfig+0xdd4>
 800a616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a61a:	e016      	b.n	800a64a <UART_SetConfig+0xe02>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e014      	b.n	800a64a <UART_SetConfig+0xe02>
 800a620:	2380      	movs	r3, #128	; 0x80
 800a622:	e012      	b.n	800a64a <UART_SetConfig+0xe02>
 800a624:	2340      	movs	r3, #64	; 0x40
 800a626:	e010      	b.n	800a64a <UART_SetConfig+0xe02>
 800a628:	2320      	movs	r3, #32
 800a62a:	e00e      	b.n	800a64a <UART_SetConfig+0xe02>
 800a62c:	2310      	movs	r3, #16
 800a62e:	e00c      	b.n	800a64a <UART_SetConfig+0xe02>
 800a630:	230c      	movs	r3, #12
 800a632:	e00a      	b.n	800a64a <UART_SetConfig+0xe02>
 800a634:	230a      	movs	r3, #10
 800a636:	e008      	b.n	800a64a <UART_SetConfig+0xe02>
 800a638:	2308      	movs	r3, #8
 800a63a:	e006      	b.n	800a64a <UART_SetConfig+0xe02>
 800a63c:	2306      	movs	r3, #6
 800a63e:	e004      	b.n	800a64a <UART_SetConfig+0xe02>
 800a640:	2304      	movs	r3, #4
 800a642:	e002      	b.n	800a64a <UART_SetConfig+0xe02>
 800a644:	2302      	movs	r3, #2
 800a646:	e000      	b.n	800a64a <UART_SetConfig+0xe02>
 800a648:	2301      	movs	r3, #1
 800a64a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a64e:	005a      	lsls	r2, r3, #1
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	085b      	lsrs	r3, r3, #1
 800a656:	441a      	add	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a660:	b29b      	uxth	r3, r3
 800a662:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800a664:	e063      	b.n	800a72e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d04f      	beq.n	800a70e <UART_SetConfig+0xec6>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a672:	2b01      	cmp	r3, #1
 800a674:	d048      	beq.n	800a708 <UART_SetConfig+0xec0>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	d041      	beq.n	800a702 <UART_SetConfig+0xeba>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a682:	2b03      	cmp	r3, #3
 800a684:	d03a      	beq.n	800a6fc <UART_SetConfig+0xeb4>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68a:	2b04      	cmp	r3, #4
 800a68c:	d033      	beq.n	800a6f6 <UART_SetConfig+0xeae>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a692:	2b05      	cmp	r3, #5
 800a694:	d02c      	beq.n	800a6f0 <UART_SetConfig+0xea8>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69a:	2b06      	cmp	r3, #6
 800a69c:	d025      	beq.n	800a6ea <UART_SetConfig+0xea2>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a2:	2b07      	cmp	r3, #7
 800a6a4:	d01e      	beq.n	800a6e4 <UART_SetConfig+0xe9c>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6aa:	2b08      	cmp	r3, #8
 800a6ac:	d017      	beq.n	800a6de <UART_SetConfig+0xe96>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b2:	2b09      	cmp	r3, #9
 800a6b4:	d010      	beq.n	800a6d8 <UART_SetConfig+0xe90>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ba:	2b0a      	cmp	r3, #10
 800a6bc:	d009      	beq.n	800a6d2 <UART_SetConfig+0xe8a>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c2:	2b0b      	cmp	r3, #11
 800a6c4:	d102      	bne.n	800a6cc <UART_SetConfig+0xe84>
 800a6c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6ca:	e022      	b.n	800a712 <UART_SetConfig+0xeca>
 800a6cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a6d0:	e01f      	b.n	800a712 <UART_SetConfig+0xeca>
 800a6d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6d6:	e01c      	b.n	800a712 <UART_SetConfig+0xeca>
 800a6d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6dc:	e019      	b.n	800a712 <UART_SetConfig+0xeca>
 800a6de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6e2:	e016      	b.n	800a712 <UART_SetConfig+0xeca>
 800a6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6e8:	e013      	b.n	800a712 <UART_SetConfig+0xeca>
 800a6ea:	f241 5354 	movw	r3, #5460	; 0x1554
 800a6ee:	e010      	b.n	800a712 <UART_SetConfig+0xeca>
 800a6f0:	f641 1398 	movw	r3, #6552	; 0x1998
 800a6f4:	e00d      	b.n	800a712 <UART_SetConfig+0xeca>
 800a6f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6fa:	e00a      	b.n	800a712 <UART_SetConfig+0xeca>
 800a6fc:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800a700:	e007      	b.n	800a712 <UART_SetConfig+0xeca>
 800a702:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a706:	e004      	b.n	800a712 <UART_SetConfig+0xeca>
 800a708:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a70c:	e001      	b.n	800a712 <UART_SetConfig+0xeca>
 800a70e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	6852      	ldr	r2, [r2, #4]
 800a716:	0852      	lsrs	r2, r2, #1
 800a718:	441a      	add	r2, r3
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a722:	b29b      	uxth	r3, r3
 800a724:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800a726:	e002      	b.n	800a72e <UART_SetConfig+0xee6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	74fb      	strb	r3, [r7, #19]
        break;
 800a72c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	2b0f      	cmp	r3, #15
 800a732:	d916      	bls.n	800a762 <UART_SetConfig+0xf1a>
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a73a:	d212      	bcs.n	800a762 <UART_SetConfig+0xf1a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	b29b      	uxth	r3, r3
 800a740:	f023 030f 	bic.w	r3, r3, #15
 800a744:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	085b      	lsrs	r3, r3, #1
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	f003 0307 	and.w	r3, r3, #7
 800a750:	b29a      	uxth	r2, r3
 800a752:	897b      	ldrh	r3, [r7, #10]
 800a754:	4313      	orrs	r3, r2
 800a756:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	897a      	ldrh	r2, [r7, #10]
 800a75e:	60da      	str	r2, [r3, #12]
 800a760:	e208      	b.n	800ab74 <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	74fb      	strb	r3, [r7, #19]
 800a766:	e205      	b.n	800ab74 <UART_SetConfig+0x132c>
    }
  }
  else
  {
    switch (clocksource)
 800a768:	7efb      	ldrb	r3, [r7, #27]
 800a76a:	2b08      	cmp	r3, #8
 800a76c:	f200 81f1 	bhi.w	800ab52 <UART_SetConfig+0x130a>
 800a770:	a201      	add	r2, pc, #4	; (adr r2, 800a778 <UART_SetConfig+0xf30>)
 800a772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a776:	bf00      	nop
 800a778:	0800a7cd 	.word	0x0800a7cd
 800a77c:	0800a881 	.word	0x0800a881
 800a780:	0800a935 	.word	0x0800a935
 800a784:	0800ab53 	.word	0x0800ab53
 800a788:	0800a9df 	.word	0x0800a9df
 800a78c:	0800ab53 	.word	0x0800ab53
 800a790:	0800ab53 	.word	0x0800ab53
 800a794:	0800ab53 	.word	0x0800ab53
 800a798:	0800aa93 	.word	0x0800aa93
 800a79c:	0001e848 	.word	0x0001e848
 800a7a0:	01e84800 	.word	0x01e84800
 800a7a4:	0003d090 	.word	0x0003d090
 800a7a8:	0007a120 	.word	0x0007a120
 800a7ac:	000f4240 	.word	0x000f4240
 800a7b0:	001e8480 	.word	0x001e8480
 800a7b4:	0028b0aa 	.word	0x0028b0aa
 800a7b8:	0030d400 	.word	0x0030d400
 800a7bc:	003d0900 	.word	0x003d0900
 800a7c0:	00516154 	.word	0x00516154
 800a7c4:	007a1200 	.word	0x007a1200
 800a7c8:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7cc:	f7fc fba6 	bl	8006f1c <HAL_RCC_GetPCLK1Freq>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d044      	beq.n	800a864 <UART_SetConfig+0x101c>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d03e      	beq.n	800a860 <UART_SetConfig+0x1018>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d038      	beq.n	800a85c <UART_SetConfig+0x1014>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ee:	2b03      	cmp	r3, #3
 800a7f0:	d032      	beq.n	800a858 <UART_SetConfig+0x1010>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	2b04      	cmp	r3, #4
 800a7f8:	d02c      	beq.n	800a854 <UART_SetConfig+0x100c>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fe:	2b05      	cmp	r3, #5
 800a800:	d026      	beq.n	800a850 <UART_SetConfig+0x1008>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a806:	2b06      	cmp	r3, #6
 800a808:	d020      	beq.n	800a84c <UART_SetConfig+0x1004>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80e:	2b07      	cmp	r3, #7
 800a810:	d01a      	beq.n	800a848 <UART_SetConfig+0x1000>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a816:	2b08      	cmp	r3, #8
 800a818:	d014      	beq.n	800a844 <UART_SetConfig+0xffc>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	2b09      	cmp	r3, #9
 800a820:	d00e      	beq.n	800a840 <UART_SetConfig+0xff8>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a826:	2b0a      	cmp	r3, #10
 800a828:	d008      	beq.n	800a83c <UART_SetConfig+0xff4>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82e:	2b0b      	cmp	r3, #11
 800a830:	d102      	bne.n	800a838 <UART_SetConfig+0xff0>
 800a832:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a836:	e016      	b.n	800a866 <UART_SetConfig+0x101e>
 800a838:	2301      	movs	r3, #1
 800a83a:	e014      	b.n	800a866 <UART_SetConfig+0x101e>
 800a83c:	2380      	movs	r3, #128	; 0x80
 800a83e:	e012      	b.n	800a866 <UART_SetConfig+0x101e>
 800a840:	2340      	movs	r3, #64	; 0x40
 800a842:	e010      	b.n	800a866 <UART_SetConfig+0x101e>
 800a844:	2320      	movs	r3, #32
 800a846:	e00e      	b.n	800a866 <UART_SetConfig+0x101e>
 800a848:	2310      	movs	r3, #16
 800a84a:	e00c      	b.n	800a866 <UART_SetConfig+0x101e>
 800a84c:	230c      	movs	r3, #12
 800a84e:	e00a      	b.n	800a866 <UART_SetConfig+0x101e>
 800a850:	230a      	movs	r3, #10
 800a852:	e008      	b.n	800a866 <UART_SetConfig+0x101e>
 800a854:	2308      	movs	r3, #8
 800a856:	e006      	b.n	800a866 <UART_SetConfig+0x101e>
 800a858:	2306      	movs	r3, #6
 800a85a:	e004      	b.n	800a866 <UART_SetConfig+0x101e>
 800a85c:	2304      	movs	r3, #4
 800a85e:	e002      	b.n	800a866 <UART_SetConfig+0x101e>
 800a860:	2302      	movs	r3, #2
 800a862:	e000      	b.n	800a866 <UART_SetConfig+0x101e>
 800a864:	2301      	movs	r3, #1
 800a866:	fbb2 f2f3 	udiv	r2, r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	085b      	lsrs	r3, r3, #1
 800a870:	441a      	add	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	fbb2 f3f3 	udiv	r3, r2, r3
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800a87e:	e16b      	b.n	800ab58 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a880:	f7fc fb62 	bl	8006f48 <HAL_RCC_GetPCLK2Freq>
 800a884:	4602      	mov	r2, r0
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d044      	beq.n	800a918 <UART_SetConfig+0x10d0>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a892:	2b01      	cmp	r3, #1
 800a894:	d03e      	beq.n	800a914 <UART_SetConfig+0x10cc>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	d038      	beq.n	800a910 <UART_SetConfig+0x10c8>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	d032      	beq.n	800a90c <UART_SetConfig+0x10c4>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8aa:	2b04      	cmp	r3, #4
 800a8ac:	d02c      	beq.n	800a908 <UART_SetConfig+0x10c0>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b2:	2b05      	cmp	r3, #5
 800a8b4:	d026      	beq.n	800a904 <UART_SetConfig+0x10bc>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ba:	2b06      	cmp	r3, #6
 800a8bc:	d020      	beq.n	800a900 <UART_SetConfig+0x10b8>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c2:	2b07      	cmp	r3, #7
 800a8c4:	d01a      	beq.n	800a8fc <UART_SetConfig+0x10b4>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ca:	2b08      	cmp	r3, #8
 800a8cc:	d014      	beq.n	800a8f8 <UART_SetConfig+0x10b0>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d2:	2b09      	cmp	r3, #9
 800a8d4:	d00e      	beq.n	800a8f4 <UART_SetConfig+0x10ac>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8da:	2b0a      	cmp	r3, #10
 800a8dc:	d008      	beq.n	800a8f0 <UART_SetConfig+0x10a8>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e2:	2b0b      	cmp	r3, #11
 800a8e4:	d102      	bne.n	800a8ec <UART_SetConfig+0x10a4>
 800a8e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8ea:	e016      	b.n	800a91a <UART_SetConfig+0x10d2>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e014      	b.n	800a91a <UART_SetConfig+0x10d2>
 800a8f0:	2380      	movs	r3, #128	; 0x80
 800a8f2:	e012      	b.n	800a91a <UART_SetConfig+0x10d2>
 800a8f4:	2340      	movs	r3, #64	; 0x40
 800a8f6:	e010      	b.n	800a91a <UART_SetConfig+0x10d2>
 800a8f8:	2320      	movs	r3, #32
 800a8fa:	e00e      	b.n	800a91a <UART_SetConfig+0x10d2>
 800a8fc:	2310      	movs	r3, #16
 800a8fe:	e00c      	b.n	800a91a <UART_SetConfig+0x10d2>
 800a900:	230c      	movs	r3, #12
 800a902:	e00a      	b.n	800a91a <UART_SetConfig+0x10d2>
 800a904:	230a      	movs	r3, #10
 800a906:	e008      	b.n	800a91a <UART_SetConfig+0x10d2>
 800a908:	2308      	movs	r3, #8
 800a90a:	e006      	b.n	800a91a <UART_SetConfig+0x10d2>
 800a90c:	2306      	movs	r3, #6
 800a90e:	e004      	b.n	800a91a <UART_SetConfig+0x10d2>
 800a910:	2304      	movs	r3, #4
 800a912:	e002      	b.n	800a91a <UART_SetConfig+0x10d2>
 800a914:	2302      	movs	r3, #2
 800a916:	e000      	b.n	800a91a <UART_SetConfig+0x10d2>
 800a918:	2301      	movs	r3, #1
 800a91a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	085b      	lsrs	r3, r3, #1
 800a924:	441a      	add	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a92e:	b29b      	uxth	r3, r3
 800a930:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800a932:	e111      	b.n	800ab58 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d044      	beq.n	800a9c6 <UART_SetConfig+0x117e>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a940:	2b01      	cmp	r3, #1
 800a942:	d03e      	beq.n	800a9c2 <UART_SetConfig+0x117a>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d038      	beq.n	800a9be <UART_SetConfig+0x1176>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a950:	2b03      	cmp	r3, #3
 800a952:	d032      	beq.n	800a9ba <UART_SetConfig+0x1172>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a958:	2b04      	cmp	r3, #4
 800a95a:	d02c      	beq.n	800a9b6 <UART_SetConfig+0x116e>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a960:	2b05      	cmp	r3, #5
 800a962:	d026      	beq.n	800a9b2 <UART_SetConfig+0x116a>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a968:	2b06      	cmp	r3, #6
 800a96a:	d020      	beq.n	800a9ae <UART_SetConfig+0x1166>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a970:	2b07      	cmp	r3, #7
 800a972:	d01a      	beq.n	800a9aa <UART_SetConfig+0x1162>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a978:	2b08      	cmp	r3, #8
 800a97a:	d014      	beq.n	800a9a6 <UART_SetConfig+0x115e>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a980:	2b09      	cmp	r3, #9
 800a982:	d00e      	beq.n	800a9a2 <UART_SetConfig+0x115a>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a988:	2b0a      	cmp	r3, #10
 800a98a:	d008      	beq.n	800a99e <UART_SetConfig+0x1156>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a990:	2b0b      	cmp	r3, #11
 800a992:	d102      	bne.n	800a99a <UART_SetConfig+0x1152>
 800a994:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a998:	e016      	b.n	800a9c8 <UART_SetConfig+0x1180>
 800a99a:	4b80      	ldr	r3, [pc, #512]	; (800ab9c <UART_SetConfig+0x1354>)
 800a99c:	e014      	b.n	800a9c8 <UART_SetConfig+0x1180>
 800a99e:	4b80      	ldr	r3, [pc, #512]	; (800aba0 <UART_SetConfig+0x1358>)
 800a9a0:	e012      	b.n	800a9c8 <UART_SetConfig+0x1180>
 800a9a2:	4b80      	ldr	r3, [pc, #512]	; (800aba4 <UART_SetConfig+0x135c>)
 800a9a4:	e010      	b.n	800a9c8 <UART_SetConfig+0x1180>
 800a9a6:	4b80      	ldr	r3, [pc, #512]	; (800aba8 <UART_SetConfig+0x1360>)
 800a9a8:	e00e      	b.n	800a9c8 <UART_SetConfig+0x1180>
 800a9aa:	4b80      	ldr	r3, [pc, #512]	; (800abac <UART_SetConfig+0x1364>)
 800a9ac:	e00c      	b.n	800a9c8 <UART_SetConfig+0x1180>
 800a9ae:	4b80      	ldr	r3, [pc, #512]	; (800abb0 <UART_SetConfig+0x1368>)
 800a9b0:	e00a      	b.n	800a9c8 <UART_SetConfig+0x1180>
 800a9b2:	4b80      	ldr	r3, [pc, #512]	; (800abb4 <UART_SetConfig+0x136c>)
 800a9b4:	e008      	b.n	800a9c8 <UART_SetConfig+0x1180>
 800a9b6:	4b80      	ldr	r3, [pc, #512]	; (800abb8 <UART_SetConfig+0x1370>)
 800a9b8:	e006      	b.n	800a9c8 <UART_SetConfig+0x1180>
 800a9ba:	4b80      	ldr	r3, [pc, #512]	; (800abbc <UART_SetConfig+0x1374>)
 800a9bc:	e004      	b.n	800a9c8 <UART_SetConfig+0x1180>
 800a9be:	4b80      	ldr	r3, [pc, #512]	; (800abc0 <UART_SetConfig+0x1378>)
 800a9c0:	e002      	b.n	800a9c8 <UART_SetConfig+0x1180>
 800a9c2:	4b80      	ldr	r3, [pc, #512]	; (800abc4 <UART_SetConfig+0x137c>)
 800a9c4:	e000      	b.n	800a9c8 <UART_SetConfig+0x1180>
 800a9c6:	4b75      	ldr	r3, [pc, #468]	; (800ab9c <UART_SetConfig+0x1354>)
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	6852      	ldr	r2, [r2, #4]
 800a9cc:	0852      	lsrs	r2, r2, #1
 800a9ce:	441a      	add	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800a9dc:	e0bc      	b.n	800ab58 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9de:	f7fc fa07 	bl	8006df0 <HAL_RCC_GetSysClockFreq>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d044      	beq.n	800aa76 <UART_SetConfig+0x122e>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d03e      	beq.n	800aa72 <UART_SetConfig+0x122a>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d038      	beq.n	800aa6e <UART_SetConfig+0x1226>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d032      	beq.n	800aa6a <UART_SetConfig+0x1222>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa08:	2b04      	cmp	r3, #4
 800aa0a:	d02c      	beq.n	800aa66 <UART_SetConfig+0x121e>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa10:	2b05      	cmp	r3, #5
 800aa12:	d026      	beq.n	800aa62 <UART_SetConfig+0x121a>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	2b06      	cmp	r3, #6
 800aa1a:	d020      	beq.n	800aa5e <UART_SetConfig+0x1216>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa20:	2b07      	cmp	r3, #7
 800aa22:	d01a      	beq.n	800aa5a <UART_SetConfig+0x1212>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa28:	2b08      	cmp	r3, #8
 800aa2a:	d014      	beq.n	800aa56 <UART_SetConfig+0x120e>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	2b09      	cmp	r3, #9
 800aa32:	d00e      	beq.n	800aa52 <UART_SetConfig+0x120a>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa38:	2b0a      	cmp	r3, #10
 800aa3a:	d008      	beq.n	800aa4e <UART_SetConfig+0x1206>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa40:	2b0b      	cmp	r3, #11
 800aa42:	d102      	bne.n	800aa4a <UART_SetConfig+0x1202>
 800aa44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa48:	e016      	b.n	800aa78 <UART_SetConfig+0x1230>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e014      	b.n	800aa78 <UART_SetConfig+0x1230>
 800aa4e:	2380      	movs	r3, #128	; 0x80
 800aa50:	e012      	b.n	800aa78 <UART_SetConfig+0x1230>
 800aa52:	2340      	movs	r3, #64	; 0x40
 800aa54:	e010      	b.n	800aa78 <UART_SetConfig+0x1230>
 800aa56:	2320      	movs	r3, #32
 800aa58:	e00e      	b.n	800aa78 <UART_SetConfig+0x1230>
 800aa5a:	2310      	movs	r3, #16
 800aa5c:	e00c      	b.n	800aa78 <UART_SetConfig+0x1230>
 800aa5e:	230c      	movs	r3, #12
 800aa60:	e00a      	b.n	800aa78 <UART_SetConfig+0x1230>
 800aa62:	230a      	movs	r3, #10
 800aa64:	e008      	b.n	800aa78 <UART_SetConfig+0x1230>
 800aa66:	2308      	movs	r3, #8
 800aa68:	e006      	b.n	800aa78 <UART_SetConfig+0x1230>
 800aa6a:	2306      	movs	r3, #6
 800aa6c:	e004      	b.n	800aa78 <UART_SetConfig+0x1230>
 800aa6e:	2304      	movs	r3, #4
 800aa70:	e002      	b.n	800aa78 <UART_SetConfig+0x1230>
 800aa72:	2302      	movs	r3, #2
 800aa74:	e000      	b.n	800aa78 <UART_SetConfig+0x1230>
 800aa76:	2301      	movs	r3, #1
 800aa78:	fbb2 f2f3 	udiv	r2, r2, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	085b      	lsrs	r3, r3, #1
 800aa82:	441a      	add	r2, r3
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800aa90:	e062      	b.n	800ab58 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d04e      	beq.n	800ab38 <UART_SetConfig+0x12f0>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d047      	beq.n	800ab32 <UART_SetConfig+0x12ea>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d040      	beq.n	800ab2c <UART_SetConfig+0x12e4>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	d039      	beq.n	800ab26 <UART_SetConfig+0x12de>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab6:	2b04      	cmp	r3, #4
 800aab8:	d032      	beq.n	800ab20 <UART_SetConfig+0x12d8>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabe:	2b05      	cmp	r3, #5
 800aac0:	d02b      	beq.n	800ab1a <UART_SetConfig+0x12d2>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac6:	2b06      	cmp	r3, #6
 800aac8:	d024      	beq.n	800ab14 <UART_SetConfig+0x12cc>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aace:	2b07      	cmp	r3, #7
 800aad0:	d01d      	beq.n	800ab0e <UART_SetConfig+0x12c6>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad6:	2b08      	cmp	r3, #8
 800aad8:	d016      	beq.n	800ab08 <UART_SetConfig+0x12c0>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aade:	2b09      	cmp	r3, #9
 800aae0:	d00f      	beq.n	800ab02 <UART_SetConfig+0x12ba>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae6:	2b0a      	cmp	r3, #10
 800aae8:	d008      	beq.n	800aafc <UART_SetConfig+0x12b4>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaee:	2b0b      	cmp	r3, #11
 800aaf0:	d101      	bne.n	800aaf6 <UART_SetConfig+0x12ae>
 800aaf2:	2380      	movs	r3, #128	; 0x80
 800aaf4:	e022      	b.n	800ab3c <UART_SetConfig+0x12f4>
 800aaf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aafa:	e01f      	b.n	800ab3c <UART_SetConfig+0x12f4>
 800aafc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab00:	e01c      	b.n	800ab3c <UART_SetConfig+0x12f4>
 800ab02:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab06:	e019      	b.n	800ab3c <UART_SetConfig+0x12f4>
 800ab08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab0c:	e016      	b.n	800ab3c <UART_SetConfig+0x12f4>
 800ab0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab12:	e013      	b.n	800ab3c <UART_SetConfig+0x12f4>
 800ab14:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800ab18:	e010      	b.n	800ab3c <UART_SetConfig+0x12f4>
 800ab1a:	f640 43cc 	movw	r3, #3276	; 0xccc
 800ab1e:	e00d      	b.n	800ab3c <UART_SetConfig+0x12f4>
 800ab20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab24:	e00a      	b.n	800ab3c <UART_SetConfig+0x12f4>
 800ab26:	f241 5355 	movw	r3, #5461	; 0x1555
 800ab2a:	e007      	b.n	800ab3c <UART_SetConfig+0x12f4>
 800ab2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab30:	e004      	b.n	800ab3c <UART_SetConfig+0x12f4>
 800ab32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ab36:	e001      	b.n	800ab3c <UART_SetConfig+0x12f4>
 800ab38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	6852      	ldr	r2, [r2, #4]
 800ab40:	0852      	lsrs	r2, r2, #1
 800ab42:	441a      	add	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	617b      	str	r3, [r7, #20]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800ab50:	e002      	b.n	800ab58 <UART_SetConfig+0x1310>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	74fb      	strb	r3, [r7, #19]
        break;
 800ab56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	2b0f      	cmp	r3, #15
 800ab5c:	d908      	bls.n	800ab70 <UART_SetConfig+0x1328>
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab64:	d204      	bcs.n	800ab70 <UART_SetConfig+0x1328>
    {
      huart->Instance->BRR = usartdiv;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	697a      	ldr	r2, [r7, #20]
 800ab6c:	60da      	str	r2, [r3, #12]
 800ab6e:	e001      	b.n	800ab74 <UART_SetConfig+0x132c>
    }
    else
    {
      ret = HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	74fb      	strb	r3, [r7, #19]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800ab90:	7cfb      	ldrb	r3, [r7, #19]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3720      	adds	r7, #32
 800ab96:	46bd      	mov	sp, r7
 800ab98:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800ab9c:	00f42400 	.word	0x00f42400
 800aba0:	0001e848 	.word	0x0001e848
 800aba4:	0003d090 	.word	0x0003d090
 800aba8:	0007a120 	.word	0x0007a120
 800abac:	000f4240 	.word	0x000f4240
 800abb0:	00145855 	.word	0x00145855
 800abb4:	00186a00 	.word	0x00186a00
 800abb8:	001e8480 	.word	0x001e8480
 800abbc:	0028b0aa 	.word	0x0028b0aa
 800abc0:	003d0900 	.word	0x003d0900
 800abc4:	007a1200 	.word	0x007a1200

0800abc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd4:	f003 0301 	and.w	r3, r3, #1
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00a      	beq.n	800abf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	430a      	orrs	r2, r1
 800abf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf6:	f003 0302 	and.w	r3, r3, #2
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00a      	beq.n	800ac14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	430a      	orrs	r2, r1
 800ac12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac18:	f003 0304 	and.w	r3, r3, #4
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00a      	beq.n	800ac36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	430a      	orrs	r2, r1
 800ac34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3a:	f003 0308 	and.w	r3, r3, #8
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00a      	beq.n	800ac58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	430a      	orrs	r2, r1
 800ac56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5c:	f003 0310 	and.w	r3, r3, #16
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00a      	beq.n	800ac7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	430a      	orrs	r2, r1
 800ac78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac7e:	f003 0320 	and.w	r3, r3, #32
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00a      	beq.n	800ac9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	430a      	orrs	r2, r1
 800ac9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d01a      	beq.n	800acde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	430a      	orrs	r2, r1
 800acbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acc6:	d10a      	bne.n	800acde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	430a      	orrs	r2, r1
 800acdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00a      	beq.n	800ad00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	430a      	orrs	r2, r1
 800acfe:	605a      	str	r2, [r3, #4]
  }
}
 800ad00:	bf00      	nop
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b086      	sub	sp, #24
 800ad10:	af02      	add	r7, sp, #8
 800ad12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ad1c:	f7fa fe20 	bl	8005960 <HAL_GetTick>
 800ad20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 0308 	and.w	r3, r3, #8
 800ad2c:	2b08      	cmp	r3, #8
 800ad2e:	d10e      	bne.n	800ad4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f82c 	bl	800ad9c <UART_WaitOnFlagUntilTimeout>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	e022      	b.n	800ad94 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 0304 	and.w	r3, r3, #4
 800ad58:	2b04      	cmp	r3, #4
 800ad5a:	d10e      	bne.n	800ad7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 f816 	bl	800ad9c <UART_WaitOnFlagUntilTimeout>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad76:	2303      	movs	r3, #3
 800ad78:	e00c      	b.n	800ad94 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2220      	movs	r2, #32
 800ad7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2220      	movs	r2, #32
 800ad86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	603b      	str	r3, [r7, #0]
 800ada8:	4613      	mov	r3, r2
 800adaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adac:	e02c      	b.n	800ae08 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb4:	d028      	beq.n	800ae08 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adb6:	f7fa fdd3 	bl	8005960 <HAL_GetTick>
 800adba:	4602      	mov	r2, r0
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	69ba      	ldr	r2, [r7, #24]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d302      	bcc.n	800adcc <UART_WaitOnFlagUntilTimeout+0x30>
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d11d      	bne.n	800ae08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800adda:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	689a      	ldr	r2, [r3, #8]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f022 0201 	bic.w	r2, r2, #1
 800adea:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2220      	movs	r2, #32
 800adf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2220      	movs	r2, #32
 800adf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ae04:	2303      	movs	r3, #3
 800ae06:	e00f      	b.n	800ae28 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	69da      	ldr	r2, [r3, #28]
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	4013      	ands	r3, r2
 800ae12:	68ba      	ldr	r2, [r7, #8]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	bf0c      	ite	eq
 800ae18:	2301      	moveq	r3, #1
 800ae1a:	2300      	movne	r3, #0
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	461a      	mov	r2, r3
 800ae20:	79fb      	ldrb	r3, [r7, #7]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d0c3      	beq.n	800adae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d101      	bne.n	800ae46 <HAL_UARTEx_DisableFifoMode+0x16>
 800ae42:	2302      	movs	r3, #2
 800ae44:	e027      	b.n	800ae96 <HAL_UARTEx_DisableFifoMode+0x66>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2224      	movs	r2, #36	; 0x24
 800ae52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f022 0201 	bic.w	r2, r2, #1
 800ae6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ae74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2220      	movs	r2, #32
 800ae88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3714      	adds	r7, #20
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr

0800aea2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d101      	bne.n	800aeba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aeb6:	2302      	movs	r3, #2
 800aeb8:	e02d      	b.n	800af16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2224      	movs	r2, #36	; 0x24
 800aec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f022 0201 	bic.w	r2, r2, #1
 800aee0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	683a      	ldr	r2, [r7, #0]
 800aef2:	430a      	orrs	r2, r1
 800aef4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f850 	bl	800af9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2220      	movs	r2, #32
 800af08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b084      	sub	sp, #16
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d101      	bne.n	800af36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af32:	2302      	movs	r3, #2
 800af34:	e02d      	b.n	800af92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2201      	movs	r2, #1
 800af3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2224      	movs	r2, #36	; 0x24
 800af42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f022 0201 	bic.w	r2, r2, #1
 800af5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	683a      	ldr	r2, [r7, #0]
 800af6e:	430a      	orrs	r2, r1
 800af70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f812 	bl	800af9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2220      	movs	r2, #32
 800af84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
	...

0800af9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b089      	sub	sp, #36	; 0x24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800afa4:	4a2f      	ldr	r2, [pc, #188]	; (800b064 <UARTEx_SetNbDataToProcess+0xc8>)
 800afa6:	f107 0314 	add.w	r3, r7, #20
 800afaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800afae:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800afb2:	4a2d      	ldr	r2, [pc, #180]	; (800b068 <UARTEx_SetNbDataToProcess+0xcc>)
 800afb4:	f107 030c 	add.w	r3, r7, #12
 800afb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800afbc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d108      	bne.n	800afda <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800afd8:	e03d      	b.n	800b056 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800afda:	2308      	movs	r3, #8
 800afdc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800afde:	2308      	movs	r3, #8
 800afe0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	0e5b      	lsrs	r3, r3, #25
 800afea:	b2db      	uxtb	r3, r3
 800afec:	f003 0307 	and.w	r3, r3, #7
 800aff0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	0f5b      	lsrs	r3, r3, #29
 800affa:	b2db      	uxtb	r3, r3
 800affc:	f003 0307 	and.w	r3, r3, #7
 800b000:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b002:	7fbb      	ldrb	r3, [r7, #30]
 800b004:	7f3a      	ldrb	r2, [r7, #28]
 800b006:	f107 0120 	add.w	r1, r7, #32
 800b00a:	440a      	add	r2, r1
 800b00c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b010:	fb02 f303 	mul.w	r3, r2, r3
 800b014:	7f3a      	ldrb	r2, [r7, #28]
 800b016:	f107 0120 	add.w	r1, r7, #32
 800b01a:	440a      	add	r2, r1
 800b01c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b020:	fb93 f3f2 	sdiv	r3, r3, r2
 800b024:	b29a      	uxth	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b02c:	7ffb      	ldrb	r3, [r7, #31]
 800b02e:	7f7a      	ldrb	r2, [r7, #29]
 800b030:	f107 0120 	add.w	r1, r7, #32
 800b034:	440a      	add	r2, r1
 800b036:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b03a:	fb02 f303 	mul.w	r3, r2, r3
 800b03e:	7f7a      	ldrb	r2, [r7, #29]
 800b040:	f107 0120 	add.w	r1, r7, #32
 800b044:	440a      	add	r2, r1
 800b046:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b04a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b04e:	b29a      	uxth	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b056:	bf00      	nop
 800b058:	3724      	adds	r7, #36	; 0x24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	0800c6a4 	.word	0x0800c6a4
 800b068:	0800c6ac 	.word	0x0800c6ac

0800b06c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b06c:	b084      	sub	sp, #16
 800b06e:	b580      	push	{r7, lr}
 800b070:	b084      	sub	sp, #16
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	f107 001c 	add.w	r0, r7, #28
 800b07a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b080:	2b01      	cmp	r3, #1
 800b082:	d122      	bne.n	800b0ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b088:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b0ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d105      	bne.n	800b0be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 fa1e 	bl	800b500 <USB_CoreReset>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	73fb      	strb	r3, [r7, #15]
 800b0c8:	e01a      	b.n	800b100 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 fa12 	bl	800b500 <USB_CoreReset>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d106      	bne.n	800b0f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	639a      	str	r2, [r3, #56]	; 0x38
 800b0f2:	e005      	b.n	800b100 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800b100:	7bfb      	ldrb	r3, [r7, #15]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b10c:	b004      	add	sp, #16
 800b10e:	4770      	bx	lr

0800b110 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	f023 0201 	bic.w	r2, r3, #1
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	370c      	adds	r7, #12
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b082      	sub	sp, #8
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
 800b13a:	460b      	mov	r3, r1
 800b13c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b14a:	78fb      	ldrb	r3, [r7, #3]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d106      	bne.n	800b15e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	60da      	str	r2, [r3, #12]
 800b15c:	e00b      	b.n	800b176 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b15e:	78fb      	ldrb	r3, [r7, #3]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d106      	bne.n	800b172 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	60da      	str	r2, [r3, #12]
 800b170:	e001      	b.n	800b176 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	e003      	b.n	800b17e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b176:	2032      	movs	r0, #50	; 0x32
 800b178:	f7fa fbfe 	bl	8005978 <HAL_Delay>

  return HAL_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
	...

0800b188 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b188:	b084      	sub	sp, #16
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b086      	sub	sp, #24
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
 800b192:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b19a:	2300      	movs	r3, #0
 800b19c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	613b      	str	r3, [r7, #16]
 800b1a6:	e009      	b.n	800b1bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	3340      	adds	r3, #64	; 0x40
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	613b      	str	r3, [r7, #16]
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	2b0e      	cmp	r3, #14
 800b1c0:	d9f2      	bls.n	800b1a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b1c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d112      	bne.n	800b1ee <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	601a      	str	r2, [r3, #0]
 800b1ec:	e005      	b.n	800b1fa <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b200:	461a      	mov	r2, r3
 800b202:	2300      	movs	r3, #0
 800b204:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b20c:	4619      	mov	r1, r3
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b214:	461a      	mov	r2, r3
 800b216:	680b      	ldr	r3, [r1, #0]
 800b218:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b21a:	2103      	movs	r1, #3
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f93d 	bl	800b49c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b222:	2110      	movs	r1, #16
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f8f1 	bl	800b40c <USB_FlushTxFifo>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d001      	beq.n	800b234 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 f90f 	bl	800b458 <USB_FlushRxFifo>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b24a:	461a      	mov	r2, r3
 800b24c:	2300      	movs	r3, #0
 800b24e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b256:	461a      	mov	r2, r3
 800b258:	2300      	movs	r3, #0
 800b25a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b262:	461a      	mov	r2, r3
 800b264:	2300      	movs	r3, #0
 800b266:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b268:	2300      	movs	r3, #0
 800b26a:	613b      	str	r3, [r7, #16]
 800b26c:	e043      	b.n	800b2f6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	015a      	lsls	r2, r3, #5
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	4413      	add	r3, r2
 800b276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b280:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b284:	d118      	bne.n	800b2b8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d10a      	bne.n	800b2a2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	015a      	lsls	r2, r3, #5
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	4413      	add	r3, r2
 800b294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b298:	461a      	mov	r2, r3
 800b29a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b29e:	6013      	str	r3, [r2, #0]
 800b2a0:	e013      	b.n	800b2ca <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	015a      	lsls	r2, r3, #5
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b2b4:	6013      	str	r3, [r2, #0]
 800b2b6:	e008      	b.n	800b2ca <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	015a      	lsls	r2, r3, #5
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	4413      	add	r3, r2
 800b2c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	015a      	lsls	r2, r3, #5
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	2300      	movs	r3, #0
 800b2da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	015a      	lsls	r2, r3, #5
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b2ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	613b      	str	r3, [r7, #16]
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f8:	693a      	ldr	r2, [r7, #16]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d3b7      	bcc.n	800b26e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2fe:	2300      	movs	r3, #0
 800b300:	613b      	str	r3, [r7, #16]
 800b302:	e043      	b.n	800b38c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	015a      	lsls	r2, r3, #5
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	4413      	add	r3, r2
 800b30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b31a:	d118      	bne.n	800b34e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10a      	bne.n	800b338 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	015a      	lsls	r2, r3, #5
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	4413      	add	r3, r2
 800b32a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b32e:	461a      	mov	r2, r3
 800b330:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b334:	6013      	str	r3, [r2, #0]
 800b336:	e013      	b.n	800b360 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	015a      	lsls	r2, r3, #5
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	4413      	add	r3, r2
 800b340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b344:	461a      	mov	r2, r3
 800b346:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b34a:	6013      	str	r3, [r2, #0]
 800b34c:	e008      	b.n	800b360 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	015a      	lsls	r2, r3, #5
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	4413      	add	r3, r2
 800b356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b35a:	461a      	mov	r2, r3
 800b35c:	2300      	movs	r3, #0
 800b35e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	015a      	lsls	r2, r3, #5
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	4413      	add	r3, r2
 800b368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b36c:	461a      	mov	r2, r3
 800b36e:	2300      	movs	r3, #0
 800b370:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	015a      	lsls	r2, r3, #5
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	4413      	add	r3, r2
 800b37a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b37e:	461a      	mov	r2, r3
 800b380:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b384:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	3301      	adds	r3, #1
 800b38a:	613b      	str	r3, [r7, #16]
 800b38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38e:	693a      	ldr	r2, [r7, #16]
 800b390:	429a      	cmp	r2, r3
 800b392:	d3b7      	bcc.n	800b304 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b39a:	691b      	ldr	r3, [r3, #16]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b3b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	699b      	ldr	r3, [r3, #24]
 800b3ba:	f043 0210 	orr.w	r2, r3, #16
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	699a      	ldr	r2, [r3, #24]
 800b3c6:	4b10      	ldr	r3, [pc, #64]	; (800b408 <USB_DevInit+0x280>)
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d005      	beq.n	800b3e0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	699b      	ldr	r3, [r3, #24]
 800b3d8:	f043 0208 	orr.w	r2, r3, #8
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b3e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d107      	bne.n	800b3f6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	699b      	ldr	r3, [r3, #24]
 800b3ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b3ee:	f043 0304 	orr.w	r3, r3, #4
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b3f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b402:	b004      	add	sp, #16
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	803c3800 	.word	0x803c3800

0800b40c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b416:	2300      	movs	r3, #0
 800b418:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	019b      	lsls	r3, r3, #6
 800b41e:	f043 0220 	orr.w	r2, r3, #32
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	3301      	adds	r3, #1
 800b42a:	60fb      	str	r3, [r7, #12]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	4a09      	ldr	r2, [pc, #36]	; (800b454 <USB_FlushTxFifo+0x48>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d901      	bls.n	800b438 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b434:	2303      	movs	r3, #3
 800b436:	e006      	b.n	800b446 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	691b      	ldr	r3, [r3, #16]
 800b43c:	f003 0320 	and.w	r3, r3, #32
 800b440:	2b20      	cmp	r3, #32
 800b442:	d0f0      	beq.n	800b426 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3714      	adds	r7, #20
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	00030d40 	.word	0x00030d40

0800b458 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b460:	2300      	movs	r3, #0
 800b462:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2210      	movs	r2, #16
 800b468:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	3301      	adds	r3, #1
 800b46e:	60fb      	str	r3, [r7, #12]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	4a09      	ldr	r2, [pc, #36]	; (800b498 <USB_FlushRxFifo+0x40>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d901      	bls.n	800b47c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b478:	2303      	movs	r3, #3
 800b47a:	e006      	b.n	800b48a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	f003 0310 	and.w	r3, r3, #16
 800b484:	2b10      	cmp	r3, #16
 800b486:	d0f0      	beq.n	800b46a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3714      	adds	r7, #20
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	00030d40 	.word	0x00030d40

0800b49c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	78fb      	ldrb	r3, [r7, #3]
 800b4b6:	68f9      	ldr	r1, [r7, #12]
 800b4b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b4c0:	2300      	movs	r3, #0
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3714      	adds	r7, #20
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr

0800b4ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b084      	sub	sp, #16
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4e8:	f043 0302 	orr.w	r3, r3, #2
 800b4ec:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b4ee:	2003      	movs	r0, #3
 800b4f0:	f7fa fa42 	bl	8005978 <HAL_Delay>

  return HAL_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
	...

0800b500 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b508:	2300      	movs	r3, #0
 800b50a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	3301      	adds	r3, #1
 800b510:	60fb      	str	r3, [r7, #12]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	4a13      	ldr	r2, [pc, #76]	; (800b564 <USB_CoreReset+0x64>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d901      	bls.n	800b51e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b51a:	2303      	movs	r3, #3
 800b51c:	e01b      	b.n	800b556 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	691b      	ldr	r3, [r3, #16]
 800b522:	2b00      	cmp	r3, #0
 800b524:	daf2      	bge.n	800b50c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b526:	2300      	movs	r3, #0
 800b528:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	691b      	ldr	r3, [r3, #16]
 800b52e:	f043 0201 	orr.w	r2, r3, #1
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	3301      	adds	r3, #1
 800b53a:	60fb      	str	r3, [r7, #12]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4a09      	ldr	r2, [pc, #36]	; (800b564 <USB_CoreReset+0x64>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d901      	bls.n	800b548 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b544:	2303      	movs	r3, #3
 800b546:	e006      	b.n	800b556 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	f003 0301 	and.w	r3, r3, #1
 800b550:	2b01      	cmp	r3, #1
 800b552:	d0f0      	beq.n	800b536 <USB_CoreReset+0x36>

  return HAL_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	00030d40 	.word	0x00030d40

0800b568 <__assert_func>:
 800b568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b56a:	461c      	mov	r4, r3
 800b56c:	4b09      	ldr	r3, [pc, #36]	; (800b594 <__assert_func+0x2c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4605      	mov	r5, r0
 800b572:	68d8      	ldr	r0, [r3, #12]
 800b574:	b152      	cbz	r2, 800b58c <__assert_func+0x24>
 800b576:	4b08      	ldr	r3, [pc, #32]	; (800b598 <__assert_func+0x30>)
 800b578:	9100      	str	r1, [sp, #0]
 800b57a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b57e:	4907      	ldr	r1, [pc, #28]	; (800b59c <__assert_func+0x34>)
 800b580:	462b      	mov	r3, r5
 800b582:	4622      	mov	r2, r4
 800b584:	f000 f814 	bl	800b5b0 <fiprintf>
 800b588:	f000 fc5e 	bl	800be48 <abort>
 800b58c:	4b04      	ldr	r3, [pc, #16]	; (800b5a0 <__assert_func+0x38>)
 800b58e:	461a      	mov	r2, r3
 800b590:	e7f2      	b.n	800b578 <__assert_func+0x10>
 800b592:	bf00      	nop
 800b594:	20000070 	.word	0x20000070
 800b598:	0800d0fc 	.word	0x0800d0fc
 800b59c:	0800d109 	.word	0x0800d109
 800b5a0:	0800d137 	.word	0x0800d137

0800b5a4 <__errno>:
 800b5a4:	4b01      	ldr	r3, [pc, #4]	; (800b5ac <__errno+0x8>)
 800b5a6:	6818      	ldr	r0, [r3, #0]
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	20000070 	.word	0x20000070

0800b5b0 <fiprintf>:
 800b5b0:	b40e      	push	{r1, r2, r3}
 800b5b2:	b503      	push	{r0, r1, lr}
 800b5b4:	4601      	mov	r1, r0
 800b5b6:	ab03      	add	r3, sp, #12
 800b5b8:	4805      	ldr	r0, [pc, #20]	; (800b5d0 <fiprintf+0x20>)
 800b5ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5be:	6800      	ldr	r0, [r0, #0]
 800b5c0:	9301      	str	r3, [sp, #4]
 800b5c2:	f000 f867 	bl	800b694 <_vfiprintf_r>
 800b5c6:	b002      	add	sp, #8
 800b5c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5cc:	b003      	add	sp, #12
 800b5ce:	4770      	bx	lr
 800b5d0:	20000070 	.word	0x20000070

0800b5d4 <__libc_init_array>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	4e0d      	ldr	r6, [pc, #52]	; (800b60c <__libc_init_array+0x38>)
 800b5d8:	4c0d      	ldr	r4, [pc, #52]	; (800b610 <__libc_init_array+0x3c>)
 800b5da:	1ba4      	subs	r4, r4, r6
 800b5dc:	10a4      	asrs	r4, r4, #2
 800b5de:	2500      	movs	r5, #0
 800b5e0:	42a5      	cmp	r5, r4
 800b5e2:	d109      	bne.n	800b5f8 <__libc_init_array+0x24>
 800b5e4:	4e0b      	ldr	r6, [pc, #44]	; (800b614 <__libc_init_array+0x40>)
 800b5e6:	4c0c      	ldr	r4, [pc, #48]	; (800b618 <__libc_init_array+0x44>)
 800b5e8:	f000 ffbe 	bl	800c568 <_init>
 800b5ec:	1ba4      	subs	r4, r4, r6
 800b5ee:	10a4      	asrs	r4, r4, #2
 800b5f0:	2500      	movs	r5, #0
 800b5f2:	42a5      	cmp	r5, r4
 800b5f4:	d105      	bne.n	800b602 <__libc_init_array+0x2e>
 800b5f6:	bd70      	pop	{r4, r5, r6, pc}
 800b5f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b5fc:	4798      	blx	r3
 800b5fe:	3501      	adds	r5, #1
 800b600:	e7ee      	b.n	800b5e0 <__libc_init_array+0xc>
 800b602:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b606:	4798      	blx	r3
 800b608:	3501      	adds	r5, #1
 800b60a:	e7f2      	b.n	800b5f2 <__libc_init_array+0x1e>
 800b60c:	0800d1d8 	.word	0x0800d1d8
 800b610:	0800d1d8 	.word	0x0800d1d8
 800b614:	0800d1d8 	.word	0x0800d1d8
 800b618:	0800d1dc 	.word	0x0800d1dc

0800b61c <memcpy>:
 800b61c:	b510      	push	{r4, lr}
 800b61e:	1e43      	subs	r3, r0, #1
 800b620:	440a      	add	r2, r1
 800b622:	4291      	cmp	r1, r2
 800b624:	d100      	bne.n	800b628 <memcpy+0xc>
 800b626:	bd10      	pop	{r4, pc}
 800b628:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b62c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b630:	e7f7      	b.n	800b622 <memcpy+0x6>

0800b632 <memset>:
 800b632:	4402      	add	r2, r0
 800b634:	4603      	mov	r3, r0
 800b636:	4293      	cmp	r3, r2
 800b638:	d100      	bne.n	800b63c <memset+0xa>
 800b63a:	4770      	bx	lr
 800b63c:	f803 1b01 	strb.w	r1, [r3], #1
 800b640:	e7f9      	b.n	800b636 <memset+0x4>

0800b642 <__sfputc_r>:
 800b642:	6893      	ldr	r3, [r2, #8]
 800b644:	3b01      	subs	r3, #1
 800b646:	2b00      	cmp	r3, #0
 800b648:	b410      	push	{r4}
 800b64a:	6093      	str	r3, [r2, #8]
 800b64c:	da08      	bge.n	800b660 <__sfputc_r+0x1e>
 800b64e:	6994      	ldr	r4, [r2, #24]
 800b650:	42a3      	cmp	r3, r4
 800b652:	db01      	blt.n	800b658 <__sfputc_r+0x16>
 800b654:	290a      	cmp	r1, #10
 800b656:	d103      	bne.n	800b660 <__sfputc_r+0x1e>
 800b658:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b65c:	f000 bb34 	b.w	800bcc8 <__swbuf_r>
 800b660:	6813      	ldr	r3, [r2, #0]
 800b662:	1c58      	adds	r0, r3, #1
 800b664:	6010      	str	r0, [r2, #0]
 800b666:	7019      	strb	r1, [r3, #0]
 800b668:	4608      	mov	r0, r1
 800b66a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <__sfputs_r>:
 800b670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b672:	4606      	mov	r6, r0
 800b674:	460f      	mov	r7, r1
 800b676:	4614      	mov	r4, r2
 800b678:	18d5      	adds	r5, r2, r3
 800b67a:	42ac      	cmp	r4, r5
 800b67c:	d101      	bne.n	800b682 <__sfputs_r+0x12>
 800b67e:	2000      	movs	r0, #0
 800b680:	e007      	b.n	800b692 <__sfputs_r+0x22>
 800b682:	463a      	mov	r2, r7
 800b684:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b688:	4630      	mov	r0, r6
 800b68a:	f7ff ffda 	bl	800b642 <__sfputc_r>
 800b68e:	1c43      	adds	r3, r0, #1
 800b690:	d1f3      	bne.n	800b67a <__sfputs_r+0xa>
 800b692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b694 <_vfiprintf_r>:
 800b694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b698:	460c      	mov	r4, r1
 800b69a:	b09d      	sub	sp, #116	; 0x74
 800b69c:	4617      	mov	r7, r2
 800b69e:	461d      	mov	r5, r3
 800b6a0:	4606      	mov	r6, r0
 800b6a2:	b118      	cbz	r0, 800b6ac <_vfiprintf_r+0x18>
 800b6a4:	6983      	ldr	r3, [r0, #24]
 800b6a6:	b90b      	cbnz	r3, 800b6ac <_vfiprintf_r+0x18>
 800b6a8:	f000 fcc6 	bl	800c038 <__sinit>
 800b6ac:	4b7c      	ldr	r3, [pc, #496]	; (800b8a0 <_vfiprintf_r+0x20c>)
 800b6ae:	429c      	cmp	r4, r3
 800b6b0:	d158      	bne.n	800b764 <_vfiprintf_r+0xd0>
 800b6b2:	6874      	ldr	r4, [r6, #4]
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	0718      	lsls	r0, r3, #28
 800b6b8:	d55e      	bpl.n	800b778 <_vfiprintf_r+0xe4>
 800b6ba:	6923      	ldr	r3, [r4, #16]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d05b      	beq.n	800b778 <_vfiprintf_r+0xe4>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6c4:	2320      	movs	r3, #32
 800b6c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6ca:	2330      	movs	r3, #48	; 0x30
 800b6cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6d0:	9503      	str	r5, [sp, #12]
 800b6d2:	f04f 0b01 	mov.w	fp, #1
 800b6d6:	46b8      	mov	r8, r7
 800b6d8:	4645      	mov	r5, r8
 800b6da:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b6de:	b10b      	cbz	r3, 800b6e4 <_vfiprintf_r+0x50>
 800b6e0:	2b25      	cmp	r3, #37	; 0x25
 800b6e2:	d154      	bne.n	800b78e <_vfiprintf_r+0xfa>
 800b6e4:	ebb8 0a07 	subs.w	sl, r8, r7
 800b6e8:	d00b      	beq.n	800b702 <_vfiprintf_r+0x6e>
 800b6ea:	4653      	mov	r3, sl
 800b6ec:	463a      	mov	r2, r7
 800b6ee:	4621      	mov	r1, r4
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f7ff ffbd 	bl	800b670 <__sfputs_r>
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	f000 80c2 	beq.w	800b880 <_vfiprintf_r+0x1ec>
 800b6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6fe:	4453      	add	r3, sl
 800b700:	9309      	str	r3, [sp, #36]	; 0x24
 800b702:	f898 3000 	ldrb.w	r3, [r8]
 800b706:	2b00      	cmp	r3, #0
 800b708:	f000 80ba 	beq.w	800b880 <_vfiprintf_r+0x1ec>
 800b70c:	2300      	movs	r3, #0
 800b70e:	f04f 32ff 	mov.w	r2, #4294967295
 800b712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b716:	9304      	str	r3, [sp, #16]
 800b718:	9307      	str	r3, [sp, #28]
 800b71a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b71e:	931a      	str	r3, [sp, #104]	; 0x68
 800b720:	46a8      	mov	r8, r5
 800b722:	2205      	movs	r2, #5
 800b724:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b728:	485e      	ldr	r0, [pc, #376]	; (800b8a4 <_vfiprintf_r+0x210>)
 800b72a:	f7f4 fd69 	bl	8000200 <memchr>
 800b72e:	9b04      	ldr	r3, [sp, #16]
 800b730:	bb78      	cbnz	r0, 800b792 <_vfiprintf_r+0xfe>
 800b732:	06d9      	lsls	r1, r3, #27
 800b734:	bf44      	itt	mi
 800b736:	2220      	movmi	r2, #32
 800b738:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b73c:	071a      	lsls	r2, r3, #28
 800b73e:	bf44      	itt	mi
 800b740:	222b      	movmi	r2, #43	; 0x2b
 800b742:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b746:	782a      	ldrb	r2, [r5, #0]
 800b748:	2a2a      	cmp	r2, #42	; 0x2a
 800b74a:	d02a      	beq.n	800b7a2 <_vfiprintf_r+0x10e>
 800b74c:	9a07      	ldr	r2, [sp, #28]
 800b74e:	46a8      	mov	r8, r5
 800b750:	2000      	movs	r0, #0
 800b752:	250a      	movs	r5, #10
 800b754:	4641      	mov	r1, r8
 800b756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b75a:	3b30      	subs	r3, #48	; 0x30
 800b75c:	2b09      	cmp	r3, #9
 800b75e:	d969      	bls.n	800b834 <_vfiprintf_r+0x1a0>
 800b760:	b360      	cbz	r0, 800b7bc <_vfiprintf_r+0x128>
 800b762:	e024      	b.n	800b7ae <_vfiprintf_r+0x11a>
 800b764:	4b50      	ldr	r3, [pc, #320]	; (800b8a8 <_vfiprintf_r+0x214>)
 800b766:	429c      	cmp	r4, r3
 800b768:	d101      	bne.n	800b76e <_vfiprintf_r+0xda>
 800b76a:	68b4      	ldr	r4, [r6, #8]
 800b76c:	e7a2      	b.n	800b6b4 <_vfiprintf_r+0x20>
 800b76e:	4b4f      	ldr	r3, [pc, #316]	; (800b8ac <_vfiprintf_r+0x218>)
 800b770:	429c      	cmp	r4, r3
 800b772:	bf08      	it	eq
 800b774:	68f4      	ldreq	r4, [r6, #12]
 800b776:	e79d      	b.n	800b6b4 <_vfiprintf_r+0x20>
 800b778:	4621      	mov	r1, r4
 800b77a:	4630      	mov	r0, r6
 800b77c:	f000 faf6 	bl	800bd6c <__swsetup_r>
 800b780:	2800      	cmp	r0, #0
 800b782:	d09d      	beq.n	800b6c0 <_vfiprintf_r+0x2c>
 800b784:	f04f 30ff 	mov.w	r0, #4294967295
 800b788:	b01d      	add	sp, #116	; 0x74
 800b78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78e:	46a8      	mov	r8, r5
 800b790:	e7a2      	b.n	800b6d8 <_vfiprintf_r+0x44>
 800b792:	4a44      	ldr	r2, [pc, #272]	; (800b8a4 <_vfiprintf_r+0x210>)
 800b794:	1a80      	subs	r0, r0, r2
 800b796:	fa0b f000 	lsl.w	r0, fp, r0
 800b79a:	4318      	orrs	r0, r3
 800b79c:	9004      	str	r0, [sp, #16]
 800b79e:	4645      	mov	r5, r8
 800b7a0:	e7be      	b.n	800b720 <_vfiprintf_r+0x8c>
 800b7a2:	9a03      	ldr	r2, [sp, #12]
 800b7a4:	1d11      	adds	r1, r2, #4
 800b7a6:	6812      	ldr	r2, [r2, #0]
 800b7a8:	9103      	str	r1, [sp, #12]
 800b7aa:	2a00      	cmp	r2, #0
 800b7ac:	db01      	blt.n	800b7b2 <_vfiprintf_r+0x11e>
 800b7ae:	9207      	str	r2, [sp, #28]
 800b7b0:	e004      	b.n	800b7bc <_vfiprintf_r+0x128>
 800b7b2:	4252      	negs	r2, r2
 800b7b4:	f043 0302 	orr.w	r3, r3, #2
 800b7b8:	9207      	str	r2, [sp, #28]
 800b7ba:	9304      	str	r3, [sp, #16]
 800b7bc:	f898 3000 	ldrb.w	r3, [r8]
 800b7c0:	2b2e      	cmp	r3, #46	; 0x2e
 800b7c2:	d10e      	bne.n	800b7e2 <_vfiprintf_r+0x14e>
 800b7c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b7c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b7ca:	d138      	bne.n	800b83e <_vfiprintf_r+0x1aa>
 800b7cc:	9b03      	ldr	r3, [sp, #12]
 800b7ce:	1d1a      	adds	r2, r3, #4
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	9203      	str	r2, [sp, #12]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	bfb8      	it	lt
 800b7d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7dc:	f108 0802 	add.w	r8, r8, #2
 800b7e0:	9305      	str	r3, [sp, #20]
 800b7e2:	4d33      	ldr	r5, [pc, #204]	; (800b8b0 <_vfiprintf_r+0x21c>)
 800b7e4:	f898 1000 	ldrb.w	r1, [r8]
 800b7e8:	2203      	movs	r2, #3
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	f7f4 fd08 	bl	8000200 <memchr>
 800b7f0:	b140      	cbz	r0, 800b804 <_vfiprintf_r+0x170>
 800b7f2:	2340      	movs	r3, #64	; 0x40
 800b7f4:	1b40      	subs	r0, r0, r5
 800b7f6:	fa03 f000 	lsl.w	r0, r3, r0
 800b7fa:	9b04      	ldr	r3, [sp, #16]
 800b7fc:	4303      	orrs	r3, r0
 800b7fe:	f108 0801 	add.w	r8, r8, #1
 800b802:	9304      	str	r3, [sp, #16]
 800b804:	f898 1000 	ldrb.w	r1, [r8]
 800b808:	482a      	ldr	r0, [pc, #168]	; (800b8b4 <_vfiprintf_r+0x220>)
 800b80a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b80e:	2206      	movs	r2, #6
 800b810:	f108 0701 	add.w	r7, r8, #1
 800b814:	f7f4 fcf4 	bl	8000200 <memchr>
 800b818:	2800      	cmp	r0, #0
 800b81a:	d037      	beq.n	800b88c <_vfiprintf_r+0x1f8>
 800b81c:	4b26      	ldr	r3, [pc, #152]	; (800b8b8 <_vfiprintf_r+0x224>)
 800b81e:	bb1b      	cbnz	r3, 800b868 <_vfiprintf_r+0x1d4>
 800b820:	9b03      	ldr	r3, [sp, #12]
 800b822:	3307      	adds	r3, #7
 800b824:	f023 0307 	bic.w	r3, r3, #7
 800b828:	3308      	adds	r3, #8
 800b82a:	9303      	str	r3, [sp, #12]
 800b82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b82e:	444b      	add	r3, r9
 800b830:	9309      	str	r3, [sp, #36]	; 0x24
 800b832:	e750      	b.n	800b6d6 <_vfiprintf_r+0x42>
 800b834:	fb05 3202 	mla	r2, r5, r2, r3
 800b838:	2001      	movs	r0, #1
 800b83a:	4688      	mov	r8, r1
 800b83c:	e78a      	b.n	800b754 <_vfiprintf_r+0xc0>
 800b83e:	2300      	movs	r3, #0
 800b840:	f108 0801 	add.w	r8, r8, #1
 800b844:	9305      	str	r3, [sp, #20]
 800b846:	4619      	mov	r1, r3
 800b848:	250a      	movs	r5, #10
 800b84a:	4640      	mov	r0, r8
 800b84c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b850:	3a30      	subs	r2, #48	; 0x30
 800b852:	2a09      	cmp	r2, #9
 800b854:	d903      	bls.n	800b85e <_vfiprintf_r+0x1ca>
 800b856:	2b00      	cmp	r3, #0
 800b858:	d0c3      	beq.n	800b7e2 <_vfiprintf_r+0x14e>
 800b85a:	9105      	str	r1, [sp, #20]
 800b85c:	e7c1      	b.n	800b7e2 <_vfiprintf_r+0x14e>
 800b85e:	fb05 2101 	mla	r1, r5, r1, r2
 800b862:	2301      	movs	r3, #1
 800b864:	4680      	mov	r8, r0
 800b866:	e7f0      	b.n	800b84a <_vfiprintf_r+0x1b6>
 800b868:	ab03      	add	r3, sp, #12
 800b86a:	9300      	str	r3, [sp, #0]
 800b86c:	4622      	mov	r2, r4
 800b86e:	4b13      	ldr	r3, [pc, #76]	; (800b8bc <_vfiprintf_r+0x228>)
 800b870:	a904      	add	r1, sp, #16
 800b872:	4630      	mov	r0, r6
 800b874:	f3af 8000 	nop.w
 800b878:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b87c:	4681      	mov	r9, r0
 800b87e:	d1d5      	bne.n	800b82c <_vfiprintf_r+0x198>
 800b880:	89a3      	ldrh	r3, [r4, #12]
 800b882:	065b      	lsls	r3, r3, #25
 800b884:	f53f af7e 	bmi.w	800b784 <_vfiprintf_r+0xf0>
 800b888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b88a:	e77d      	b.n	800b788 <_vfiprintf_r+0xf4>
 800b88c:	ab03      	add	r3, sp, #12
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	4622      	mov	r2, r4
 800b892:	4b0a      	ldr	r3, [pc, #40]	; (800b8bc <_vfiprintf_r+0x228>)
 800b894:	a904      	add	r1, sp, #16
 800b896:	4630      	mov	r0, r6
 800b898:	f000 f888 	bl	800b9ac <_printf_i>
 800b89c:	e7ec      	b.n	800b878 <_vfiprintf_r+0x1e4>
 800b89e:	bf00      	nop
 800b8a0:	0800d190 	.word	0x0800d190
 800b8a4:	0800d13c 	.word	0x0800d13c
 800b8a8:	0800d1b0 	.word	0x0800d1b0
 800b8ac:	0800d170 	.word	0x0800d170
 800b8b0:	0800d142 	.word	0x0800d142
 800b8b4:	0800d146 	.word	0x0800d146
 800b8b8:	00000000 	.word	0x00000000
 800b8bc:	0800b671 	.word	0x0800b671

0800b8c0 <_printf_common>:
 800b8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8c4:	4691      	mov	r9, r2
 800b8c6:	461f      	mov	r7, r3
 800b8c8:	688a      	ldr	r2, [r1, #8]
 800b8ca:	690b      	ldr	r3, [r1, #16]
 800b8cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	bfb8      	it	lt
 800b8d4:	4613      	movlt	r3, r2
 800b8d6:	f8c9 3000 	str.w	r3, [r9]
 800b8da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8de:	4606      	mov	r6, r0
 800b8e0:	460c      	mov	r4, r1
 800b8e2:	b112      	cbz	r2, 800b8ea <_printf_common+0x2a>
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	f8c9 3000 	str.w	r3, [r9]
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	0699      	lsls	r1, r3, #26
 800b8ee:	bf42      	ittt	mi
 800b8f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b8f4:	3302      	addmi	r3, #2
 800b8f6:	f8c9 3000 	strmi.w	r3, [r9]
 800b8fa:	6825      	ldr	r5, [r4, #0]
 800b8fc:	f015 0506 	ands.w	r5, r5, #6
 800b900:	d107      	bne.n	800b912 <_printf_common+0x52>
 800b902:	f104 0a19 	add.w	sl, r4, #25
 800b906:	68e3      	ldr	r3, [r4, #12]
 800b908:	f8d9 2000 	ldr.w	r2, [r9]
 800b90c:	1a9b      	subs	r3, r3, r2
 800b90e:	42ab      	cmp	r3, r5
 800b910:	dc28      	bgt.n	800b964 <_printf_common+0xa4>
 800b912:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b916:	6822      	ldr	r2, [r4, #0]
 800b918:	3300      	adds	r3, #0
 800b91a:	bf18      	it	ne
 800b91c:	2301      	movne	r3, #1
 800b91e:	0692      	lsls	r2, r2, #26
 800b920:	d42d      	bmi.n	800b97e <_printf_common+0xbe>
 800b922:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b926:	4639      	mov	r1, r7
 800b928:	4630      	mov	r0, r6
 800b92a:	47c0      	blx	r8
 800b92c:	3001      	adds	r0, #1
 800b92e:	d020      	beq.n	800b972 <_printf_common+0xb2>
 800b930:	6823      	ldr	r3, [r4, #0]
 800b932:	68e5      	ldr	r5, [r4, #12]
 800b934:	f8d9 2000 	ldr.w	r2, [r9]
 800b938:	f003 0306 	and.w	r3, r3, #6
 800b93c:	2b04      	cmp	r3, #4
 800b93e:	bf08      	it	eq
 800b940:	1aad      	subeq	r5, r5, r2
 800b942:	68a3      	ldr	r3, [r4, #8]
 800b944:	6922      	ldr	r2, [r4, #16]
 800b946:	bf0c      	ite	eq
 800b948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b94c:	2500      	movne	r5, #0
 800b94e:	4293      	cmp	r3, r2
 800b950:	bfc4      	itt	gt
 800b952:	1a9b      	subgt	r3, r3, r2
 800b954:	18ed      	addgt	r5, r5, r3
 800b956:	f04f 0900 	mov.w	r9, #0
 800b95a:	341a      	adds	r4, #26
 800b95c:	454d      	cmp	r5, r9
 800b95e:	d11a      	bne.n	800b996 <_printf_common+0xd6>
 800b960:	2000      	movs	r0, #0
 800b962:	e008      	b.n	800b976 <_printf_common+0xb6>
 800b964:	2301      	movs	r3, #1
 800b966:	4652      	mov	r2, sl
 800b968:	4639      	mov	r1, r7
 800b96a:	4630      	mov	r0, r6
 800b96c:	47c0      	blx	r8
 800b96e:	3001      	adds	r0, #1
 800b970:	d103      	bne.n	800b97a <_printf_common+0xba>
 800b972:	f04f 30ff 	mov.w	r0, #4294967295
 800b976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b97a:	3501      	adds	r5, #1
 800b97c:	e7c3      	b.n	800b906 <_printf_common+0x46>
 800b97e:	18e1      	adds	r1, r4, r3
 800b980:	1c5a      	adds	r2, r3, #1
 800b982:	2030      	movs	r0, #48	; 0x30
 800b984:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b988:	4422      	add	r2, r4
 800b98a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b98e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b992:	3302      	adds	r3, #2
 800b994:	e7c5      	b.n	800b922 <_printf_common+0x62>
 800b996:	2301      	movs	r3, #1
 800b998:	4622      	mov	r2, r4
 800b99a:	4639      	mov	r1, r7
 800b99c:	4630      	mov	r0, r6
 800b99e:	47c0      	blx	r8
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	d0e6      	beq.n	800b972 <_printf_common+0xb2>
 800b9a4:	f109 0901 	add.w	r9, r9, #1
 800b9a8:	e7d8      	b.n	800b95c <_printf_common+0x9c>
	...

0800b9ac <_printf_i>:
 800b9ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b9b4:	460c      	mov	r4, r1
 800b9b6:	7e09      	ldrb	r1, [r1, #24]
 800b9b8:	b085      	sub	sp, #20
 800b9ba:	296e      	cmp	r1, #110	; 0x6e
 800b9bc:	4617      	mov	r7, r2
 800b9be:	4606      	mov	r6, r0
 800b9c0:	4698      	mov	r8, r3
 800b9c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9c4:	f000 80b3 	beq.w	800bb2e <_printf_i+0x182>
 800b9c8:	d822      	bhi.n	800ba10 <_printf_i+0x64>
 800b9ca:	2963      	cmp	r1, #99	; 0x63
 800b9cc:	d036      	beq.n	800ba3c <_printf_i+0x90>
 800b9ce:	d80a      	bhi.n	800b9e6 <_printf_i+0x3a>
 800b9d0:	2900      	cmp	r1, #0
 800b9d2:	f000 80b9 	beq.w	800bb48 <_printf_i+0x19c>
 800b9d6:	2958      	cmp	r1, #88	; 0x58
 800b9d8:	f000 8083 	beq.w	800bae2 <_printf_i+0x136>
 800b9dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b9e4:	e032      	b.n	800ba4c <_printf_i+0xa0>
 800b9e6:	2964      	cmp	r1, #100	; 0x64
 800b9e8:	d001      	beq.n	800b9ee <_printf_i+0x42>
 800b9ea:	2969      	cmp	r1, #105	; 0x69
 800b9ec:	d1f6      	bne.n	800b9dc <_printf_i+0x30>
 800b9ee:	6820      	ldr	r0, [r4, #0]
 800b9f0:	6813      	ldr	r3, [r2, #0]
 800b9f2:	0605      	lsls	r5, r0, #24
 800b9f4:	f103 0104 	add.w	r1, r3, #4
 800b9f8:	d52a      	bpl.n	800ba50 <_printf_i+0xa4>
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	6011      	str	r1, [r2, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	da03      	bge.n	800ba0a <_printf_i+0x5e>
 800ba02:	222d      	movs	r2, #45	; 0x2d
 800ba04:	425b      	negs	r3, r3
 800ba06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ba0a:	486f      	ldr	r0, [pc, #444]	; (800bbc8 <_printf_i+0x21c>)
 800ba0c:	220a      	movs	r2, #10
 800ba0e:	e039      	b.n	800ba84 <_printf_i+0xd8>
 800ba10:	2973      	cmp	r1, #115	; 0x73
 800ba12:	f000 809d 	beq.w	800bb50 <_printf_i+0x1a4>
 800ba16:	d808      	bhi.n	800ba2a <_printf_i+0x7e>
 800ba18:	296f      	cmp	r1, #111	; 0x6f
 800ba1a:	d020      	beq.n	800ba5e <_printf_i+0xb2>
 800ba1c:	2970      	cmp	r1, #112	; 0x70
 800ba1e:	d1dd      	bne.n	800b9dc <_printf_i+0x30>
 800ba20:	6823      	ldr	r3, [r4, #0]
 800ba22:	f043 0320 	orr.w	r3, r3, #32
 800ba26:	6023      	str	r3, [r4, #0]
 800ba28:	e003      	b.n	800ba32 <_printf_i+0x86>
 800ba2a:	2975      	cmp	r1, #117	; 0x75
 800ba2c:	d017      	beq.n	800ba5e <_printf_i+0xb2>
 800ba2e:	2978      	cmp	r1, #120	; 0x78
 800ba30:	d1d4      	bne.n	800b9dc <_printf_i+0x30>
 800ba32:	2378      	movs	r3, #120	; 0x78
 800ba34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba38:	4864      	ldr	r0, [pc, #400]	; (800bbcc <_printf_i+0x220>)
 800ba3a:	e055      	b.n	800bae8 <_printf_i+0x13c>
 800ba3c:	6813      	ldr	r3, [r2, #0]
 800ba3e:	1d19      	adds	r1, r3, #4
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	6011      	str	r1, [r2, #0]
 800ba44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e08c      	b.n	800bb6a <_printf_i+0x1be>
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	6011      	str	r1, [r2, #0]
 800ba54:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ba58:	bf18      	it	ne
 800ba5a:	b21b      	sxthne	r3, r3
 800ba5c:	e7cf      	b.n	800b9fe <_printf_i+0x52>
 800ba5e:	6813      	ldr	r3, [r2, #0]
 800ba60:	6825      	ldr	r5, [r4, #0]
 800ba62:	1d18      	adds	r0, r3, #4
 800ba64:	6010      	str	r0, [r2, #0]
 800ba66:	0628      	lsls	r0, r5, #24
 800ba68:	d501      	bpl.n	800ba6e <_printf_i+0xc2>
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	e002      	b.n	800ba74 <_printf_i+0xc8>
 800ba6e:	0668      	lsls	r0, r5, #25
 800ba70:	d5fb      	bpl.n	800ba6a <_printf_i+0xbe>
 800ba72:	881b      	ldrh	r3, [r3, #0]
 800ba74:	4854      	ldr	r0, [pc, #336]	; (800bbc8 <_printf_i+0x21c>)
 800ba76:	296f      	cmp	r1, #111	; 0x6f
 800ba78:	bf14      	ite	ne
 800ba7a:	220a      	movne	r2, #10
 800ba7c:	2208      	moveq	r2, #8
 800ba7e:	2100      	movs	r1, #0
 800ba80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba84:	6865      	ldr	r5, [r4, #4]
 800ba86:	60a5      	str	r5, [r4, #8]
 800ba88:	2d00      	cmp	r5, #0
 800ba8a:	f2c0 8095 	blt.w	800bbb8 <_printf_i+0x20c>
 800ba8e:	6821      	ldr	r1, [r4, #0]
 800ba90:	f021 0104 	bic.w	r1, r1, #4
 800ba94:	6021      	str	r1, [r4, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d13d      	bne.n	800bb16 <_printf_i+0x16a>
 800ba9a:	2d00      	cmp	r5, #0
 800ba9c:	f040 808e 	bne.w	800bbbc <_printf_i+0x210>
 800baa0:	4665      	mov	r5, ip
 800baa2:	2a08      	cmp	r2, #8
 800baa4:	d10b      	bne.n	800babe <_printf_i+0x112>
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	07db      	lsls	r3, r3, #31
 800baaa:	d508      	bpl.n	800babe <_printf_i+0x112>
 800baac:	6923      	ldr	r3, [r4, #16]
 800baae:	6862      	ldr	r2, [r4, #4]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	bfde      	ittt	le
 800bab4:	2330      	movle	r3, #48	; 0x30
 800bab6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800baba:	f105 35ff 	addle.w	r5, r5, #4294967295
 800babe:	ebac 0305 	sub.w	r3, ip, r5
 800bac2:	6123      	str	r3, [r4, #16]
 800bac4:	f8cd 8000 	str.w	r8, [sp]
 800bac8:	463b      	mov	r3, r7
 800baca:	aa03      	add	r2, sp, #12
 800bacc:	4621      	mov	r1, r4
 800bace:	4630      	mov	r0, r6
 800bad0:	f7ff fef6 	bl	800b8c0 <_printf_common>
 800bad4:	3001      	adds	r0, #1
 800bad6:	d14d      	bne.n	800bb74 <_printf_i+0x1c8>
 800bad8:	f04f 30ff 	mov.w	r0, #4294967295
 800badc:	b005      	add	sp, #20
 800bade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bae2:	4839      	ldr	r0, [pc, #228]	; (800bbc8 <_printf_i+0x21c>)
 800bae4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bae8:	6813      	ldr	r3, [r2, #0]
 800baea:	6821      	ldr	r1, [r4, #0]
 800baec:	1d1d      	adds	r5, r3, #4
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	6015      	str	r5, [r2, #0]
 800baf2:	060a      	lsls	r2, r1, #24
 800baf4:	d50b      	bpl.n	800bb0e <_printf_i+0x162>
 800baf6:	07ca      	lsls	r2, r1, #31
 800baf8:	bf44      	itt	mi
 800bafa:	f041 0120 	orrmi.w	r1, r1, #32
 800bafe:	6021      	strmi	r1, [r4, #0]
 800bb00:	b91b      	cbnz	r3, 800bb0a <_printf_i+0x15e>
 800bb02:	6822      	ldr	r2, [r4, #0]
 800bb04:	f022 0220 	bic.w	r2, r2, #32
 800bb08:	6022      	str	r2, [r4, #0]
 800bb0a:	2210      	movs	r2, #16
 800bb0c:	e7b7      	b.n	800ba7e <_printf_i+0xd2>
 800bb0e:	064d      	lsls	r5, r1, #25
 800bb10:	bf48      	it	mi
 800bb12:	b29b      	uxthmi	r3, r3
 800bb14:	e7ef      	b.n	800baf6 <_printf_i+0x14a>
 800bb16:	4665      	mov	r5, ip
 800bb18:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb1c:	fb02 3311 	mls	r3, r2, r1, r3
 800bb20:	5cc3      	ldrb	r3, [r0, r3]
 800bb22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bb26:	460b      	mov	r3, r1
 800bb28:	2900      	cmp	r1, #0
 800bb2a:	d1f5      	bne.n	800bb18 <_printf_i+0x16c>
 800bb2c:	e7b9      	b.n	800baa2 <_printf_i+0xf6>
 800bb2e:	6813      	ldr	r3, [r2, #0]
 800bb30:	6825      	ldr	r5, [r4, #0]
 800bb32:	6961      	ldr	r1, [r4, #20]
 800bb34:	1d18      	adds	r0, r3, #4
 800bb36:	6010      	str	r0, [r2, #0]
 800bb38:	0628      	lsls	r0, r5, #24
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	d501      	bpl.n	800bb42 <_printf_i+0x196>
 800bb3e:	6019      	str	r1, [r3, #0]
 800bb40:	e002      	b.n	800bb48 <_printf_i+0x19c>
 800bb42:	066a      	lsls	r2, r5, #25
 800bb44:	d5fb      	bpl.n	800bb3e <_printf_i+0x192>
 800bb46:	8019      	strh	r1, [r3, #0]
 800bb48:	2300      	movs	r3, #0
 800bb4a:	6123      	str	r3, [r4, #16]
 800bb4c:	4665      	mov	r5, ip
 800bb4e:	e7b9      	b.n	800bac4 <_printf_i+0x118>
 800bb50:	6813      	ldr	r3, [r2, #0]
 800bb52:	1d19      	adds	r1, r3, #4
 800bb54:	6011      	str	r1, [r2, #0]
 800bb56:	681d      	ldr	r5, [r3, #0]
 800bb58:	6862      	ldr	r2, [r4, #4]
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	f7f4 fb4f 	bl	8000200 <memchr>
 800bb62:	b108      	cbz	r0, 800bb68 <_printf_i+0x1bc>
 800bb64:	1b40      	subs	r0, r0, r5
 800bb66:	6060      	str	r0, [r4, #4]
 800bb68:	6863      	ldr	r3, [r4, #4]
 800bb6a:	6123      	str	r3, [r4, #16]
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb72:	e7a7      	b.n	800bac4 <_printf_i+0x118>
 800bb74:	6923      	ldr	r3, [r4, #16]
 800bb76:	462a      	mov	r2, r5
 800bb78:	4639      	mov	r1, r7
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	47c0      	blx	r8
 800bb7e:	3001      	adds	r0, #1
 800bb80:	d0aa      	beq.n	800bad8 <_printf_i+0x12c>
 800bb82:	6823      	ldr	r3, [r4, #0]
 800bb84:	079b      	lsls	r3, r3, #30
 800bb86:	d413      	bmi.n	800bbb0 <_printf_i+0x204>
 800bb88:	68e0      	ldr	r0, [r4, #12]
 800bb8a:	9b03      	ldr	r3, [sp, #12]
 800bb8c:	4298      	cmp	r0, r3
 800bb8e:	bfb8      	it	lt
 800bb90:	4618      	movlt	r0, r3
 800bb92:	e7a3      	b.n	800badc <_printf_i+0x130>
 800bb94:	2301      	movs	r3, #1
 800bb96:	464a      	mov	r2, r9
 800bb98:	4639      	mov	r1, r7
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	47c0      	blx	r8
 800bb9e:	3001      	adds	r0, #1
 800bba0:	d09a      	beq.n	800bad8 <_printf_i+0x12c>
 800bba2:	3501      	adds	r5, #1
 800bba4:	68e3      	ldr	r3, [r4, #12]
 800bba6:	9a03      	ldr	r2, [sp, #12]
 800bba8:	1a9b      	subs	r3, r3, r2
 800bbaa:	42ab      	cmp	r3, r5
 800bbac:	dcf2      	bgt.n	800bb94 <_printf_i+0x1e8>
 800bbae:	e7eb      	b.n	800bb88 <_printf_i+0x1dc>
 800bbb0:	2500      	movs	r5, #0
 800bbb2:	f104 0919 	add.w	r9, r4, #25
 800bbb6:	e7f5      	b.n	800bba4 <_printf_i+0x1f8>
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1ac      	bne.n	800bb16 <_printf_i+0x16a>
 800bbbc:	7803      	ldrb	r3, [r0, #0]
 800bbbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbc6:	e76c      	b.n	800baa2 <_printf_i+0xf6>
 800bbc8:	0800d14d 	.word	0x0800d14d
 800bbcc:	0800d15e 	.word	0x0800d15e

0800bbd0 <iprintf>:
 800bbd0:	b40f      	push	{r0, r1, r2, r3}
 800bbd2:	4b0a      	ldr	r3, [pc, #40]	; (800bbfc <iprintf+0x2c>)
 800bbd4:	b513      	push	{r0, r1, r4, lr}
 800bbd6:	681c      	ldr	r4, [r3, #0]
 800bbd8:	b124      	cbz	r4, 800bbe4 <iprintf+0x14>
 800bbda:	69a3      	ldr	r3, [r4, #24]
 800bbdc:	b913      	cbnz	r3, 800bbe4 <iprintf+0x14>
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f000 fa2a 	bl	800c038 <__sinit>
 800bbe4:	ab05      	add	r3, sp, #20
 800bbe6:	9a04      	ldr	r2, [sp, #16]
 800bbe8:	68a1      	ldr	r1, [r4, #8]
 800bbea:	9301      	str	r3, [sp, #4]
 800bbec:	4620      	mov	r0, r4
 800bbee:	f7ff fd51 	bl	800b694 <_vfiprintf_r>
 800bbf2:	b002      	add	sp, #8
 800bbf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbf8:	b004      	add	sp, #16
 800bbfa:	4770      	bx	lr
 800bbfc:	20000070 	.word	0x20000070

0800bc00 <_puts_r>:
 800bc00:	b570      	push	{r4, r5, r6, lr}
 800bc02:	460e      	mov	r6, r1
 800bc04:	4605      	mov	r5, r0
 800bc06:	b118      	cbz	r0, 800bc10 <_puts_r+0x10>
 800bc08:	6983      	ldr	r3, [r0, #24]
 800bc0a:	b90b      	cbnz	r3, 800bc10 <_puts_r+0x10>
 800bc0c:	f000 fa14 	bl	800c038 <__sinit>
 800bc10:	69ab      	ldr	r3, [r5, #24]
 800bc12:	68ac      	ldr	r4, [r5, #8]
 800bc14:	b913      	cbnz	r3, 800bc1c <_puts_r+0x1c>
 800bc16:	4628      	mov	r0, r5
 800bc18:	f000 fa0e 	bl	800c038 <__sinit>
 800bc1c:	4b23      	ldr	r3, [pc, #140]	; (800bcac <_puts_r+0xac>)
 800bc1e:	429c      	cmp	r4, r3
 800bc20:	d117      	bne.n	800bc52 <_puts_r+0x52>
 800bc22:	686c      	ldr	r4, [r5, #4]
 800bc24:	89a3      	ldrh	r3, [r4, #12]
 800bc26:	071b      	lsls	r3, r3, #28
 800bc28:	d51d      	bpl.n	800bc66 <_puts_r+0x66>
 800bc2a:	6923      	ldr	r3, [r4, #16]
 800bc2c:	b1db      	cbz	r3, 800bc66 <_puts_r+0x66>
 800bc2e:	3e01      	subs	r6, #1
 800bc30:	68a3      	ldr	r3, [r4, #8]
 800bc32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc36:	3b01      	subs	r3, #1
 800bc38:	60a3      	str	r3, [r4, #8]
 800bc3a:	b9e9      	cbnz	r1, 800bc78 <_puts_r+0x78>
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	da2e      	bge.n	800bc9e <_puts_r+0x9e>
 800bc40:	4622      	mov	r2, r4
 800bc42:	210a      	movs	r1, #10
 800bc44:	4628      	mov	r0, r5
 800bc46:	f000 f83f 	bl	800bcc8 <__swbuf_r>
 800bc4a:	3001      	adds	r0, #1
 800bc4c:	d011      	beq.n	800bc72 <_puts_r+0x72>
 800bc4e:	200a      	movs	r0, #10
 800bc50:	e011      	b.n	800bc76 <_puts_r+0x76>
 800bc52:	4b17      	ldr	r3, [pc, #92]	; (800bcb0 <_puts_r+0xb0>)
 800bc54:	429c      	cmp	r4, r3
 800bc56:	d101      	bne.n	800bc5c <_puts_r+0x5c>
 800bc58:	68ac      	ldr	r4, [r5, #8]
 800bc5a:	e7e3      	b.n	800bc24 <_puts_r+0x24>
 800bc5c:	4b15      	ldr	r3, [pc, #84]	; (800bcb4 <_puts_r+0xb4>)
 800bc5e:	429c      	cmp	r4, r3
 800bc60:	bf08      	it	eq
 800bc62:	68ec      	ldreq	r4, [r5, #12]
 800bc64:	e7de      	b.n	800bc24 <_puts_r+0x24>
 800bc66:	4621      	mov	r1, r4
 800bc68:	4628      	mov	r0, r5
 800bc6a:	f000 f87f 	bl	800bd6c <__swsetup_r>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d0dd      	beq.n	800bc2e <_puts_r+0x2e>
 800bc72:	f04f 30ff 	mov.w	r0, #4294967295
 800bc76:	bd70      	pop	{r4, r5, r6, pc}
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	da04      	bge.n	800bc86 <_puts_r+0x86>
 800bc7c:	69a2      	ldr	r2, [r4, #24]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	dc06      	bgt.n	800bc90 <_puts_r+0x90>
 800bc82:	290a      	cmp	r1, #10
 800bc84:	d004      	beq.n	800bc90 <_puts_r+0x90>
 800bc86:	6823      	ldr	r3, [r4, #0]
 800bc88:	1c5a      	adds	r2, r3, #1
 800bc8a:	6022      	str	r2, [r4, #0]
 800bc8c:	7019      	strb	r1, [r3, #0]
 800bc8e:	e7cf      	b.n	800bc30 <_puts_r+0x30>
 800bc90:	4622      	mov	r2, r4
 800bc92:	4628      	mov	r0, r5
 800bc94:	f000 f818 	bl	800bcc8 <__swbuf_r>
 800bc98:	3001      	adds	r0, #1
 800bc9a:	d1c9      	bne.n	800bc30 <_puts_r+0x30>
 800bc9c:	e7e9      	b.n	800bc72 <_puts_r+0x72>
 800bc9e:	6823      	ldr	r3, [r4, #0]
 800bca0:	200a      	movs	r0, #10
 800bca2:	1c5a      	adds	r2, r3, #1
 800bca4:	6022      	str	r2, [r4, #0]
 800bca6:	7018      	strb	r0, [r3, #0]
 800bca8:	e7e5      	b.n	800bc76 <_puts_r+0x76>
 800bcaa:	bf00      	nop
 800bcac:	0800d190 	.word	0x0800d190
 800bcb0:	0800d1b0 	.word	0x0800d1b0
 800bcb4:	0800d170 	.word	0x0800d170

0800bcb8 <puts>:
 800bcb8:	4b02      	ldr	r3, [pc, #8]	; (800bcc4 <puts+0xc>)
 800bcba:	4601      	mov	r1, r0
 800bcbc:	6818      	ldr	r0, [r3, #0]
 800bcbe:	f7ff bf9f 	b.w	800bc00 <_puts_r>
 800bcc2:	bf00      	nop
 800bcc4:	20000070 	.word	0x20000070

0800bcc8 <__swbuf_r>:
 800bcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcca:	460e      	mov	r6, r1
 800bccc:	4614      	mov	r4, r2
 800bcce:	4605      	mov	r5, r0
 800bcd0:	b118      	cbz	r0, 800bcda <__swbuf_r+0x12>
 800bcd2:	6983      	ldr	r3, [r0, #24]
 800bcd4:	b90b      	cbnz	r3, 800bcda <__swbuf_r+0x12>
 800bcd6:	f000 f9af 	bl	800c038 <__sinit>
 800bcda:	4b21      	ldr	r3, [pc, #132]	; (800bd60 <__swbuf_r+0x98>)
 800bcdc:	429c      	cmp	r4, r3
 800bcde:	d12a      	bne.n	800bd36 <__swbuf_r+0x6e>
 800bce0:	686c      	ldr	r4, [r5, #4]
 800bce2:	69a3      	ldr	r3, [r4, #24]
 800bce4:	60a3      	str	r3, [r4, #8]
 800bce6:	89a3      	ldrh	r3, [r4, #12]
 800bce8:	071a      	lsls	r2, r3, #28
 800bcea:	d52e      	bpl.n	800bd4a <__swbuf_r+0x82>
 800bcec:	6923      	ldr	r3, [r4, #16]
 800bcee:	b363      	cbz	r3, 800bd4a <__swbuf_r+0x82>
 800bcf0:	6923      	ldr	r3, [r4, #16]
 800bcf2:	6820      	ldr	r0, [r4, #0]
 800bcf4:	1ac0      	subs	r0, r0, r3
 800bcf6:	6963      	ldr	r3, [r4, #20]
 800bcf8:	b2f6      	uxtb	r6, r6
 800bcfa:	4283      	cmp	r3, r0
 800bcfc:	4637      	mov	r7, r6
 800bcfe:	dc04      	bgt.n	800bd0a <__swbuf_r+0x42>
 800bd00:	4621      	mov	r1, r4
 800bd02:	4628      	mov	r0, r5
 800bd04:	f000 f92e 	bl	800bf64 <_fflush_r>
 800bd08:	bb28      	cbnz	r0, 800bd56 <__swbuf_r+0x8e>
 800bd0a:	68a3      	ldr	r3, [r4, #8]
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	60a3      	str	r3, [r4, #8]
 800bd10:	6823      	ldr	r3, [r4, #0]
 800bd12:	1c5a      	adds	r2, r3, #1
 800bd14:	6022      	str	r2, [r4, #0]
 800bd16:	701e      	strb	r6, [r3, #0]
 800bd18:	6963      	ldr	r3, [r4, #20]
 800bd1a:	3001      	adds	r0, #1
 800bd1c:	4283      	cmp	r3, r0
 800bd1e:	d004      	beq.n	800bd2a <__swbuf_r+0x62>
 800bd20:	89a3      	ldrh	r3, [r4, #12]
 800bd22:	07db      	lsls	r3, r3, #31
 800bd24:	d519      	bpl.n	800bd5a <__swbuf_r+0x92>
 800bd26:	2e0a      	cmp	r6, #10
 800bd28:	d117      	bne.n	800bd5a <__swbuf_r+0x92>
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	f000 f919 	bl	800bf64 <_fflush_r>
 800bd32:	b190      	cbz	r0, 800bd5a <__swbuf_r+0x92>
 800bd34:	e00f      	b.n	800bd56 <__swbuf_r+0x8e>
 800bd36:	4b0b      	ldr	r3, [pc, #44]	; (800bd64 <__swbuf_r+0x9c>)
 800bd38:	429c      	cmp	r4, r3
 800bd3a:	d101      	bne.n	800bd40 <__swbuf_r+0x78>
 800bd3c:	68ac      	ldr	r4, [r5, #8]
 800bd3e:	e7d0      	b.n	800bce2 <__swbuf_r+0x1a>
 800bd40:	4b09      	ldr	r3, [pc, #36]	; (800bd68 <__swbuf_r+0xa0>)
 800bd42:	429c      	cmp	r4, r3
 800bd44:	bf08      	it	eq
 800bd46:	68ec      	ldreq	r4, [r5, #12]
 800bd48:	e7cb      	b.n	800bce2 <__swbuf_r+0x1a>
 800bd4a:	4621      	mov	r1, r4
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	f000 f80d 	bl	800bd6c <__swsetup_r>
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d0cc      	beq.n	800bcf0 <__swbuf_r+0x28>
 800bd56:	f04f 37ff 	mov.w	r7, #4294967295
 800bd5a:	4638      	mov	r0, r7
 800bd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	0800d190 	.word	0x0800d190
 800bd64:	0800d1b0 	.word	0x0800d1b0
 800bd68:	0800d170 	.word	0x0800d170

0800bd6c <__swsetup_r>:
 800bd6c:	4b32      	ldr	r3, [pc, #200]	; (800be38 <__swsetup_r+0xcc>)
 800bd6e:	b570      	push	{r4, r5, r6, lr}
 800bd70:	681d      	ldr	r5, [r3, #0]
 800bd72:	4606      	mov	r6, r0
 800bd74:	460c      	mov	r4, r1
 800bd76:	b125      	cbz	r5, 800bd82 <__swsetup_r+0x16>
 800bd78:	69ab      	ldr	r3, [r5, #24]
 800bd7a:	b913      	cbnz	r3, 800bd82 <__swsetup_r+0x16>
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	f000 f95b 	bl	800c038 <__sinit>
 800bd82:	4b2e      	ldr	r3, [pc, #184]	; (800be3c <__swsetup_r+0xd0>)
 800bd84:	429c      	cmp	r4, r3
 800bd86:	d10f      	bne.n	800bda8 <__swsetup_r+0x3c>
 800bd88:	686c      	ldr	r4, [r5, #4]
 800bd8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	0715      	lsls	r5, r2, #28
 800bd92:	d42c      	bmi.n	800bdee <__swsetup_r+0x82>
 800bd94:	06d0      	lsls	r0, r2, #27
 800bd96:	d411      	bmi.n	800bdbc <__swsetup_r+0x50>
 800bd98:	2209      	movs	r2, #9
 800bd9a:	6032      	str	r2, [r6, #0]
 800bd9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bda0:	81a3      	strh	r3, [r4, #12]
 800bda2:	f04f 30ff 	mov.w	r0, #4294967295
 800bda6:	e03e      	b.n	800be26 <__swsetup_r+0xba>
 800bda8:	4b25      	ldr	r3, [pc, #148]	; (800be40 <__swsetup_r+0xd4>)
 800bdaa:	429c      	cmp	r4, r3
 800bdac:	d101      	bne.n	800bdb2 <__swsetup_r+0x46>
 800bdae:	68ac      	ldr	r4, [r5, #8]
 800bdb0:	e7eb      	b.n	800bd8a <__swsetup_r+0x1e>
 800bdb2:	4b24      	ldr	r3, [pc, #144]	; (800be44 <__swsetup_r+0xd8>)
 800bdb4:	429c      	cmp	r4, r3
 800bdb6:	bf08      	it	eq
 800bdb8:	68ec      	ldreq	r4, [r5, #12]
 800bdba:	e7e6      	b.n	800bd8a <__swsetup_r+0x1e>
 800bdbc:	0751      	lsls	r1, r2, #29
 800bdbe:	d512      	bpl.n	800bde6 <__swsetup_r+0x7a>
 800bdc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdc2:	b141      	cbz	r1, 800bdd6 <__swsetup_r+0x6a>
 800bdc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdc8:	4299      	cmp	r1, r3
 800bdca:	d002      	beq.n	800bdd2 <__swsetup_r+0x66>
 800bdcc:	4630      	mov	r0, r6
 800bdce:	f000 fa21 	bl	800c214 <_free_r>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	6363      	str	r3, [r4, #52]	; 0x34
 800bdd6:	89a3      	ldrh	r3, [r4, #12]
 800bdd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bddc:	81a3      	strh	r3, [r4, #12]
 800bdde:	2300      	movs	r3, #0
 800bde0:	6063      	str	r3, [r4, #4]
 800bde2:	6923      	ldr	r3, [r4, #16]
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	89a3      	ldrh	r3, [r4, #12]
 800bde8:	f043 0308 	orr.w	r3, r3, #8
 800bdec:	81a3      	strh	r3, [r4, #12]
 800bdee:	6923      	ldr	r3, [r4, #16]
 800bdf0:	b94b      	cbnz	r3, 800be06 <__swsetup_r+0x9a>
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bdf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdfc:	d003      	beq.n	800be06 <__swsetup_r+0x9a>
 800bdfe:	4621      	mov	r1, r4
 800be00:	4630      	mov	r0, r6
 800be02:	f000 f9c7 	bl	800c194 <__smakebuf_r>
 800be06:	89a2      	ldrh	r2, [r4, #12]
 800be08:	f012 0301 	ands.w	r3, r2, #1
 800be0c:	d00c      	beq.n	800be28 <__swsetup_r+0xbc>
 800be0e:	2300      	movs	r3, #0
 800be10:	60a3      	str	r3, [r4, #8]
 800be12:	6963      	ldr	r3, [r4, #20]
 800be14:	425b      	negs	r3, r3
 800be16:	61a3      	str	r3, [r4, #24]
 800be18:	6923      	ldr	r3, [r4, #16]
 800be1a:	b953      	cbnz	r3, 800be32 <__swsetup_r+0xc6>
 800be1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be20:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800be24:	d1ba      	bne.n	800bd9c <__swsetup_r+0x30>
 800be26:	bd70      	pop	{r4, r5, r6, pc}
 800be28:	0792      	lsls	r2, r2, #30
 800be2a:	bf58      	it	pl
 800be2c:	6963      	ldrpl	r3, [r4, #20]
 800be2e:	60a3      	str	r3, [r4, #8]
 800be30:	e7f2      	b.n	800be18 <__swsetup_r+0xac>
 800be32:	2000      	movs	r0, #0
 800be34:	e7f7      	b.n	800be26 <__swsetup_r+0xba>
 800be36:	bf00      	nop
 800be38:	20000070 	.word	0x20000070
 800be3c:	0800d190 	.word	0x0800d190
 800be40:	0800d1b0 	.word	0x0800d1b0
 800be44:	0800d170 	.word	0x0800d170

0800be48 <abort>:
 800be48:	b508      	push	{r3, lr}
 800be4a:	2006      	movs	r0, #6
 800be4c:	f000 fac2 	bl	800c3d4 <raise>
 800be50:	2001      	movs	r0, #1
 800be52:	f7f9 fc23 	bl	800569c <_exit>
	...

0800be58 <__sflush_r>:
 800be58:	898a      	ldrh	r2, [r1, #12]
 800be5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be5e:	4605      	mov	r5, r0
 800be60:	0710      	lsls	r0, r2, #28
 800be62:	460c      	mov	r4, r1
 800be64:	d458      	bmi.n	800bf18 <__sflush_r+0xc0>
 800be66:	684b      	ldr	r3, [r1, #4]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	dc05      	bgt.n	800be78 <__sflush_r+0x20>
 800be6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be6e:	2b00      	cmp	r3, #0
 800be70:	dc02      	bgt.n	800be78 <__sflush_r+0x20>
 800be72:	2000      	movs	r0, #0
 800be74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be7a:	2e00      	cmp	r6, #0
 800be7c:	d0f9      	beq.n	800be72 <__sflush_r+0x1a>
 800be7e:	2300      	movs	r3, #0
 800be80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be84:	682f      	ldr	r7, [r5, #0]
 800be86:	6a21      	ldr	r1, [r4, #32]
 800be88:	602b      	str	r3, [r5, #0]
 800be8a:	d032      	beq.n	800bef2 <__sflush_r+0x9a>
 800be8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be8e:	89a3      	ldrh	r3, [r4, #12]
 800be90:	075a      	lsls	r2, r3, #29
 800be92:	d505      	bpl.n	800bea0 <__sflush_r+0x48>
 800be94:	6863      	ldr	r3, [r4, #4]
 800be96:	1ac0      	subs	r0, r0, r3
 800be98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be9a:	b10b      	cbz	r3, 800bea0 <__sflush_r+0x48>
 800be9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be9e:	1ac0      	subs	r0, r0, r3
 800bea0:	2300      	movs	r3, #0
 800bea2:	4602      	mov	r2, r0
 800bea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bea6:	6a21      	ldr	r1, [r4, #32]
 800bea8:	4628      	mov	r0, r5
 800beaa:	47b0      	blx	r6
 800beac:	1c43      	adds	r3, r0, #1
 800beae:	89a3      	ldrh	r3, [r4, #12]
 800beb0:	d106      	bne.n	800bec0 <__sflush_r+0x68>
 800beb2:	6829      	ldr	r1, [r5, #0]
 800beb4:	291d      	cmp	r1, #29
 800beb6:	d848      	bhi.n	800bf4a <__sflush_r+0xf2>
 800beb8:	4a29      	ldr	r2, [pc, #164]	; (800bf60 <__sflush_r+0x108>)
 800beba:	40ca      	lsrs	r2, r1
 800bebc:	07d6      	lsls	r6, r2, #31
 800bebe:	d544      	bpl.n	800bf4a <__sflush_r+0xf2>
 800bec0:	2200      	movs	r2, #0
 800bec2:	6062      	str	r2, [r4, #4]
 800bec4:	04d9      	lsls	r1, r3, #19
 800bec6:	6922      	ldr	r2, [r4, #16]
 800bec8:	6022      	str	r2, [r4, #0]
 800beca:	d504      	bpl.n	800bed6 <__sflush_r+0x7e>
 800becc:	1c42      	adds	r2, r0, #1
 800bece:	d101      	bne.n	800bed4 <__sflush_r+0x7c>
 800bed0:	682b      	ldr	r3, [r5, #0]
 800bed2:	b903      	cbnz	r3, 800bed6 <__sflush_r+0x7e>
 800bed4:	6560      	str	r0, [r4, #84]	; 0x54
 800bed6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bed8:	602f      	str	r7, [r5, #0]
 800beda:	2900      	cmp	r1, #0
 800bedc:	d0c9      	beq.n	800be72 <__sflush_r+0x1a>
 800bede:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bee2:	4299      	cmp	r1, r3
 800bee4:	d002      	beq.n	800beec <__sflush_r+0x94>
 800bee6:	4628      	mov	r0, r5
 800bee8:	f000 f994 	bl	800c214 <_free_r>
 800beec:	2000      	movs	r0, #0
 800beee:	6360      	str	r0, [r4, #52]	; 0x34
 800bef0:	e7c0      	b.n	800be74 <__sflush_r+0x1c>
 800bef2:	2301      	movs	r3, #1
 800bef4:	4628      	mov	r0, r5
 800bef6:	47b0      	blx	r6
 800bef8:	1c41      	adds	r1, r0, #1
 800befa:	d1c8      	bne.n	800be8e <__sflush_r+0x36>
 800befc:	682b      	ldr	r3, [r5, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d0c5      	beq.n	800be8e <__sflush_r+0x36>
 800bf02:	2b1d      	cmp	r3, #29
 800bf04:	d001      	beq.n	800bf0a <__sflush_r+0xb2>
 800bf06:	2b16      	cmp	r3, #22
 800bf08:	d101      	bne.n	800bf0e <__sflush_r+0xb6>
 800bf0a:	602f      	str	r7, [r5, #0]
 800bf0c:	e7b1      	b.n	800be72 <__sflush_r+0x1a>
 800bf0e:	89a3      	ldrh	r3, [r4, #12]
 800bf10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf14:	81a3      	strh	r3, [r4, #12]
 800bf16:	e7ad      	b.n	800be74 <__sflush_r+0x1c>
 800bf18:	690f      	ldr	r7, [r1, #16]
 800bf1a:	2f00      	cmp	r7, #0
 800bf1c:	d0a9      	beq.n	800be72 <__sflush_r+0x1a>
 800bf1e:	0793      	lsls	r3, r2, #30
 800bf20:	680e      	ldr	r6, [r1, #0]
 800bf22:	bf08      	it	eq
 800bf24:	694b      	ldreq	r3, [r1, #20]
 800bf26:	600f      	str	r7, [r1, #0]
 800bf28:	bf18      	it	ne
 800bf2a:	2300      	movne	r3, #0
 800bf2c:	eba6 0807 	sub.w	r8, r6, r7
 800bf30:	608b      	str	r3, [r1, #8]
 800bf32:	f1b8 0f00 	cmp.w	r8, #0
 800bf36:	dd9c      	ble.n	800be72 <__sflush_r+0x1a>
 800bf38:	4643      	mov	r3, r8
 800bf3a:	463a      	mov	r2, r7
 800bf3c:	6a21      	ldr	r1, [r4, #32]
 800bf3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf40:	4628      	mov	r0, r5
 800bf42:	47b0      	blx	r6
 800bf44:	2800      	cmp	r0, #0
 800bf46:	dc06      	bgt.n	800bf56 <__sflush_r+0xfe>
 800bf48:	89a3      	ldrh	r3, [r4, #12]
 800bf4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf4e:	81a3      	strh	r3, [r4, #12]
 800bf50:	f04f 30ff 	mov.w	r0, #4294967295
 800bf54:	e78e      	b.n	800be74 <__sflush_r+0x1c>
 800bf56:	4407      	add	r7, r0
 800bf58:	eba8 0800 	sub.w	r8, r8, r0
 800bf5c:	e7e9      	b.n	800bf32 <__sflush_r+0xda>
 800bf5e:	bf00      	nop
 800bf60:	20400001 	.word	0x20400001

0800bf64 <_fflush_r>:
 800bf64:	b538      	push	{r3, r4, r5, lr}
 800bf66:	690b      	ldr	r3, [r1, #16]
 800bf68:	4605      	mov	r5, r0
 800bf6a:	460c      	mov	r4, r1
 800bf6c:	b1db      	cbz	r3, 800bfa6 <_fflush_r+0x42>
 800bf6e:	b118      	cbz	r0, 800bf78 <_fflush_r+0x14>
 800bf70:	6983      	ldr	r3, [r0, #24]
 800bf72:	b90b      	cbnz	r3, 800bf78 <_fflush_r+0x14>
 800bf74:	f000 f860 	bl	800c038 <__sinit>
 800bf78:	4b0c      	ldr	r3, [pc, #48]	; (800bfac <_fflush_r+0x48>)
 800bf7a:	429c      	cmp	r4, r3
 800bf7c:	d109      	bne.n	800bf92 <_fflush_r+0x2e>
 800bf7e:	686c      	ldr	r4, [r5, #4]
 800bf80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf84:	b17b      	cbz	r3, 800bfa6 <_fflush_r+0x42>
 800bf86:	4621      	mov	r1, r4
 800bf88:	4628      	mov	r0, r5
 800bf8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf8e:	f7ff bf63 	b.w	800be58 <__sflush_r>
 800bf92:	4b07      	ldr	r3, [pc, #28]	; (800bfb0 <_fflush_r+0x4c>)
 800bf94:	429c      	cmp	r4, r3
 800bf96:	d101      	bne.n	800bf9c <_fflush_r+0x38>
 800bf98:	68ac      	ldr	r4, [r5, #8]
 800bf9a:	e7f1      	b.n	800bf80 <_fflush_r+0x1c>
 800bf9c:	4b05      	ldr	r3, [pc, #20]	; (800bfb4 <_fflush_r+0x50>)
 800bf9e:	429c      	cmp	r4, r3
 800bfa0:	bf08      	it	eq
 800bfa2:	68ec      	ldreq	r4, [r5, #12]
 800bfa4:	e7ec      	b.n	800bf80 <_fflush_r+0x1c>
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	bd38      	pop	{r3, r4, r5, pc}
 800bfaa:	bf00      	nop
 800bfac:	0800d190 	.word	0x0800d190
 800bfb0:	0800d1b0 	.word	0x0800d1b0
 800bfb4:	0800d170 	.word	0x0800d170

0800bfb8 <std>:
 800bfb8:	2300      	movs	r3, #0
 800bfba:	b510      	push	{r4, lr}
 800bfbc:	4604      	mov	r4, r0
 800bfbe:	e9c0 3300 	strd	r3, r3, [r0]
 800bfc2:	6083      	str	r3, [r0, #8]
 800bfc4:	8181      	strh	r1, [r0, #12]
 800bfc6:	6643      	str	r3, [r0, #100]	; 0x64
 800bfc8:	81c2      	strh	r2, [r0, #14]
 800bfca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfce:	6183      	str	r3, [r0, #24]
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	2208      	movs	r2, #8
 800bfd4:	305c      	adds	r0, #92	; 0x5c
 800bfd6:	f7ff fb2c 	bl	800b632 <memset>
 800bfda:	4b05      	ldr	r3, [pc, #20]	; (800bff0 <std+0x38>)
 800bfdc:	6263      	str	r3, [r4, #36]	; 0x24
 800bfde:	4b05      	ldr	r3, [pc, #20]	; (800bff4 <std+0x3c>)
 800bfe0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bfe2:	4b05      	ldr	r3, [pc, #20]	; (800bff8 <std+0x40>)
 800bfe4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bfe6:	4b05      	ldr	r3, [pc, #20]	; (800bffc <std+0x44>)
 800bfe8:	6224      	str	r4, [r4, #32]
 800bfea:	6323      	str	r3, [r4, #48]	; 0x30
 800bfec:	bd10      	pop	{r4, pc}
 800bfee:	bf00      	nop
 800bff0:	0800c40d 	.word	0x0800c40d
 800bff4:	0800c42f 	.word	0x0800c42f
 800bff8:	0800c467 	.word	0x0800c467
 800bffc:	0800c48b 	.word	0x0800c48b

0800c000 <_cleanup_r>:
 800c000:	4901      	ldr	r1, [pc, #4]	; (800c008 <_cleanup_r+0x8>)
 800c002:	f000 b885 	b.w	800c110 <_fwalk_reent>
 800c006:	bf00      	nop
 800c008:	0800bf65 	.word	0x0800bf65

0800c00c <__sfmoreglue>:
 800c00c:	b570      	push	{r4, r5, r6, lr}
 800c00e:	1e4a      	subs	r2, r1, #1
 800c010:	2568      	movs	r5, #104	; 0x68
 800c012:	4355      	muls	r5, r2
 800c014:	460e      	mov	r6, r1
 800c016:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c01a:	f000 f949 	bl	800c2b0 <_malloc_r>
 800c01e:	4604      	mov	r4, r0
 800c020:	b140      	cbz	r0, 800c034 <__sfmoreglue+0x28>
 800c022:	2100      	movs	r1, #0
 800c024:	e9c0 1600 	strd	r1, r6, [r0]
 800c028:	300c      	adds	r0, #12
 800c02a:	60a0      	str	r0, [r4, #8]
 800c02c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c030:	f7ff faff 	bl	800b632 <memset>
 800c034:	4620      	mov	r0, r4
 800c036:	bd70      	pop	{r4, r5, r6, pc}

0800c038 <__sinit>:
 800c038:	6983      	ldr	r3, [r0, #24]
 800c03a:	b510      	push	{r4, lr}
 800c03c:	4604      	mov	r4, r0
 800c03e:	bb33      	cbnz	r3, 800c08e <__sinit+0x56>
 800c040:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c044:	6503      	str	r3, [r0, #80]	; 0x50
 800c046:	4b12      	ldr	r3, [pc, #72]	; (800c090 <__sinit+0x58>)
 800c048:	4a12      	ldr	r2, [pc, #72]	; (800c094 <__sinit+0x5c>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6282      	str	r2, [r0, #40]	; 0x28
 800c04e:	4298      	cmp	r0, r3
 800c050:	bf04      	itt	eq
 800c052:	2301      	moveq	r3, #1
 800c054:	6183      	streq	r3, [r0, #24]
 800c056:	f000 f81f 	bl	800c098 <__sfp>
 800c05a:	6060      	str	r0, [r4, #4]
 800c05c:	4620      	mov	r0, r4
 800c05e:	f000 f81b 	bl	800c098 <__sfp>
 800c062:	60a0      	str	r0, [r4, #8]
 800c064:	4620      	mov	r0, r4
 800c066:	f000 f817 	bl	800c098 <__sfp>
 800c06a:	2200      	movs	r2, #0
 800c06c:	60e0      	str	r0, [r4, #12]
 800c06e:	2104      	movs	r1, #4
 800c070:	6860      	ldr	r0, [r4, #4]
 800c072:	f7ff ffa1 	bl	800bfb8 <std>
 800c076:	2201      	movs	r2, #1
 800c078:	2109      	movs	r1, #9
 800c07a:	68a0      	ldr	r0, [r4, #8]
 800c07c:	f7ff ff9c 	bl	800bfb8 <std>
 800c080:	2202      	movs	r2, #2
 800c082:	2112      	movs	r1, #18
 800c084:	68e0      	ldr	r0, [r4, #12]
 800c086:	f7ff ff97 	bl	800bfb8 <std>
 800c08a:	2301      	movs	r3, #1
 800c08c:	61a3      	str	r3, [r4, #24]
 800c08e:	bd10      	pop	{r4, pc}
 800c090:	0800d138 	.word	0x0800d138
 800c094:	0800c001 	.word	0x0800c001

0800c098 <__sfp>:
 800c098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c09a:	4b1b      	ldr	r3, [pc, #108]	; (800c108 <__sfp+0x70>)
 800c09c:	681e      	ldr	r6, [r3, #0]
 800c09e:	69b3      	ldr	r3, [r6, #24]
 800c0a0:	4607      	mov	r7, r0
 800c0a2:	b913      	cbnz	r3, 800c0aa <__sfp+0x12>
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	f7ff ffc7 	bl	800c038 <__sinit>
 800c0aa:	3648      	adds	r6, #72	; 0x48
 800c0ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	d503      	bpl.n	800c0bc <__sfp+0x24>
 800c0b4:	6833      	ldr	r3, [r6, #0]
 800c0b6:	b133      	cbz	r3, 800c0c6 <__sfp+0x2e>
 800c0b8:	6836      	ldr	r6, [r6, #0]
 800c0ba:	e7f7      	b.n	800c0ac <__sfp+0x14>
 800c0bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c0c0:	b16d      	cbz	r5, 800c0de <__sfp+0x46>
 800c0c2:	3468      	adds	r4, #104	; 0x68
 800c0c4:	e7f4      	b.n	800c0b0 <__sfp+0x18>
 800c0c6:	2104      	movs	r1, #4
 800c0c8:	4638      	mov	r0, r7
 800c0ca:	f7ff ff9f 	bl	800c00c <__sfmoreglue>
 800c0ce:	6030      	str	r0, [r6, #0]
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d1f1      	bne.n	800c0b8 <__sfp+0x20>
 800c0d4:	230c      	movs	r3, #12
 800c0d6:	603b      	str	r3, [r7, #0]
 800c0d8:	4604      	mov	r4, r0
 800c0da:	4620      	mov	r0, r4
 800c0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0de:	4b0b      	ldr	r3, [pc, #44]	; (800c10c <__sfp+0x74>)
 800c0e0:	6665      	str	r5, [r4, #100]	; 0x64
 800c0e2:	e9c4 5500 	strd	r5, r5, [r4]
 800c0e6:	60a5      	str	r5, [r4, #8]
 800c0e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c0ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c0f0:	2208      	movs	r2, #8
 800c0f2:	4629      	mov	r1, r5
 800c0f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c0f8:	f7ff fa9b 	bl	800b632 <memset>
 800c0fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c100:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c104:	e7e9      	b.n	800c0da <__sfp+0x42>
 800c106:	bf00      	nop
 800c108:	0800d138 	.word	0x0800d138
 800c10c:	ffff0001 	.word	0xffff0001

0800c110 <_fwalk_reent>:
 800c110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c114:	4680      	mov	r8, r0
 800c116:	4689      	mov	r9, r1
 800c118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c11c:	2600      	movs	r6, #0
 800c11e:	b914      	cbnz	r4, 800c126 <_fwalk_reent+0x16>
 800c120:	4630      	mov	r0, r6
 800c122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c126:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c12a:	3f01      	subs	r7, #1
 800c12c:	d501      	bpl.n	800c132 <_fwalk_reent+0x22>
 800c12e:	6824      	ldr	r4, [r4, #0]
 800c130:	e7f5      	b.n	800c11e <_fwalk_reent+0xe>
 800c132:	89ab      	ldrh	r3, [r5, #12]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d907      	bls.n	800c148 <_fwalk_reent+0x38>
 800c138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c13c:	3301      	adds	r3, #1
 800c13e:	d003      	beq.n	800c148 <_fwalk_reent+0x38>
 800c140:	4629      	mov	r1, r5
 800c142:	4640      	mov	r0, r8
 800c144:	47c8      	blx	r9
 800c146:	4306      	orrs	r6, r0
 800c148:	3568      	adds	r5, #104	; 0x68
 800c14a:	e7ee      	b.n	800c12a <_fwalk_reent+0x1a>

0800c14c <__swhatbuf_r>:
 800c14c:	b570      	push	{r4, r5, r6, lr}
 800c14e:	460e      	mov	r6, r1
 800c150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c154:	2900      	cmp	r1, #0
 800c156:	b096      	sub	sp, #88	; 0x58
 800c158:	4614      	mov	r4, r2
 800c15a:	461d      	mov	r5, r3
 800c15c:	da07      	bge.n	800c16e <__swhatbuf_r+0x22>
 800c15e:	2300      	movs	r3, #0
 800c160:	602b      	str	r3, [r5, #0]
 800c162:	89b3      	ldrh	r3, [r6, #12]
 800c164:	061a      	lsls	r2, r3, #24
 800c166:	d410      	bmi.n	800c18a <__swhatbuf_r+0x3e>
 800c168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c16c:	e00e      	b.n	800c18c <__swhatbuf_r+0x40>
 800c16e:	466a      	mov	r2, sp
 800c170:	f000 f9b2 	bl	800c4d8 <_fstat_r>
 800c174:	2800      	cmp	r0, #0
 800c176:	dbf2      	blt.n	800c15e <__swhatbuf_r+0x12>
 800c178:	9a01      	ldr	r2, [sp, #4]
 800c17a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c17e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c182:	425a      	negs	r2, r3
 800c184:	415a      	adcs	r2, r3
 800c186:	602a      	str	r2, [r5, #0]
 800c188:	e7ee      	b.n	800c168 <__swhatbuf_r+0x1c>
 800c18a:	2340      	movs	r3, #64	; 0x40
 800c18c:	2000      	movs	r0, #0
 800c18e:	6023      	str	r3, [r4, #0]
 800c190:	b016      	add	sp, #88	; 0x58
 800c192:	bd70      	pop	{r4, r5, r6, pc}

0800c194 <__smakebuf_r>:
 800c194:	898b      	ldrh	r3, [r1, #12]
 800c196:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c198:	079d      	lsls	r5, r3, #30
 800c19a:	4606      	mov	r6, r0
 800c19c:	460c      	mov	r4, r1
 800c19e:	d507      	bpl.n	800c1b0 <__smakebuf_r+0x1c>
 800c1a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	6123      	str	r3, [r4, #16]
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	6163      	str	r3, [r4, #20]
 800c1ac:	b002      	add	sp, #8
 800c1ae:	bd70      	pop	{r4, r5, r6, pc}
 800c1b0:	ab01      	add	r3, sp, #4
 800c1b2:	466a      	mov	r2, sp
 800c1b4:	f7ff ffca 	bl	800c14c <__swhatbuf_r>
 800c1b8:	9900      	ldr	r1, [sp, #0]
 800c1ba:	4605      	mov	r5, r0
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f000 f877 	bl	800c2b0 <_malloc_r>
 800c1c2:	b948      	cbnz	r0, 800c1d8 <__smakebuf_r+0x44>
 800c1c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1c8:	059a      	lsls	r2, r3, #22
 800c1ca:	d4ef      	bmi.n	800c1ac <__smakebuf_r+0x18>
 800c1cc:	f023 0303 	bic.w	r3, r3, #3
 800c1d0:	f043 0302 	orr.w	r3, r3, #2
 800c1d4:	81a3      	strh	r3, [r4, #12]
 800c1d6:	e7e3      	b.n	800c1a0 <__smakebuf_r+0xc>
 800c1d8:	4b0d      	ldr	r3, [pc, #52]	; (800c210 <__smakebuf_r+0x7c>)
 800c1da:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1dc:	89a3      	ldrh	r3, [r4, #12]
 800c1de:	6020      	str	r0, [r4, #0]
 800c1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e4:	81a3      	strh	r3, [r4, #12]
 800c1e6:	9b00      	ldr	r3, [sp, #0]
 800c1e8:	6163      	str	r3, [r4, #20]
 800c1ea:	9b01      	ldr	r3, [sp, #4]
 800c1ec:	6120      	str	r0, [r4, #16]
 800c1ee:	b15b      	cbz	r3, 800c208 <__smakebuf_r+0x74>
 800c1f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	f000 f981 	bl	800c4fc <_isatty_r>
 800c1fa:	b128      	cbz	r0, 800c208 <__smakebuf_r+0x74>
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	f023 0303 	bic.w	r3, r3, #3
 800c202:	f043 0301 	orr.w	r3, r3, #1
 800c206:	81a3      	strh	r3, [r4, #12]
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	431d      	orrs	r5, r3
 800c20c:	81a5      	strh	r5, [r4, #12]
 800c20e:	e7cd      	b.n	800c1ac <__smakebuf_r+0x18>
 800c210:	0800c001 	.word	0x0800c001

0800c214 <_free_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	4605      	mov	r5, r0
 800c218:	2900      	cmp	r1, #0
 800c21a:	d045      	beq.n	800c2a8 <_free_r+0x94>
 800c21c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c220:	1f0c      	subs	r4, r1, #4
 800c222:	2b00      	cmp	r3, #0
 800c224:	bfb8      	it	lt
 800c226:	18e4      	addlt	r4, r4, r3
 800c228:	f000 f98a 	bl	800c540 <__malloc_lock>
 800c22c:	4a1f      	ldr	r2, [pc, #124]	; (800c2ac <_free_r+0x98>)
 800c22e:	6813      	ldr	r3, [r2, #0]
 800c230:	4610      	mov	r0, r2
 800c232:	b933      	cbnz	r3, 800c242 <_free_r+0x2e>
 800c234:	6063      	str	r3, [r4, #4]
 800c236:	6014      	str	r4, [r2, #0]
 800c238:	4628      	mov	r0, r5
 800c23a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c23e:	f000 b980 	b.w	800c542 <__malloc_unlock>
 800c242:	42a3      	cmp	r3, r4
 800c244:	d90c      	bls.n	800c260 <_free_r+0x4c>
 800c246:	6821      	ldr	r1, [r4, #0]
 800c248:	1862      	adds	r2, r4, r1
 800c24a:	4293      	cmp	r3, r2
 800c24c:	bf04      	itt	eq
 800c24e:	681a      	ldreq	r2, [r3, #0]
 800c250:	685b      	ldreq	r3, [r3, #4]
 800c252:	6063      	str	r3, [r4, #4]
 800c254:	bf04      	itt	eq
 800c256:	1852      	addeq	r2, r2, r1
 800c258:	6022      	streq	r2, [r4, #0]
 800c25a:	6004      	str	r4, [r0, #0]
 800c25c:	e7ec      	b.n	800c238 <_free_r+0x24>
 800c25e:	4613      	mov	r3, r2
 800c260:	685a      	ldr	r2, [r3, #4]
 800c262:	b10a      	cbz	r2, 800c268 <_free_r+0x54>
 800c264:	42a2      	cmp	r2, r4
 800c266:	d9fa      	bls.n	800c25e <_free_r+0x4a>
 800c268:	6819      	ldr	r1, [r3, #0]
 800c26a:	1858      	adds	r0, r3, r1
 800c26c:	42a0      	cmp	r0, r4
 800c26e:	d10b      	bne.n	800c288 <_free_r+0x74>
 800c270:	6820      	ldr	r0, [r4, #0]
 800c272:	4401      	add	r1, r0
 800c274:	1858      	adds	r0, r3, r1
 800c276:	4282      	cmp	r2, r0
 800c278:	6019      	str	r1, [r3, #0]
 800c27a:	d1dd      	bne.n	800c238 <_free_r+0x24>
 800c27c:	6810      	ldr	r0, [r2, #0]
 800c27e:	6852      	ldr	r2, [r2, #4]
 800c280:	605a      	str	r2, [r3, #4]
 800c282:	4401      	add	r1, r0
 800c284:	6019      	str	r1, [r3, #0]
 800c286:	e7d7      	b.n	800c238 <_free_r+0x24>
 800c288:	d902      	bls.n	800c290 <_free_r+0x7c>
 800c28a:	230c      	movs	r3, #12
 800c28c:	602b      	str	r3, [r5, #0]
 800c28e:	e7d3      	b.n	800c238 <_free_r+0x24>
 800c290:	6820      	ldr	r0, [r4, #0]
 800c292:	1821      	adds	r1, r4, r0
 800c294:	428a      	cmp	r2, r1
 800c296:	bf04      	itt	eq
 800c298:	6811      	ldreq	r1, [r2, #0]
 800c29a:	6852      	ldreq	r2, [r2, #4]
 800c29c:	6062      	str	r2, [r4, #4]
 800c29e:	bf04      	itt	eq
 800c2a0:	1809      	addeq	r1, r1, r0
 800c2a2:	6021      	streq	r1, [r4, #0]
 800c2a4:	605c      	str	r4, [r3, #4]
 800c2a6:	e7c7      	b.n	800c238 <_free_r+0x24>
 800c2a8:	bd38      	pop	{r3, r4, r5, pc}
 800c2aa:	bf00      	nop
 800c2ac:	2000015c 	.word	0x2000015c

0800c2b0 <_malloc_r>:
 800c2b0:	b570      	push	{r4, r5, r6, lr}
 800c2b2:	1ccd      	adds	r5, r1, #3
 800c2b4:	f025 0503 	bic.w	r5, r5, #3
 800c2b8:	3508      	adds	r5, #8
 800c2ba:	2d0c      	cmp	r5, #12
 800c2bc:	bf38      	it	cc
 800c2be:	250c      	movcc	r5, #12
 800c2c0:	2d00      	cmp	r5, #0
 800c2c2:	4606      	mov	r6, r0
 800c2c4:	db01      	blt.n	800c2ca <_malloc_r+0x1a>
 800c2c6:	42a9      	cmp	r1, r5
 800c2c8:	d903      	bls.n	800c2d2 <_malloc_r+0x22>
 800c2ca:	230c      	movs	r3, #12
 800c2cc:	6033      	str	r3, [r6, #0]
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	bd70      	pop	{r4, r5, r6, pc}
 800c2d2:	f000 f935 	bl	800c540 <__malloc_lock>
 800c2d6:	4a21      	ldr	r2, [pc, #132]	; (800c35c <_malloc_r+0xac>)
 800c2d8:	6814      	ldr	r4, [r2, #0]
 800c2da:	4621      	mov	r1, r4
 800c2dc:	b991      	cbnz	r1, 800c304 <_malloc_r+0x54>
 800c2de:	4c20      	ldr	r4, [pc, #128]	; (800c360 <_malloc_r+0xb0>)
 800c2e0:	6823      	ldr	r3, [r4, #0]
 800c2e2:	b91b      	cbnz	r3, 800c2ec <_malloc_r+0x3c>
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	f000 f83d 	bl	800c364 <_sbrk_r>
 800c2ea:	6020      	str	r0, [r4, #0]
 800c2ec:	4629      	mov	r1, r5
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	f000 f838 	bl	800c364 <_sbrk_r>
 800c2f4:	1c43      	adds	r3, r0, #1
 800c2f6:	d124      	bne.n	800c342 <_malloc_r+0x92>
 800c2f8:	230c      	movs	r3, #12
 800c2fa:	6033      	str	r3, [r6, #0]
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	f000 f920 	bl	800c542 <__malloc_unlock>
 800c302:	e7e4      	b.n	800c2ce <_malloc_r+0x1e>
 800c304:	680b      	ldr	r3, [r1, #0]
 800c306:	1b5b      	subs	r3, r3, r5
 800c308:	d418      	bmi.n	800c33c <_malloc_r+0x8c>
 800c30a:	2b0b      	cmp	r3, #11
 800c30c:	d90f      	bls.n	800c32e <_malloc_r+0x7e>
 800c30e:	600b      	str	r3, [r1, #0]
 800c310:	50cd      	str	r5, [r1, r3]
 800c312:	18cc      	adds	r4, r1, r3
 800c314:	4630      	mov	r0, r6
 800c316:	f000 f914 	bl	800c542 <__malloc_unlock>
 800c31a:	f104 000b 	add.w	r0, r4, #11
 800c31e:	1d23      	adds	r3, r4, #4
 800c320:	f020 0007 	bic.w	r0, r0, #7
 800c324:	1ac3      	subs	r3, r0, r3
 800c326:	d0d3      	beq.n	800c2d0 <_malloc_r+0x20>
 800c328:	425a      	negs	r2, r3
 800c32a:	50e2      	str	r2, [r4, r3]
 800c32c:	e7d0      	b.n	800c2d0 <_malloc_r+0x20>
 800c32e:	428c      	cmp	r4, r1
 800c330:	684b      	ldr	r3, [r1, #4]
 800c332:	bf16      	itet	ne
 800c334:	6063      	strne	r3, [r4, #4]
 800c336:	6013      	streq	r3, [r2, #0]
 800c338:	460c      	movne	r4, r1
 800c33a:	e7eb      	b.n	800c314 <_malloc_r+0x64>
 800c33c:	460c      	mov	r4, r1
 800c33e:	6849      	ldr	r1, [r1, #4]
 800c340:	e7cc      	b.n	800c2dc <_malloc_r+0x2c>
 800c342:	1cc4      	adds	r4, r0, #3
 800c344:	f024 0403 	bic.w	r4, r4, #3
 800c348:	42a0      	cmp	r0, r4
 800c34a:	d005      	beq.n	800c358 <_malloc_r+0xa8>
 800c34c:	1a21      	subs	r1, r4, r0
 800c34e:	4630      	mov	r0, r6
 800c350:	f000 f808 	bl	800c364 <_sbrk_r>
 800c354:	3001      	adds	r0, #1
 800c356:	d0cf      	beq.n	800c2f8 <_malloc_r+0x48>
 800c358:	6025      	str	r5, [r4, #0]
 800c35a:	e7db      	b.n	800c314 <_malloc_r+0x64>
 800c35c:	2000015c 	.word	0x2000015c
 800c360:	20000160 	.word	0x20000160

0800c364 <_sbrk_r>:
 800c364:	b538      	push	{r3, r4, r5, lr}
 800c366:	4c06      	ldr	r4, [pc, #24]	; (800c380 <_sbrk_r+0x1c>)
 800c368:	2300      	movs	r3, #0
 800c36a:	4605      	mov	r5, r0
 800c36c:	4608      	mov	r0, r1
 800c36e:	6023      	str	r3, [r4, #0]
 800c370:	f7f9 fa06 	bl	8005780 <_sbrk>
 800c374:	1c43      	adds	r3, r0, #1
 800c376:	d102      	bne.n	800c37e <_sbrk_r+0x1a>
 800c378:	6823      	ldr	r3, [r4, #0]
 800c37a:	b103      	cbz	r3, 800c37e <_sbrk_r+0x1a>
 800c37c:	602b      	str	r3, [r5, #0]
 800c37e:	bd38      	pop	{r3, r4, r5, pc}
 800c380:	20000a00 	.word	0x20000a00

0800c384 <_raise_r>:
 800c384:	291f      	cmp	r1, #31
 800c386:	b538      	push	{r3, r4, r5, lr}
 800c388:	4604      	mov	r4, r0
 800c38a:	460d      	mov	r5, r1
 800c38c:	d904      	bls.n	800c398 <_raise_r+0x14>
 800c38e:	2316      	movs	r3, #22
 800c390:	6003      	str	r3, [r0, #0]
 800c392:	f04f 30ff 	mov.w	r0, #4294967295
 800c396:	bd38      	pop	{r3, r4, r5, pc}
 800c398:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c39a:	b112      	cbz	r2, 800c3a2 <_raise_r+0x1e>
 800c39c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3a0:	b94b      	cbnz	r3, 800c3b6 <_raise_r+0x32>
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	f000 f830 	bl	800c408 <_getpid_r>
 800c3a8:	462a      	mov	r2, r5
 800c3aa:	4601      	mov	r1, r0
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3b2:	f000 b817 	b.w	800c3e4 <_kill_r>
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d00a      	beq.n	800c3d0 <_raise_r+0x4c>
 800c3ba:	1c59      	adds	r1, r3, #1
 800c3bc:	d103      	bne.n	800c3c6 <_raise_r+0x42>
 800c3be:	2316      	movs	r3, #22
 800c3c0:	6003      	str	r3, [r0, #0]
 800c3c2:	2001      	movs	r0, #1
 800c3c4:	e7e7      	b.n	800c396 <_raise_r+0x12>
 800c3c6:	2400      	movs	r4, #0
 800c3c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	4798      	blx	r3
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	e7e0      	b.n	800c396 <_raise_r+0x12>

0800c3d4 <raise>:
 800c3d4:	4b02      	ldr	r3, [pc, #8]	; (800c3e0 <raise+0xc>)
 800c3d6:	4601      	mov	r1, r0
 800c3d8:	6818      	ldr	r0, [r3, #0]
 800c3da:	f7ff bfd3 	b.w	800c384 <_raise_r>
 800c3de:	bf00      	nop
 800c3e0:	20000070 	.word	0x20000070

0800c3e4 <_kill_r>:
 800c3e4:	b538      	push	{r3, r4, r5, lr}
 800c3e6:	4c07      	ldr	r4, [pc, #28]	; (800c404 <_kill_r+0x20>)
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	4605      	mov	r5, r0
 800c3ec:	4608      	mov	r0, r1
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	6023      	str	r3, [r4, #0]
 800c3f2:	f7f9 f943 	bl	800567c <_kill>
 800c3f6:	1c43      	adds	r3, r0, #1
 800c3f8:	d102      	bne.n	800c400 <_kill_r+0x1c>
 800c3fa:	6823      	ldr	r3, [r4, #0]
 800c3fc:	b103      	cbz	r3, 800c400 <_kill_r+0x1c>
 800c3fe:	602b      	str	r3, [r5, #0]
 800c400:	bd38      	pop	{r3, r4, r5, pc}
 800c402:	bf00      	nop
 800c404:	20000a00 	.word	0x20000a00

0800c408 <_getpid_r>:
 800c408:	f7f9 b930 	b.w	800566c <_getpid>

0800c40c <__sread>:
 800c40c:	b510      	push	{r4, lr}
 800c40e:	460c      	mov	r4, r1
 800c410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c414:	f000 f896 	bl	800c544 <_read_r>
 800c418:	2800      	cmp	r0, #0
 800c41a:	bfab      	itete	ge
 800c41c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c41e:	89a3      	ldrhlt	r3, [r4, #12]
 800c420:	181b      	addge	r3, r3, r0
 800c422:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c426:	bfac      	ite	ge
 800c428:	6563      	strge	r3, [r4, #84]	; 0x54
 800c42a:	81a3      	strhlt	r3, [r4, #12]
 800c42c:	bd10      	pop	{r4, pc}

0800c42e <__swrite>:
 800c42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c432:	461f      	mov	r7, r3
 800c434:	898b      	ldrh	r3, [r1, #12]
 800c436:	05db      	lsls	r3, r3, #23
 800c438:	4605      	mov	r5, r0
 800c43a:	460c      	mov	r4, r1
 800c43c:	4616      	mov	r6, r2
 800c43e:	d505      	bpl.n	800c44c <__swrite+0x1e>
 800c440:	2302      	movs	r3, #2
 800c442:	2200      	movs	r2, #0
 800c444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c448:	f000 f868 	bl	800c51c <_lseek_r>
 800c44c:	89a3      	ldrh	r3, [r4, #12]
 800c44e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c456:	81a3      	strh	r3, [r4, #12]
 800c458:	4632      	mov	r2, r6
 800c45a:	463b      	mov	r3, r7
 800c45c:	4628      	mov	r0, r5
 800c45e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c462:	f000 b817 	b.w	800c494 <_write_r>

0800c466 <__sseek>:
 800c466:	b510      	push	{r4, lr}
 800c468:	460c      	mov	r4, r1
 800c46a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c46e:	f000 f855 	bl	800c51c <_lseek_r>
 800c472:	1c43      	adds	r3, r0, #1
 800c474:	89a3      	ldrh	r3, [r4, #12]
 800c476:	bf15      	itete	ne
 800c478:	6560      	strne	r0, [r4, #84]	; 0x54
 800c47a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c47e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c482:	81a3      	strheq	r3, [r4, #12]
 800c484:	bf18      	it	ne
 800c486:	81a3      	strhne	r3, [r4, #12]
 800c488:	bd10      	pop	{r4, pc}

0800c48a <__sclose>:
 800c48a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c48e:	f000 b813 	b.w	800c4b8 <_close_r>
	...

0800c494 <_write_r>:
 800c494:	b538      	push	{r3, r4, r5, lr}
 800c496:	4c07      	ldr	r4, [pc, #28]	; (800c4b4 <_write_r+0x20>)
 800c498:	4605      	mov	r5, r0
 800c49a:	4608      	mov	r0, r1
 800c49c:	4611      	mov	r1, r2
 800c49e:	2200      	movs	r2, #0
 800c4a0:	6022      	str	r2, [r4, #0]
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	f7f9 f922 	bl	80056ec <_write>
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	d102      	bne.n	800c4b2 <_write_r+0x1e>
 800c4ac:	6823      	ldr	r3, [r4, #0]
 800c4ae:	b103      	cbz	r3, 800c4b2 <_write_r+0x1e>
 800c4b0:	602b      	str	r3, [r5, #0]
 800c4b2:	bd38      	pop	{r3, r4, r5, pc}
 800c4b4:	20000a00 	.word	0x20000a00

0800c4b8 <_close_r>:
 800c4b8:	b538      	push	{r3, r4, r5, lr}
 800c4ba:	4c06      	ldr	r4, [pc, #24]	; (800c4d4 <_close_r+0x1c>)
 800c4bc:	2300      	movs	r3, #0
 800c4be:	4605      	mov	r5, r0
 800c4c0:	4608      	mov	r0, r1
 800c4c2:	6023      	str	r3, [r4, #0]
 800c4c4:	f7f9 f928 	bl	8005718 <_close>
 800c4c8:	1c43      	adds	r3, r0, #1
 800c4ca:	d102      	bne.n	800c4d2 <_close_r+0x1a>
 800c4cc:	6823      	ldr	r3, [r4, #0]
 800c4ce:	b103      	cbz	r3, 800c4d2 <_close_r+0x1a>
 800c4d0:	602b      	str	r3, [r5, #0]
 800c4d2:	bd38      	pop	{r3, r4, r5, pc}
 800c4d4:	20000a00 	.word	0x20000a00

0800c4d8 <_fstat_r>:
 800c4d8:	b538      	push	{r3, r4, r5, lr}
 800c4da:	4c07      	ldr	r4, [pc, #28]	; (800c4f8 <_fstat_r+0x20>)
 800c4dc:	2300      	movs	r3, #0
 800c4de:	4605      	mov	r5, r0
 800c4e0:	4608      	mov	r0, r1
 800c4e2:	4611      	mov	r1, r2
 800c4e4:	6023      	str	r3, [r4, #0]
 800c4e6:	f7f9 f923 	bl	8005730 <_fstat>
 800c4ea:	1c43      	adds	r3, r0, #1
 800c4ec:	d102      	bne.n	800c4f4 <_fstat_r+0x1c>
 800c4ee:	6823      	ldr	r3, [r4, #0]
 800c4f0:	b103      	cbz	r3, 800c4f4 <_fstat_r+0x1c>
 800c4f2:	602b      	str	r3, [r5, #0]
 800c4f4:	bd38      	pop	{r3, r4, r5, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20000a00 	.word	0x20000a00

0800c4fc <_isatty_r>:
 800c4fc:	b538      	push	{r3, r4, r5, lr}
 800c4fe:	4c06      	ldr	r4, [pc, #24]	; (800c518 <_isatty_r+0x1c>)
 800c500:	2300      	movs	r3, #0
 800c502:	4605      	mov	r5, r0
 800c504:	4608      	mov	r0, r1
 800c506:	6023      	str	r3, [r4, #0]
 800c508:	f7f9 f922 	bl	8005750 <_isatty>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d102      	bne.n	800c516 <_isatty_r+0x1a>
 800c510:	6823      	ldr	r3, [r4, #0]
 800c512:	b103      	cbz	r3, 800c516 <_isatty_r+0x1a>
 800c514:	602b      	str	r3, [r5, #0]
 800c516:	bd38      	pop	{r3, r4, r5, pc}
 800c518:	20000a00 	.word	0x20000a00

0800c51c <_lseek_r>:
 800c51c:	b538      	push	{r3, r4, r5, lr}
 800c51e:	4c07      	ldr	r4, [pc, #28]	; (800c53c <_lseek_r+0x20>)
 800c520:	4605      	mov	r5, r0
 800c522:	4608      	mov	r0, r1
 800c524:	4611      	mov	r1, r2
 800c526:	2200      	movs	r2, #0
 800c528:	6022      	str	r2, [r4, #0]
 800c52a:	461a      	mov	r2, r3
 800c52c:	f7f9 f91b 	bl	8005766 <_lseek>
 800c530:	1c43      	adds	r3, r0, #1
 800c532:	d102      	bne.n	800c53a <_lseek_r+0x1e>
 800c534:	6823      	ldr	r3, [r4, #0]
 800c536:	b103      	cbz	r3, 800c53a <_lseek_r+0x1e>
 800c538:	602b      	str	r3, [r5, #0]
 800c53a:	bd38      	pop	{r3, r4, r5, pc}
 800c53c:	20000a00 	.word	0x20000a00

0800c540 <__malloc_lock>:
 800c540:	4770      	bx	lr

0800c542 <__malloc_unlock>:
 800c542:	4770      	bx	lr

0800c544 <_read_r>:
 800c544:	b538      	push	{r3, r4, r5, lr}
 800c546:	4c07      	ldr	r4, [pc, #28]	; (800c564 <_read_r+0x20>)
 800c548:	4605      	mov	r5, r0
 800c54a:	4608      	mov	r0, r1
 800c54c:	4611      	mov	r1, r2
 800c54e:	2200      	movs	r2, #0
 800c550:	6022      	str	r2, [r4, #0]
 800c552:	461a      	mov	r2, r3
 800c554:	f7f9 f8ac 	bl	80056b0 <_read>
 800c558:	1c43      	adds	r3, r0, #1
 800c55a:	d102      	bne.n	800c562 <_read_r+0x1e>
 800c55c:	6823      	ldr	r3, [r4, #0]
 800c55e:	b103      	cbz	r3, 800c562 <_read_r+0x1e>
 800c560:	602b      	str	r3, [r5, #0]
 800c562:	bd38      	pop	{r3, r4, r5, pc}
 800c564:	20000a00 	.word	0x20000a00

0800c568 <_init>:
 800c568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56a:	bf00      	nop
 800c56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c56e:	bc08      	pop	{r3}
 800c570:	469e      	mov	lr, r3
 800c572:	4770      	bx	lr

0800c574 <_fini>:
 800c574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c576:	bf00      	nop
 800c578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c57a:	bc08      	pop	{r3}
 800c57c:	469e      	mov	lr, r3
 800c57e:	4770      	bx	lr
